(dp0
I379906
(dp1
S'answer_posts'
p2
(lp3
(dp4
S'snippets'
p5
(lp6
(dp7
S'code'
p8
S"a = '545.2222'\nfloat(a)\nint(float(a))"
p9
sS'is_normalized'
p10
I01
sasS'score'
p11
I1401
sS'id'
p12
I379910
sS'rank'
p13
I0
sa(dp14
g5
(lp15
(dp16
g8
S'def num(s):\n    try:\n        return int(s)\n    except ValueError:\n        return float(s)'
p17
sg10
I01
sasg11
I347
sg12
I379966
sg13
I1
sa(dp18
g5
(lp19
(dp20
g8
S'def isfloat(value):\n    try:\n        float(value)\n        return True\n    except:\n        return False'
p21
sg10
I01
sa(dp22
g8
VCommand to parse                      isFloat?   Note\u000a------------------------------------  --------   --------------------------------\u000aprint(isfloat(""))                    False      Blank string\u000aprint(isfloat("127"))                 True       Passed string\u000aprint(isfloat(True))                  True       Pure sweet Truth\u000aprint(isfloat("True"))                False      Vile contemptible lie\u000aprint(isfloat(False))                 True       So false it becomes true\u000aprint(isfloat("123.456"))             True       Decimal\u000aprint(isfloat("      -127    "))      True       Spaces trimmed\u000aprint(isfloat("\u005ct\u005cn12\u005cr\u005cn"))          True       whitespace ignored\u000aprint(isfloat("NaN"))                 True       Not a number\u000aprint(isfloat("NaNanananaBATMAN"))    False      I am Batman\u000aprint(isfloat("-iNF"))                True       Negative infinity\u000aprint(isfloat("123.E4"))              True       Exponential notation\u000aprint(isfloat(".1"))                  True       mantissa only\u000aprint(isfloat("1,234"))               False      Commas gtfo\u000aprint(isfloat(u'\u005cx30'))               True       Unicode is fine.\u000aprint(isfloat("NULL"))                False      Null is not special\u000aprint(isfloat(0x3fade))               True       Hexidecimal\u000aprint(isfloat("6e7777777777777"))     True       Shrunk to infinity\u000aprint(isfloat("1.797693e+308"))       True       This is max value\u000aprint(isfloat("infinity"))            True       Same as inf\u000aprint(isfloat("infinityandBEYOND"))   False      Extra characters wreck it\u000aprint(isfloat("12.34.56"))            False      Only one dot allowed\u000aprint(isfloat(u'\u56db'))                  False      Japanese '4' is not a float.\u000aprint(isfloat("#56"))                 False      Pound sign\u000aprint(isfloat("56%"))                 False      Percent of what?\u000aprint(isfloat("0E0"))                 True       Exponential, move dot 0 places\u000aprint(isfloat(0**0))                  True       0___0  Exponentiation\u000aprint(isfloat("-5e-5"))               True       Raise to a negative number\u000aprint(isfloat("+1e1"))                True       Plus is OK with exponent\u000aprint(isfloat("+1e1^5"))              False      Fancy exponent not interpreted\u000aprint(isfloat("+1e1.3"))              False      No decimals in exponent\u000aprint(isfloat("-+1"))                 False      Make up your mind\u000aprint(isfloat("(1)"))                 False      Parenthesis is bad\u000a
p23
sg10
I00
sasg11
I252
sg12
I20929983
sg13
I2
sasS'title'
p24
VParse String to Float or Int
p25
ssI3437059
(dp26
g2
(lp27
(dp28
g5
(lp29
(dp30
g8
S"if ('blah' not in somestring):\n    continue"
p31
sg10
I01
sasg11
I2354
sg12
I3437070
sg13
I0
sa(dp32
g5
(lp33
(dp34
g8
S's = \'This be a string\'\nif (s.find(\'is\') == (-1)):\n    print "No \'is\' here!"\nelse:\n    print "Found \'is\' in the string."'
p35
sg10
I01
sasg11
I242
sg12
I3437068
sg13
I1
sa(dp36
g5
(lp37
sg11
I65
sg12
I3437130
sg13
I2
sasg24
VDoes Python have a string contains substring method?
p38
ssI4265988
(dp39
g2
(lp40
(dp41
g5
(lp42
(dp43
g8
S'numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])'
p44
sg10
I01
sasg11
I35
sg12
I4266645
sg13
I0
sa(dp45
g5
(lp46
(dp47
g8
S'def random_distr(l):\n    r = random.uniform(0, 1)\n    s = 0\n    for (item, prob) in l:\n        s += prob\n        if (s >= r):\n            return item\n    return item'
p48
sg10
I01
sasg11
I19
sg12
I4266562
sg13
I1
sa(dp49
g5
(lp50
(dp51
g8
S'pdf = [(1, 0.1), (2, 0.05), (3, 0.05), (4, 0.2), (5, 0.4), (6, 0.2)]\ncdf = [(i, sum((p for (j, p) in pdf if (j < i)))) for (i, _) in pdf]\nR = max((i for r in [random.random()] for (i, c) in cdf if (c <= r)))'
p52
sg10
I01
sa(dp53
g8
S'sorted((max((i for r in [random.random()] for (i, c) in cdf if (c <= r))) for _ in range(1000)))'
p54
sg10
I01
sasg11
I8
sg12
I4266278
sg13
I2
sasg24
VGenerate random numbers with a given (numerical) distribution
p55
ssI843277
(dp56
g2
(lp57
(dp58
g5
(lp59
(dp60
g8
S"if ('myVar' in locals()):\n    pass"
p61
sg10
I01
sa(dp62
g8
S"if ('myVar' in globals()):\n    pass"
p63
sg10
I01
sa(dp64
g8
S"if hasattr(obj, 'attr_name'):\n    pass"
p65
sg10
I01
sasg11
I817
sg12
I843293
sg13
I0
sa(dp66
g5
(lp67
(dp68
g8
S'try:\n    myVar\nexcept NameError:\n    myVar = None'
p69
sg10
I01
sasg11
I58
sg12
I843306
sg13
I1
sa(dp70
g5
(lp71
(dp72
g8
Vmy_variable = None\u000a\u000adef InitMyVariable():\u000a  global my_variable\u000a  if my_variable is None:\u000a    my_variable = ...\u000a
p73
sg10
I00
sasg11
I14
sg12
I843326
sg13
I2
sasg24
VHow do I check if a variable exists?
p74
ssI546321
(dp75
g2
(lp76
(dp77
g5
(lp78
(dp79
g8
S'from datetime import date\nfrom dateutil.relativedelta import relativedelta\nsix_months = (date.today() + relativedelta(months=(+ 6)))'
p80
sg10
I01
sa(dp81
g8
S'(date(2010, 12, 31) + relativedelta(months=(+ 1)))\n(date(2010, 12, 31) + relativedelta(months=(+ 2)))'
p82
sg10
I01
sasg11
I493
sg12
I4406260
sg13
I0
sa(dp83
g5
(lp84
(dp85
g8
S'import datetime\nprint (datetime.date.today() + datetime.timedelta(((6 * 365) / 12))).isoformat()'
p86
sg10
I01
sasg11
I55
sg12
I546356
sg13
I1
sa(dp87
g5
(lp88
(dp89
g8
S'(day, month, year) = (day, ((month + 6) % 12), (year + ((month + 6) / 12)))'
p90
sg10
I01
sa(dp91
g8
S'date += datetime.timedelta((6 * 30))'
p92
sg10
I01
sasg11
I39
sg12
I546354
sg13
I2
sasg24
VHow do I calculate the date six months from the current date using the datetime Python module?
p93
ssI237079
(dp94
g2
(lp95
(dp96
g5
(lp97
(dp98
g8
S"import os.path, time\nprint ('last modified: %s' % time.ctime(os.path.getmtime(file)))\nprint ('created: %s' % time.ctime(os.path.getctime(file)))"
p99
sg10
I01
sa(dp100
g8
S"import os, time\n(mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) = os.stat(file)\nprint ('last modified: %s' % time.ctime(mtime))"
p101
sg10
I01
sasg11
I553
sg12
I237084
sg13
I0
sa(dp102
g5
(lp103
(dp104
g8
S'import os\nimport datetime\n\ndef modification_date(filename):\n    t = os.path.getmtime(filename)\n    return datetime.datetime.fromtimestamp(t)'
p105
sg10
I01
sa(dp106
g8
S"d = modification_date('/var/log/syslog')\nprint d\nprint repr(d)"
p107
sg10
I01
sasg11
I298
sg12
I1526089
sg13
I1
sa(dp108
g5
(lp109
(dp110
g8
S'import os\nimport platform\n\ndef creation_date(path_to_file):\n    "\\n    Try to get the date that a file was created, falling back to when it was\\n    last modified if that isn\'t possible.\\n    See http://stackoverflow.com/a/39501288/1709587 for explanation.\\n    "\n    if (platform.system() == \'Windows\'):\n        return os.path.getctime(path_to_file)\n    else:\n        stat = os.stat(path_to_file)\n        try:\n            return stat.st_birthtime\n        except AttributeError:\n            return stat.st_mtime'
p111
sg10
I01
sasg11
I92
sg12
I39501288
sg13
I2
sasg24
VHow to get file creation & modification date/times in Python?
p112
ssI6159900
(dp113
g2
(lp114
(dp115
g5
(lp116
(dp117
g8
S"from __future__ import print_function\nprint('hi there', file=f)"
p118
sg10
I01
sa(dp119
g8
S"f = open('myfile', 'w')\nf.write('hi there\\n')\nf.close()"
p120
sg10
I01
sasg11
I660
sg12
I6159912
sg13
I0
sa(dp121
g5
(lp122
(dp123
g8
S"with open('somefile.txt', 'a') as the_file:\n    the_file.write('Hello\\n')"
p124
sg10
I01
sasg11
I331
sg12
I6160082
sg13
I1
sa(dp125
g5
(lp126
(dp127
g8
S"import os\nos.linesep\nf = open('myfile', 'w')\nf.write('hi there\\n')\nf.write(('hi there' + os.linesep))\nf.close()\nopen('myfile', 'rb').read()"
p128
sg10
I01
sasg11
I63
sg12
I6165711
sg13
I2
sasg24
VCorrect way to write line to file in Python
p129
ssI899103
(dp130
g2
(lp131
(dp132
g5
(lp133
(dp134
g8
S"for item in thelist:\n    thefile.write(('%s\\n' % item))"
p135
sg10
I01
sa(dp136
g8
S'for item in thelist:\n    print  >> thefile, item'
p137
sg10
I01
sasg11
I325
sg12
I899176
sg13
I0
sa(dp138
g5
(lp139
(dp140
g8
S'import pickle\npickle.dump(itemlist, outfile)'
p141
sg10
I01
sa(dp142
g8
S'itemlist = pickle.load(infile)'
p143
sg10
I01
sasg11
I132
sg12
I899199
sg13
I1
sa(dp144
g5
(lp145
(dp146
g8
S"outfile.write('\\n'.join(itemlist))"
p147
sg10
I01
sasg11
I119
sg12
I899149
sg13
I2
sasg24
VWriting a list to a file with Python
p148
ssI3939361
(dp149
g2
(lp150
(dp151
g5
(lp152
(dp153
g8
S"line = line.translate(None, '!@#$')"
p154
sg10
I01
sa(dp155
g8
S"import re\nline = re.sub('[!@#$]', '', line)"
p156
sg10
I01
sa(dp157
g8
S"translation_table = dict.fromkeys(map(ord, '!@#$'), None)\nunicode_line = unicode_line.translate(translation_table)"
p158
sg10
I01
sa(dp159
g8
V{ord('!'): None, ord('@'): None, ...}\u000a
p160
sg10
I00
sa(dp161
g8
S"unicode_line = unicode_line.translate({ord(c): None for c in '!@#$'})"
p162
sg10
I01
sa(dp163
g8
S"import string\nline = line.translate(string.maketrans('', ''), '!@#$')"
p164
sg10
I01
sasg11
I323
sg12
I3939381
sg13
I0
sa(dp165
g5
(lp166
(dp167
g8
S"string = 'ab1cd1ef'\nstring.replace('1', '')"
p168
sg10
I01
sa(dp169
g8
S"a = 'a!b@c#d$'\nb = '!@#$'\nfor char in b:\n    a = a.replace(char, '')\nprint a"
p170
sg10
I01
sasg11
I80
sg12
I3942100
sg13
I1
sa(dp171
g5
(lp172
(dp173
g8
S"line = 'abc#@!?efg12;:?'\n''.join((c for c in line if (c not in '?:!/;')))"
p174
sg10
I01
sasg11
I14
sg12
I3939473
sg13
I2
sasg24
VRemove specific characters from a string in python
p175
ssI9001509
(dp176
g2
(lp177
(dp178
g5
(lp179
(dp180
g8
S'import collections\nd = {2: 3, 1: 89, 4: 5, 3: 0, }\nod = collections.OrderedDict(sorted(d.items()))\nod'
p181
sg10
I01
sa(dp182
g8
S'od[1]\nod[3]\nfor (k, v) in od.iteritems():\n    print k, v'
p183
sg10
I01
sa(dp184
g8
S'for (k, v) in od.items():\n    print(k, v)'
p185
sg10
I01
sasg11
I436
sg12
I9001529
sg13
I0
sa(dp186
g5
(lp187
(dp188
g8
S"mydict = {'carl': 40, 'alan': 2, 'bob': 1, 'danny': 3, }\nfor key in sorted(mydict):\n    print ('%s: %s' % (key, mydict[key]))"
p189
sg10
I01
sa(dp190
g8
Valan: 2\u000abob: 1\u000acarl: 40\u000adanny: 3\u000a
p191
sg10
I00
sa(dp192
g8
S"keylist = mydict.keys()\nkeylist.sort()\nfor key in keylist:\n    print ('%s: %s' % (key, mydict[key]))"
p193
sg10
I01
sasg11
I240
sg12
I13990710
sg13
I1
sa(dp194
g5
(lp195
(dp196
g8
S"from collections import OrderedDict\nd = {'banana': 3, 'apple': 4, 'pear': 1, 'orange': 2, }\nOrderedDict(sorted(d.items(), key=(lambda t: t[0])))\nOrderedDict(sorted(d.items(), key=(lambda t: t[1])))\nOrderedDict(sorted(d.items(), key=(lambda t: len(t[0]))))"
p197
sg10
I01
sasg11
I107
sg12
I15179418
sg13
I2
sasg24
VHow can I sort a dictionary by key?
p198
ssI2990121
(dp199
g2
(lp200
(dp201
g5
(lp202
(dp203
g8
S'for i in xrange(0, 10, 2):\n    print(i)'
p204
sg10
I01
sa(dp205
g8
S'for i in range(0, 10, 2):\n    print(i)'
p206
sg10
I01
sasg11
I168
sg12
I2990152
sg13
I0
sa(dp207
g5
(lp208
(dp209
g8
S'from itertools import izip_longest\n\ndef grouper(n, iterable, fillvalue=None):\n    "grouper(3, \'ABCDEFG\', \'x\') --> ABC DEF Gxx"\n    args = ([iter(iterable)] * n)\n    return izip_longest(fillvalue=fillvalue, *args)'
p210
sg10
I01
sa(dp211
g8
S'for (item1, item2) in grouper(2, l):\n    pass'
p212
sg10
I01
sasg11
I35
sg12
I2990151
sg13
I1
sa(dp213
g5
(lp214
(dp215
g8
S'mylist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfor i in mylist[::2]:\n    print i,\nfor i in mylist[1::2]:\n    print i,'
p216
sg10
I01
sasg11
I35
sg12
I2990281
sg13
I2
sasg24
VHow do I loop through a Python list by twos?
p217
ssI26443308
(dp218
g2
(lp219
(dp220
g5
(lp221
(dp222
g8
S"'abcd}def}'.rfind('}')"
p223
sg10
I01
sasg11
I33
sg12
I26443334
sg13
I0
sasg24
VFind last occurrence of character in string Python
p224
ssI4174941
(dp225
g2
(lp226
(dp227
g5
(lp228
(dp229
g8
S"from operator import itemgetter\nL = [[0, 1, 'f'], [4, 2, 't'], [9, 4, 'afsd']]\nsorted(L, key=itemgetter(2))"
p230
sg10
I01
sasg11
I162
sg12
I4174955
sg13
I0
sa(dp231
g5
(lp232
(dp233
g8
S"l = [[0, 1, 'f'], [4, 2, 't'], [9, 4, 'afsd']]\nl.sort(key=(lambda x: x[2]))"
p234
sg10
I01
sa(dp235
g8
S'sorted(l, key=(lambda x: x[2]))'
p236
sg10
I01
sasg11
I85
sg12
I4174956
sg13
I1
sa(dp237
g5
(lp238
(dp239
g8
S'sorted_list = sorted(list_to_sort, key=itemgetter(2, 0, 1))'
p240
sg10
I01
sasg11
I43
sg12
I15544861
sg13
I2
sasg24
VHow to sort a list of lists by a specific index of the inner list?
p241
ssI3207219
(dp242
g2
(lp243
(dp244
g5
(lp245
(dp246
g8
S'from os import listdir\nfrom os.path import isfile, join\nonlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]'
p247
sg10
I01
sa(dp248
g8
S'from os import walk\nf = []\nfor (dirpath, dirnames, filenames) in walk(mypath):\n    f.extend(filenames)\n    break'
p249
sg10
I01
sa(dp250
g8
S'q = [1, 2, 3]\nw = [4, 5, 6]\nq = (q + w)\nq'
p251
sg10
I01
sasg11
I1670
sg12
I3207973
sg13
I0
sa(dp252
g5
(lp253
(dp254
g8
S"import glob\nprint glob.glob('/home/adam/*.txt')"
p255
sg10
I01
sa(dp256
g8
V['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]\u000a
p257
sg10
I00
sasg11
I694
sg12
I3215392
sg13
I1
sa(dp258
g5
(lp259
(dp260
g8
S"import os\nos.listdir('somedirectory')"
p261
sg10
I01
sasg11
I265
sg12
I3207254
sg13
I2
sasg24
VHow to list all files of a directory in Python
p262
ssI2972212
(dp263
g2
(lp264
(dp265
g5
(lp266
(dp267
g8
V% python -mtimeit  "l=[]"\u000a10000000 loops, best of 3: 0.0711 usec per loop\u000a\u000a% python -mtimeit  "l=list()"\u000a1000000 loops, best of 3: 0.297 usec per loop\u000a
p268
sg10
I00
sasg11
I164
sg12
I2972226
sg13
I0
sa(dp269
g5
(lp270
sg11
I67
sg12
I2972369
sg13
I1
sa(dp271
g5
(lp272
sg11
I9
sg12
I2972414
sg13
I2
sasg24
VCreating an empty list in Python
p273
ssI53513
(dp274
g2
(lp275
(dp276
g5
(lp277
(dp278
g8
S"if (not a):\n    print('List is empty')"
p279
sg10
I01
sasg11
I2443
sg12
I53522
sg13
I0
sa(dp280
g5
(lp281
sg11
I581
sg12
I53752
sg13
I1
sa(dp282
g5
(lp283
(dp284
g8
S"if (len(li) == 0):\n    print 'the list is empty'"
p285
sg10
I01
sasg11
I274
sg12
I7302987
sg13
I2
sasg24
VBest way to check if a list is empty
p286
ssI1514553
(dp287
g2
(lp288
(dp289
g5
(lp290
(dp291
g8
S'variable = []'
p292
sg10
I01
sasg11
I171
sg12
I1514557
sg13
I0
sa(dp293
g5
(lp294
(dp295
g8
S"from array import array\nintarray = array('i')"
p296
sg10
I01
sasg11
I58
sg12
I1514649
sg13
I1
sa(dp297
g5
(lp298
(dp299
g8
S'f = []\nfor i in range(30):\n    f.append(0)'
p300
sg10
I01
sasg11
I34
sg12
I4476624
sg13
I2
sasg24
VHow to declare an array in Python?
p301
ssI2612802
(dp302
g2
(lp303
(dp304
g5
(lp305
(dp306
g8
S'new_list = old_list[:]'
p307
sg10
I01
sa(dp308
g8
S'new_list = list(old_list)'
p309
sg10
I01
sa(dp310
g8
S'import copy\nnew_list = copy.copy(old_list)'
p311
sg10
I01
sa(dp312
g8
S'import copy\nnew_list = copy.deepcopy(old_list)'
p313
sg10
I01
sa(dp314
g8
S"import copy\n\n\nclass Foo(object):\n\n    def __init__(self, val):\n        self.val = val\n\n    def __repr__(self):\n        return str(self.val)\nfoo = Foo(1)\na = ['foo', foo]\nb = a[:]\nc = list(a)\nd = copy.copy(a)\ne = copy.deepcopy(a)\na.append('baz')\nfoo.val = 5\nprint(('original: %r\\n slice: %r\\n list(): %r\\n copy: %r\\n deepcopy: %r' % (a, b, c, d, e)))"
p315
sg10
I01
sa(dp316
g8
Voriginal: ['foo', 5, 'baz']\u000aslice: ['foo', 5]\u000alist(): ['foo', 5]\u000acopy: ['foo', 5]\u000adeepcopy: ['foo', 1]\u000a
p317
sg10
I00
sasg11
I1366
sg12
I2612815
sg13
I0
sa(dp318
g5
(lp319
(dp320
g8
S"from copy import deepcopy\n\n\nclass old_class:\n\n    def __init__(self):\n        self.blah = 'blah'\n\n\nclass new_class(object):\n\n    def __init__(self):\n        self.blah = 'blah'\ndignore = {str: None, unicode: None, int: None, type(None): None, }\n\ndef Copy(obj, use_deepcopy=True):\n    t = type(obj)\n    if (t in (list, tuple)):\n        if (t == tuple):\n            is_tuple = True\n            obj = list(obj)\n        else:\n            obj = obj[:]\n            is_tuple = False\n        for x in xrange(len(obj)):\n            if (type(obj[x]) in dignore):\n                continue\n            obj[x] = Copy(obj[x], use_deepcopy)\n        if is_tuple:\n            obj = tuple(obj)\n    elif (t == dict):\n        obj = obj.copy()\n        for k in obj:\n            if (type(obj[k]) in dignore):\n                continue\n            obj[k] = Copy(obj[k], use_deepcopy)\n    elif (t in dignore):\n        pass\n    elif use_deepcopy:\n        obj = deepcopy(obj)\n    return obj\nif (__name__ == '__main__'):\n    import copy\n    from time import time\n    num_times = 100000\n    L = [None, 'blah', 1, 543.4532, ['foo'], ('bar',), {'blah': 'blah', }, old_class(), new_class()]\n    t = time()\n    for i in xrange(num_times):\n        Copy(L)\n    print 'Custom Copy:', (time() - t)\n    t = time()\n    for i in xrange(num_times):\n        Copy(L, use_deepcopy=False)\n    print 'Custom Copy Only Copying Lists/Tuples/Dicts (no classes):', (time() - t)\n    t = time()\n    for i in xrange(num_times):\n        copy.copy(L)\n    print 'copy.copy:', (time() - t)\n    t = time()\n    for i in xrange(num_times):\n        copy.deepcopy(L)\n    print 'copy.deepcopy:', (time() - t)\n    t = time()\n    for i in xrange(num_times):\n        L[:]\n    print 'list slicing [:]:', (time() - t)\n    t = time()\n    for i in xrange(num_times):\n        list(L)\n    print 'list(L):', (time() - t)\n    t = time()\n    for i in xrange(num_times):\n        [i for i in L]\n    print 'list expression(L):', (time() - t)\n    t = time()\n    for i in xrange(num_times):\n        a = []\n        a.extend(L)\n    print 'list extend:', (time() - t)\n    t = time()\n    for i in xrange(num_times):\n        a = []\n        for y in L:\n            a.append(y)\n    print 'list append:', (time() - t)\n    t = time()\n    for i in xrange(num_times):\n        a = []\n        a.extend((i for i in L))\n    print 'generator expression extend:', (time() - t)"
p321
sg10
I01
sasg11
I281
sg12
I2612990
sg13
I1
sa(dp322
g5
(lp323
sg11
I52
sg12
I17810305
sg13
I2
sasg24
VHow to clone or copy a list?
p324
ssI402504
(dp325
g2
(lp326
(dp327
g5
(lp328
(dp329
g8
S'i = 123\ntype(i)\n(type(i) is int)\ni = 123456789L\ntype(i)\n(type(i) is long)\ni = 123.456\ntype(i)\n(type(i) is float)'
p330
sg10
I01
sasg11
I596
sg12
I402704
sg13
I0
sa(dp331
g5
(lp332
(dp333
g8
S'v = 10\ntype(v)'
p334
sg10
I01
sa(dp335
g8
S'v = 100000000000000\ntype(v)'
p336
sg10
I01
sa(dp337
g8
S'v = (-10)\ntype(v)'
p338
sg10
I01
sa(dp339
g8
S"v = 'hi'\ntype(v)"
p340
sg10
I01
sasg11
I177
sg12
I402507
sg13
I1
sa(dp341
g5
(lp342
(dp343
g8
S'print type(variable_name)'
p344
sg10
I01
sasg11
I57
sg12
I32885953
sg13
I2
sasg24
VHow to determine the variable type in Python?
p345
ssI275018
(dp346
g2
(lp347
(dp348
g5
(lp349
(dp350
g8
S"'test string\\n'.rstrip()"
p351
sg10
I01
sa(dp352
g8
S"'test string \\n\\n'.rstrip('\\n')"
p353
sg10
I01
sa(dp354
g8
S"s = ' \\n  abc   def   '\ns.strip()\ns.rstrip()\ns.lstrip()"
p355
sg10
I01
sasg11
I979
sg12
I275025
sg13
I0
sa(dp356
g5
(lp357
(dp358
g8
S"text = 'line 1\\nline 2\\r\\nline 3\\nline 4'\ntext.splitlines()"
p359
sg10
I01
sasg11
I113
sg12
I275659
sg13
I1
sa(dp360
g5
(lp361
(dp362
g8
S"'Mac EOL\\r'.rstrip('\\r\\n')\n'Windows EOL\\r\\n'.rstrip('\\r\\n')\n'Unix EOL\\n'.rstrip('\\r\\n')"
p363
sg10
I01
sa(dp364
g8
S"'Hello\\n\\n\\n'.rstrip('\\n')"
p365
sg10
I01
sasg11
I100
sg12
I275401
sg13
I2
sasg24
VHow can I remove (chomp) a newline in Python?
p366
ssI276052
(dp367
g2
(lp368
(dp369
g5
(lp370
sg11
I205
sg12
I2468983
sg13
I0
sa(dp371
g5
(lp372
(dp373
g8
Vfrom __future__ import print_function\u000aimport psutil\u000aprint(psutil.__versi\u200c\u200bon__)\u000a
p374
sg10
I00
sa(dp375
g8
S'from __future__ import print_function\nimport psutil\nprint(psutil.cpu_percent())\nprint(psutil.virtual_memory())'
p376
sg10
I01
sa(dp377
g8
S"import os\nimport psutil\npid = os.getpid()\npy = psutil.Process(pid)\nmemoryUse = (py.memory_info()[0] / (2.0 ** 30))\nprint('memory use:', memoryUse)"
p378
sg10
I01
sa(dp379
g8
Vtar -xvzf psutil-0.5.0.tar.gz\u200c\u200b\u000acd psutil-0.5.0\u000asudo python setup.py install\u000a
p380
sg10
I00
sasg11
I8
sg12
I38984517
sg13
I1
sa(dp381
g5
(lp382
(dp383
g8
S'"\\nMonitor window processes\\nderived from:\\n>for sys available mem\\nhttp://msdn2.microsoft.com/en-us/library/aa455130.aspx\\n> individual process information and python script examples\\nhttp://www.microsoft.com/technet/scriptcenter/scripts/default.mspx?mfr=true\\nNOTE: the WMI interface/process is also available for performing similar tasks\\n        I\'m not using it here because the current method covers my needs, but if someday it\'s needed\\n        to extend or improve this module, then may want to investigate the WMI tools available.\\n        WMI for python:\\n        http://tgolden.sc.sabren.com/python/wmi.html\\n"\n__revision__ = 3\nimport win32com.client\nfrom ctypes import *\nfrom ctypes.wintypes import *\nimport pythoncom\nimport pywintypes\nimport datetime\n\n\nclass MEMORYSTATUS(Structure):\n    _fields_ = [(\'dwLength\', DWORD), (\'dwMemoryLoad\', DWORD), (\'dwTotalPhys\', DWORD), (\'dwAvailPhys\', DWORD), (\'dwTotalPageFile\', DWORD), (\'dwAvailPageFile\', DWORD), (\'dwTotalVirtual\', DWORD), (\'dwAvailVirtual\', DWORD)]\n\ndef winmem():\n    x = MEMORYSTATUS()\n    windll.kernel32.GlobalMemoryStatus(byref(x))\n    return x\n\n\nclass process_stats:\n    "process_stats is able to provide counters of (all?) the items available in perfmon.\\n    Refer to the self.supported_types keys for the currently supported \'Performance Objects\'\\n    To add logging support for other data you can derive the necessary data from perfmon:\\n    ---------\\n    perfmon can be run from windows \'run\' menu by entering \'perfmon\' and enter.\\n    Clicking on the \'+\' will open the \'add counters\' menu,\\n    From the \'Add Counters\' dialog, the \'Performance object\' is the self.support_types key.\\n    --> Where spaces are removed and symbols are entered as text (Ex. \\n    For the items you wish to log add the proper attribute name in the list in the self.supported_types dictionary,\\n    keyed by the \'Performance Object\' name as mentioned above.\\n    ---------\\n    NOTE: The \'NETFramework_NETCLRMemory\' key does not seem to log dotnet 2.0 properly.\\n    Initially the python implementation was derived from:\\n    http://www.microsoft.com/technet/scriptcenter/scripts/default.mspx?mfr=true\\n    "\n\n    def __init__(self, process_name_list=[], perf_object_list=[], filter_list=[]):\n        \'process_names_list == the list of all processes to log (if empty log all)\\n        perf_object_list == list of process counters to log\\n        filter_list == list of text to filter\\n        print_results == boolean, output to stdout\\n        \'\n        pythoncom.CoInitialize()\n        self.process_name_list = process_name_list\n        self.perf_object_list = perf_object_list\n        self.filter_list = filter_list\n        self.win32_perf_base = \'Win32_PerfFormattedData_\'\n        self.supported_types = {\'NETFramework_NETCLRMemory\': [\'Name\', \'NumberTotalCommittedBytes\', \'NumberTotalReservedBytes\', \'NumberInducedGC\', \'NumberGen0Collections\', \'NumberGen1Collections\', \'NumberGen2Collections\', \'PromotedMemoryFromGen0\', \'PromotedMemoryFromGen1\', \'PercentTimeInGC\', \'LargeObjectHeapSize\'], \'PerfProc_Process\': [\'Name\', \'PrivateBytes\', \'ElapsedTime\', \'IDProcess\', \'Caption\', \'CreatingProcessID\', \'Description\', \'IODataBytesPersec\', \'IODataOperationsPersec\', \'IOOtherBytesPersec\', \'IOOtherOperationsPersec\', \'IOReadBytesPersec\', \'IOReadOperationsPersec\', \'IOWriteBytesPersec\', \'IOWriteOperationsPersec\'], }\n\n    def get_pid_stats(self, pid):\n        this_proc_dict = {}\n        pythoncom.CoInitialize()\n        if (not self.perf_object_list):\n            perf_object_list = self.supported_types.keys()\n        for counter_type in perf_object_list:\n            strComputer = \'.\'\n            objWMIService = win32com.client.Dispatch(\'WbemScripting.SWbemLocator\')\n            objSWbemServices = objWMIService.ConnectServer(strComputer, \'root\\\\cimv2\')\n            query_str = (\'Select * from %s%s\' % (self.win32_perf_base, counter_type))\n            colItems = objSWbemServices.ExecQuery(query_str)\n            if (len(colItems) > 0):\n                for objItem in colItems:\n                    if (hasattr(objItem, \'IDProcess\') and (pid == objItem.IDProcess)):\n                        for attribute in self.supported_types[counter_type]:\n                            eval_str = (\'objItem.%s\' % attribute)\n                            this_proc_dict[attribute] = eval(eval_str)\n                        this_proc_dict[\'TimeStamp\'] = (datetime.datetime.now().strftime(\'%Y-%m-%d %H:%M:%S.\') + str(datetime.datetime.now().microsecond)[:3])\n                        break\n        return this_proc_dict\n\n    def get_stats(self):\n        \'\\n        Show process stats for all processes in given list, if none given return all processes   \\n        If filter list is defined return only the items that match or contained in the list\\n        Returns a list of result dictionaries\\n        \'\n        pythoncom.CoInitialize()\n        proc_results_list = []\n        if (not self.perf_object_list):\n            perf_object_list = self.supported_types.keys()\n        for counter_type in perf_object_list:\n            strComputer = \'.\'\n            objWMIService = win32com.client.Dispatch(\'WbemScripting.SWbemLocator\')\n            objSWbemServices = objWMIService.ConnectServer(strComputer, \'root\\\\cimv2\')\n            query_str = (\'Select * from %s%s\' % (self.win32_perf_base, counter_type))\n            colItems = objSWbemServices.ExecQuery(query_str)\n            try:\n                if (len(colItems) > 0):\n                    for objItem in colItems:\n                        found_flag = False\n                        this_proc_dict = {}\n                        if (not self.process_name_list):\n                            found_flag = True\n                        else:\n                            for proc_name in self.process_name_list:\n                                obj_name = objItem.Name\n                                if (proc_name.lower() in obj_name.lower()):\n                                    found_flag = True\n                                    break\n                        if found_flag:\n                            for attribute in self.supported_types[counter_type]:\n                                eval_str = (\'objItem.%s\' % attribute)\n                                this_proc_dict[attribute] = eval(eval_str)\n                            this_proc_dict[\'TimeStamp\'] = (datetime.datetime.now().strftime(\'%Y-%m-%d %H:%M:%S.\') + str(datetime.datetime.now().microsecond)[:3])\n                            proc_results_list.append(this_proc_dict)\n            except pywintypes.com_error as err_msg:\n                continue\n        return proc_results_list\n\ndef get_sys_stats():\n    \' Returns a dictionary of the system stats\'\n    pythoncom.CoInitialize()\n    x = winmem()\n    sys_dict = {\'dwAvailPhys\': x.dwAvailPhys, \'dwAvailVirtual\': x.dwAvailVirtual, }\n    return sys_dict\nif (__name__ == \'__main__\'):\n    sys_dict = get_sys_stats()\n    stats_processor = process_stats(process_name_list=[\'process2watch\'], perf_object_list=[], filter_list=[])\n    proc_results = stats_processor.get_stats()\n    for result_dict in proc_results:\n        print result_dict\n    import os\n    this_pid = os.getpid()\n    this_proc_results = stats_processor.get_pid_stats(this_pid)\n    print \'this proc results:\'\n    print this_proc_results'
p384
sg10
I01
sasg11
I7
sg12
I276934
sg13
I2
sasg24
VHow to get current CPU and RAM usage in Python?
p385
ssI5137497
(dp386
g2
(lp387
(dp388
g5
(lp389
(dp390
g8
S'import os\ndir_path = os.path.dirname(os.path.realpath(__file__))'
p391
sg10
I01
sa(dp392
g8
S'import os\ncwd = os.getcwd()'
p393
sg10
I01
sasg11
I1115
sg12
I5137509
sg13
I0
sa(dp394
g5
(lp395
sg11
I226
sg12
I5137507
sg13
I1
sa(dp396
g5
(lp397
(dp398
g8
S"import os\nprint('Path at terminal when executing this file')\nprint((os.getcwd() + '\\n'))\nprint('This file path, relative to os.getcwd()')\nprint((__file__ + '\\n'))\nprint('This file full path (following symlinks)')\nfull_path = os.path.realpath(__file__)\nprint((full_path + '\\n'))\nprint('This file directory and name')\n(path, filename) = os.path.split(full_path)\nprint((((path + ' --> ') + filename) + '\\n'))\nprint('This file directory only')\nprint(os.path.dirname(full_path))"
p399
sg10
I01
sasg11
I172
sg12
I13720875
sg13
I2
sasg24
VFind current directory and file's directory
p400
ssI930397
(dp401
g2
(lp402
(dp403
g5
(lp404
(dp405
g8
S'some_list = [1, 2, 3]\nsome_list[(-1)] = 5\nsome_list[(-2)] = 3\nsome_list'
p406
sg10
I01
sasg11
I1387
sg12
I930398
sg13
I0
sa(dp407
g5
(lp408
(dp409
g8
S"alist = []\nalist[(-1)]\nalist[(-1):]\nastr = ''\nastr[(-1)]\nastr[(-1):]"
p410
sg10
I01
sasg11
I119
sg12
I4139773
sg13
I1
sa(dp411
g5
(lp412
(dp413
g8
S'alist.pop()'
p414
sg10
I01
sasg11
I49
sg12
I930759
sg13
I2
sasg24
VGetting the last element of a list in Python
p415
ssI961632
(dp416
g2
(lp417
(dp418
g5
(lp419
(dp420
g8
S"str(10)\nint('10')"
p421
sg10
I01
sasg11
I1066
sg12
I961638
sg13
I0
sa(dp422
g5
(lp423
(dp424
g8
S'str(i)'
p425
sg10
I01
sasg11
I51
sg12
I961636
sg13
I1
sa(dp426
g5
(lp427
(dp428
g8
S'str(a)'
p429
sg10
I01
sa(dp430
g8
S'a.__str__()'
p431
sg10
I01
sasg11
I29
sg12
I961652
sg13
I2
sasg24
VConverting integer to string in Python?
p432
ssI1712227
(dp433
g2
(lp434
(dp435
g5
(lp436
(dp437
g8
S'len([1, 2, 3])'
p438
sg10
I01
sasg11
I1421
sg12
I1712236
sg13
I0
sa(dp439
g5
(lp440
(dp441
g8
S'class slist(list):\n\n    @property\n    def length(self):\n        return len(self)'
p442
sg10
I01
sa(dp443
g8
S'l = slist(range(10))\nl.length\nprint l'
p444
sg10
I01
sasg11
I38
sg12
I16114025
sg13
I1
sa(dp445
g5
(lp446
(dp447
g8
S"items = []\nitems.append('apple')\nitems.append('orange')\nitems.append('banana')"
p448
sg10
I01
sa(dp449
g8
S'len(items)'
p450
sg10
I01
sa(dp451
g8
S'items.__len__()'
p452
sg10
I01
sa(dp453
g8
V>>> all(hasattr(cls, '__len__') for cls in (str, bytes, tuple, list, \u000a                                            xrange, dict, set, frozenset))\u000aTrue\u000a
p454
sg10
I00
sasg11
I33
sg12
I27137427
sg13
I2
sasg24
VHow to get the size of a list
p455
ssI1720421
(dp456
g2
(lp457
(dp458
g5
(lp459
(dp460
g8
S'mergedlist = (listone + listtwo)'
p461
sg10
I01
sasg11
I1627
sg12
I1720432
sg13
I0
sa(dp462
g5
(lp463
(dp464
g8
S'import itertools\nfor item in itertools.chain(listone, listtwo):\n    pass'
p465
sg10
I01
sasg11
I136
sg12
I1724975
sg13
I1
sa(dp466
g5
(lp467
(dp468
g8
S'mergedlist = list(set((listone + listtwo)))'
p469
sg10
I01
sasg11
I103
sg12
I3749835
sg13
I2
sasg24
VHow to append list to second list (concatenate lists)
p470
ssI209513
(dp471
g2
(lp472
(dp473
g5
(lp474
(dp475
g8
S"x = int('deadbeef', 16)"
p476
sg10
I01
sa(dp477
g8
S"print int('0xdeadbeef', 0)\nprint int('10', 0)"
p478
sg10
I01
sasg11
I603
sg12
I209550
sg13
I0
sa(dp479
g5
(lp480
(dp481
g8
S"int('a', 16)\nint('0xa', 16)"
p482
sg10
I01
sasg11
I101
sg12
I209529
sg13
I1
sa(dp483
g5
(lp484
(dp485
g8
S'int(s, 16)'
p486
sg10
I01
sasg11
I32
sg12
I209530
sg13
I2
sasg24
VConvert hex string to int in Python
p487
ssI642154
(dp488
g2
(lp489
(dp490
g5
(lp491
(dp492
g8
S"print (int('1') + 1)"
p493
sg10
I01
sa(dp494
g8
S'T2 = [map(int, x) for x in T1]'
p495
sg10
I01
sasg11
I332
sg12
I642169
sg13
I0
sa(dp496
g5
(lp497
(dp498
g8
S'T2 = [[int(column) for column in row] for row in T1]'
p499
sg10
I01
sa(dp500
g8
S'T2 = [parse_a_row_of_T1(row) for row in T1]'
p501
sg10
I01
sasg11
I21
sg12
I642177
sg13
I1
sa(dp502
g5
(lp503
(dp504
g8
S'[[int(y) for y in x] for x in T1]'
p505
sg10
I01
sasg11
I12
sg12
I855419
sg13
I2
sasg24
VHow to convert strings into integers in Python?
p506
ssI2269827
(dp507
g2
(lp508
(dp509
g5
(lp510
(dp511
g8
S"(chr(101) == 'e')\nhex(65)\n(chr(65) == 'A')"
p512
sg10
I01
sasg11
I119
sg12
I2269836
sg13
I0
sa(dp513
g5
(lp514
(dp515
g8
S"strHex = ('0x%0.2X' % 255)"
p516
sg10
I01
sasg11
I74
sg12
I2269863
sg13
I1
sa(dp517
g5
(lp518
(dp519
g8
S"('0x%x' % 255)"
p520
sg10
I01
sa(dp521
g8
S"('0x%X' % 255)"
p522
sg10
I01
sasg11
I29
sg12
I2269841
sg13
I2
sasg24
VHow to convert an int to a hex string?
p523
ssI6996603
(dp524
g2
(lp525
(dp526
g5
(lp527
sg11
I1204
sg12
I6996628
sg13
I0
sa(dp528
g5
(lp529
(dp530
g8
Vshutil.rmtree(path[, ignore_errors[, onerror]])\u000a
p531
sg10
I00
sa(dp532
g8
S'os.remove'
p533
sg10
I01
sa(dp534
g8
S'os.rmdir'
p535
sg10
I01
sasg11
I38
sg12
I6996662
sg13
I1
sa(dp536
g5
(lp537
(dp538
g8
Vos.unlink(path, *, dir_fd=None)\u000a
p539
sg10
I00
sa(dp540
g8
Vos.remove(path, *, dir_fd=None)\u000a
p541
sg10
I00
sa(dp542
g8
Vos.rmdir(path, *, dir_fd=None)\u000a
p543
sg10
I00
sa(dp544
g8
S'shutil.rmtree(path, ignore_errors=False, onerror=None)'
p545
sg10
I01
sa(dp546
g8
S'os.removedirs(name)'
p547
sg10
I01
sasg11
I15
sg12
I39079453
sg13
I2
sasg24
VDelete a file or folder in Python
p548
ssI227459
(dp549
g2
(lp550
(dp551
g5
(lp552
(dp553
g8
S"ord('a')\nchr(97)\nchr((ord('a') + 3))"
p554
sg10
I01
sa(dp555
g8
S'unichr(97)\nunichr(1234)'
p556
sg10
I01
sasg11
I719
sg12
I227472
sg13
I0
sa(dp557
g5
(lp558
(dp559
g8
S"ord(u'\\u3042')"
p560
sg10
I01
sasg11
I115
sg12
I227889
sg13
I1
sa(dp561
g5
(lp562
(dp563
g8
S'ord()'
p564
sg10
I01
sasg11
I34
sg12
I227466
sg13
I2
sasg24
VASCII value of a character in Python
p565
ssI9257094
(dp566
g2
(lp567
(dp568
g5
(lp569
(dp570
g8
S"s = 'sdsd'\ns.upper()"
p571
sg10
I01
sasg11
I560
sg12
I9257122
sg13
I0
sa(dp572
g5
(lp573
(dp574
g8
S"s = 'sdsd'\ns.upper()"
p575
sg10
I01
sa(dp576
g8
S'import string\nstring.ascii_uppercase'
p577
sg10
I01
sasg11
I59
sg12
I9257158
sg13
I1
sa(dp578
g5
(lp579
(dp580
g8
Vs = 'sdsd'\u000aprint s.upper()\u000a>>or\u000aupper = raw_input('type in something lowercase.')\u000alower = raw_input('type in the same thing caps lock.')\u000aprint upper.upper()\u000aprint lower.lower()\u000a
p581
sg10
I00
sasg11
I5
sg12
I24770472
sg13
I2
sasg24
VHow to change a string into uppercase
p582
ssI730764
(dp583
g2
(lp584
(dp585
g5
(lp586
(dp587
g8
S'try:\n    doSomething()\nexcept:\n    pass'
p588
sg10
I01
sa(dp589
g8
S'try:\n    doSomething()\nexcept Exception:\n    pass'
p590
sg10
I01
sasg11
I577
sg12
I730778
sg13
I0
sa(dp591
g5
(lp592
(dp593
g8
S'try:\n    do_something()\nexcept:\n    handle_exception()\n    raise'
p594
sg10
I01
sasg11
I94
sg12
I730806
sg13
I1
sa(dp595
g5
(lp596
(dp597
g8
S"shutil.rmtree('/fake/dir')"
p598
sg10
I01
sa(dp599
g8
S'try:\n    shutil.rmtree(path)\nexcept OSError:\n    pass'
p600
sg10
I01
sa(dp601
g8
S'shutil.rmtree(2)'
p602
sg10
I01
sa(dp603
g8
S'try:\n    sys.exit(1)\nexcept:\n    pass'
p604
sg10
I01
sa(dp605
g8
S'try:\n    sys.exit(1)\nexcept Exception:\n    pass'
p606
sg10
I01
sa(dp607
g8
S'try:\n    shutil.rmtree(path)\nexcept OSError as e:\n    if (e.errno == 2):\n        pass\n    else:\n        raise'
p608
sg10
I01
sasg11
I79
sg12
I736029
sg13
I2
sasg24
VTry/Except in Python: How do you properly ignore Exceptions?
p609
ssI70797
(dp610
g2
(lp611
(dp612
g5
(lp613
(dp614
g8
S"var = raw_input('Please enter something: ')\nprint 'you entered', var"
p615
sg10
I01
sasg11
I299
sg12
I70814
sg13
I0
sa(dp616
g5
(lp617
(dp618
g8
S'import sys\nprint sys.argv'
p619
sg10
I01
sa(dp620
g8
S'import sys\nprint(sys.argv)'
p621
sg10
I01
sasg11
I186
sg12
I70833
sg13
I1
sa(dp622
g5
(lp623
(dp624
g8
S"input_var = input('Enter something: ')\nprint ('you entered ' + input_var)"
p625
sg10
I01
sasg11
I131
sg12
I8334188
sg13
I2
sasg24
VPython: user input and commandline arguments
p626
ssI4706499
(dp627
g2
(lp628
(dp629
g5
(lp630
(dp631
g8
S"with open('test.txt', 'a') as myfile:\n    myfile.write('appended text')"
p632
sg10
I01
sasg11
I1262
sg12
I4706520
sg13
I0
sa(dp633
g5
(lp634
(dp635
g8
V>>> with open('test1','wb') as f:\u000a        f.write('test')\u000a>>> with open('test1','ab') as f:\u000a        f.write('koko')\u000a>>> with open('test1','rb') as f:\u000a        f.read()\u000a'testkoko'\u000a
p636
sg10
I00
sa(dp637
g8
S"f = open('test', 'a+')\nf.write('hi')\nf.seek(0)\nf.read()\nf.seek(0)\nf.write('bye')\nf.seek(0)\nf.read()"
p638
sg10
I01
sa(dp639
g8
S'fseek(stream, 0, SEEK_END)'
p640
sg10
I01
sa(dp641
g8
S"open('test', 'wb').write('test')\nopen('test', 'a+b').write('koko')\nopen('test', 'rb').read()"
p642
sg10
I01
sasg11
I99
sg12
I4706519
sg13
I1
sa(dp643
g5
(lp644
(dp645
g8
S"with open('foo', 'a') as f:\n    f.write('cool beans...')"
p646
sg10
I01
sasg11
I19
sg12
I4706565
sg13
I2
sasg24
VHow do you append to a file in Python?
p647
ssI22676
(dp648
g2
(lp649
(dp650
g5
(lp651
(dp652
g8
S"import urllib\nurllib.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')"
p653
sg10
I01
sa(dp654
g8
S"import urllib2\nurl = 'http://download.thinkbroadband.com/10MB.zip'\nfile_name = url.split('/')[(-1)]\nu = urllib2.urlopen(url)\nf = open(file_name, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('Content-Length')[0])\nprint ('Downloading: %s Bytes: %s' % (file_name, file_size))\nfile_size_dl = 0\nblock_sz = 8192\nwhile True:\n    buffer = u.read(block_sz)\n    if (not buffer):\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))\n    status = (status + (chr(8) * (len(status) + 1)))\n    print status,\nf.close()"
p655
sg10
I01
sasg11
I766
sg12
I22776
sg13
I0
sa(dp656
g5
(lp657
(dp658
g8
S"import urllib2\nresponse = urllib2.urlopen('http://www.example.com/')\nhtml = response.read()"
p659
sg10
I01
sasg11
I290
sg12
I22682
sg13
I1
sa(dp660
g5
(lp661
(dp662
g8
S"import requests\nurl = 'http://download.thinkbroadband.com/10MB.zip'\nr = requests.get(url)\nprint len(r.content)"
p663
sg10
I01
sa(dp664
g8
S"from tqdm import tqdm\nimport requests\nurl = 'http://download.thinkbroadband.com/10MB.zip'\nresponse = requests.get(url, stream=True)\nwith open('10MB', 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)"
p665
sg10
I01
sasg11
I227
sg12
I10744565
sg13
I2
sasg24
VHow do I download a file over HTTP using Python?
p666
ssI739993
(dp667
g2
(lp668
(dp669
g5
(lp670
(dp671
g8
S"help('modules')"
p672
sg10
I01
sasg11
I639
sg12
I740018
sg13
I0
sa(dp673
g5
(lp674
(dp675
g8
S"import pip\ninstalled_packages = pip.get_installed_distributions()\ninstalled_packages_list = sorted([('%s==%s' % (i.key, i.version)) for i in installed_packages])\nprint(installed_packages_list)"
p676
sg10
I01
sa(dp677
g8
S"sorted([('%s==%s' % (i.key, i.version)) for i in pip.get_installed_distributions()])"
p678
sg10
I01
sa(dp679
g8
S"['behave==1.2.4', 'enum34==1.0', 'flask==0.10.1', 'itsdangerous==0.24', 'jinja2==2.7.2', 'jsonschema==2.3.0', 'markupsafe==0.23', 'nose==1.3.3', 'parse-type==0.3.4', 'parse==1.6.4', 'prettytable==0.7.2', 'requests==2.3.0', 'six==1.6.1', 'vioozer-metadata==0.1', 'vioozer-users-server==0.1', 'werkzeug==0.9.4']"
p680
sg10
I01
sa(dp681
g8
V$ cd /tmp\u000a$ virtualenv test_env\u000aNew python executable in test_env/bin/python\u000aInstalling setuptools, pip...done.\u000a$ source test_env/bin/activate\u000a(test_env) $ \u000a
p682
sg10
I00
sa(dp683
g8
V(test_env) $ git clone https://github.com/behave/behave.git\u000aCloning into 'behave'...\u000aremote: Reusing existing pack: 4350, done.\u000aremote: Total 4350 (delta 0), reused 0 (delta 0)\u000aReceiving objects: 100% (4350/4350), 1.85 MiB | 418.00 KiB/s, done.\u000aResolving deltas: 100% (2388/2388), done.\u000aChecking connectivity... done.\u000a
p684
sg10
I00
sa(dp685
g8
V(test_env) $ ls /tmp/behave/setup.py\u000a/tmp/behave/setup.py\u000a
p686
sg10
I00
sa(dp687
g8
V(test_env) $ cd /tmp/behave && python setup.py install\u000arunning install\u000a...\u000aInstalled /private/tmp/test_env/lib/python2.7/site-packages/enum34-1.0-py2.7.egg\u000aFinished processing dependencies for behave==1.2.5a1\u000a
p688
sg10
I00
sa(dp689
g8
S"import pip\nsorted([('%s==%s' % (i.key, i.version)) for i in pip.get_installed_distributions()])\nimport os\nos.getcwd()"
p690
sg10
I01
sa(dp691
g8
S"import pip\nsorted([('%s==%s' % (i.key, i.version)) for i in pip.get_installed_distributions()])\nimport os\nos.getcwd()"
p692
sg10
I01
sasg11
I272
sg12
I23885252
sg13
I1
sa(dp693
g5
(lp694
(dp695
g8
Vpip freeze\u000a
p696
sg10
I00
sa(dp697
g8
VFabric==0.9.3\u000aapache-libcloud==0.4.0\u000abzr==2.3b4\u000adistribute==0.6.14\u000adocutils==0.7\u000agreenlet==0.3.1\u000aipython==0.10.1\u000aiterpipes==0.4\u000alibxml2-python==2.6.21\u000a
p698
sg10
I00
sasg11
I175
sg12
I4703670
sg13
I2
sasg24
VHow can I get a list of locally installed Python modules?
p699
ssI6797984
(dp700
g2
(lp701
(dp702
g5
(lp703
(dp704
g8
S"s = 'Kilometer'\nprint(s.lower())"
p705
sg10
I01
sasg11
I1412
sg12
I6797990
sg13
I0
sa(dp706
g5
(lp707
(dp708
g8
S"raw_input('Type Something').lower()"
p709
sg10
I01
sasg11
I60
sg12
I6798246
sg13
I1
sa(dp710
g5
(lp711
(dp712
g8
S"s = '\\xd0\\x9a\\xd0\\xb8\\xd0\\xbb\\xd0\\xbe\\xd0\\xbc\\xd0\\xb5\\xd1\\x82\\xd1\\x80'\nprint s.lower()\nprint s.decode('utf-8').lower()"
p713
sg10
I01
sasg11
I55
sg12
I26175350
sg13
I2
sasg24
VHow to convert string to lowercase in Python?
p714
ssI1207457
(dp715
g2
(lp716
(dp717
g5
(lp718
(dp719
g8
S"title = u'Kl\\xfcft skr\\xe4ms inf\\xf6r p\\xe5 f\\xe9d\\xe9ral \\xe9lectoral gro\\xdfe'\nimport unicodedata\nunicodedata.normalize('NFKD', title).encode('ascii', 'ignore')\n'Kluft skrams infor pa federal electoral groe'"
p720
sg10
I01
sasg11
I376
sg12
I1207479
sg13
I0
sa(dp721
g5
(lp722
(dp723
g8
S"a = u'aaa\\xe0\\xe7\\xe7\\xe7\\xf1\\xf1\\xf1'\ntype(a)\na.encode('ascii', 'ignore')\na.encode('ascii', 'replace')"
p724
sg10
I01
sasg11
I183
sg12
I1211102
sg13
I1
sa(dp725
g5
(lp726
(dp727
g8
S"s = u'\\xa310'\ns.encode('utf8')\ns.encode('utf16')"
p728
sg10
I01
sa(dp729
g8
S"import codecs\nf = codecs.open('path/to/file.txt', 'w', 'utf8')\nf.write(my_unicode_string)"
p730
sg10
I01
sasg11
I76
sg12
I1207836
sg13
I2
sasg24
VConvert a Unicode string to a string in Python (containing extra symbols)
p731
ssI3294889
(dp732
g2
(lp733
(dp734
g5
(lp735
(dp736
g8
S'for key in d:\n    pass'
p737
sg10
I01
sa(dp738
g8
S'for (key, value) in d.iteritems():\n    pass'
p739
sg10
I01
sa(dp740
g8
S'for (key, value) in d.items():\n    pass'
p741
sg10
I01
sasg11
I2046
sg12
I3294899
sg13
I0
sa(dp742
g5
(lp743
(dp744
g8
Vfor k in dict: ...\u000a
p745
sg10
I00
sa(dp746
g8
Vfor k in dict.keys(): ...\u000a
p747
sg10
I00
sa(dp748
g8
Vfor key in dict.iterkeys(): ...\u000a\u000afor value in dict.itervalues(): ...\u000a\u000afor key, value in dict.iteritems(): ...\u000a
p749
sg10
I00
sasg11
I229
sg12
I3295295
sg13
I1
sa(dp750
g5
(lp751
(dp752
g8
S"d = {'x': 1, 'y': 2, 'z': 3, }\nlist(d)\nd.keys()"
p753
sg10
I01
sa(dp754
g8
S'd.items()'
p755
sg10
I01
sa(dp756
g8
S"for (k, v) in d.items():\n    print k, 'corresponds to', v"
p757
sg10
I01
sa(dp758
g8
S"for (letter, number) in d.items():\n    print letter, 'corresponds to', number"
p759
sg10
I01
sa(dp760
g8
S"for (letter, number) in d.items():\n    print '{0} corresponds to {1}'.format(letter, number)"
p761
sg10
I01
sasg11
I89
sg12
I3295662
sg13
I2
sasg24
VIterating over dictionaries using for loops in Python
p762
ssI7571635
(dp763
g2
(lp764
(dp765
g5
(lp766
(dp767
g8
S'(7 in a)'
p768
sg10
I01
sasg11
I484
sg12
I7571665
sg13
I0
sa(dp769
g5
(lp770
(dp771
g8
S"a = [1, 2, 3, 4, 'a', 'b', 'c']\nreturn ('a' in a)"
p772
sg10
I01
sasg11
I23
sg12
I7571776
sg13
I1
sa(dp773
g5
(lp774
(dp775
g8
S"a = [4, 2, 3, 1, 5, 6]\nindex = dict(((y, x) for (x, y) in enumerate(a)))\ntry:\n    a_index = index[7]\nexcept KeyError:\n    print 'Not found'\nelse:\n    print 'found'"
p776
sg10
I01
sasg11
I12
sg12
I7572489
sg13
I2
sasg24
VFastest way to check if a value exist in a list
p777
ssI1093322
(dp778
g2
(lp779
(dp780
g5
(lp781
(dp782
g8
S'import sys'
p783
sg10
I01
sa(dp784
g8
S'print sys.version'
p785
sg10
I01
sa(dp786
g8
S'sys.version_info\nsys.hexversion'
p787
sg10
I01
sa(dp788
g8
S'assert (sys.version_info >= (2, 5))'
p789
sg10
I01
sasg11
I650
sg12
I1093331
sg13
I0
sa(dp790
g5
(lp791
(dp792
g8
S'(python - V)'
p793
sg10
I01
sasg11
I130
sg12
I17796193
sg13
I1
sa(dp794
g5
(lp795
(dp796
g8
S"import sys\nsys.hexversion\n('%x' % sys.hexversion)\n(sys.hexversion < 33947648)"
p797
sg10
I01
sasg11
I74
sg12
I3018075
sg13
I2
sasg24
VHow do I check what version of Python is running my script?
p798
ssI5618878
(dp799
g2
(lp800
(dp801
g5
(lp802
(dp803
g8
S"list1 = ['1', '2', '3']\nstr1 = ''.join(list1)"
p804
sg10
I01
sa(dp805
g8
S"list1 = [1, 2, 3]\nstr1 = ''.join((str(e) for e in list1))"
p806
sg10
I01
sasg11
I325
sg12
I5618893
sg13
I0
sa(dp807
g5
(lp808
(dp809
g8
S"L = [1, 2, 3]\n' '.join((str(x) for x in L))\n'1 2 3'"
p810
sg10
I01
sasg11
I32
sg12
I5618910
sg13
I1
sa(dp811
g5
(lp812
(dp813
g8
S"L = ['L', 'O', 'L']\nmakeitastring = ''.join(map(str, L))"
p814
sg10
I01
sasg11
I22
sg12
I5618944
sg13
I2
sasg24
VHow to convert list to string
p815
ssI3277503
(dp816
g2
(lp817
(dp818
g5
(lp819
(dp820
g8
S'with open(fname) as f:\n    content = f.readlines()'
p821
sg10
I01
sasg11
I936
sg12
I3277516
sg13
I0
sa(dp822
g5
(lp823
(dp824
g8
S"with open('filename') as f:\n    lines = f.readlines()"
p825
sg10
I01
sa(dp826
g8
S"lines = [line.rstrip('\\n') for line in open('filename')]"
p827
sg10
I01
sasg11
I570
sg12
I3277515
sg13
I1
sa(dp828
g5
(lp829
(dp830
g8
S"with open('file.txt', 'r') as ins:\n    array = []\n    for line in ins:\n        array.append(line)"
p831
sg10
I01
sasg11
I235
sg12
I3277512
sg13
I2
sasg24
VHow to read a file line by line into a list with Python
p832
ssI5844672
(dp833
g2
(lp834
(dp835
g5
(lp836
(dp837
g8
S'del d[key]'
p838
sg10
I01
sa(dp839
g8
S'def removekey(d, key):\n    r = dict(d)\n    del r[key]\n    return r'
p840
sg10
I01
sasg11
I681
sg12
I5844692
sg13
I0
sa(dp841
g5
(lp842
(dp843
g8
S'a\n{i: a[i] for i in a if (i != 0)}'
p844
sg10
I01
sasg11
I40
sg12
I5844700
sg13
I1
sa(dp845
g5
(lp846
(dp847
g8
V >>>lol = {"hello":"gdbye"}\u000a >>>lol.pop("hello")\u000a    'gdbye'\u000a >>> lol\u000a     {}\u000a
p848
sg10
I00
sasg11
I40
sg12
I22564121
sg13
I2
sasg24
VDelete an element from a dictionary
p849
ssI16296643
(dp850
g2
(lp851
(dp852
g5
(lp853
(dp854
g8
S"t = ('my', 'name', 'is', 'mr', 'tuple')\nt\nlist(t)"
p855
sg10
I01
sa(dp856
g8
S"l = ['my', 'name', 'is', 'mr', 'list']\nl\ntuple(l)"
p857
sg10
I01
sasg11
I99
sg12
I23497549
sg13
I0
sa(dp858
g5
(lp859
(dp860
g8
S'[list(i) for i in level]'
p861
sg10
I01
sa(dp862
g8
S'map(list, level)'
p863
sg10
I01
sa(dp864
g8
S'tuple((tuple(i) for i in edited))'
p865
sg10
I01
sa(dp866
g8
S'tuple(itertools.imap(tuple, edited))'
p867
sg10
I01
sa(dp868
g8
S'a = numpy.array(level1)\na'
p869
sg10
I01
sa(dp870
g8
S'if (clicked[0] == 1):\n    x = ((mousey + cameraY) // 60)\n    y = ((mousex + cameraX) // 60)\n    a[x][y] = 1'
p871
sg10
I01
sasg11
I41
sg12
I16296703
sg13
I1
sa(dp872
g5
(lp873
(dp874
g8
S'level1 = [list(row) for row in level1]'
p875
sg10
I01
sa(dp876
g8
S'level1 = map(list, level1)'
p877
sg10
I01
sasg11
I16
sg12
I16296668
sg13
I2
sasg24
VConvert tuple to list and back
p878
ssI4004550
(dp879
g2
(lp880
(dp881
g5
(lp882
(dp883
g8
S"s = '5.2 5.6 5.3'\nfloats = [float(x) for x in s.split()]"
p884
sg10
I01
sa(dp885
g8
S'floats = map(float, s.split())'
p886
sg10
I01
sasg11
I57
sg12
I4004554
sg13
I0
sasg24
VConverting string series to float list in python
p887
ssI10543303
(dp888
g2
(lp889
(dp890
g5
(lp891
(dp892
g8
S'j = [4, 5, 6, 7, 1, 3, 7, 5]\nsum(((i > 5) for i in j))'
p893
sg10
I01
sa(dp894
g8
S'issubclass(bool, int)'
p895
sg10
I01
sasg11
I62
sg12
I10543316
sg13
I0
sa(dp896
g5
(lp897
(dp898
g8
S'j = [4, 5, 6, 7, 1, 3, 7, 5]\nlen([1 for i in j if (i > 5)])'
p899
sg10
I01
sasg11
I6
sg12
I10543348
sg13
I1
sa(dp900
g5
(lp901
(dp902
g8
S'import numpy as np\nj = np.array(j)\nsum((j > i))'
p903
sg10
I01
sasg11
I5
sg12
I10543345
sg13
I2
sasg24
Vnumber of values in a list greater than a certain number
p904
ssI432842
(dp905
g2
(lp906
(dp907
g5
(lp908
(dp909
g8
S'(bool(a) != bool(b))'
p910
sg10
I01
sasg11
I750
sg12
I433161
sg13
I0
sa(dp911
g5
(lp912
(dp913
g8
S'((a and (not b)) or ((not a) and b))'
p914
sg10
I01
sa(dp915
g8
S'(bool(a) ^ bool(b))'
p916
sg10
I01
sa(dp917
g8
S'def logical_xor(str1, str2):\n    return (bool(str1) ^ bool(str2))'
p918
sg10
I01
sasg11
I292
sg12
I432844
sg13
I1
sa(dp919
g5
(lp920
(dp921
g8
S'from operator import xor\nxor(bool(a), bool(b))'
p922
sg10
I01
sasg11
I96
sg12
I11036506
sg13
I2
sasg24
VHow do you get the logical xor of two variables in Python?
p923
ssI1303243
(dp924
g2
(lp925
(dp926
g5
(lp927
sg11
I210
sg12
I1303252
sg13
I0
sa(dp928
g5
(lp929
(dp930
g8
S'isinstance(o, basestring)'
p931
sg10
I01
sa(dp932
g8
S'(type(o) is str)'
p933
sg10
I01
sa(dp934
g8
S'isinstance(o, str)'
p935
sg10
I01
sasg11
I104
sg12
I1303266
sg13
I1
sa(dp936
g5
(lp937
(dp938
g8
S'isinstance(obj_to_test, str)'
p939
sg10
I01
sasg11
I44
sg12
I26535728
sg13
I2
sasg24
VHow to find out if a Python object is a string?
p940
ssI163542
(dp941
g2
(lp942
(dp943
g5
(lp944
(dp945
g8
S"pipe = os.popen(cmd, 'w', bufsize)\npipe = Popen(cmd, shell=True, bufsize=bufsize, stdin=PIPE).stdin"
p946
sg10
I01
sa(dp947
g8
S"from subprocess import Popen, PIPE, STDOUT\np = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\ngrep_stdout = p.communicate(input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]\nprint(grep_stdout.decode())"
p948
sg10
I01
sasg11
I211
sg12
I165662
sg13
I0
sa(dp949
g5
(lp950
(dp951
g8
S"p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\np.stdin.write('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')\np.communicate()[0]\np.stdin.close()"
p952
sg10
I01
sasg11
I26
sg12
I163556
sg13
I1
sa(dp953
g5
(lp954
sg11
I12
sg12
I163870
sg13
I2
sasg24
VPython - How do I pass a string into subprocess.Popen (using the stdin argument)?
p955
ssI306400
(dp956
g2
(lp957
(dp958
g5
(lp959
(dp960
g8
S"import random\nfoo = ['a', 'b', 'c', 'd', 'e']\nprint(random.choice(foo))"
p961
sg10
I01
sasg11
I1499
sg12
I306417
sg13
I0
sa(dp962
g5
(lp963
(dp964
g8
S"foo = ['a', 'b', 'c', 'd', 'e']\nfrom random import randrange\nrandom_index = randrange(0, len(foo))\nprint foo[random_index]"
p965
sg10
I01
sasg11
I65
sg12
I12373205
sg13
I1
sa(dp966
g5
(lp967
(dp968
g8
S'import random\ngroup_of_items = {1, 2, 3, 4}\nnum_to_select = 2\nlist_of_random_items = random.sample(group_of_items, num_to_select)\nfirst_random_item = list_of_random_items[0]\nsecond_random_item = list_of_random_items[1]'
p969
sg10
I01
sasg11
I38
sg12
I30488952
sg13
I2
sasg24
VHow do I randomly select an item from a list using Python?
p970
ssI3996904
(dp971
g2
(lp972
(dp973
g5
(lp974
(dp975
g8
S'from random import randint\nprint(randint(0, 9))'
p976
sg10
I01
sasg11
I727
sg12
I3996930
sg13
I0
sa(dp977
g5
(lp978
(dp979
g8
S'import random\nprint(random.randint(0, 9))'
p980
sg10
I01
sa(dp981
g8
S'random.randint(a, b)'
p982
sg10
I01
sasg11
I159
sg12
I16376904
sg13
I1
sa(dp983
g5
(lp984
(dp985
g8
S'from random import randrange, uniform\nirand = randrange(0, 10)\nfrand = uniform(0, 10)'
p986
sg10
I01
sasg11
I51
sg12
I3996919
sg13
I2
sasg24
VGenerate random integers between 0 and 9
p987
ssI627435
(dp988
g2
(lp989
(dp990
g5
(lp991
(dp992
g8
S'a = range(10)\na\ndel a[(-1)]\na'
p993
sg10
I01
sasg11
I758
sg12
I627453
sg13
I0
sa(dp994
g5
(lp995
(dp996
g8
S"a = ['a', 'b', 'c', 'd']\na.pop(1)"
p997
sg10
I01
sa(dp998
g8
S"a = ['a', 'b', 'c', 'd']\na.pop()"
p999
sg10
I01
sasg11
I310
sg12
I627441
sg13
I1
sa(dp1000
g5
(lp1001
(dp1002
g8
S'a = [1, 2, 3, 4, 5, 6]\nindex = 3\na = (a[:index] + a[(index + 1):])'
p1003
sg10
I01
sa(dp1004
g8
S'class foo(object):\n\n    def __init__(self, items):\n        self.items = items\n\n    def __getitem__(self, index):\n        return foo(self.items[index])\n\n    def __add__(self, right):\n        return foo((self.items + right.items))'
p1005
sg10
I01
sa(dp1006
g8
S'a = range(10)\nindex = 3'
p1007
sg10
I01
sa(dp1008
g8
S'def del_method():\n    global a\n    global index\n    del a[index]'
p1009
sg10
I01
sa(dp1010
g8
V 10           0 LOAD_GLOBAL              0 (a)\u000a              3 LOAD_GLOBAL              1 (index)\u000a              6 DELETE_SUBSCR       # This is the line that deletes the item\u000a              7 LOAD_CONST               0 (None)\u000a             10 RETURN_VALUE        \u000aNone\u000a
p1011
sg10
I00
sa(dp1012
g8
S'def pop_method():\n    global a\n    global index\n    a.pop(index)'
p1013
sg10
I01
sa(dp1014
g8
V 17           0 LOAD_GLOBAL              0 (a)\u000a              3 LOAD_ATTR                1 (pop)\u000a              6 LOAD_GLOBAL              2 (index)\u000a              9 CALL_FUNCTION            1\u000a             12 POP_TOP             \u000a             13 LOAD_CONST               0 (None)\u000a             16 RETURN_VALUE        \u000a
p1015
sg10
I00
sa(dp1016
g8
S'def slice_method():\n    global a\n    global index\n    a = (a[:index] + a[(index + 1):])'
p1017
sg10
I01
sa(dp1018
g8
V 24           0 LOAD_GLOBAL              0 (a)\u000a              3 LOAD_GLOBAL              1 (index)\u000a              6 SLICE+2             \u000a              7 LOAD_GLOBAL              0 (a)\u000a             10 LOAD_GLOBAL              1 (index)\u000a             13 LOAD_CONST               1 (1)\u000a             16 BINARY_ADD          \u000a             17 SLICE+1             \u000a             18 BINARY_ADD          \u000a             19 STORE_GLOBAL             0 (a)\u000a             22 LOAD_CONST               0 (None)\u000a             25 RETURN_VALUE        \u000aNone\u000a
p1019
sg10
I00
sasg11
I44
sg12
I24352671
sg13
I2
sasg24
VHow to remove an element from a list by index in Python?
p1020
ssI1773805
(dp1021
g2
(lp1022
(dp1023
g5
(lp1024
(dp1025
g8
S"import yaml\nwith open('example.yaml', 'r') as stream:\n    try:\n        print(yaml.load(stream))\n    except yaml.YAMLError as exc:\n        print(exc)"
p1026
sg10
I01
sasg11
I327
sg12
I1774043
sg13
I0
sa(dp1027
g5
(lp1028
(dp1029
g8
S"import ruamel.yaml as yaml\nwith open('example.yaml') as stream:\n    try:\n        print(yaml.load(stream))\n    except yaml.YAMLError as exc:\n        print(exc)"
p1030
sg10
I01
sasg11
I15
sg12
I38922434
sg13
I1
sa(dp1031
g5
(lp1032
(dp1033
g8
S"import yaml\nimport io\ndata = {'a list': [1, 42, 3.141, 1337, 'help', u'\\u20ac'], 'a string': 'bla', 'another dict': {'foo': 'bar', 'key': 'value', 'the answer': 42, }, }\nwith io.open('data.yaml', 'w', encoding='utf8') as outfile:\n    yaml.dump(data, outfile, default_flow_style=False, allow_unicode=True)\nwith open('data.yaml', 'r') as stream:\n    data_loaded = yaml.load(stream)\nprint((data == data_loaded))"
p1034
sg10
I01
sa(dp1035
g8
Va list:\u000a- 1\u000a- 42\u000a- 3.141\u000a- 1337\u000a- help\u000a- \u20ac\u000aa string: bla\u000aanother dict:\u000a  foo: bar\u000a  key: value\u000a  the answer: 42\u000a
p1036
sg10
I00
sasg11
I6
sg12
I42054860
sg13
I2
sasg24
VHow can I parse a YAML file in Python
p1037
ssI663171
(dp1038
g2
(lp1039
(dp1040
g5
(lp1041
(dp1042
g8
S"x = 'Hello World!'\nx[2:]\nx[:2]\nx[:(-2)]\nx[(-2):]\nx[2:(-2)]"
p1043
sg10
I01
sasg11
I1585
sg12
I663175
sg13
I0
sa(dp1044
g5
(lp1045
(dp1046
g8
S'some_string[::(-1)]'
p1047
sg10
I01
sa(dp1048
g8
S"'H-e-l-l-o- -W-o-r-l-d'[::2]"
p1049
sg10
I01
sasg11
I200
sg12
I9780082
sg13
I1
sa(dp1050
g5
(lp1051
(dp1052
g8
S's = Substr(s, beginning, LENGTH)'
p1053
sg10
I01
sa(dp1054
g8
S's = s[beginning:(beginning + LENGTH)]'
p1055
sg10
I01
sasg11
I52
sg12
I11808384
sg13
I2
sasg24
VIs there a way to substring a string in Python?
p1056
ssI1185524
(dp1057
g2
(lp1058
(dp1059
g5
(lp1060
(dp1061
g8
S"s = '  \\t a string example\\t  '\ns = s.strip()"
p1062
sg10
I01
sa(dp1063
g8
S's = s.rstrip()'
p1064
sg10
I01
sa(dp1065
g8
S's = s.lstrip()'
p1066
sg10
I01
sa(dp1067
g8
S"s = s.strip(' \\t\\n\\r')"
p1068
sg10
I01
sa(dp1069
g8
S"import re\nprint re.sub('[\\\\s+]', '', s)"
p1070
sg10
I01
sa(dp1071
g8
S'astringexample'
p1072
sg10
I01
sasg11
I938
sg12
I1185529
sg13
I0
sa(dp1073
g5
(lp1074
(dp1075
g8
S'str.strip()\nstr.lstrip()\nstr.rstrip()'
p1076
sg10
I01
sasg11
I39
sg12
I9326184
sg13
I1
sa(dp1077
g5
(lp1078
(dp1079
g8
S"s = '   foo    \\t   '\nprint s.strip()"
p1080
sg10
I01
sa(dp1081
g8
S"import re\npat = re.compile('\\\\s+')\ns = '  \\t  foo   \\t   bar \\t  '\nprint pat.sub('', s)"
p1082
sg10
I01
sasg11
I17
sg12
I1185528
sg13
I2
sasg24
VHow to trim whitespace (including tabs)?
p1083
ssI354038
(dp1084
g2
(lp1085
(dp1086
g5
(lp1087
(dp1088
g8
S"a = '03523'\na.isdigit()\nb = '963spam'\nb.isdigit()"
p1089
sg10
I01
sasg11
I1086
sg12
I354073
sg13
I0
sa(dp1090
g5
(lp1091
sg11
I439
sg12
I354130
sg13
I1
sa(dp1092
g5
(lp1093
(dp1094
g8
S"float('NaN')"
p1095
sg10
I01
sasg11
I50
sg12
I3618897
sg13
I2
sasg24
VHow do I check if a string is a number (float) in Python?
p1096
ssI2600191
(dp1097
g2
(lp1098
(dp1099
g5
(lp1100
(dp1101
g8
S"from collections import Counter\nz = ['blue', 'red', 'blue', 'yellow', 'blue', 'red']\nCounter(z)"
p1102
sg10
I01
sasg11
I937
sg12
I5829377
sg13
I0
sa(dp1103
g5
(lp1104
(dp1105
g8
S'[1, 2, 3, 4, 1, 4, 1].count(1)'
p1106
sg10
I01
sasg11
I852
sg12
I2600208
sg13
I1
sa(dp1107
g5
(lp1108
(dp1109
g8
S"l = ['a', 'b', 'b']\nl.count('a')\nl.count('b')"
p1110
sg10
I01
sa(dp1111
g8
S'[[x, l.count(x)] for x in set(l)]'
p1112
sg10
I01
sa(dp1113
g8
S"l = ['a', 'b', 'b']\n[[x, l.count(x)] for x in set(l)]\ndict(((x, l.count(x)) for x in set(l)))"
p1114
sg10
I01
sa(dp1115
g8
S'Counter(l)'
p1116
sg10
I01
sa(dp1117
g8
S"l = ['a', 'b', 'b']\nfrom collections import Counter\nCounter(l)"
p1118
sg10
I01
sa(dp1119
g8
S"import timeit\nt1 = timeit.Timer('Counter(l)', 'import random;import string;from collections import Counter;n=1000;l=[random.choice(string.ascii_letters) for x in xrange(n)]')\nt2 = timeit.Timer('[[x,l.count(x)] for x in set(l)]', 'import random;import string;n=1000;l=[random.choice(string.ascii_letters) for x in xrange(n)]')\nprint 'Counter(): ', t1.repeat(repeat=3, number=10000)\nprint 'count():   ', t2.repeat(repeat=3, number=10000)"
p1120
sg10
I01
sa(dp1121
g8
VCounter():  [6.360648187146579, 6.613881559699756, 6.392260466851987]\u000acount():    [12.885062765334006, 13.045601897769359, 12.87746743077426]\u000a
p1122
sg10
I00
sasg11
I87
sg12
I23909767
sg13
I2
sasg24
VHow can I count the occurrences of a list item in Python?
p1123
ssI845058
(dp1124
g2
(lp1125
(dp1126
g5
(lp1127
(dp1128
g8
S"num_lines = sum((1 for line in open('myfile.txt')))"
p1129
sg10
I01
sasg11
I348
sg12
I1019572
sg13
I0
sa(dp1130
g5
(lp1131
sg11
I179
sg12
I845081
sg13
I1
sa(dp1132
g5
(lp1133
(dp1134
g8
Vmapcount : 0.465599966049\u000asimplecount : 0.756399965286\u000abufcount : 0.546800041199\u000aopcount : 0.718600034714\u000a
p1135
sg10
I00
sa(dp1136
g8
Vmapcount : 0.471799945831\u000asimplecount : 0.634400033951\u000abufcount : 0.468800067902\u000aopcount : 0.602999973297\u000a
p1137
sg10
I00
sa(dp1138
g8
S"from __future__ import with_statement\nimport time\nimport mmap\nimport random\nfrom collections import defaultdict\n\ndef mapcount(filename):\n    f = open(filename, 'r+')\n    buf = mmap.mmap(f.fileno(), 0)\n    lines = 0\n    readline = buf.readline\n    while readline():\n        lines += 1\n    return lines\n\ndef simplecount(filename):\n    lines = 0\n    for line in open(filename):\n        lines += 1\n    return lines\n\ndef bufcount(filename):\n    f = open(filename)\n    lines = 0\n    buf_size = (1024 * 1024)\n    read_f = f.read\n    buf = read_f(buf_size)\n    while buf:\n        lines += buf.count('\\n')\n        buf = read_f(buf_size)\n    return lines\n\ndef opcount(fname):\n    with open(fname) as f:\n        for (i, l) in enumerate(f):\n            pass\n    return (i + 1)\ncounts = defaultdict(list)\nfor i in range(5):\n    for func in [mapcount, simplecount, bufcount, opcount]:\n        start_time = time.time()\n        assert (func('big_file.txt') == 1209138)\n        counts[func].append((time.time() - start_time))\nfor (key, vals) in counts.items():\n    print key.__name__, ':', (sum(vals) / float(len(vals)))"
p1139
sg10
I01
sasg11
I155
sg12
I850962
sg13
I2
sasg24
VHow to get line count cheaply in Python?
p1140
ssI6416131
(dp1141
g2
(lp1142
(dp1143
g5
(lp1144
(dp1145
g8
S"default_data['item3'] = 3"
p1146
sg10
I01
sa(dp1147
g8
S"default_data.update({'item3': 3, })"
p1148
sg10
I01
sasg11
I503
sg12
I6416142
sg13
I0
sa(dp1149
g5
(lp1150
(dp1151
g8
S"default_data['item3'] = 3"
p1152
sg10
I01
sa(dp1153
g8
S"default_data.update({'item4': 4, 'item5': 5, })"
p1154
sg10
I01
sasg11
I37
sg12
I6416157
sg13
I1
sa(dp1155
g5
(lp1156
(dp1157
g8
S"class Dict(dict):\n\n    def __add__(self, other):\n        copy = self.copy()\n        copy.update(other)\n        return copy\n\n    def __radd__(self, other):\n        copy = other.copy()\n        copy.update(self)\n        return copy\ndefault_data = Dict({'item1': 1, 'item2': 2, })\n(default_data + {'item3': 3, })\n({'test1': 1, } + Dict(test2=2))"
p1158
sg10
I01
sasg11
I15
sg12
I6416471
sg13
I2
sasg24
VPython add new item to dictionary
p1159
ssI3964681
(dp1160
g2
(lp1161
(dp1162
g5
(lp1163
(dp1164
g8
S"import glob, os\nos.chdir('/mydir')\nfor file in glob.glob('*.txt'):\n    print(file)"
p1165
sg10
I01
sa(dp1166
g8
S"import os\nfor file in os.listdir('/mydir'):\n    if file.endswith('.txt'):\n        print(file)"
p1167
sg10
I01
sa(dp1168
g8
S"import os\nfor (root, dirs, files) in os.walk('/mydir'):\n    for file in files:\n        if file.endswith('.txt'):\n            print(os.path.join(root, file))"
p1169
sg10
I01
sasg11
I1021
sg12
I3964691
sg13
I0
sa(dp1170
g5
(lp1171
(dp1172
g8
S"import glob\nglob.glob('./*.txt')"
p1173
sg10
I01
sasg11
I119
sg12
I3964689
sg13
I1
sa(dp1174
g5
(lp1175
sg11
I77
sg12
I3964690
sg13
I2
sasg24
VFind all files in directory with extension .txt in Python
p1176
ssI849674
(dp1177
g2
(lp1178
(dp1179
g5
(lp1180
(dp1181
g8
S"import thread, time\n\ndef myfunction(mystring, *args):\n    print mystring\nif (__name__ == '__main__'):\n    try:\n        thread.start_new_thread(myfunction, ('MyStringHere', 1))\n    except Exception as errtxt:\n        print errtxt\n    time.sleep(5)"
p1182
sg10
I01
sa(dp1183
g8
S"from threading import Thread\n\ndef myfunction(mystring, *args):\n    print mystring\nif (__name__ == '__main__'):\n    try:\n        Thread(target=myfunction, args=('MyStringHere', 1)).start()\n    except Exception as errtxt:\n        print errtxt"
p1184
sg10
I01
sasg11
I22
sg12
I849759
sg13
I0
sa(dp1185
g5
(lp1186
(dp1187
g8
S"from threading import Thread\n\ndef myfunction(mystring, *args):\n    print mystring\nif (__name__ == '__main__'):\n    try:\n        t = Thread(None, myfunction, None, ('MyStringHere', 1))\n        t.start()\n        t.join()\n    except Exception as errtxt:\n        print errtxt"
p1188
sg10
I01
sasg11
I14
sg12
I849896
sg13
I1
sa(dp1189
g5
(lp1190
(dp1191
g8
S"import thread\n\ndef myfunction(mystring, *args):\n    print mystring\nif (__name__ == '__main__'):\n    try:\n        thread.start_new_thread(myfunction, ('MyStringHere', 1))\n    except Exception as errtxt:\n        print errtxt\nwhile 1:\n    pass"
p1192
sg10
I01
sasg11
I0
sg12
I20633107
sg13
I2
sasg24
VSimple threading in Python 2.6 using thread.start_new_thread()
p1193
ssI8270092
(dp1194
g2
(lp1195
(dp1196
g5
(lp1197
(dp1198
g8
S"'hello  apple'"
p1199
sg10
I01
sa(dp1200
g8
S"'helloapple'"
p1201
sg10
I01
sa(dp1202
g8
S"'hello apple'"
p1203
sg10
I01
sasg11
I638
sg12
I8270146
sg13
I0
sa(dp1204
g5
(lp1205
(dp1206
g8
S"sentence = sentence.replace(' ', '')"
p1207
sg10
I01
sa(dp1208
g8
S"sentence = ''.join(sentence.split())"
p1209
sg10
I01
sa(dp1210
g8
S"import re\npattern = re.compile('\\\\s+')\nsentence = re.sub(pattern, '', sentence)"
p1211
sg10
I01
sa(dp1212
g8
S'sentence = sentence.strip()'
p1213
sg10
I01
sasg11
I135
sg12
I8270124
sg13
I1
sa(dp1214
g5
(lp1215
(dp1216
g8
S"sentence = re.sub('\\\\s+', '', sentence, flags=re.UNICODE)"
p1217
sg10
I01
sasg11
I21
sg12
I28607213
sg13
I2
sasg24
VPython remove all whitespace in a string
p1218
ssI7961363
(dp1219
g2
(lp1220
(dp1221
g5
(lp1222
(dp1223
g8
S't = [1, 2, 3, 1, 2, 5, 6, 7, 8]\nt\nlist(set(t))\ns = [1, 2, 3]\nlist((set(t) - set(s)))'
p1224
sg10
I01
sasg11
I697
sg12
I7961390
sg13
I0
sa(dp1225
g5
(lp1226
(dp1227
g8
S"from collections import OrderedDict\nlist(OrderedDict.fromkeys('abracadabra'))"
p1228
sg10
I01
sa(dp1229
g8
S"list(dict.fromkeys('abracadabra'))"
p1230
sg10
I01
sasg11
I201
sg12
I7961425
sg13
I1
sa(dp1231
g5
(lp1232
sg11
I122
sg12
I7961393
sg13
I2
sasg24
VRemoving duplicates in lists
p1233
ssI931092
(dp1234
g2
(lp1235
(dp1236
g5
(lp1237
(dp1238
g8
S"'hello world'[::(-1)]"
p1239
sg10
I01
sasg11
I1624
sg12
I931095
sg13
I0
sa(dp1240
g5
(lp1241
sg11
I156
sg12
I931099
sg13
I1
sa(dp1242
g5
(lp1243
(dp1244
g8
S'string[subscript]'
p1245
sg10
I01
sa(dp1246
g8
S'string[start:stop:step]'
p1247
sg10
I01
sa(dp1248
g8
S'slice_obj = slice(start, stop, step)\nstring[slice_obj]'
p1249
sg10
I01
sa(dp1250
g8
S"def reverse_string_readable_answer(string):\n    return ''.join(reversed(string))"
p1251
sg10
I01
sa(dp1252
g8
S"'foo'[::(-1)]"
p1253
sg10
I01
sa(dp1254
g8
S"start = stop = None\nstep = (-1)\nreverse_slice = slice(start, stop, step)\n'foo'[reverse_slice]"
p1255
sg10
I01
sa(dp1256
g8
S'def reversed_string(a_string):\n    return a_string[::(-1)]'
p1257
sg10
I01
sa(dp1258
g8
S"reversed_string('foo')"
p1259
sg10
I01
sa(dp1260
g8
S"def reverse_a_string_slowly(a_string):\n    new_string = ''\n    index = len(a_string)\n    while index:\n        index -= 1\n        new_string += a_string[index]\n    return new_string"
p1261
sg10
I01
sa(dp1262
g8
S"def reverse_a_string_more_slowly(a_string):\n    new_strings = []\n    index = len(a_string)\n    while index:\n        index -= 1\n        new_strings.append(a_string[index])\n    return ''.join(new_strings)"
p1263
sg10
I01
sa(dp1264
g8
S"a_string = ('amanaplanacanalpanama' * 10)\nmin(timeit.repeat((lambda : reverse_string_readable_answer(a_string))))\nmin(timeit.repeat((lambda : reversed_string(a_string))))\nmin(timeit.repeat((lambda : reverse_a_string_slowly(a_string))))\nmin(timeit.repeat((lambda : reverse_a_string_more_slowly(a_string))))"
p1265
sg10
I01
sasg11
I56
sg12
I27843760
sg13
I2
sasg24
VReverse a string in Python
p1266
ssI415511
(dp1267
g2
(lp1268
(dp1269
g5
(lp1270
(dp1271
g8
S'import datetime\ndatetime.datetime.now()'
p1272
sg10
I01
sa(dp1273
g8
S'datetime.datetime.time(datetime.datetime.now())'
p1274
sg10
I01
sa(dp1275
g8
S'datetime.datetime.now().time()'
p1276
sg10
I01
sa(dp1277
g8
S'from datetime import datetime'
p1278
sg10
I01
sasg11
I1183
sg12
I415519
sg13
I0
sa(dp1279
g5
(lp1280
(dp1281
g8
S"from time import gmtime, strftime\nstrftime('%Y-%m-%d %H:%M:%S', gmtime())"
p1282
sg10
I01
sasg11
I492
sg12
I415525
sg13
I1
sa(dp1283
g5
(lp1284
(dp1285
g8
S'from datetime import datetime\nstr(datetime.now())'
p1286
sg10
I01
sasg11
I225
sg12
I5877368
sg13
I2
sasg24
VHow to get current time in Python
p1287
ssI14043934
(dp1288
g2
(lp1289
(dp1290
g5
(lp1291
(dp1292
g8
S'import datetime\nt = datetime.datetime.now()\n(t - datetime.timedelta(hours=1, minutes=10))'
p1293
sg10
I01
sa(dp1294
g8
S't = datetime.time(1, 2)\ndt = datetime.datetime.combine(datetime.date.today(), t)\ndt\ndt -= datetime.timedelta(hours=5)\ndt.time()'
p1295
sg10
I01
sasg11
I21
sg12
I14043939
sg13
I0
sasg24
Vpython time offset
p1296
ssI3940128
(dp1297
g2
(lp1298
(dp1299
g5
(lp1300
(dp1301
g8
S'L = [0, 10, 20, 40]\nL[::(-1)]'
p1302
sg10
I01
sasg11
I679
sg12
I3940137
sg13
I0
sa(dp1303
g5
(lp1304
(dp1305
g8
S'array = [0, 10, 20, 40]\nfor i in reversed(array):\n    print i'
p1306
sg10
I01
sasg11
I491
sg12
I3940144
sg13
I1
sa(dp1307
g5
(lp1308
(dp1309
g8
S'L = [0, 10, 20, 40]\nL.reverse()\nL'
p1310
sg10
I01
sa(dp1311
g8
S'L[::(-1)]'
p1312
sg10
I01
sasg11
I181
sg12
I3940149
sg13
I2
sasg24
VHow can I reverse a list in python?
p1313
ssI1949318
(dp1314
g2
(lp1315
(dp1316
g5
(lp1317
(dp1318
g8
S"print urllib.urlopen('http://www.stackoverflow.com').getcode()\n200"
p1319
sg10
I01
sasg11
I45
sg12
I1949360
sg13
I0
sa(dp1320
g5
(lp1321
(dp1322
g8
S"import httplib\nconn = httplib.HTTPConnection('www.python.org')\nconn.request('HEAD', '/')\nr1 = conn.getresponse()\nprint r1.status, r1.reason"
p1323
sg10
I01
sa(dp1324
g8
V200 OK\u000a
p1325
sg10
I00
sasg11
I7
sg12
I1949393
sg13
I1
sa(dp1326
g5
(lp1327
(dp1328
g8
S'import requests\n\ndef url_ok(url):\n    r = requests.head(url)\n    return (r.status_code == 200)'
p1329
sg10
I01
sasg11
I5
sg12
I15743618
sg13
I2
sasg24
VChecking if a website is up via Python
p1330
ssI2052390
(dp1331
g2
(lp1332
(dp1333
g5
(lp1334
(dp1335
g8
S"raise ValueError('A very specific bad thing happened')"
p1336
sg10
I01
sa(dp1337
g8
S"raise Exception('I know Python!')"
p1338
sg10
I01
sa(dp1339
g8
S'demo_bad_catch()'
p1340
sg10
I01
sa(dp1341
g8
S'demo_no_catch()'
p1342
sg10
I01
sa(dp1343
g8
S"raise ValueError('A very specific bad thing happened')"
p1344
sg10
I01
sa(dp1345
g8
S"raise ValueError('A very specific bad thing happened', 'foo', 'bar', 'baz')"
p1346
sg10
I01
sa(dp1347
g8
S'try:\n    some_code_that_may_raise_our_value_error()\nexcept ValueError as err:\n    print(err.args)'
p1348
sg10
I01
sa(dp1349
g8
S"('message', 'foo', 'bar', 'baz')"
p1350
sg10
I01
sa(dp1351
g8
S'try:\n    do_something_in_app_that_breaks_easily()\nexcept AppError as error:\n    logger.error(error)\n    raise'
p1352
sg10
I01
sa(dp1353
g8
S'raise AppError, error, sys.exc_info()[2]\nraise sys.exc_info()[0], sys.exc_info()[1], sys.exc_info()[2]'
p1354
sg10
I01
sa(dp1355
g8
S'raise error.with_traceback(sys.exc_info()[2])'
p1356
sg10
I01
sa(dp1357
g8
V    raise RuntimeError('specific message') from error\u000a
p1358
sg10
I00
sa(dp1359
g8
S"raise ValueError, 'message'"
p1360
sg10
I01
sa(dp1361
g8
S"raise 'message'"
p1362
sg10
I01
sa(dp1363
g8
S'def api_func(foo):\n    "foo should be either \'baz\' or \'bar\'. returns something very useful."\n    if (foo not in _ALLOWED_ARGS):\n        raise ValueError(\'{foo} wrong, use "baz" or "bar"\'.format(foo=repr(foo)))'
p1364
sg10
I01
sa(dp1365
g8
S'class MyAppLookupError(LookupError):\n    "raise this when there\'s a lookup error for my app"'
p1366
sg10
I01
sa(dp1367
g8
S"if ((important_key not in resource_dict) and (not ok_to_be_missing)):\n    raise MyAppLookupError('resource is missing, and that is not ok.')"
p1368
sg10
I01
sasg11
I829
sg12
I24065533
sg13
I0
sa(dp1369
g5
(lp1370
(dp1371
g8
S"raise Exception('I know python!')"
p1372
sg10
I01
sasg11
I568
sg12
I2052396
sg13
I1
sa(dp1373
g5
(lp1374
(dp1375
g8
Vif 0 < distance <= RADIUS:\u000a    #Do something.\u000aelif RADIUS < distance:\u000a    #Do something.\u000aelse:\u000a    raise AssertionError("Unexpected value of 'distance'!", distance)\u000a
p1376
sg10
I00
sasg11
I15
sg12
I30317038
sg13
I2
sasg24
VManually raising (throwing) an exception in Python
p1377
ssI2331943
(dp1378
g2
(lp1379
(dp1380
g5
(lp1381
(dp1382
g8
S'try:\n    import json\nexcept ImportError:\n    import simplejson as json'
p1383
sg10
I01
sasg11
I23
sg12
I2331958
sg13
I0
sa(dp1384
g5
(lp1385
(dp1386
g8
S"import urllib2\nimport json\nu = urllib2.urlopen('http://www.reddit.com/.json')\nprint json.load(u)\nu.close()"
p1387
sg10
I01
sasg11
I13
sg12
I2331967
sg13
I1
sa(dp1388
g5
(lp1389
sg11
I0
sg12
I2331962
sg13
I2
sasg24
VHow to decode JSON with Python
p1390
ssI273192
(dp1391
g2
(lp1392
(dp1393
g5
(lp1394
(dp1395
g8
S'if (not os.path.exists(directory)):\n    os.makedirs(directory)'
p1396
sg10
I01
sasg11
I2100
sg12
I273227
sg13
I0
sa(dp1397
g5
(lp1398
(dp1399
g8
S'import os\nimport errno\n\ndef make_sure_path_exists(path):\n    try:\n        os.makedirs(path)\n    except OSError as exception:\n        if (exception.errno != errno.EEXIST):\n            raise'
p1400
sg10
I01
sasg11
I437
sg12
I5032238
sg13
I1
sa(dp1401
g5
(lp1402
(dp1403
g8
S'try:\n    os.makedirs(path)\nexcept OSError:\n    if (not os.path.isdir(path)):\n        raise'
p1404
sg10
I01
sa(dp1405
g8
S'import distutils.dir_util\ndistutils.dir_util.mkpath(path)'
p1406
sg10
I01
sa(dp1407
g8
S'os.makedirs(path, exist_ok=True)'
p1408
sg10
I01
sasg11
I342
sg12
I14364249
sg13
I2
sasg24
VHow to check if a directory exists and create it if necessary?
p1409
ssI4020539
(dp1410
g2
(lp1411
(dp1412
g5
(lp1413
(dp1414
g8
S"myString = 'spam\\\\neggs'\ndecoded_string = bytes(myString, 'utf-8').decode('unicode_escape')\ndecoded_string = myString.decode('string_escape')\nprint(decoded_string)"
p1415
sg10
I01
sasg11
I80
sg12
I4020824
sg13
I0
sa(dp1416
g5
(lp1417
(dp1418
g8
S"s = 'na\\xc3\\xafve \\\\t test'\nprint(s.encode('utf-8').decode('unicode_escape'))"
p1419
sg10
I01
sa(dp1420
g8
S"import codecs\nprint(codecs.decode(s, 'unicode_escape'))"
p1421
sg10
I01
sa(dp1422
g8
S"print(s.encode('latin-1').decode('unicode_escape'))"
p1423
sg10
I01
sa(dp1424
g8
S"print('Ern\\xc5\\x91 \\\\t Rubik'.encode('latin-1').decode('unicode_escape'))"
p1425
sg10
I01
sa(dp1426
g8
S'import re\nimport codecs\nESCAPE_SEQUENCE_RE = re.compile(\'\\n    ( \\\\\\\\U........      \\n    | \\\\\\\\u....          \\n    | \\\\\\\\x..            \\n    | \\\\\\\\[0-7]{1,3}     \\n    | \\\\\\\\N\\\\{[^}]+\\\\}     \\n    | \\\\\\\\[\\\\\\\\\\\'"abfnrtv]  \\n    )\', (re.UNICODE | re.VERBOSE))\n\ndef decode_escapes(s):\n\n    def decode_match(match):\n        return codecs.decode(match.group(0), \'unicode-escape\')\n    return ESCAPE_SEQUENCE_RE.sub(decode_match, s)'
p1427
sg10
I01
sa(dp1428
g8
S"print(decode_escapes('Ern\\xc5\\x91 \\\\t Rubik'))"
p1429
sg10
I01
sasg11
I53
sg12
I24519338
sg13
I1
sa(dp1430
g5
(lp1431
(dp1432
g8
S"import codecs\nmyString = 'spam\\\\neggs'\nprint(codecs.escape_decode(bytes(myString, 'utf-8'))[0].decode('utf-8'))\nmyString = 'na\\xc3\\xafve \\\\t test'\nprint(codecs.escape_decode(bytes(myString, 'utf-8'))[0].decode('utf-8'))"
p1433
sg10
I01
sasg11
I6
sg12
I37059682
sg13
I2
sasg24
VProcess escape sequences in a string in Python
p1434
ssI21129020
(dp1435
g2
(lp1436
(dp1437
g5
(lp1438
(dp1439
g8
Vas3:/usr/local/lib/python2.7/site-packages# cat sitecustomize.py\u000a# encoding=utf8  \u000aimport sys  \u000a\u000areload(sys)  \u000asys.setdefaultencoding('utf8')\u000a
p1440
sg10
I00
sa(dp1441
g8
S'import sys\nreload(sys)\nsys.getdefaultencoding()'
p1442
sg10
I01
sasg11
I282
sg12
I21190382
sg13
I0
sa(dp1443
g5
(lp1444
(dp1445
g8
S"my_u = u'my \\xfcnic\\xf4d\\xe9 str\\u012fng'\ntype(my_u)"
p1446
sg10
I01
sa(dp1447
g8
S"unicode('\\xe2\\x82\\xac')\nu'The currency is: {}'.format('\\xe2\\x82\\xac')\n(u'The currency is: %s' % '\\xe2\\x82\\xac')\n(u'The currency is: ' + '\\xe2\\x82\\xac')"
p1448
sg10
I01
sa(dp1449
g8
S"u'Z\\xfcrich'"
p1450
sg10
I01
sa(dp1451
g8
V# encoding: utf-8\u000a
p1452
sg10
I00
sa(dp1453
g8
S"with io.open('my_utf8_file.txt', 'r', encoding='utf-8') as my_file:\n    my_unicode_string = my_file.read()"
p1454
sg10
I01
sa(dp1455
g8
S"charset = ('utf8',)\nuse_unicode = True"
p1456
sg10
I01
sa(dp1457
g8
S'psycopg2.extensions.register_type(psycopg2.extensions.UNICODE)\npsycopg2.extensions.register_type(psycopg2.extensions.UNICODEARRAY)'
p1458
sg10
I01
sasg11
I142
sg12
I35444608
sg13
I1
sa(dp1459
g5
(lp1460
(dp1461
g8
S"source = unicode(source, 'utf-8')"
p1462
sg10
I01
sasg11
I85
sg12
I21129492
sg13
I2
sasg24
VHow to fix: "UnicodeDecodeError: 'ascii' codec can't decode byte"
p1463
ssI1854
(dp1464
g2
(lp1465
(dp1466
g5
(lp1467
(dp1468
g8
S'import os\nprint os.name\nimport platform\nplatform.system()\nplatform.release()'
p1469
sg10
I01
sasg11
I391
sg12
I1857
sg13
I0
sa(dp1470
g5
(lp1471
(dp1472
g8
S'import os\nos.name\nimport platform\nplatform.system()\nplatform.release()'
p1473
sg10
I01
sa(dp1474
g8
S'import os\nos.name\nimport platform\nplatform.system()\nplatform.release()'
p1475
sg10
I01
sasg11
I122
sg12
I1871
sg13
I1
sa(dp1476
g5
(lp1477
(dp1478
g8
S'import os\nos.name\nimport platform\nplatform.system()\nplatform.release()'
p1479
sg10
I01
sasg11
I95
sg12
I1879
sg13
I2
sasg24
VPython: What OS am I running on?
p1480
ssI613183
(dp1481
g2
(lp1482
(dp1483
g5
(lp1484
(dp1485
g8
S'import operator\nx = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0, }\nsorted_x = sorted(x.items(), key=operator.itemgetter(1))'
p1486
sg10
I01
sa(dp1487
g8
S'import operator\nx = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0, }\nsorted_x = sorted(x.items(), key=operator.itemgetter(0))'
p1488
sg10
I01
sasg11
I2329
sg12
I613218
sg13
I0
sa(dp1489
g5
(lp1490
(dp1491
g8
S'd = defaultdict(int)\nfor w in text.split():\n    d[w] += 1'
p1492
sg10
I01
sa(dp1493
g8
S'for w in sorted(d, key=d.get, reverse=True):\n    print w, d[w]'
p1494
sg10
I01
sasg11
I670
sg12
I3177911
sg13
I1
sa(dp1495
g5
(lp1496
sg11
I375
sg12
I2258273
sg13
I2
sasg24
VSort a Python dictionary by value
p1497
ssI3501382
(dp1498
g2
(lp1499
(dp1500
g5
(lp1501
(dp1502
g8
Visinstance( <var>, int )\u000a
p1503
sg10
I00
sa(dp1504
g8
Visinstance( <var>, ( int, long ) )\u000a
p1505
sg10
I00
sa(dp1506
g8
S'class Spam(int):\n    pass\nx = Spam(0)\n(type(x) == int)\nisinstance(x, int)'
p1507
sg10
I01
sa(dp1508
g8
Vtry:\u000a    x += 1\u000aexcept TypeError:\u000a    ...\u000a
p1509
sg10
I00
sasg11
I484
sg12
I3501408
sg13
I0
sa(dp1510
g5
(lp1511
(dp1512
g8
Vfor index in range(y): \u000a    # do something\u000a    if (index/x.).is_integer():\u000a        # do something special\u000a
p1513
sg10
I00
sa(dp1514
g8
S'float(5).is_integer()\nfloat(5.1).is_integer()\nfloat(5.0).is_integer()'
p1515
sg10
I01
sa(dp1516
g8
S'def is_int(val):\n    if (type(val) == int):\n        return True\n    elif val.is_integer():\n        return True\n    else:\n        return False'
p1517
sg10
I01
sasg11
I41
sg12
I9266979
sg13
I1
sa(dp1518
g5
(lp1519
(dp1520
g8
S'import numbers\nisinstance(3, numbers.Integral)'
p1521
sg10
I01
sasg11
I35
sg12
I3646519
sg13
I2
sasg24
VChecking whether a variable is an integer or not
p1522
ssI89228
(dp1523
g2
(lp1524
(dp1525
g5
(lp1526
(dp1527
g8
S"from subprocess import call\ncall(['ls', '-l'])"
p1528
sg10
I01
sasg11
I2242
sg12
I89243
sg13
I0
sa(dp1529
g5
(lp1530
(dp1531
g8
S"os.system('some_command < input_file | another_command > output_file')"
p1532
sg10
I01
sa(dp1533
g8
S"print subprocess.Popen('echo Hello World', shell=True, stdout=subprocess.PIPE).stdout.read()"
p1534
sg10
I01
sa(dp1535
g8
S"print os.popen('echo Hello World').read()"
p1536
sg10
I01
sa(dp1537
g8
S"return_code = subprocess.call('echo Hello World', shell=True)"
p1538
sg10
I01
sa(dp1539
g8
S"print subprocess.Popen(('echo %s ' % user_input), stdout=PIPE).stdout.read()"
p1540
sg10
I01
sasg11
I1912
sg12
I92395
sg13
I1
sa(dp1541
g5
(lp1542
(dp1543
g8
S"import subprocess\np = subprocess.Popen('ls', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\nfor line in p.stdout.readlines():\n    print line,\nretval = p.wait()"
p1544
sg10
I01
sasg11
I156
sg12
I95246
sg13
I2
sasg24
VCalling an external command in Python
p1545
ssI493386
(dp1546
g2
(lp1547
(dp1548
g5
(lp1549
(dp1550
g8
S"import sys\nsys.stdout.write('.')"
p1551
sg10
I01
sa(dp1552
g8
S'sys.stdout.flush()'
p1553
sg10
I01
sa(dp1554
g8
S'from __future__ import print_function'
p1555
sg10
I01
sa(dp1556
g8
S"print('.', end='')"
p1557
sg10
I01
sa(dp1558
g8
S"print('.', end='', flush=True)"
p1559
sg10
I01
sasg11
I1156
sg12
I493399
sg13
I0
sa(dp1560
g5
(lp1561
(dp1562
g8
S'for i in range(10):\n    print i,\nelse:\n    print'
p1563
sg10
I01
sasg11
I169
sg12
I11685717
sg13
I1
sa(dp1564
g5
(lp1565
(dp1566
g8
S"strings = ['one', 'two', 'three']\nfor i in xrange(3):\n    print ('Item %d: %s' % (i, strings[i]))"
p1567
sg10
I01
sa(dp1568
g8
S"print ('.' * 10)"
p1569
sg10
I01
sasg11
I149
sg12
I493500
sg13
I2
sasg24
VHow to print in Python without newline or space?
p1570
ssI311627
(dp1571
g2
(lp1572
(dp1573
g5
(lp1574
(dp1575
g8
S'for date in mylist:\n    print str(date)'
p1576
sg10
I01
sa(dp1577
g8
Vimport datetime\u000amylist = []\u000atoday = datetime.date.today()\u000amylist.append(today)\u000aprint mylist[0] # print the date object, not the container ;-)\u000a2008-11-22\u000a\u000a# It's better to always use str() because :\u000a\u000aprint "This is a new day : ", mylist[0] # will work\u000aThis is a new day : 2008-11-22\u000a\u000aprint "This is a new day : " + mylist[0] # will crash\u000acannot concatenate 'str' and 'datetime.date' objects\u000a\u000aprint "This is a new day : " + str(mylist[0]) \u000aThis is a new day : 2008-11-22\u000a
p1578
sg10
I00
sa(dp1579
g8
S"print today.strftime('We are the %d, %b %Y')\n'We are the 22, Nov 2008'"
p1580
sg10
I01
sa(dp1581
g8
S"print 'We are the {:%d, %b %Y}'.format(today)\n'We are the 22, Nov 2008'"
p1582
sg10
I01
sasg11
I508
sg12
I311655
sg13
I0
sa(dp1583
g5
(lp1584
(dp1585
g8
S"import datetime\nprint datetime.datetime.now().strftime('%Y-%m-%d %H:%M')"
p1586
sg10
I01
sa(dp1587
g8
S"import time\nprint time.strftime('%Y-%m-%d %H:%M')"
p1588
sg10
I01
sasg11
I130
sg12
I14320620
sg13
I1
sa(dp1589
g5
(lp1590
(dp1591
g8
V    %a  Locale\u2019s abbreviated weekday name.\u000a    %A  Locale\u2019s full weekday name.      \u000a    %b  Locale\u2019s abbreviated month name.     \u000a    %B  Locale\u2019s full month name.\u000a    %c  Locale\u2019s appropriate date and time representation.   \u000a    %d  Day of the month as a decimal number [01,31].    \u000a    %f  Microsecond as a decimal number [0,999999], zero-padded on the left\u000a    %H  Hour (24-hour clock) as a decimal number [00,23].    \u000a    %I  Hour (12-hour clock) as a decimal number [01,12].    \u000a    %j  Day of the year as a decimal number [001,366].   \u000a    %m  Month as a decimal number [01,12].   \u000a    %M  Minute as a decimal number [00,59].      \u000a    %p  Locale\u2019s equivalent of either AM or PM.\u000a    %S  Second as a decimal number [00,61].\u000a    %U  Week number of the year (Sunday as the first day of the week)\u000a    %w  Weekday as a decimal number [0(Sunday),6].   \u000a    %W  Week number of the year (Monday as the first day of the week)\u000a    %x  Locale\u2019s appropriate date representation.    \u000a    %X  Locale\u2019s appropriate time representation.    \u000a    %y  Year without century as a decimal number [00,99].    \u000a    %Y  Year with century as a decimal number.   \u000a    %z  UTC offset in the form +HHMM or -HHMM.\u000a    %Z  Time zone name (empty string if the object is naive).    \u000a    %%  A literal '%' character.\u000a
p1592
sg10
I00
sa(dp1593
g8
S"import time\nimport datetime\nprint ('Time in seconds since the epoch: %s' % time.time())\nprint 'Current date and time: ', datetime.datetime.now()\nprint 'Or like this: ', datetime.datetime.now().strftime('%y-%m-%d-%H-%M')\nprint 'Current year: ', datetime.date.today().strftime('%Y')\nprint 'Month of year: ', datetime.date.today().strftime('%B')\nprint 'Week number of the year: ', datetime.date.today().strftime('%W')\nprint 'Weekday of the week: ', datetime.date.today().strftime('%w')\nprint 'Day of year: ', datetime.date.today().strftime('%j')\nprint 'Day of the month : ', datetime.date.today().strftime('%d')\nprint 'Day of week: ', datetime.date.today().strftime('%A')"
p1594
sg10
I01
sa(dp1595
g8
V    Time in seconds since the epoch:    1349271346.46\u000a    Current date and time:              2012-10-03 15:35:46.461491\u000a    Or like this:                       12-10-03-15-35\u000a    Current year:                       2012\u000a    Month of year:                      October\u000a    Week number of the year:            40\u000a    Weekday of the week:                3\u000a    Day of year:                        277\u000a    Day of the month :                  03\u000a    Day of week:                        Wednesday\u000a
p1596
sg10
I00
sasg11
I62
sg12
I18944849
sg13
I2
sasg24
VHow to print date in a regular format in Python?
p1597
ssI1024847
(dp1598
g2
(lp1599
(dp1600
g5
(lp1601
(dp1602
g8
S"d = {'key': 'value', }\nprint d\nd['mynewkey'] = 'mynewvalue'\nprint d"
p1603
sg10
I01
sasg11
I1633
sg12
I1024851
sg13
I0
sa(dp1604
g5
(lp1605
(dp1606
g8
S'x = {1: 2, }\nprint x\nx.update({3: 4, })\nprint x'
p1607
sg10
I01
sasg11
I667
sg12
I1165836
sg13
I1
sa(dp1608
g5
(lp1609
(dp1610
g8
S"data = {}\ndata = dict()\ndata = {'a': 1, 'b': 2, 'c': 3, }\ndata = dict(a=1, b=2, c=3)\ndata['a'] = 1\ndata.update({'a': 1, })\ndata.update(dict(a=1))\ndata.update(a=1)\ndata.update(data2)\ndel data[key]\ndata.pop(key)\ndata.clear()"
p1611
sg10
I01
sasg11
I272
sg12
I8381589
sg13
I2
sasg24
VAdd key to a dictionary in Python?
p1612
ssI120656
(dp1613
g2
(lp1614
(dp1615
g5
(lp1616
(dp1617
g8
S"import os\nfor (dirname, dirnames, filenames) in os.walk('.'):\n    for subdirname in dirnames:\n        print(os.path.join(dirname, subdirname))\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n    if ('.git' in dirnames):\n        dirnames.remove('.git')"
p1618
sg10
I01
sasg11
I505
sg12
I120701
sg13
I0
sa(dp1619
g5
(lp1620
(dp1621
g8
S'os.listdir(path)'
p1622
sg10
I01
sasg11
I373
sg12
I120676
sg13
I1
sa(dp1623
g5
(lp1624
(dp1625
g8
S"import os\nfor filename in os.listdir('C:\\\\temp'):\n    print filename"
p1626
sg10
I01
sasg11
I74
sg12
I120692
sg13
I2
sasg24
VDirectory listing in Python
p1627
ssI2150739
(dp1628
g2
(lp1629
(dp1630
g5
(lp1631
(dp1632
g8
S'import datetime\ndatetime.datetime.now().isoformat()'
p1633
sg10
I01
sa(dp1634
g8
S'import datetime\ndatetime.datetime.utcnow().isoformat()'
p1635
sg10
I01
sasg11
I86
sg12
I28147286
sg13
I0
sa(dp1636
g5
(lp1637
(dp1638
g8
S"from datetime import tzinfo, timedelta, datetime\n\n\nclass TZ(tzinfo):\n\n    def utcoffset(self, dt):\n        return timedelta(minutes=(-399))\ndatetime(2002, 12, 25, tzinfo=TZ()).isoformat(' ')"
p1639
sg10
I01
sasg11
I37
sg12
I15142736
sg13
I1
sa(dp1640
g5
(lp1641
(dp1642
g8
V2010-12-16 17:22:15\u000a20101216T172215\u000a
p1643
sg10
I00
sa(dp1644
g8
S"from time import strftime\nstrftime('%Y-%m-%d %H:%M:%S')"
p1645
sg10
I01
sa(dp1646
g8
S"from datetime import datetime\ndatetime.strptime('2010-06-04 21:08:12', '%Y-%m-%d %H:%M:%S')"
p1647
sg10
I01
sa(dp1648
g8
S"from mx.DateTime.ISO import ParseDateTimeUTC\nfrom datetime import datetime\nx = ParseDateTimeUTC('2010-06-04 21:08:12')\ndatetime.fromtimestamp(x)"
p1649
sg10
I01
sasg11
I29
sg12
I4462893
sg13
I2
sasg24
VISO Time (ISO 8601) in Python?
p1650
ssI1186789
(dp1651
g2
(lp1652
(dp1653
g5
(lp1654
(dp1655
g8
S"def some_func():\n    print 'in test 1, unproductive'\nif (__name__ == '__main__'):\n    some_func()"
p1656
sg10
I01
sa(dp1657
g8
S"import test1\n\ndef service_func():\n    print 'service func'\nif (__name__ == '__main__'):\n    service_func()\n    test1.some_func()"
p1658
sg10
I01
sasg11
I150
sg12
I1186847
sg13
I0
sa(dp1659
g5
(lp1660
(dp1661
g8
S"execfile('test2.py')"
p1662
sg10
I01
sasg11
I83
sg12
I1186818
sg13
I1
sa(dp1663
g5
(lp1664
(dp1665
g8
S"print 'test1.py'"
p1666
sg10
I01
sa(dp1667
g8
S"import subprocess\nsubprocess.call('test1.py', shell=True)"
p1668
sg10
I01
sasg11
I36
sg12
I11230471
sg13
I2
sasg24
VWhat is the best way to call a Python script from another Python script?
p1669
ssI1747817
(dp1670
g2
(lp1671
(dp1672
g5
(lp1673
(dp1674
g8
S'd = dict(((key, value) for (key, value) in iterable))'
p1675
sg10
I01
sa(dp1676
g8
S'd = {key: value for (key, value) in iterable}'
p1677
sg10
I01
sa(dp1678
g8
S'd = {value: foo(value) for value in sequence if bar(value)}\n\ndef key_value_gen(k):\n    yield chr((k + 65))\n    yield chr((((k + 13) % 26) + 65))\nd = dict(map(key_value_gen, range(26)))'
p1679
sg10
I01
sasg11
I1250
sg12
I1747827
sg13
I0
sa(dp1680
g5
(lp1681
(dp1682
g8
S'd = {k: v for (k, v) in iterable}'
p1683
sg10
I01
sasg11
I143
sg12
I1747888
sg13
I1
sa(dp1684
g5
(lp1685
(dp1686
g8
S'ts = [(1, 2), (3, 4), (5, 6)]\ndict(ts)\ngen = ((i, (i + 1)) for i in range(1, 6, 2))\ngen\ndict(gen)'
p1687
sg10
I01
sasg11
I21
sg12
I16863042
sg13
I2
sasg24
VCreate a dictionary with list comprehension in Python
p1688
ssI2793324
(dp1689
g2
(lp1690
(dp1691
g5
(lp1692
(dp1693
g8
S"a = ['a', 'b', 'c', 'd']\na.remove('b')\nprint a"
p1694
sg10
I01
sa(dp1695
g8
S'a = [1, 2, 3, 4, 2, 3, 4, 2, 7, 2]\na = [x for x in a if (x != 2)]\nprint a'
p1696
sg10
I01
sasg11
I589
sg12
I2793341
sg13
I0
sa(dp1697
g5
(lp1698
(dp1699
g8
S'if (c in a):\n    a.remove(c)'
p1700
sg10
I01
sa(dp1701
g8
S'try:\n    a.remove(c)\nexcept ValueError:\n    pass'
p1702
sg10
I01
sasg11
I85
sg12
I2793356
sg13
I1
sa(dp1703
g5
(lp1704
(dp1705
g8
S'a = [1, 2, 3, 4]\nif (6 in a):\n    a.remove(6)'
p1706
sg10
I01
sa(dp1707
g8
S'try:\n    a.remove(6)\nexcept:\n    pass'
p1708
sg10
I01
sasg11
I40
sg12
I2793345
sg13
I2
sasg24
VIs there a simple way to delete a list element by value in python?
p1709
ssI123198
(dp1710
g2
(lp1711
(dp1712
g5
(lp1713
(dp1714
g8
S'from shutil import copyfile\ncopyfile(src, dst)'
p1715
sg10
I01
sasg11
I992
sg12
I123212
sg13
I0
sa(dp1716
g5
(lp1717
(dp1718
g8
S"import shutil\nshutil.copy2('/dir/file.ext', '/new/dir/newname.ext')"
p1719
sg10
I01
sa(dp1720
g8
S"shutil.copy2('/dir/file.ext', '/new/dir')"
p1721
sg10
I01
sasg11
I286
sg12
I123238
sg13
I1
sa(dp1722
g5
(lp1723
(dp1724
g8
V-------------------------------------------------------------------------\u000a| Function          |Copies Metadata|Copies Permissions|Can Specify Buffer|\u000a-------------------------------------------------------------------------\u000a| shutil.copy       |      No       |        Yes       |        No        |\u000a-------------------------------------------------------------------------\u000a| shutil.copyfile   |      No       |         No       |        No        |\u000a-------------------------------------------------------------------------\u000a| shutil.copy2      |     Yes       |        Yes       |        No        |\u000a-------------------------------------------------------------------------\u000a| shutil.copyfileobj|      No       |         No       |       Yes        |\u000a-------------------------------------------------------------------------\u000a
p1725
sg10
I00
sasg11
I140
sg12
I30359308
sg13
I2
sasg24
VHow do I copy a file in python?
p1726
ssI1602934
(dp1727
g2
(lp1728
(dp1729
g5
(lp1730
(dp1731
g8
S'd = dict()\nfor i in xrange(100):\n    key = (i % 10)\n    if (key in d):\n        d[key] += 1\n    else:\n        d[key] = 1'
p1732
sg10
I01
sa(dp1733
g8
S'd = dict()\nfor i in xrange(100):\n    key = (i % 10)\n    d[key] = (d.get(key, 0) + 1)'
p1734
sg10
I01
sa(dp1735
g8
S'from collections import defaultdict\nd = defaultdict((lambda : 0))\nfor i in xrange(100):\n    d[(i % 10)] += 1'
p1736
sg10
I01
sasg11
I1292
sg12
I1602964
sg13
I0
sa(dp1737
g5
(lp1738
(dp1739
g8
S"if ('key1' in dict):\n    print 'blah'\nelse:\n    print 'boo'"
p1740
sg10
I01
sasg11
I616
sg12
I1602944
sg13
I1
sa(dp1741
g5
(lp1742
(dp1743
g8
S"d = {'a': 1, 'b': 2, }\n('a' in d)\n('c' in d)"
p1744
sg10
I01
sasg11
I183
sg12
I1602990
sg13
I2
sasg24
VCheck if a given key already exists in a dictionary
p1745
ssI9573244
(dp1746
g2
(lp1747
(dp1748
g5
(lp1749
(dp1750
g8
S'if (not myString):\n    pass'
p1751
sg10
I01
sasg11
I772
sg12
I9573259
sg13
I0
sa(dp1752
g5
(lp1753
(dp1754
g8
S'if (not some_string):\n    pass'
p1755
sg10
I01
sa(dp1756
g8
S'if some_string:\n    pass'
p1757
sg10
I01
sasg11
I163
sg12
I9573283
sg13
I1
sa(dp1758
g5
(lp1759
(dp1760
g8
S'if (not my_string):\n    pass'
p1761
sg10
I01
sa(dp1762
g8
S"bool('')\nbool('   ')\nbool('   '.strip())"
p1763
sg10
I01
sasg11
I93
sg12
I9573278
sg13
I2
sasg24
VMost elegant way to check if the string is empty in Python?
p1764
ssI743806
(dp1765
g2
(lp1766
(dp1767
g5
(lp1768
(dp1769
g8
S'words = text.split()'
p1770
sg10
I01
sa(dp1771
g8
S"words = text.split(',')"
p1772
sg10
I01
sasg11
I205
sg12
I743807
sg13
I0
sa(dp1773
g5
(lp1774
(dp1775
g8
S'text.split()'
p1776
sg10
I01
sa(dp1777
g8
S'words.append(word)'
p1778
sg10
I01
sa(dp1779
g8
S'word.append(words)'
p1780
sg10
I01
sasg11
I186
sg12
I743823
sg13
I1
sa(dp1781
g5
(lp1782
(dp1783
g8
S"line = 'a sentence with a few words'\nline.split()"
p1784
sg10
I01
sasg11
I47
sg12
I743824
sg13
I2
sasg24
VSplit string into a list in Python
p1785
ssI518021
(dp1786
g2
(lp1787
(dp1788
g5
(lp1789
(dp1790
g8
S'my_list = [1, 2, 3, 4, 5]\nlen(my_list)'
p1791
sg10
I01
sa(dp1792
g8
S'my_tuple = (1, 2, 3, 4, 5)\nlen(my_tuple)'
p1793
sg10
I01
sa(dp1794
g8
S"my_string = 'hello world'\nlen(my_string)"
p1795
sg10
I01
sasg11
I734
sg12
I518038
sg13
I0
sa(dp1796
g5
(lp1797
(dp1798
g8
S"l = [1, 2, 3, 4]\ns = 'abcde'\nlen(l)\nlen(s)"
p1799
sg10
I01
sasg11
I32
sg12
I518061
sg13
I1
sa(dp1800
g5
(lp1801
sg11
I19
sg12
I518053
sg13
I2
sasg24
VGetting the length of an array in Python
p1802
ssI510348
(dp1803
g2
(lp1804
(dp1805
g5
(lp1806
(dp1807
g8
S'import time\ntime.sleep(5)'
p1808
sg10
I01
sa(dp1809
g8
S"import time\nwhile True:\n    print 'This prints once a minute.'\n    time.sleep(60)"
p1810
sg10
I01
sasg11
I1218
sg12
I510351
sg13
I0
sa(dp1811
g5
(lp1812
(dp1813
g8
S'from time import sleep\nsleep(0.1)'
p1814
sg10
I01
sasg11
I339
sg12
I64486
sg13
I1
sa(dp1815
g5
(lp1816
(dp1817
g8
S'import time\ntime.sleep(60)'
p1818
sg10
I01
sa(dp1819
g8
S'time.sleep(time.localtime(time.time())[5])'
p1820
sg10
I01
sa(dp1821
g8
S'import time\ntime.sleep(0.1)'
p1822
sg10
I01
sasg11
I45
sg12
I510356
sg13
I2
sasg24
VHow can I make a time delay in Python?
p1823
ssI82831
(dp1824
g2
(lp1825
(dp1826
g5
(lp1827
(dp1828
g8
S'import os.path\nos.path.isfile(fname)'
p1829
sg10
I01
sa(dp1830
g8
S"from pathlib import Path\nmy_file = Path('/path/to/file')\nif my_file.is_file():\n    pass"
p1831
sg10
I01
sasg11
I2437
sg12
I82852
sg13
I0
sa(dp1832
g5
(lp1833
(dp1834
g8
S'import os.path\nos.path.exists(file_path)'
p1835
sg10
I01
sasg11
I991
sg12
I82846
sg13
I1
sa(dp1836
g5
(lp1837
(dp1838
g8
S"print os.path.isfile('/etc/password.txt')\nprint os.path.isfile('/etc')\nprint os.path.isfile('/does/not/exist')\nprint os.path.exists('/etc/password.txt')\nprint os.path.exists('/etc')\nprint os.path.exists('/does/not/exist')"
p1839
sg10
I01
sasg11
I650
sg12
I84173
sg13
I2
sasg24
VHow do I check whether a file exists using Python?
p1840
ssI510357
(dp1841
g2
(lp1842
(dp1843
g5
(lp1844
(dp1845
g8
S"class _Getch:\n    'Gets a single character from standard input.  Does not echo to the\\nscreen.'\n\n    def __init__(self):\n        try:\n            self.impl = _GetchWindows()\n        except ImportError:\n            self.impl = _GetchUnix()\n\n    def __call__(self):\n        return self.impl()\n\n\nclass _GetchUnix:\n\n    def __init__(self):\n        import tty, sys\n\n    def __call__(self):\n        import sys, tty, termios\n        fd = sys.stdin.fileno()\n        old_settings = termios.tcgetattr(fd)\n        try:\n            tty.setraw(sys.stdin.fileno())\n            ch = sys.stdin.read(1)\n        finally:\n            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)\n        return ch\n\n\nclass _GetchWindows:\n\n    def __init__(self):\n        import msvcrt\n\n    def __call__(self):\n        import msvcrt\n        return msvcrt.getch()\ngetch = _Getch()"
p1846
sg10
I01
sasg11
I116
sg12
I510364
sg13
I0
sa(dp1847
g5
(lp1848
(dp1849
g8
S'sys.stdin.read(1)'
p1850
sg10
I01
sa(dp1851
g8
S"class _Getch:\n    'Gets a single character from standard input.  Does not echo to the screen.'\n\n    def __init__(self):\n        try:\n            self.impl = _GetchWindows()\n        except ImportError:\n            self.impl = _GetchUnix()\n\n    def __call__(self):\n        return self.impl()\n\n\nclass _GetchUnix:\n\n    def __init__(self):\n        import tty, sys\n\n    def __call__(self):\n        import sys, tty, termios\n        fd = sys.stdin.fileno()\n        old_settings = termios.tcgetattr(fd)\n        try:\n            tty.setraw(sys.stdin.fileno())\n            ch = sys.stdin.read(1)\n        finally:\n            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)\n        return ch\n\n\nclass _GetchWindows:\n\n    def __init__(self):\n        import msvcrt\n\n    def __call__(self):\n        import msvcrt\n        return msvcrt.getch()\ngetch = _Getch()"
p1852
sg10
I01
sasg11
I58
sg12
I510404
sg13
I1
sa(dp1853
g5
(lp1854
(dp1855
g8
S'def _find_getch():\n    try:\n        import termios\n    except ImportError:\n        import msvcrt\n        return msvcrt.getch\n    import sys, tty\n\n    def _getch():\n        fd = sys.stdin.fileno()\n        old_settings = termios.tcgetattr(fd)\n        try:\n            tty.setraw(fd)\n            ch = sys.stdin.read(1)\n        finally:\n            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)\n        return ch\n    return _getch\ngetch = _find_getch()'
p1856
sg10
I01
sasg11
I36
sg12
I21659588
sg13
I2
sasg24
VPython read a single character from the user
p1857
ssI1450393
(dp1858
g2
(lp1859
(dp1860
g5
(lp1861
(dp1862
g8
S'import fileinput\nfor line in fileinput.input():\n    pass'
p1863
sg10
I01
sasg11
I645
sg12
I1454400
sg13
I0
sa(dp1864
g5
(lp1865
sg11
I440
sg12
I1450398
sg13
I1
sa(dp1866
g5
(lp1867
(dp1868
g8
S'import sys\nfor line in sys.stdin:\n    print line'
p1869
sg10
I01
sasg11
I216
sg12
I3289051
sg13
I2
sasg24
VHow do you read from stdin in Python?
p1870
ssI15411107
(dp1871
g2
(lp1872
(dp1873
g5
(lp1874
(dp1875
g8
S"mydict.pop('key', None)"
p1876
sg10
I01
sasg11
I239
sg12
I15411146
sg13
I0
sa(dp1877
g5
(lp1878
(dp1879
g8
S'try:\n    del mydict[key]\nexcept KeyError:\n    pass'
p1880
sg10
I01
sasg11
I5
sg12
I15411148
sg13
I1
sa(dp1881
g5
(lp1882
(dp1883
g8
S'keys_to_remove = set(keys).intersection(set(mydict.keys()))\nfor key in keys_to_remove:\n    del mydict[key]'
p1884
sg10
I01
sa(dp1885
g8
S'keys_to_keep = (set(mydict.keys()) - set(keys))\nnew_dict = {k: v for (k, v) in mydict.iteritems() if (k in keys_to_keep)}'
p1886
sg10
I01
sa(dp1887
g8
S'keys_to_keep = (set(mydict.keys()) - set(keys))\nnew_dict = {k: mydict[k] for k in keys_to_keep}'
p1888
sg10
I01
sasg11
I4
sg12
I15411416
sg13
I2
sasg24
VDelete a dictionary item if the key exists
p1889
ssI466345
(dp1890
g2
(lp1891
(dp1892
g5
(lp1893
(dp1894
g8
S"from datetime import datetime\ndate_object = datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')"
p1895
sg10
I01
sasg11
I1420
sg12
I466376
sg13
I0
sa(dp1896
g5
(lp1897
sg11
I435
sg12
I466366
sg13
I1
sa(dp1898
g5
(lp1899
(dp1900
g8
S"from dateutil import parser\ndt = parser.parse('Aug 28 1999 12:00AM')"
p1901
sg10
I01
sa(dp1902
g8
Vpip install python-dateutil\u000a
p1903
sg10
I00
sasg11
I413
sg12
I470303
sg13
I2
sasg24
VConverting string into datetime
p1904
ssI8177079
(dp1905
g2
(lp1906
(dp1907
g5
(lp1908
(dp1909
g8
S'list2.extend(list1)'
p1910
sg10
I01
sa(dp1911
g8
S'list2.append(list1)'
p1912
sg10
I01
sa(dp1913
g8
S'a = range(5)\nb = range(3)\nc = range(2)\nb.append(a)\nb\nc.extend(a)\nc'
p1914
sg10
I01
sa(dp1915
g8
S'for line in mylog:\n    list1.append(line)'
p1916
sg10
I01
sa(dp1917
g8
S'list1.extend(mylog)'
p1918
sg10
I01
sasg11
I160
sg12
I8177090
sg13
I0
sa(dp1919
g5
(lp1920
(dp1921
g8
S"import itertools\np = ['a', 'b', 'c']\nq = ['d', 'e', 'f']\nr = ['g', 'h', 'i']\nfor x in itertools.chain(p, q, r):\n    pass"
p1922
sg10
I01
sasg11
I5
sg12
I8177108
sg13
I1
sa(dp1923
g5
(lp1924
(dp1925
g8
Vfor logs in mydir:\u000a\u000a    for line in mylog:\u000a        #...if the conditions are met\u000a        list1.append(line)\u000a\u000a    if any(True for line in list1 if "string" in line):\u000a        list2.extend(list1)\u000a    del list1\u000a\u000a    ....\u000a
p1926
sg10
I00
sasg11
I2
sg12
I8177126
sg13
I2
sasg24
VPython: take the content of a list and append it to another list
p1927
ssI455612
(dp1928
g2
(lp1929
(dp1930
g5
(lp1931
(dp1932
g8
S"(125650429603636838 / (2 ** 53))\n(234042163 / (2 ** 24))\na = 13.946\nprint(a)\nprint(('%.2f' % a))\nround(a, 2)\nprint(('%.2f' % round(a, 2)))\nprint('{0:.2f}'.format(a))\nprint('{0:.2f}'.format(round(a, 2)))\nprint('{0:.15f}'.format(round(a, 2)))"
p1933
sg10
I01
sasg11
I705
sg12
I455634
sg13
I0
sa(dp1934
g5
(lp1935
(dp1936
g8
S"'{0:.2f}'.format(13.95)"
p1937
sg10
I01
sa(dp1938
g8
S"float('{0:.2f}'.format(13.95))"
p1939
sg10
I01
sa(dp1940
g8
S"x = 13.95\nx\ng = float('{0:.2f}'.format(x))\ng\n(x == g)\nh = round(x, 2)\nh\n(x == h)"
p1941
sg10
I01
sasg11
I256
sg12
I6539677
sg13
I1
sa(dp1942
g5
(lp1943
(dp1944
g8
S"('%.2f' % 3.14159)\n('%.2f' % 13.9499999)"
p1945
sg10
I01
sasg11
I70
sg12
I455678
sg13
I2
sasg24
VLimiting floats to two decimal points
p1946
ssI73663
(dp1947
g2
(lp1948
(dp1949
g5
(lp1950
(dp1951
g8
S'import sys\nsys.exit()'
p1952
sg10
I01
sasg11
I663
sg12
I73673
sg13
I0
sa(dp1953
g5
(lp1954
(dp1955
g8
S'if (this == that):\n    quit()'
p1956
sg10
I01
sasg11
I93
sg12
I14836329
sg13
I1
sa(dp1957
g5
(lp1958
(dp1959
g8
S'raise SystemExit'
p1960
sg10
I01
sasg11
I73
sg12
I73680
sg13
I2
sasg24
VTerminating a Python script
p1961
ssI1476
(dp1962
g2
(lp1963
(dp1964
g5
(lp1965
(dp1966
g8
S'47'
p1967
sg10
I01
sa(dp1968
g8
S'bin(173)'
p1969
sg10
I01
sasg11
I220
sg12
I13107
sg13
I0
sa(dp1970
g5
(lp1971
(dp1972
g8
S"print int('01010101111', 2)\nprint int('11111111', 2)"
p1973
sg10
I01
sasg11
I61
sg12
I1484
sg13
I1
sa(dp1974
g5
(lp1975
(dp1976
g8
S'170\n21'
p1977
sg10
I01
sa(dp1978
g8
Vinteger      ::=  decinteger | bininteger | octinteger | hexinteger\u000adecinteger   ::=  nonzerodigit (["_"] digit)* | "0"+ (["_"] "0")*\u000abininteger   ::=  "0" ("b" | "B") (["_"] bindigit)+\u000aoctinteger   ::=  "0" ("o" | "O") (["_"] octdigit)+\u000ahexinteger   ::=  "0" ("x" | "X") (["_"] hexdigit)+\u000anonzerodigit ::=  "1"..."9"\u000adigit        ::=  "0"..."9"\u000abindigit     ::=  "0" | "1"\u000aoctdigit     ::=  "0"..."7"\u000ahexdigit     ::=  digit | "a"..."f" | "A"..."F"\u000a
p1979
sg10
I00
sa(dp1980
g8
V7     2147483647                        0o177    0b100110111\u000a3     79228162514264337593543950336     0o377    0xdeadbeef\u000a      100_000_000_000                   0b_1110_0101\u000a
p1981
sg10
I00
sa(dp1982
g8
S"int('010101', 2)"
p1983
sg10
I01
sa(dp1984
g8
S"int('0b0010101010', 2)"
p1985
sg10
I01
sa(dp1986
g8
S"int('10101', 0)\nint('0b10101', 0)"
p1987
sg10
I01
sa(dp1988
g8
S'bin(21)'
p1989
sg10
I01
sa(dp1990
g8
S"bin(int('010101', 2))"
p1991
sg10
I01
sa(dp1992
g8
S"format(int('010101', 2), '{fill}{width}b'.format(width=10, fill=0))\nformat(int('010101', 2), '010b')"
p1993
sg10
I01
sasg11
I5
sg12
I37226387
sg13
I2
sasg24
VHow do you express binary literals in Python?
p1994
ssI761804
(dp1995
g2
(lp1996
(dp1997
g5
(lp1998
(dp1999
g8
S"' Hello '.strip()\n' Hello'.strip()\n'Bob has a cat'.strip()\n'          Hello        '.strip()"
p2000
sg10
I01
sa(dp2001
g8
S"strip_one_space('   Hello ')"
p2002
sg10
I01
sa(dp2003
g8
S"'  Hello\\n'.strip(' ')"
p2004
sg10
I01
sasg11
I949
sg12
I761825
sg13
I0
sa(dp2005
g5
(lp2006
(dp2007
g8
S'myString.strip()'
p2008
sg10
I01
sasg11
I165
sg12
I6039813
sg13
I1
sa(dp2009
g5
(lp2010
(dp2011
g8
S"title = title.strip(',.-')"
p2012
sg10
I01
sasg11
I68
sg12
I10192113
sg13
I2
sasg24
VTrimming a string in Python
p2013
ssI4476373
(dp2014
g2
(lp2015
(dp2016
g5
(lp2017
(dp2018
g8
S"import requests\nurl = 'https://...'\npayload = {'key1': 'value1', 'key2': 'value2', }\nr = requests.get(url)\nr = requests.get(url, params=payload)\nr = requests.post(url, data=payload)\nimport json\nr = requests.post(url, data=json.dumps(payload))\nr.text\nr.status_code"
p2019
sg10
I01
sa(dp2020
g8
S"from httplib2 import Http\nfrom urllib import urlencode\nh = Http()\ndata = dict(name='Joe', comment='A test comment')\n(resp, content) = h.request('http://bitworking.org/news/223/Meet-Ares', 'POST', urlencode(data))\nresp"
p2021
sg10
I01
sasg11
I67
sg12
I4476389
sg13
I0
sa(dp2022
g5
(lp2023
(dp2024
g8
S"import requests\nget_response = requests.get(url='http://google.com')\npost_data = {'username': 'joeb', 'password': 'foobar', }\npost_response = requests.post(url='http://httpbin.org/post', data=post_data)"
p2025
sg10
I01
sa(dp2026
g8
S"import json\npost_response = requests.post(url='http://httpbin.org/post', data=json.dumps(post_data))\npost_response = requests.post(url='http://httpbin.org/post', json=post_data)"
p2027
sg10
I01
sasg11
I42
sg12
I10022497
sg13
I1
sa(dp2028
g5
(lp2029
(dp2030
g8
S"def URLRequest(url, params, method='GET'):\n    if (method == 'POST'):\n        return urllib2.Request(url, data=urllib.urlencode(params))\n    else:\n        return urllib2.Request(((url + '?') + urllib.urlencode(params)))"
p2031
sg10
I01
sasg11
I30
sg12
I4476392
sg13
I2
sasg24
VSimple URL GET/POST function in Python
p2032
ssI247770
(dp2033
g2
(lp2034
(dp2035
g5
(lp2036
(dp2037
g8
S'import a_module\nprint a_module.__file__'
p2038
sg10
I01
sa(dp2039
g8
S'import os\npath = os.path.dirname(amodule.__file__)'
p2040
sg10
I01
sa(dp2041
g8
S'path = os.path.abspath(amodule.__file__)'
p2042
sg10
I01
sasg11
I442
sg12
I248862
sg13
I0
sa(dp2043
g5
(lp2044
(dp2045
g8
S'import os\nimport inspect\ninspect.getfile(os)\ninspect.getfile(inspect)\nos.path.dirname(inspect.getfile(inspect))'
p2046
sg10
I01
sasg11
I136
sg12
I12154601
sg13
I1
sa(dp2047
g5
(lp2048
(dp2049
g8
S'import bar\nprint bar.__file__'
p2050
sg10
I01
sa(dp2051
g8
S'import os\nprint os.getcwd()\nprint __file__'
p2052
sg10
I01
sa(dp2053
g8
V/path1        # "import bar" causes the line "print os.getcwd()" to run\u000a/path2/bar.py # then "print __file__" runs\u000a/path2/bar.py # then the import statement finishes and "print bar.__file__" runs\u000a
p2054
sg10
I00
sa(dp2055
g8
V/path2                              # "print os.getcwd()" still works fine\u000aTraceback (most recent call last):  # but __file__ doesn't exist if bar.py is running as main\u000a  File "/path2/bar.py", line 3, in <module>\u000a    print __file__\u000aNameError: name '__file__' is not defined \u000a
p2056
sg10
I00
sasg11
I49
sg12
I6416114
sg13
I2
sasg24
VRetrieving python module path
p2057
ssI4906977
(dp2058
g2
(lp2059
(dp2060
g5
(lp2061
(dp2062
g8
S"import os\nprint os.environ['HOME']"
p2063
sg10
I01
sa(dp2064
g8
S'os.environ'
p2065
sg10
I01
sa(dp2066
g8
S"print os.environ.get('KEY_THAT_MIGHT_EXIST')\nprint os.getenv('KEY_THAT_MIGHT_EXIST', default_value)"
p2067
sg10
I01
sa(dp2068
g8
S'import sys\nprint sys.prefix'
p2069
sg10
I01
sasg11
I1010
sg12
I4907053
sg13
I0
sa(dp2070
g5
(lp2071
(dp2072
g8
S"('HOME' in os.environ)"
p2073
sg10
I01
sa(dp2074
g8
S"os.environ.has_key('HOME')"
p2075
sg10
I01
sa(dp2076
g8
S"print os.environ.get('HOME', '/home/username/')"
p2077
sg10
I01
sasg11
I71
sg12
I11447648
sg13
I1
sa(dp2078
g5
(lp2079
(dp2080
g8
S'import os\nprint os.environ'
p2081
sg10
I01
sasg11
I15
sg12
I4907002
sg13
I2
sasg24
VAccess environment variables from Python
p2082
ssI4641765
(dp2083
g2
(lp2084
(dp2085
g5
(lp2086
(dp2087
g8
S'foo = [1, 2, 3, 4, 5]\nfoo.append(4)\nfoo.append([8, 7])\nprint(foo)'
p2088
sg10
I01
sa(dp2089
g8
S'foo = [1, 2, 3, 4, 5]\nfoo[3] = (foo[3] + 4)\nprint(foo)'
p2090
sg10
I01
sa(dp2091
g8
S'x = [2, 5, 10]\nx.insert(2, 77)\nprint(x)'
p2092
sg10
I01
sasg11
I12
sg12
I4641797
sg13
I0
sa(dp2093
g5
(lp2094
(dp2095
g8
S"L = [0, 0, 0, 0]\nthings_to_add = ({'idx': 1, 'amount': 1, }, {'idx': 2, 'amount': 1, })\nfor item in things_to_add:\n    L[item['idx']] += item['amount']\nL"
p2096
sg10
I01
sa(dp2097
g8
S'L = [0, 0, 0, 0]\nthings_to_add = [0, 1, 1, 0]\nfor (idx, amount) in enumerate(things_to_add):\n    L[idx] += amount\nL'
p2098
sg10
I01
sa(dp2099
g8
S'L[:] = [sum(i) for i in zip(L, things_to_add)]'
p2100
sg10
I01
sa(dp2101
g8
S'things_to_add = [(1, 1), (2, 1)]\nfor (idx, amount) in things_to_add:\n    L[idx] += amount\nL'
p2102
sg10
I01
sasg11
I6
sg12
I4641871
sg13
I1
sa(dp2103
g5
(lp2104
(dp2105
g8
S'fooList = [1, 3, 348, 2]\nfooList.append(3)\nfooList.append(2734)\nprint(fooList)'
p2106
sg10
I01
sasg11
I1
sg12
I4641787
sg13
I2
sasg24
VAdd to integers in a list
p2107
ssI2407398
(dp2108
g2
(lp2109
(dp2110
g5
(lp2111
(dp2112
g8
S'list_a = [1, 2, 3, 4]\nlist_b = [5, 6, 7, 8]\nzip(list_a, list_b)'
p2113
sg10
I01
sasg11
I198
sg12
I2407405
sg13
I0
sa(dp2114
g5
(lp2115
sg11
I53
sg12
I5146593
sg13
I1
sa(dp2116
g5
(lp2117
sg11
I8
sg12
I2407425
sg13
I2
sasg24
VHow to merge lists into a list of tuples in Python?
p2118
ssI19602931
(dp2119
g2
(lp2120
(dp2121
g5
(lp2122
(dp2123
g8
S"import urllib\ntestfile = urllib.URLopener()\ntestfile.retrieve('http://randomsite.com/file.gz', 'file.gz')"
p2124
sg10
I01
sasg11
I114
sg12
I19602990
sg13
I0
sa(dp2125
g5
(lp2126
(dp2127
g8
S"import urllib\nurllib.urlretrieve('http://randomsite.com/file.gz', 'file.gz')"
p2128
sg10
I01
sasg11
I66
sg12
I19603003
sg13
I1
sa(dp2129
g5
(lp2130
(dp2131
g8
S"import wget\nfile_url = 'http://johndoe.com/download.zip'\nfile_name = wget.download(file_url)"
p2132
sg10
I01
sasg11
I21
sg12
I25827767
sg13
I2
sasg24
VBasic http file downloading and saving to disk in python?
p2133
ssI4588628
(dp2134
g2
(lp2135
(dp2136
g5
(lp2137
(dp2138
g8
S'x = numpy.array([1, 0, 2, 0, 3, 0, 4, 5, 6, 7, 8])\nnumpy.where((x == 0))[0]'
p2139
sg10
I01
sasg11
I97
sg12
I4588654
sg13
I0
sa(dp2140
g5
(lp2141
(dp2142
g8
S'a = np.asarray([0, 1, 2, 3, 4])\n(a == 0)'
p2143
sg10
I01
sasg11
I16
sg12
I4588744
sg13
I1
sa(dp2144
g5
(lp2145
(dp2146
g8
S'x = numpy.array([1, 0, 2, 0, 3, 0, 4, 5, 6, 7, 8])\n(x == 0)\nnumpy.nonzero((x == 0))[0]'
p2147
sg10
I01
sasg11
I5
sg12
I24553551
sg13
I2
sasg24
VFind indices of elements equal to zero from numpy array
p2148
ss.