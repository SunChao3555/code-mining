(dp0
I20389890
c__builtin__
set
p1
((lp2
S'for (int i = 0; i < 100; i++) {\n}'
p3
aS'Random rand = new Random();'
p4
aS'Random rn = new Random();'
p5
aS'for (int i = 0; i < 100; i++) {\n    int answer = rn.nextInt(10) + 1;\n}'
p6
aS'Random rn = new Random();\nfor (int i = 0; i < 100; i++) {\n}'
p7
aS'int answer = rn.nextInt(10) + 1;'
p8
aS'Random rand = new Random();\nint randomNum = rand.nextInt((max - min) + 1) + min;'
p9
aS'for (int i = 0; i < 100; i++) {\n    int answer = rn.nextInt(10) + 1;\n    System.out.println(answer);\n}'
p10
aS'System.out.println(answer);'
p11
aS'int randomNum = rand.nextInt((max - min) + 1) + min;'
p12
aS'Random rand = new Random();\nint randomNum = rand.nextInt((max - min) + 1) + min;\nreturn randomNum;'
p13
aS'public static int randInt(int min, int max) {\n    Random rand = new Random();\n    int randomNum = rand.nextInt((max - min) + 1) + min;\n    return randomNum;\n}'
p14
aS'return randomNum;'
p15
aS'Random rn = new Random();\nfor (int i = 0; i < 100; i++) {\n    int answer = rn.nextInt(10) + 1;\n}'
p16
aS'import java.util.Random;'
p17
aS'int randomNum = rand.nextInt((max - min) + 1) + min;\nreturn randomNum;'
p18
aS'int answer = rn.nextInt(10) + 1;\nSystem.out.println(answer);'
p19
aS'Random rn = new Random();\nfor (int i = 0; i < 100; i++) {\n    int answer = rn.nextInt(10) + 1;\n    System.out.println(answer);\n}'
p20
atp21
Rp22
sI1509391
g1
((lp23
S'return new ArrayList(hashMapObject.entrySet()).get(0);'
p24
aS'TreeMap<String, String> myMap = new TreeMap<String, String>();'
p25
aS'return hashMapObject.entrySet().toArray()[0];'
p26
aS'String first = myMap.firstEntry().getValue();'
p27
aS'return hashMapObject.entrySet().iterator().next();'
p28
aS'Map.Entry<String, String> entry = map.entrySet().iterator().next();'
p29
aS'TreeMap<String, String> myMap = new TreeMap<String, String>();\nString first = myMap.firstEntry().getValue();'
p30
aS'String firstOther = myMap.get(myMap.firstKey());'
p31
aS'System.out.println("Key: " + entry.getKey() + ", Value: " + entry.getValue());'
p32
aS'String first = myMap.firstEntry().getValue();\nString firstOther = myMap.get(myMap.firstKey());'
p33
aS'TreeMap<String, String> myMap = new TreeMap<String, String>();\nString first = myMap.firstEntry().getValue();\nString firstOther = myMap.get(myMap.firstKey());'
p34
atp35
Rp36
sI909843
g1
((lp37
S'static int UNIQUE_ID = 0;\nint uid = ++UNIQUE_ID;'
p38
aS'return uid;'
p39
aS'public class A {\n\n    static int UNIQUE_ID = 0;\n\n    int uid = ++UNIQUE_ID;\n\n    public int hashCode() {\n        return uid;\n    }\n}'
p40
aS'int uid = ++UNIQUE_ID;\npublic int hashCode() {\n    return uid;\n}'
p41
aS'int uid = ++UNIQUE_ID;'
p42
aS'static int UNIQUE_ID = 0;'
p43
aS'static int UNIQUE_ID = 0;\nint uid = ++UNIQUE_ID;\npublic int hashCode() {\n    return uid;\n}'
p44
aS'public int hashCode() {\n    return uid;\n}'
p45
atp46
Rp47
sI1770010
g1
((lp48
S'long starts;\npublic static TimeWatch start() {\n    return new TimeWatch();\n}\nprivate TimeWatch() {\n    reset();\n}\npublic TimeWatch reset() {\n    starts = System.currentTimeMillis();\n    return this;\n}\npublic long time() {\n    long ends = System.currentTimeMillis();\n    return ends - starts;\n}\npublic long time(TimeUnit unit) {\n    return unit.convert(time(), TimeUnit.MILLISECONDS);\n}'
p49
aS'return this;'
p50
aS'reset();'
p51
aS'Monitor monitor = MonitorFactory.start(thisJoinPoint.toShortString());\nObject returnedObject = proceed();\nmonitor.stop();'
p52
aS'starts = System.currentTimeMillis();'
p53
aS'public long time(TimeUnit unit) {\n    return unit.convert(time(), TimeUnit.MILLISECONDS);\n}'
p54
aS'long passedTimeInMs = watch.time();\nlong passedTimeInSeconds = watch.time(TimeUnit.SECONDS);'
p55
aS'public static TimeWatch start() {\n    return new TimeWatch();\n}\nprivate TimeWatch() {\n    reset();\n}\npublic TimeWatch reset() {\n    starts = System.currentTimeMillis();\n    return this;\n}\npublic long time() {\n    long ends = System.currentTimeMillis();\n    return ends - starts;\n}'
p56
aS'long startTime = System.currentTimeMillis();'
p57
aS'public static TimeWatch start() {\n    return new TimeWatch();\n}\nprivate TimeWatch() {\n    reset();\n}'
p58
aS'public static TimeWatch start() {\n    return new TimeWatch();\n}\nprivate TimeWatch() {\n    reset();\n}\npublic TimeWatch reset() {\n    starts = System.currentTimeMillis();\n    return this;\n}'
p59
aS'private TimeWatch() {\n    reset();\n}\npublic TimeWatch reset() {\n    starts = System.currentTimeMillis();\n    return this;\n}'
p60
aS'import com.jamonapi.*;'
p61
aS'TimeWatch watch = TimeWatch.start();'
p62
aS'mon.stop();'
p63
aS'TimeWatch watch = TimeWatch.start();\nlong passedTimeInMs = watch.time();'
p64
aS'Object returnedObject = proceed();\nmonitor.stop();'
p65
aS'long startTime = System.currentTimeMillis();\nlong estimatedTime = System.currentTimeMillis() - startTime;'
p66
aS'long starts;\npublic static TimeWatch start() {\n    return new TimeWatch();\n}\nprivate TimeWatch() {\n    reset();\n}\npublic TimeWatch reset() {\n    starts = System.currentTimeMillis();\n    return this;\n}'
p67
aS'long estimatedTime = System.currentTimeMillis() - startTime;'
p68
aS'long starts;\npublic static TimeWatch start() {\n    return new TimeWatch();\n}\nprivate TimeWatch() {\n    reset();\n}\npublic TimeWatch reset() {\n    starts = System.currentTimeMillis();\n    return this;\n}\npublic long time() {\n    long ends = System.currentTimeMillis();\n    return ends - starts;\n}'
p69
aS'public static TimeWatch start() {\n    return new TimeWatch();\n}\nprivate TimeWatch() {\n    reset();\n}\npublic TimeWatch reset() {\n    starts = System.currentTimeMillis();\n    return this;\n}\npublic long time() {\n    long ends = System.currentTimeMillis();\n    return ends - starts;\n}\npublic long time(TimeUnit unit) {\n    return unit.convert(time(), TimeUnit.MILLISECONDS);\n}'
p70
aS'private TimeWatch() {\n    reset();\n}\npublic TimeWatch reset() {\n    starts = System.currentTimeMillis();\n    return this;\n}\npublic long time() {\n    long ends = System.currentTimeMillis();\n    return ends - starts;\n}\npublic long time(TimeUnit unit) {\n    return unit.convert(time(), TimeUnit.MILLISECONDS);\n}'
p71
aS'Monitor monitor = MonitorFactory.start(thisJoinPoint.toShortString());'
p72
aS'monitor.stop();\nreturn returnedObject;'
p73
aS'long passedTimeInSeconds = watch.time(TimeUnit.SECONDS);'
p74
aS'public long time() {\n    long ends = System.currentTimeMillis();\n    return ends - starts;\n}'
p75
aS'public TimeWatch reset() {\n    starts = System.currentTimeMillis();\n    return this;\n}\npublic long time() {\n    long ends = System.currentTimeMillis();\n    return ends - starts;\n}'
p76
aS'public class TimeWatch {\n\n    long starts;\n\n    public static TimeWatch start() {\n        return new TimeWatch();\n    }\n\n    private TimeWatch() {\n        reset();\n    }\n\n    public TimeWatch reset() {\n        starts = System.currentTimeMillis();\n        return this;\n    }\n\n    public long time() {\n        long ends = System.currentTimeMillis();\n        return ends - starts;\n    }\n\n    public long time(TimeUnit unit) {\n        return unit.convert(time(), TimeUnit.MILLISECONDS);\n    }\n}'
p77
aS'public static TimeWatch start() {\n    return new TimeWatch();\n}'
p78
aS'long starts;'
p79
aS'long starts;\npublic static TimeWatch start() {\n    return new TimeWatch();\n}\nprivate TimeWatch() {\n    reset();\n}'
p80
aS'return ends - starts;'
p81
aS'Object returnedObject = proceed();\nmonitor.stop();\nreturn returnedObject;'
p82
aS'return new TimeWatch();'
p83
aS'Monitor mon = MonitorFactory.start("myFirstMonitor");'
p84
aS'long starts;\npublic static TimeWatch start() {\n    return new TimeWatch();\n}'
p85
aS'long passedTimeInMs = watch.time();'
p86
aS'TimeWatch watch = TimeWatch.start();\nlong passedTimeInMs = watch.time();\nlong passedTimeInSeconds = watch.time(TimeUnit.SECONDS);'
p87
aS'return unit.convert(time(), TimeUnit.MILLISECONDS);'
p88
aS'private TimeWatch() {\n    reset();\n}\npublic TimeWatch reset() {\n    starts = System.currentTimeMillis();\n    return this;\n}\npublic long time() {\n    long ends = System.currentTimeMillis();\n    return ends - starts;\n}'
p89
aS'private TimeWatch() {\n    reset();\n}'
p90
aS'Monitor monitor = MonitorFactory.start(thisJoinPoint.toShortString());\nObject returnedObject = proceed();\nmonitor.stop();\nreturn returnedObject;'
p91
aS'long startTime = System.nanoTime();'
p92
aS'starts = System.currentTimeMillis();\nreturn this;'
p93
aS'public long time() {\n    long ends = System.currentTimeMillis();\n    return ends - starts;\n}\npublic long time(TimeUnit unit) {\n    return unit.convert(time(), TimeUnit.MILLISECONDS);\n}'
p94
aS'long ends = System.currentTimeMillis();'
p95
aS'monitor.stop();'
p96
aS'long estimatedTime = System.nanoTime() - startTime;'
p97
aS'Object returnedObject = proceed();'
p98
aS'public TimeWatch reset() {\n    starts = System.currentTimeMillis();\n    return this;\n}'
p99
aS'Monitor monitor = MonitorFactory.start(thisJoinPoint.toShortString());\nObject returnedObject = proceed();'
p100
aS'long ends = System.currentTimeMillis();\nreturn ends - starts;'
p101
aS'public TimeWatch reset() {\n    starts = System.currentTimeMillis();\n    return this;\n}\npublic long time() {\n    long ends = System.currentTimeMillis();\n    return ends - starts;\n}\npublic long time(TimeUnit unit) {\n    return unit.convert(time(), TimeUnit.MILLISECONDS);\n}'
p102
aS'long startTime = System.nanoTime();\nlong estimatedTime = System.nanoTime() - startTime;'
p103
aS'return returnedObject;'
p104
atp105
Rp106
sI2047003
g1
((lp107
S'for (Dog d : list) {\n}'
p108
aS'list.add(new Dog("tiger"));'
p109
aS'this.name = name;'
p110
aS'list.add(e);'
p111
aS'System.out.println(list.get(index));'
p112
aS'Dog e = new Dog("Tommy");\nlist.add(e);\nlist.add(new Dog("tiger"));\nSystem.out.println(list);\nfor (Dog d : list) {\n}'
p113
aS'System.out.println(list);'
p114
aS'List<Dog> list = new ArrayList<Dog>();\nDog e = new Dog("Tommy");'
p115
aS'Dog e = new Dog("Tommy");'
p116
aS'private final String name;\npublic Dog(final String name) {\n    this.name = name;\n}'
p117
aS'public static void main(final String[] args) {\n    List<Dog> list = new ArrayList<Dog>();\n    Dog e = new Dog("Tommy");\n    list.add(e);\n    list.add(new Dog("tiger"));\n    System.out.println(list);\n    for (Dog d : list) {\n        System.out.println(d);\n    }\n}'
p118
aS'private static class Dog {\n\n    private final String name;\n\n    public Dog(final String name) {\n        this.name = name;\n    }\n\n    @Override\n    public String toString() {\n        return name;\n    }\n}'
p119
aS'List<Dog> list = new ArrayList<Dog>();'
p120
aS'list.add(e);\nlist.add(new Dog("tiger"));\nSystem.out.println(list);\nfor (Dog d : list) {\n    System.out.println(d);\n}'
p121
aS'Dog e = new Dog("Tommy");\nlist.add(e);'
p122
aS'System.out.println(d);'
p123
aS'List<Dog> list = new ArrayList<Dog>();\nDog e = new Dog("Tommy");\nlist.add(e);'
p124
aS'System.out.println(list);\nfor (Dog d : list) {\n    System.out.println(d);\n}'
p125
aS'list.add(new Dog("tiger"));\nSystem.out.println(list);'
p126
aS'Dog e = new Dog("Tommy");\nlist.add(e);\nlist.add(new Dog("tiger"));\nSystem.out.println(list);\nfor (Dog d : list) {\n    System.out.println(d);\n}'
p127
aS'public String toString() {\n    return name;\n}'
p128
aS'list.add(e);\nlist.add(new Dog("tiger"));\nSystem.out.println(list);'
p129
aS'private final String name;'
p130
aS'list.add(e);\nlist.add(new Dog("tiger"));'
p131
aS'public class Print {\n\n    public static void main(final String[] args) {\n        List<Dog> list = new ArrayList<Dog>();\n        Dog e = new Dog("Tommy");\n        list.add(e);\n        list.add(new Dog("tiger"));\n        System.out.println(list);\n        for (Dog d : list) {\n            System.out.println(d);\n        }\n    }\n\n    private static class Dog {\n\n        private final String name;\n\n        public Dog(final String name) {\n            this.name = name;\n        }\n\n        @Override\n        public String toString() {\n            return name;\n        }\n    }\n}'
p132
aS'Dog e = new Dog("Tommy");\nlist.add(e);\nlist.add(new Dog("tiger"));\nSystem.out.println(list);'
p133
aS'list.add(new Dog("tiger"));\nSystem.out.println(list);\nfor (Dog d : list) {\n}'
p134
aS'List<Dog> list = new ArrayList<Dog>();\nDog e = new Dog("Tommy");\nlist.add(e);\nlist.add(new Dog("tiger"));\nSystem.out.println(list);\nfor (Dog d : list) {\n}'
p135
aS'list.add(new Dog("tiger"));\nSystem.out.println(list);\nfor (Dog d : list) {\n    System.out.println(d);\n}'
p136
aS'private final String name;\npublic Dog(final String name) {\n    this.name = name;\n}\n@Override\npublic String toString() {\n    return name;\n}'
p137
aS'List<Dog> list = new ArrayList<Dog>();\nDog e = new Dog("Tommy");\nlist.add(e);\nlist.add(new Dog("tiger"));\nSystem.out.println(list);'
p138
aS'public Dog(final String name) {\n    this.name = name;\n}\n@Override\npublic String toString() {\n    return name;\n}'
p139
aS'public static void main(final String[] args) {\n    List<Dog> list = new ArrayList<Dog>();\n    Dog e = new Dog("Tommy");\n    list.add(e);\n    list.add(new Dog("tiger"));\n    System.out.println(list);\n    for (Dog d : list) {\n        System.out.println(d);\n    }\n}\nprivate static class Dog {\n\n    private final String name;\n\n    public Dog(final String name) {\n        this.name = name;\n    }\n\n    @Override\n    public String toString() {\n        return name;\n    }\n}'
p140
aS'public Dog(final String name) {\n    this.name = name;\n}'
p141
aS'list.add(e);\nlist.add(new Dog("tiger"));\nSystem.out.println(list);\nfor (Dog d : list) {\n}'
p142
aS'List<Dog> list = new ArrayList<Dog>();\nDog e = new Dog("Tommy");\nlist.add(e);\nlist.add(new Dog("tiger"));'
p143
aS'return name;'
p144
aS'@Override\npublic String toString() {\n    return name;\n}'
p145
aS'Dog e = new Dog("Tommy");\nlist.add(e);\nlist.add(new Dog("tiger"));'
p146
aS'System.out.println(list);\nfor (Dog d : list) {\n}'
p147
aS'List<Dog> list = new ArrayList<Dog>();\nDog e = new Dog("Tommy");\nlist.add(e);\nlist.add(new Dog("tiger"));\nSystem.out.println(list);\nfor (Dog d : list) {\n    System.out.println(d);\n}'
p148
atp149
Rp150
sI320542
g1
((lp151
S'if (PlatformUtils.isWindows() && path.matches("file:[A-Za-z]:.*")) {\n    path = "file:/" + path.substring(5);\n}\nreturn new File(new URL(path).toURI());'
p152
aS'return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;'
p153
aS'if (c == null)\n    return null;\ntry {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n}'
p154
aS'public static File urlToFile(final String url) {\n    String path = url;\n    if (path.startsWith("jar:")) {\n        final int index = path.indexOf("!/");\n        path = path.substring(4, index);\n    }\n    try {\n        if (PlatformUtils.isWindows() && path.matches("file:[A-Za-z]:.*")) {\n            path = "file:/" + path.substring(5);\n        }\n        return new File(new URL(path).toURI());\n    } catch (final MalformedURLException e) {\n    } catch (final URISyntaxException e) {\n    }\n    if (path.startsWith("file:")) {\n        path = path.substring(5);\n        return new File(path);\n    }\n    throw new IllegalArgumentException("Invalid URL: " + url);\n}'
p155
aS'final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\nif (codeSourceLocation != null)\n    return codeSourceLocation;'
p156
aS'try {\n    if (PlatformUtils.isWindows() && path.matches("file:[A-Za-z]:.*")) {\n        path = "file:/" + path.substring(5);\n    }\n    return new File(new URL(path).toURI());\n} catch (final MalformedURLException e) {\n} catch (final URISyntaxException e) {\n}\nif (path.startsWith("file:")) {\n    path = path.substring(5);\n    return new File(path);\n}'
p157
aS'final URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n}'
p158
aS'final URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;'
p159
aS'final URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;'
p160
aS'final String base = url.substring(0, url.length() - suffix.length());\nString path = base;'
p161
aS'if (path.startsWith("file:")) {\n    path = path.substring(5);\n    return new File(path);\n}'
p162
aS'String path = Test.class.getProtectionDomain().getCodeSource().getLocation().getPath();'
p163
aS'String path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n}'
p164
aS'return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n}'
p165
aS'return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n}'
p166
aS'final URL classResource = c.getResource(c.getSimpleName() + ".class");'
p167
aS'final String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;'
p168
aS'if (path.startsWith("jar:")) {\n    final int index = path.indexOf("!/");\n    path = path.substring(4, index);\n}\ntry {\n    if (PlatformUtils.isWindows() && path.matches("file:[A-Za-z]:.*")) {\n        path = "file:/" + path.substring(5);\n    }\n    return new File(new URL(path).toURI());\n} catch (final MalformedURLException e) {\n} catch (final URISyntaxException e) {\n}'
p169
aS'final String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n}'
p170
aS'path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n    return null;\n}'
p171
aS'public static URL getLocation(final Class<?> c) {\n    if (c == null)\n        return null;\n    try {\n        final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n        if (codeSourceLocation != null)\n            return codeSourceLocation;\n    } catch (final SecurityException e) {\n    } catch (final NullPointerException e) {\n    }\n    final URL classResource = c.getResource(c.getSimpleName() + ".class");\n    if (classResource == null)\n        return null;\n    final String url = classResource.toString();\n    final String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\n    if (!url.endsWith(suffix))\n        return null;\n    final String base = url.substring(0, url.length() - suffix.length());\n    String path = base;\n    if (path.startsWith("jar:"))\n        path = path.substring(4, path.length() - 2);\n    try {\n        return new URL(path);\n    } catch (final MalformedURLException e) {\n        e.printStackTrace();\n        return null;\n    }\n}'
p172
aS'if (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;'
p173
aS'if (c == null)\n    return null;\ntry {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";'
p174
aS'return null;\ntry {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n    return null;\n}'
p175
aS'final String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());'
p176
aS'final int index = path.indexOf("!/");'
p177
aS'try {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());'
p178
aS'final URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n}'
p179
aS'final String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";'
p180
aS'if (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n}'
p181
aS'if (path.startsWith("jar:")) {\n    final int index = path.indexOf("!/");\n}'
p182
aS'try {\n    if (PlatformUtils.isWindows() && path.matches("file:[A-Za-z]:.*")) {\n        path = "file:/" + path.substring(5);\n    }\n    return new File(new URL(path).toURI());\n} catch (final MalformedURLException e) {\n} catch (final URISyntaxException e) {\n}'
p183
aS'public static File urlToFile(final URL url) {\n    return url == null ? null : urlToFile(url.toString());\n}\npublic static File urlToFile(final String url) {\n    String path = url;\n    if (path.startsWith("jar:")) {\n        final int index = path.indexOf("!/");\n        path = path.substring(4, index);\n    }\n    try {\n        if (PlatformUtils.isWindows() && path.matches("file:[A-Za-z]:.*")) {\n            path = "file:/" + path.substring(5);\n        }\n        return new File(new URL(path).toURI());\n    } catch (final MalformedURLException e) {\n    } catch (final URISyntaxException e) {\n    }\n    if (path.startsWith("file:")) {\n        path = path.substring(5);\n        return new File(path);\n    }\n    throw new IllegalArgumentException("Invalid URL: " + url);\n}'
p184
aS'if (PlatformUtils.isWindows() && path.matches("file:[A-Za-z]:.*")) {\n    path = "file:/" + path.substring(5);\n}'
p185
aS'return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n    return null;\n}'
p186
aS'public static URL getLocation(final Class<?> c) {\n    if (c == null)\n        return null;\n    try {\n        final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n        if (codeSourceLocation != null)\n            return codeSourceLocation;\n    } catch (final SecurityException e) {\n    } catch (final NullPointerException e) {\n    }\n    final URL classResource = c.getResource(c.getSimpleName() + ".class");\n    if (classResource == null)\n        return null;\n    final String url = classResource.toString();\n    final String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\n    if (!url.endsWith(suffix))\n        return null;\n    final String base = url.substring(0, url.length() - suffix.length());\n    String path = base;\n    if (path.startsWith("jar:"))\n        path = path.substring(4, path.length() - 2);\n    try {\n        return new URL(path);\n    } catch (final MalformedURLException e) {\n        e.printStackTrace();\n        return null;\n    }\n}\npublic static File urlToFile(final URL url) {\n    return url == null ? null : urlToFile(url.toString());\n}'
p187
aS'String path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n}'
p188
aS'e.printStackTrace();\nreturn null;'
p189
aS'return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);'
p190
aS'return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());'
p191
aS'throw new IllegalArgumentException("Invalid URL: " + url);'
p192
aS'String decodedPath = URLDecoder.decode(path, "UTF-8");'
p193
aS'String path = url;\nif (path.startsWith("jar:")) {\n    final int index = path.indexOf("!/");\n    path = path.substring(4, index);\n}\ntry {\n    if (PlatformUtils.isWindows() && path.matches("file:[A-Za-z]:.*")) {\n        path = "file:/" + path.substring(5);\n    }\n    return new File(new URL(path).toURI());\n} catch (final MalformedURLException e) {\n} catch (final URISyntaxException e) {\n}\nif (path.startsWith("file:")) {\n    path = path.substring(5);\n    return new File(path);\n}\nthrow new IllegalArgumentException("Invalid URL: " + url);'
p194
aS'final URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);'
p195
aS'return null;\ntry {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n}'
p196
aS'final String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);'
p197
aS'return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n    return null;\n}'
p198
aS'if (c == null) {\n}'
p199
aS'try {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n}'
p200
aS'if (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";'
p201
aS'return null;\ntry {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);'
p202
aS'final URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());'
p203
aS'return null;\ntry {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;'
p204
aS'path = "file:/" + path.substring(5);'
p205
aS'if (path.startsWith("file:")) {\n    path = path.substring(5);\n}'
p206
aS'final String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;'
p207
aS'if (c == null)\n    return null;\ntry {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n}'
p208
aS'return new File(new URL(path).toURI());'
p209
aS'try {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n}'
p210
aS'if (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n}'
p211
aS'return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;'
p212
aS'if (!url.endsWith(suffix))\n    return null;'
p213
aS'final String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n    return null;\n}'
p214
aS'String path = url;'
p215
aS'path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n}'
p216
aS'return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);'
p217
aS'if (c == null)\n    return null;\ntry {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);'
p218
aS'try {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;'
p219
aS'String path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n    return null;\n}'
p220
aS'String path = url;\nif (path.startsWith("jar:")) {\n    final int index = path.indexOf("!/");\n    path = path.substring(4, index);\n}\ntry {\n    if (PlatformUtils.isWindows() && path.matches("file:[A-Za-z]:.*")) {\n        path = "file:/" + path.substring(5);\n    }\n    return new File(new URL(path).toURI());\n} catch (final MalformedURLException e) {\n} catch (final URISyntaxException e) {\n}'
p221
aS'path = path.substring(4, index);'
p222
aS'if (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n    return null;\n}'
p223
aS'path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n}'
p224
aS'try {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n}'
p225
aS'return new File(MyClass.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath());'
p226
aS'if (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);'
p227
aS'if (c == null)\n    return null;\ntry {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;'
p228
aS'if (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;'
p229
aS'if (c == null)\n    return null;\ntry {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n}'
p230
aS'if (path.startsWith("jar:")) {\n    final int index = path.indexOf("!/");\n    path = path.substring(4, index);\n}\ntry {\n    if (PlatformUtils.isWindows() && path.matches("file:[A-Za-z]:.*")) {\n        path = "file:/" + path.substring(5);\n    }\n    return new File(new URL(path).toURI());\n} catch (final MalformedURLException e) {\n}'
p231
aS'try {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n    return null;\n}'
p232
aS'final URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();'
p233
aS'if (c == null)\n    return null;'
p234
aS'return null;\ntry {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n}'
p235
aS'if (classResource == null) {\n}'
p236
aS'final int index = path.indexOf("!/");\npath = path.substring(4, index);'
p237
aS'if (c == null)\n    return null;\ntry {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());'
p238
aS'return null;\ntry {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}'
p239
aS'if (c == null)\n    return null;\ntry {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n    return null;\n}'
p240
aS'if (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n    return null;\n}'
p241
aS'final String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;'
p242
aS'public static URL getLocation(final Class<?> c) {\n    if (c == null)\n        return null;\n    try {\n        final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n        if (codeSourceLocation != null)\n            return codeSourceLocation;\n    } catch (final SecurityException e) {\n    } catch (final NullPointerException e) {\n    }\n    final URL classResource = c.getResource(c.getSimpleName() + ".class");\n    if (classResource == null)\n        return null;\n    final String url = classResource.toString();\n    final String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\n    if (!url.endsWith(suffix))\n        return null;\n    final String base = url.substring(0, url.length() - suffix.length());\n    String path = base;\n    if (path.startsWith("jar:"))\n        path = path.substring(4, path.length() - 2);\n    try {\n        return new URL(path);\n    } catch (final MalformedURLException e) {\n        e.printStackTrace();\n        return null;\n    }\n}\npublic static File urlToFile(final URL url) {\n    return url == null ? null : urlToFile(url.toString());\n}\npublic static File urlToFile(final String url) {\n    String path = url;\n    if (path.startsWith("jar:")) {\n        final int index = path.indexOf("!/");\n        path = path.substring(4, index);\n    }\n    try {\n        if (PlatformUtils.isWindows() && path.matches("file:[A-Za-z]:.*")) {\n            path = "file:/" + path.substring(5);\n        }\n        return new File(new URL(path).toURI());\n    } catch (final MalformedURLException e) {\n    } catch (final URISyntaxException e) {\n    }\n    if (path.startsWith("file:")) {\n        path = path.substring(5);\n        return new File(path);\n    }\n    throw new IllegalArgumentException("Invalid URL: " + url);\n}'
p243
aS'if (codeSourceLocation != null)\n    return codeSourceLocation;'
p244
aS'try {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();'
p245
aS'public static File urlToFile(final URL url) {\n    return url == null ? null : urlToFile(url.toString());\n}'
p246
aS'if (path.startsWith("jar:")) {\n    final int index = path.indexOf("!/");\n    path = path.substring(4, index);\n}'
p247
aS'return null;\ntry {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n}'
p248
aS'final String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";'
p249
aS'final String url = classResource.toString();'
p250
aS'path = path.substring(5);\nreturn new File(path);'
p251
aS'return codeSourceLocation;'
p252
aS'return new File(path);'
p253
aS'try {\n    if (PlatformUtils.isWindows() && path.matches("file:[A-Za-z]:.*")) {\n        path = "file:/" + path.substring(5);\n    }\n    return new File(new URL(path).toURI());\n} catch (final MalformedURLException e) {\n}'
p254
aS'if (c == null)\n    return null;\ntry {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;'
p255
aS'try {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n}'
p256
aS'try {\n    if (PlatformUtils.isWindows() && path.matches("file:[A-Za-z]:.*")) {\n        path = "file:/" + path.substring(5);\n    }\n    return new File(new URL(path).toURI());\n} catch (final MalformedURLException e) {\n} catch (final URISyntaxException e) {\n}\nif (path.startsWith("file:")) {\n}'
p257
aS'return null;\ntry {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;'
p258
aS'try {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);'
p259
aS'e.printStackTrace();'
p260
aS'final String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;'
p261
aS'if (classResource == null)\n    return null;\nfinal String url = classResource.toString();'
p262
aS'return null;\ntry {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");'
p263
aS'String path = url;\nif (path.startsWith("jar:")) {\n    final int index = path.indexOf("!/");\n}'
p264
aS'String path = url;\nif (path.startsWith("jar:")) {\n    final int index = path.indexOf("!/");\n    path = path.substring(4, index);\n}\ntry {\n    if (PlatformUtils.isWindows() && path.matches("file:[A-Za-z]:.*")) {\n        path = "file:/" + path.substring(5);\n    }\n    return new File(new URL(path).toURI());\n} catch (final MalformedURLException e) {\n}'
p265
aS'return null;\ntry {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();'
p266
aS'try {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;'
p267
aS'if (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n}'
p268
aS'final String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n}'
p269
aS'if (PlatformUtils.isWindows() && path.matches("file:[A-Za-z]:.*")) {\n}'
p270
aS'if (!url.endsWith(suffix)) {\n}'
p271
aS'return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";'
p272
aS'if (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);'
p273
aS'return null;\nfinal String base = url.substring(0, url.length() - suffix.length());'
p274
aS'String path = url;\nif (path.startsWith("jar:")) {\n    final int index = path.indexOf("!/");\n    path = path.substring(4, index);\n}\ntry {\n    if (PlatformUtils.isWindows() && path.matches("file:[A-Za-z]:.*")) {\n        path = "file:/" + path.substring(5);\n    }\n    return new File(new URL(path).toURI());\n} catch (final MalformedURLException e) {\n} catch (final URISyntaxException e) {\n}\nif (path.startsWith("file:")) {\n}'
p275
aS'return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n}'
p276
aS'final URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;'
p277
aS'path = path.substring(4, path.length() - 2);'
p278
aS'if (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n}'
p279
aS'final String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n    return null;\n}'
p280
aS'if (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());'
p281
aS'if (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n}'
p282
aS'if (path.startsWith("jar:")) {\n}'
p283
aS'if (path.startsWith("jar:")) {\n    final int index = path.indexOf("!/");\n    path = path.substring(4, index);\n}\ntry {\n    if (PlatformUtils.isWindows() && path.matches("file:[A-Za-z]:.*")) {\n        path = "file:/" + path.substring(5);\n    }\n    return new File(new URL(path).toURI());\n} catch (final MalformedURLException e) {\n} catch (final URISyntaxException e) {\n}\nif (path.startsWith("file:")) {\n    path = path.substring(5);\n    return new File(path);\n}\nthrow new IllegalArgumentException("Invalid URL: " + url);'
p284
aS'String path = url;\nif (path.startsWith("jar:")) {\n}'
p285
aS'final URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n    return null;\n}'
p286
aS'return null;'
p287
aS'String path = url;\nif (path.startsWith("jar:")) {\n    final int index = path.indexOf("!/");\n    path = path.substring(4, index);\n}\ntry {\n    if (PlatformUtils.isWindows() && path.matches("file:[A-Za-z]:.*")) {\n        path = "file:/" + path.substring(5);\n    }\n    return new File(new URL(path).toURI());\n} catch (final MalformedURLException e) {\n} catch (final URISyntaxException e) {\n}\nif (path.startsWith("file:")) {\n    path = path.substring(5);\n}'
p288
aS'final String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);'
p289
aS'if (c == null)\n    return null;\ntry {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();'
p290
aS'if (codeSourceLocation != null) {\n}'
p291
aS'path = path.substring(5);'
p292
aS'final String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n}'
p293
aS'if (path.startsWith("jar:")) {\n    final int index = path.indexOf("!/");\n    path = path.substring(4, index);\n}\ntry {\n    if (PlatformUtils.isWindows() && path.matches("file:[A-Za-z]:.*")) {\n        path = "file:/" + path.substring(5);\n    }\n    return new File(new URL(path).toURI());\n} catch (final MalformedURLException e) {\n} catch (final URISyntaxException e) {\n}\nif (path.startsWith("file:")) {\n}'
p294
aS'final String base = url.substring(0, url.length() - suffix.length());'
p295
aS'final String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());'
p296
aS'if (c == null)\n    return null;\ntry {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;'
p297
aS'final String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n}'
p298
aS'final String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);'
p299
aS'if (path.startsWith("file:")) {\n}'
p300
aS'try {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n}'
p301
aS'if (classResource == null)\n    return null;'
p302
aS'String path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);'
p303
aS'try {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";'
p304
aS'return null;\ntry {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());'
p305
aS'if (c == null)\n    return null;\ntry {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}'
p306
aS'if (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);'
p307
aS'if (path.startsWith("jar:")) {\n    final int index = path.indexOf("!/");\n    path = path.substring(4, index);\n}\ntry {\n    if (PlatformUtils.isWindows() && path.matches("file:[A-Za-z]:.*")) {\n        path = "file:/" + path.substring(5);\n    }\n    return new File(new URL(path).toURI());\n} catch (final MalformedURLException e) {\n} catch (final URISyntaxException e) {\n}\nif (path.startsWith("file:")) {\n    path = path.substring(5);\n}'
p308
aS'return url == null ? null : urlToFile(url.toString());'
p309
aS'try {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;'
p310
aS'try {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}'
p311
aS'String path = url;\nif (path.startsWith("jar:")) {\n    final int index = path.indexOf("!/");\n    path = path.substring(4, index);\n}'
p312
aS'String path = url;\nif (path.startsWith("jar:")) {\n    final int index = path.indexOf("!/");\n    path = path.substring(4, index);\n}\ntry {\n    if (PlatformUtils.isWindows() && path.matches("file:[A-Za-z]:.*")) {\n        path = "file:/" + path.substring(5);\n    }\n    return new File(new URL(path).toURI());\n} catch (final MalformedURLException e) {\n} catch (final URISyntaxException e) {\n}\nif (path.startsWith("file:")) {\n    path = path.substring(5);\n    return new File(path);\n}'
p313
aS'if (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;'
p314
aS'return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;'
p315
aS'try {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n    return null;\n}'
p316
aS'if (path.startsWith("jar:")) {\n    final int index = path.indexOf("!/");\n    path = path.substring(4, index);\n}\ntry {\n    if (PlatformUtils.isWindows() && path.matches("file:[A-Za-z]:.*")) {\n        path = "file:/" + path.substring(5);\n    }\n    return new File(new URL(path).toURI());\n} catch (final MalformedURLException e) {\n} catch (final URISyntaxException e) {\n}\nif (path.startsWith("file:")) {\n    path = path.substring(5);\n    return new File(path);\n}'
p317
aS'return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n}'
p318
aS'String path = Test.class.getProtectionDomain().getCodeSource().getLocation().getPath();\nString decodedPath = URLDecoder.decode(path, "UTF-8");'
p319
aS'if (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n    return null;\n}'
p320
aS'if (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n}'
p321
aS'if (path.startsWith("file:")) {\n    path = path.substring(5);\n    return new File(path);\n}\nthrow new IllegalArgumentException("Invalid URL: " + url);'
p322
aS'try {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");'
p323
aS'try {\n    if (PlatformUtils.isWindows() && path.matches("file:[A-Za-z]:.*")) {\n        path = "file:/" + path.substring(5);\n    }\n    return new File(new URL(path).toURI());\n} catch (final MalformedURLException e) {\n} catch (final URISyntaxException e) {\n}\nif (path.startsWith("file:")) {\n    path = path.substring(5);\n    return new File(path);\n}\nthrow new IllegalArgumentException("Invalid URL: " + url);'
p324
aS'try {\n    if (PlatformUtils.isWindows() && path.matches("file:[A-Za-z]:.*")) {\n        path = "file:/" + path.substring(5);\n    }\n    return new File(new URL(path).toURI());\n} catch (final MalformedURLException e) {\n} catch (final URISyntaxException e) {\n}\nif (path.startsWith("file:")) {\n    path = path.substring(5);\n}'
p325
aS'if (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());'
p326
aS'return null;\ntry {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;'
p327
aS'final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();'
p328
aS'final String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n    return null;\n}'
p329
aS'return null;\nfinal String url = classResource.toString();'
p330
aS'return null;\ntry {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";'
p331
aS'if (c == null)\n    return null;\ntry {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + ".class");'
p332
aS'final String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n}'
p333
aS'if (path.startsWith("jar:"))\n    ;'
p334
aS'String path = base;'
p335
aS'final URL classResource = c.getResource(c.getSimpleName() + ".class");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace(\'.\', \'/\') + ".class";'
p336
aS'return new URL(path);'
p337
aS'final String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith("jar:"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n}'
p338
atp339
Rp340
sI15039519
g1
((lp341
S'myarray[23] = string24;'
p342
aS'str[4] = "value5";'
p343
aS'str.add("Value1");'
p344
aS'String s = str.get(0);'
p345
aS'str[0] = "value1";'
p346
aS'ArrayList<String> mylist = new ArrayList<String>();\nmylist.add(mystring);'
p347
aS'mylist.add(mystring);'
p348
aS'ArrayList<String> mylist = new ArrayList<String>();'
p349
aS'str[5] = "value6";'
p350
aS'String[] myarray = new String[numberofstrings];'
p351
aS'str[9] = "value10";'
p352
aS'str[1] = "value2";'
p353
aS'str[6] = "value7";'
p354
aS'str[2] = "value3";'
p355
aS'String[] myarray = new String[numberofstrings];\nmyarray[23] = string24;'
p356
aS'int nCount = str.size();'
p357
aS'String[] str = new String[10];'
p358
aS'str[3] = "value4";'
p359
aS'str[7] = "value8";'
p360
aS'str[8] = "value9";'
p361
atp362
Rp363
sI21083170
g1
((lp364
S'public EmbeddedServletContainerCustomizer containerCustomizer() {\n    return (container -> {\n        container.setPort(8012);\n    });\n}'
p365
aS'public class ServletConfig {\n\n    @Bean\n    public EmbeddedServletContainerCustomizer containerCustomizer() {\n        return (container -> {\n            container.setPort(8012);\n        });\n    }\n}'
p366
aS'server.port = 0;'
p367
aS'@Bean\npublic EmbeddedServletContainerCustomizer containerCustomizer() {\n    return (container -> {\n        container.setPort(8012);\n    });\n}'
p368
aS'return (container -> {\n    container.setPort(8012);\n});'
p369
aS'server.port = 8090;'
p370
aS'@Controller\npublic class ServletConfig {\n\n    @Bean\n    public EmbeddedServletContainerCustomizer containerCustomizer() {\n        return (container -> {\n            container.setPort(8012);\n        });\n    }\n}'
p371
aS'container.setPort(8012);'
p372
atp373
Rp374
sI4340653
g1
((lp375
S'InputStream resource = getServletContext().getResourceAsStream("/WEB-INF/my.json");'
p376
aS'InputStream resourceContent = context.getResourceAsStream("/WEB-INF/test/foo.txt");'
p377
aS'String fullPath = context.getRealPath("/WEB-INF/test/foo.txt");'
p378
aS'ServletContext context = getContext();\nString fullPath = context.getRealPath("/WEB-INF/test/foo.txt");'
p379
aS'ServletContext context = getContext();\nURL resourceUrl = context.getResource("/WEB-INF/test/foo.txt");'
p380
aS'URL resourceUrl = context.getResource("/WEB-INF/test/foo.txt");'
p381
aS'ServletContext context = getContext();'
p382
atp383
Rp384
sI1946668
g1
((lp385
S'if (age1 == age2)\n    return 0;\nelse if (age1 > age2)\n    return 1;\nelse\n    return -1;'
p386
aS'public String toString() {\n    return name + " : " + age;\n}\npublic int compareTo(Person p) {\n    return getName().compareTo(p.getName());\n}\nstatic class AgeComparator implements Comparator<Person> {\n\n    public int compare(Person p1, Person p2) {\n        int age1 = p1.getAge();\n        int age2 = p2.getAge();\n        if (age1 == age2)\n            return 0;\n        else if (age1 > age2)\n            return 1;\n        else\n            return -1;\n    }\n}'
p387
aS'int age;'
p388
aS'public int getAge() {\n    return age;\n}\npublic String toString() {\n    return name + " : " + age;\n}\npublic int compareTo(Person p) {\n    return getName().compareTo(p.getName());\n}\nstatic class AgeComparator implements Comparator<Person> {\n\n    public int compare(Person p1, Person p2) {\n        int age1 = p1.getAge();\n        int age2 = p2.getAge();\n        if (age1 == age2)\n            return 0;\n        else if (age1 > age2)\n            return 1;\n        else\n            return -1;\n    }\n}\npublic static void main(String[] args) {\n    List<Person> people = new ArrayList<Person>();\n    people.add(new Person("Homer", 38));\n    people.add(new Person("Marge", 35));\n    people.add(new Person("Bart", 15));\n    people.add(new Person("Lisa", 13));\n    Collections.sort(people);\n    System.out.println("Sort by Natural order");\n    System.out.println("\\t" + people);\n    Collections.sort(people, Collections.reverseOrder());\n    System.out.println("Sort by reverse natural order");\n    System.out.println("\\t" + people);\n    Collections.sort(people, new Person.AgeComparator());\n    System.out.println("Sort using Age Comparator");\n    System.out.println("\\t" + people);\n    Collections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\n    System.out.println("Sort using Reverse Age Comparator");\n    System.out.println("\\t" + people);\n}'
p389
aS'String[] s = { "a", "x", "y" };\nArrays.sort(s, new Comparator<String>() {\n\n    @Override\n    public int compare(String o1, String o2) {\n        return o2.compareTo(o1);\n    }\n});\nSystem.out.println(Arrays.toString(s));'
p390
aS'Collections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());'
p391
aS'public String getName() {\n    return name;\n}\npublic int getAge() {\n    return age;\n}\npublic String toString() {\n    return name + " : " + age;\n}'
p392
aS'int age;\npublic Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n}\npublic String getName() {\n    return name;\n}'
p393
aS'List<Person> people = new ArrayList<Person>();\npeople.add(new Person("Homer", 38));\npeople.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));'
p394
aS'Collections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);'
p395
aS'people.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");'
p396
aS'return name + " : " + age;'
p397
aS'String name;\nint age;\npublic Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n}\npublic String getName() {\n    return name;\n}\npublic int getAge() {\n    return age;\n}'
p398
aS'people.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());'
p399
aS'if (age1 == age2)\n    return 0;\nelse if (age1 > age2)\n    return 1;\nelse {\n}'
p400
aS'System.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);'
p401
aS'public String getName() {\n    return name;\n}\npublic int getAge() {\n    return age;\n}\npublic String toString() {\n    return name + " : " + age;\n}\npublic int compareTo(Person p) {\n    return getName().compareTo(p.getName());\n}\nstatic class AgeComparator implements Comparator<Person> {\n\n    public int compare(Person p1, Person p2) {\n        int age1 = p1.getAge();\n        int age2 = p2.getAge();\n        if (age1 == age2)\n            return 0;\n        else if (age1 > age2)\n            return 1;\n        else\n            return -1;\n    }\n}'
p402
aS'people.add(new Person("Homer", 38));\npeople.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));'
p403
aS'Collections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\nSystem.out.println("Sort using Reverse Age Comparator");'
p404
aS'people.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);'
p405
aS'this.name = name;'
p406
aS'people.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);'
p407
aS'System.out.println("Sort using Reverse Age Comparator");\nSystem.out.println("\\t" + people);'
p408
aS'people.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));'
p409
aS'people.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));'
p410
aS'System.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));'
p411
aS'System.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());'
p412
aS'public int getAge() {\n    return age;\n}\npublic String toString() {\n    return name + " : " + age;\n}\npublic int compareTo(Person p) {\n    return getName().compareTo(p.getName());\n}\nstatic class AgeComparator implements Comparator<Person> {\n\n    public int compare(Person p1, Person p2) {\n        int age1 = p1.getAge();\n        int age2 = p2.getAge();\n        if (age1 == age2)\n            return 0;\n        else if (age1 > age2)\n            return 1;\n        else\n            return -1;\n    }\n}'
p413
aS'people.add(new Person("Homer", 38));\npeople.add(new Person("Marge", 35));'
p414
aS'people.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);'
p415
aS'public int compare(String o1, String o2) {\n    return o2.compareTo(o1);\n}'
p416
aS'people.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));'
p417
aS'System.out.println("Sort using Reverse Age Comparator");'
p418
aS'public Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n}\npublic String getName() {\n    return name;\n}\npublic int getAge() {\n    return age;\n}'
p419
aS'int age2 = p2.getAge();\nif (age1 == age2)\n    return 0;\nelse if (age1 > age2)\n    return 1;'
p420
aS'List<Person> people = new ArrayList<Person>();\npeople.add(new Person("Homer", 38));\npeople.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());'
p421
aS'people.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\nSystem.out.println("Sort using Reverse Age Comparator");'
p422
aS'String name;\nint age;\npublic Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n}\npublic String getName() {\n    return name;\n}\npublic int getAge() {\n    return age;\n}\npublic String toString() {\n    return name + " : " + age;\n}\npublic int compareTo(Person p) {\n    return getName().compareTo(p.getName());\n}\nstatic class AgeComparator implements Comparator<Person> {\n\n    public int compare(Person p1, Person p2) {\n        int age1 = p1.getAge();\n        int age2 = p2.getAge();\n        if (age1 == age2)\n            return 0;\n        else if (age1 > age2)\n            return 1;\n        else\n            return -1;\n    }\n}'
p423
aS'List<Person> people = new ArrayList<Person>();\npeople.add(new Person("Homer", 38));\npeople.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\nSystem.out.println("Sort using Reverse Age Comparator");\nSystem.out.println("\\t" + people);'
p424
aS'System.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);'
p425
aS'System.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);'
p426
aS'people.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");'
p427
aS'if (age1 == age2)\n    return 0;'
p428
aS'System.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);'
p429
aS'@Override\npublic int compare(Person a, Person b) {\n    return a.getName().compareTo(b.getName());\n}'
p430
aS'import java.util.*;\n\npublic class Person implements Comparable<Person> {\n\n    String name;\n\n    int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public String toString() {\n        return name + " : " + age;\n    }\n\n    public int compareTo(Person p) {\n        return getName().compareTo(p.getName());\n    }\n\n    static class AgeComparator implements Comparator<Person> {\n\n        public int compare(Person p1, Person p2) {\n            int age1 = p1.getAge();\n            int age2 = p2.getAge();\n            if (age1 == age2)\n                return 0;\n            else if (age1 > age2)\n                return 1;\n            else\n                return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        List<Person> people = new ArrayList<Person>();\n        people.add(new Person("Homer", 38));\n        people.add(new Person("Marge", 35));\n        people.add(new Person("Bart", 15));\n        people.add(new Person("Lisa", 13));\n        Collections.sort(people);\n        System.out.println("Sort by Natural order");\n        System.out.println("\\t" + people);\n        Collections.sort(people, Collections.reverseOrder());\n        System.out.println("Sort by reverse natural order");\n        System.out.println("\\t" + people);\n        Collections.sort(people, new Person.AgeComparator());\n        System.out.println("Sort using Age Comparator");\n        System.out.println("\\t" + people);\n        Collections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\n        System.out.println("Sort using Reverse Age Comparator");\n        System.out.println("\\t" + people);\n    }\n}'
p431
aS'public Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n}\npublic String getName() {\n    return name;\n}\npublic int getAge() {\n    return age;\n}\npublic String toString() {\n    return name + " : " + age;\n}\npublic int compareTo(Person p) {\n    return getName().compareTo(p.getName());\n}'
p432
aS'List<Person> people = new ArrayList<Person>();\npeople.add(new Person("Homer", 38));\npeople.add(new Person("Marge", 35));'
p433
aS'people.add(new Person("Marge", 35));'
p434
aS'return o2.compareTo(o1);'
p435
aS'List<Person> people = new ArrayList<Person>();\npeople.add(new Person("Homer", 38));\npeople.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);'
p436
aS'people.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);'
p437
aS'String name;\nint age;\npublic Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n}'
p438
aS'Collections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);'
p439
aS'if (age1 == age2)\n    return 0;\nelse if (age1 > age2) {\n}'
p440
aS'System.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));'
p441
aS'System.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");'
p442
aS'Collections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");'
p443
aS'int age;\npublic Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n}'
p444
aS'static class AgeComparator implements Comparator<Person> {\n\n    public int compare(Person p1, Person p2) {\n        int age1 = p1.getAge();\n        int age2 = p2.getAge();\n        if (age1 == age2)\n            return 0;\n        else if (age1 > age2)\n            return 1;\n        else\n            return -1;\n    }\n}\npublic static void main(String[] args) {\n    List<Person> people = new ArrayList<Person>();\n    people.add(new Person("Homer", 38));\n    people.add(new Person("Marge", 35));\n    people.add(new Person("Bart", 15));\n    people.add(new Person("Lisa", 13));\n    Collections.sort(people);\n    System.out.println("Sort by Natural order");\n    System.out.println("\\t" + people);\n    Collections.sort(people, Collections.reverseOrder());\n    System.out.println("Sort by reverse natural order");\n    System.out.println("\\t" + people);\n    Collections.sort(people, new Person.AgeComparator());\n    System.out.println("Sort using Age Comparator");\n    System.out.println("\\t" + people);\n    Collections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\n    System.out.println("Sort using Reverse Age Comparator");\n    System.out.println("\\t" + people);\n}'
p445
aS'public String getName() {\n    return name;\n}'
p446
aS'return age;'
p447
aS'Collections.sort(people, Collections.reverseOrder());'
p448
aS'Collections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());'
p449
aS'people.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");'
p450
aS'List<Person> people = new ArrayList<Person>();\npeople.add(new Person("Homer", 38));\npeople.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");'
p451
aS'@Override\npublic int compare(Person a, Person b) {\n    return b.getName().compareTo(a.getName());\n}'
p452
aS'people.add(new Person("Lisa", 13));'
p453
aS'Collections.sort(unsortedList, new Comparator<Person>() {\n\n    @Override\n    public int compare(Person a, Person b) {\n        return a.getName().compareTo(b.getName());\n    }\n});'
p454
aS'public String toString() {\n    return name + " : " + age;\n}\npublic int compareTo(Person p) {\n    return getName().compareTo(p.getName());\n}'
p455
aS'System.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");'
p456
aS'System.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\nSystem.out.println("Sort using Reverse Age Comparator");\nSystem.out.println("\\t" + people);'
p457
aS'Collections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));'
p458
aS'people.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);'
p459
aS'System.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));'
p460
aS'return b.getName().compareTo(a.getName());'
p461
aS'people.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\nSystem.out.println("Sort using Reverse Age Comparator");\nSystem.out.println("\\t" + people);'
p462
aS'people.add(new Person("Homer", 38));\npeople.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());'
p463
aS'Collections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\nSystem.out.println("Sort using Reverse Age Comparator");'
p464
aS'people.add(new Person("Homer", 38));\npeople.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");'
p465
aS'Collections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\nSystem.out.println("Sort using Reverse Age Comparator");\nSystem.out.println("\\t" + people);'
p466
aS'people.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\nSystem.out.println("Sort using Reverse Age Comparator");\nSystem.out.println("\\t" + people);'
p467
aS'System.out.println("\\t" + people);'
p468
aS'System.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\nSystem.out.println("Sort using Reverse Age Comparator");'
p469
aS'Collections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\nSystem.out.println("Sort using Reverse Age Comparator");\nSystem.out.println("\\t" + people);'
p470
aS'Collections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));'
p471
aS'List<Person> people = new ArrayList<Person>();\npeople.add(new Person("Homer", 38));\npeople.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);'
p472
aS'String name;\nint age;\npublic Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n}\npublic String getName() {\n    return name;\n}\npublic int getAge() {\n    return age;\n}\npublic String toString() {\n    return name + " : " + age;\n}\npublic int compareTo(Person p) {\n    return getName().compareTo(p.getName());\n}\nstatic class AgeComparator implements Comparator<Person> {\n\n    public int compare(Person p1, Person p2) {\n        int age1 = p1.getAge();\n        int age2 = p2.getAge();\n        if (age1 == age2)\n            return 0;\n        else if (age1 > age2)\n            return 1;\n        else\n            return -1;\n    }\n}\npublic static void main(String[] args) {\n    List<Person> people = new ArrayList<Person>();\n    people.add(new Person("Homer", 38));\n    people.add(new Person("Marge", 35));\n    people.add(new Person("Bart", 15));\n    people.add(new Person("Lisa", 13));\n    Collections.sort(people);\n    System.out.println("Sort by Natural order");\n    System.out.println("\\t" + people);\n    Collections.sort(people, Collections.reverseOrder());\n    System.out.println("Sort by reverse natural order");\n    System.out.println("\\t" + people);\n    Collections.sort(people, new Person.AgeComparator());\n    System.out.println("Sort using Age Comparator");\n    System.out.println("\\t" + people);\n    Collections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\n    System.out.println("Sort using Reverse Age Comparator");\n    System.out.println("\\t" + people);\n}'
p473
aS'people.add(new Person("Homer", 38));\npeople.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\nSystem.out.println("Sort using Reverse Age Comparator");\nSystem.out.println("\\t" + people);'
p474
aS'System.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());'
p475
aS'Collections.sort(unsortedList, new Comparator<Person>() {\n\n    @Override\n    public int compare(Person a, Person b) {\n        return b.getName().compareTo(a.getName());\n    }\n});'
p476
aS'System.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\nSystem.out.println("Sort using Reverse Age Comparator");'
p477
aS'String name;\nint age;\npublic Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n}\npublic String getName() {\n    return name;\n}\npublic int getAge() {\n    return age;\n}\npublic String toString() {\n    return name + " : " + age;\n}'
p478
aS'import java.util.*;'
p479
aS'System.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));'
p480
aS'Collections.sort(people, new Person.AgeComparator());'
p481
aS'people.add(new Person("Lisa", 13));\nCollections.sort(people);'
p482
aS'Collections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());'
p483
aS'people.add(new Person("Homer", 38));\npeople.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);'
p484
aS'System.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");'
p485
aS'people.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);'
p486
aS'int age1 = p1.getAge();\nint age2 = p2.getAge();\nif (age1 == age2)\n    return 0;'
p487
aS'int age2 = p2.getAge();\nif (age1 == age2)\n    return 0;'
p488
aS'public Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n}'
p489
aS'this.age = age;'
p490
aS'Collections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");'
p491
aS'System.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\nSystem.out.println("Sort using Reverse Age Comparator");'
p492
aS'Collections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\nSystem.out.println("Sort using Reverse Age Comparator");'
p493
aS'public int compareTo(Person p) {\n    return getName().compareTo(p.getName());\n}'
p494
aS'int age1 = p1.getAge();\nint age2 = p2.getAge();\nif (age1 == age2)\n    return 0;\nelse if (age1 > age2)\n    return 1;'
p495
aS'people.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");'
p496
aS'public Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n}\npublic String getName() {\n    return name;\n}\npublic int getAge() {\n    return age;\n}\npublic String toString() {\n    return name + " : " + age;\n}'
p497
aS'String name;\nint age;\npublic Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n}\npublic String getName() {\n    return name;\n}'
p498
aS'public Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n}\npublic String getName() {\n    return name;\n}\npublic int getAge() {\n    return age;\n}\npublic String toString() {\n    return name + " : " + age;\n}\npublic int compareTo(Person p) {\n    return getName().compareTo(p.getName());\n}\nstatic class AgeComparator implements Comparator<Person> {\n\n    public int compare(Person p1, Person p2) {\n        int age1 = p1.getAge();\n        int age2 = p2.getAge();\n        if (age1 == age2)\n            return 0;\n        else if (age1 > age2)\n            return 1;\n        else\n            return -1;\n    }\n}'
p499
aS'public String getName() {\n    return name;\n}\npublic int getAge() {\n    return age;\n}'
p500
aS'people.add(new Person("Homer", 38));\npeople.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);'
p501
aS'return getName().compareTo(p.getName());'
p502
aS'public class Person implements Comparable<Person> {\n\n    String name;\n\n    int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public String toString() {\n        return name + " : " + age;\n    }\n\n    public int compareTo(Person p) {\n        return getName().compareTo(p.getName());\n    }\n\n    static class AgeComparator implements Comparator<Person> {\n\n        public int compare(Person p1, Person p2) {\n            int age1 = p1.getAge();\n            int age2 = p2.getAge();\n            if (age1 == age2)\n                return 0;\n            else if (age1 > age2)\n                return 1;\n            else\n                return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        List<Person> people = new ArrayList<Person>();\n        people.add(new Person("Homer", 38));\n        people.add(new Person("Marge", 35));\n        people.add(new Person("Bart", 15));\n        people.add(new Person("Lisa", 13));\n        Collections.sort(people);\n        System.out.println("Sort by Natural order");\n        System.out.println("\\t" + people);\n        Collections.sort(people, Collections.reverseOrder());\n        System.out.println("Sort by reverse natural order");\n        System.out.println("\\t" + people);\n        Collections.sort(people, new Person.AgeComparator());\n        System.out.println("Sort using Age Comparator");\n        System.out.println("\\t" + people);\n        Collections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\n        System.out.println("Sort using Reverse Age Comparator");\n        System.out.println("\\t" + people);\n    }\n}'
p503
aS'System.out.println("Sort by reverse natural order");'
p504
aS'people.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));'
p505
aS'public int compare(Person a, Person b) {\n    return b.getName().compareTo(a.getName());\n}'
p506
aS'people.add(new Person("Homer", 38));\npeople.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");'
p507
aS'public Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n}\npublic String getName() {\n    return name;\n}\npublic int getAge() {\n    return age;\n}\npublic String toString() {\n    return name + " : " + age;\n}\npublic int compareTo(Person p) {\n    return getName().compareTo(p.getName());\n}\nstatic class AgeComparator implements Comparator<Person> {\n\n    public int compare(Person p1, Person p2) {\n        int age1 = p1.getAge();\n        int age2 = p2.getAge();\n        if (age1 == age2)\n            return 0;\n        else if (age1 > age2)\n            return 1;\n        else\n            return -1;\n    }\n}\npublic static void main(String[] args) {\n    List<Person> people = new ArrayList<Person>();\n    people.add(new Person("Homer", 38));\n    people.add(new Person("Marge", 35));\n    people.add(new Person("Bart", 15));\n    people.add(new Person("Lisa", 13));\n    Collections.sort(people);\n    System.out.println("Sort by Natural order");\n    System.out.println("\\t" + people);\n    Collections.sort(people, Collections.reverseOrder());\n    System.out.println("Sort by reverse natural order");\n    System.out.println("\\t" + people);\n    Collections.sort(people, new Person.AgeComparator());\n    System.out.println("Sort using Age Comparator");\n    System.out.println("\\t" + people);\n    Collections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\n    System.out.println("Sort using Reverse Age Comparator");\n    System.out.println("\\t" + people);\n}'
p508
aS'System.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());'
p509
aS'String[] s = { "a", "x", "y" };\nArrays.sort(s, new Comparator<String>() {\n\n    @Override\n    public int compare(String o1, String o2) {\n        return o2.compareTo(o1);\n    }\n});'
p510
aS'Collections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));'
p511
aS'public int compareTo(Person p) {\n    return getName().compareTo(p.getName());\n}\nstatic class AgeComparator implements Comparator<Person> {\n\n    public int compare(Person p1, Person p2) {\n        int age1 = p1.getAge();\n        int age2 = p2.getAge();\n        if (age1 == age2)\n            return 0;\n        else if (age1 > age2)\n            return 1;\n        else\n            return -1;\n    }\n}\npublic static void main(String[] args) {\n    List<Person> people = new ArrayList<Person>();\n    people.add(new Person("Homer", 38));\n    people.add(new Person("Marge", 35));\n    people.add(new Person("Bart", 15));\n    people.add(new Person("Lisa", 13));\n    Collections.sort(people);\n    System.out.println("Sort by Natural order");\n    System.out.println("\\t" + people);\n    Collections.sort(people, Collections.reverseOrder());\n    System.out.println("Sort by reverse natural order");\n    System.out.println("\\t" + people);\n    Collections.sort(people, new Person.AgeComparator());\n    System.out.println("Sort using Age Comparator");\n    System.out.println("\\t" + people);\n    Collections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\n    System.out.println("Sort using Reverse Age Comparator");\n    System.out.println("\\t" + people);\n}'
p512
aS'List<Person> people = new ArrayList<Person>();\npeople.add(new Person("Homer", 38));'
p513
aS'people.add(new Person("Homer", 38));\npeople.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));'
p514
aS'people.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");'
p515
aS'String name;\nint age;\npublic Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n}\npublic String getName() {\n    return name;\n}\npublic int getAge() {\n    return age;\n}\npublic String toString() {\n    return name + " : " + age;\n}\npublic int compareTo(Person p) {\n    return getName().compareTo(p.getName());\n}'
p516
aS'Collections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);'
p517
aS'int age1 = p1.getAge();\nint age2 = p2.getAge();'
p518
aS'List<Person> people = new ArrayList<Person>();\npeople.add(new Person("Homer", 38));\npeople.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);'
p519
aS'public int compare(Person a, Person b) {\n    return a.getName().compareTo(b.getName());\n}'
p520
aS'int age;\npublic Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n}\npublic String getName() {\n    return name;\n}\npublic int getAge() {\n    return age;\n}\npublic String toString() {\n    return name + " : " + age;\n}\npublic int compareTo(Person p) {\n    return getName().compareTo(p.getName());\n}'
p521
aS'System.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);'
p522
aS'String[] s = { "a", "x", "y" };'
p523
aS'people.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));'
p524
aS'if (age1 == age2)\n    return 0;\nelse if (age1 > age2)\n    return 1;'
p525
aS'return 0;'
p526
aS'return -1;'
p527
aS'people.add(new Person("Bart", 15));'
p528
aS'System.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\nSystem.out.println("Sort using Reverse Age Comparator");'
p529
aS'Collections.sort(personList, (Person a, Person b) -> b.getName().compareTo(a.getName()));'
p530
aS'List<Person> people = new ArrayList<Person>();'
p531
aS'int age1 = p1.getAge();'
p532
aS'people.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");'
p533
aS'System.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());'
p534
aS'int age;\npublic Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n}\npublic String getName() {\n    return name;\n}\npublic int getAge() {\n    return age;\n}'
p535
aS'people.add(new Person("Homer", 38));\npeople.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));'
p536
aS'Collections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");'
p537
aS'Arrays.sort(s, new Comparator<String>() {\n\n    @Override\n    public int compare(String o1, String o2) {\n        return o2.compareTo(o1);\n    }\n});\nSystem.out.println(Arrays.toString(s));'
p538
aS'people.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());'
p539
aS'people.add(new Person("Homer", 38));\npeople.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");'
p540
aS'int age1 = p1.getAge();\nint age2 = p2.getAge();\nif (age1 == age2)\n    return 0;\nelse if (age1 > age2)\n    return 1;\nelse\n    return -1;'
p541
aS'System.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");'
p542
aS'@Override\npublic int compare(String o1, String o2) {\n    return o2.compareTo(o1);\n}'
p543
aS'System.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\nSystem.out.println("Sort using Reverse Age Comparator");\nSystem.out.println("\\t" + people);'
p544
aS'public String toString() {\n    return name + " : " + age;\n}\npublic int compareTo(Person p) {\n    return getName().compareTo(p.getName());\n}\nstatic class AgeComparator implements Comparator<Person> {\n\n    public int compare(Person p1, Person p2) {\n        int age1 = p1.getAge();\n        int age2 = p2.getAge();\n        if (age1 == age2)\n            return 0;\n        else if (age1 > age2)\n            return 1;\n        else\n            return -1;\n    }\n}\npublic static void main(String[] args) {\n    List<Person> people = new ArrayList<Person>();\n    people.add(new Person("Homer", 38));\n    people.add(new Person("Marge", 35));\n    people.add(new Person("Bart", 15));\n    people.add(new Person("Lisa", 13));\n    Collections.sort(people);\n    System.out.println("Sort by Natural order");\n    System.out.println("\\t" + people);\n    Collections.sort(people, Collections.reverseOrder());\n    System.out.println("Sort by reverse natural order");\n    System.out.println("\\t" + people);\n    Collections.sort(people, new Person.AgeComparator());\n    System.out.println("Sort using Age Comparator");\n    System.out.println("\\t" + people);\n    Collections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\n    System.out.println("Sort using Reverse Age Comparator");\n    System.out.println("\\t" + people);\n}'
p545
aS'public int getAge() {\n    return age;\n}\npublic String toString() {\n    return name + " : " + age;\n}'
p546
aS'int age;\npublic Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n}\npublic String getName() {\n    return name;\n}\npublic int getAge() {\n    return age;\n}\npublic String toString() {\n    return name + " : " + age;\n}\npublic int compareTo(Person p) {\n    return getName().compareTo(p.getName());\n}\nstatic class AgeComparator implements Comparator<Person> {\n\n    public int compare(Person p1, Person p2) {\n        int age1 = p1.getAge();\n        int age2 = p2.getAge();\n        if (age1 == age2)\n            return 0;\n        else if (age1 > age2)\n            return 1;\n        else\n            return -1;\n    }\n}\npublic static void main(String[] args) {\n    List<Person> people = new ArrayList<Person>();\n    people.add(new Person("Homer", 38));\n    people.add(new Person("Marge", 35));\n    people.add(new Person("Bart", 15));\n    people.add(new Person("Lisa", 13));\n    Collections.sort(people);\n    System.out.println("Sort by Natural order");\n    System.out.println("\\t" + people);\n    Collections.sort(people, Collections.reverseOrder());\n    System.out.println("Sort by reverse natural order");\n    System.out.println("\\t" + people);\n    Collections.sort(people, new Person.AgeComparator());\n    System.out.println("Sort using Age Comparator");\n    System.out.println("\\t" + people);\n    Collections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\n    System.out.println("Sort using Reverse Age Comparator");\n    System.out.println("\\t" + people);\n}'
p547
aS'people.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());'
p548
aS'List<Person> people = new ArrayList<Person>();\npeople.add(new Person("Homer", 38));\npeople.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);'
p549
aS'List<Person> people = new ArrayList<Person>();\npeople.add(new Person("Homer", 38));\npeople.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));'
p550
aS'System.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);'
p551
aS'people.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\nSystem.out.println("Sort using Reverse Age Comparator");\nSystem.out.println("\\t" + people);'
p552
aS'System.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\nSystem.out.println("Sort using Reverse Age Comparator");\nSystem.out.println("\\t" + people);'
p553
aS'System.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");'
p554
aS'people.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");'
p555
aS'public String toString() {\n    return name + " : " + age;\n}'
p556
aS'people.add(new Person("Homer", 38));\npeople.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());'
p557
aS'System.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);'
p558
aS'people.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());'
p559
aS'int age;\npublic Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n}\npublic String getName() {\n    return name;\n}\npublic int getAge() {\n    return age;\n}\npublic String toString() {\n    return name + " : " + age;\n}\npublic int compareTo(Person p) {\n    return getName().compareTo(p.getName());\n}\nstatic class AgeComparator implements Comparator<Person> {\n\n    public int compare(Person p1, Person p2) {\n        int age1 = p1.getAge();\n        int age2 = p2.getAge();\n        if (age1 == age2)\n            return 0;\n        else if (age1 > age2)\n            return 1;\n        else\n            return -1;\n    }\n}'
p560
aS'Collections.sort(people);\nSystem.out.println("Sort by Natural order");'
p561
aS'System.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\nSystem.out.println("Sort using Reverse Age Comparator");\nSystem.out.println("\\t" + people);'
p562
aS'return 1;'
p563
aS'List<Person> people = new ArrayList<Person>();\npeople.add(new Person("Homer", 38));\npeople.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));'
p564
aS'people.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);'
p565
aS'List<Person> people = new ArrayList<Person>();\npeople.add(new Person("Homer", 38));\npeople.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());'
p566
aS'System.out.println(Arrays.toString(s));'
p567
aS'System.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\nSystem.out.println("Sort using Reverse Age Comparator");\nSystem.out.println("\\t" + people);'
p568
aS'this.name = name;\nthis.age = age;'
p569
aS'return a.getName().compareTo(b.getName());'
p570
aS'public String getName() {\n    return name;\n}\npublic int getAge() {\n    return age;\n}\npublic String toString() {\n    return name + " : " + age;\n}\npublic int compareTo(Person p) {\n    return getName().compareTo(p.getName());\n}\nstatic class AgeComparator implements Comparator<Person> {\n\n    public int compare(Person p1, Person p2) {\n        int age1 = p1.getAge();\n        int age2 = p2.getAge();\n        if (age1 == age2)\n            return 0;\n        else if (age1 > age2)\n            return 1;\n        else\n            return -1;\n    }\n}\npublic static void main(String[] args) {\n    List<Person> people = new ArrayList<Person>();\n    people.add(new Person("Homer", 38));\n    people.add(new Person("Marge", 35));\n    people.add(new Person("Bart", 15));\n    people.add(new Person("Lisa", 13));\n    Collections.sort(people);\n    System.out.println("Sort by Natural order");\n    System.out.println("\\t" + people);\n    Collections.sort(people, Collections.reverseOrder());\n    System.out.println("Sort by reverse natural order");\n    System.out.println("\\t" + people);\n    Collections.sort(people, new Person.AgeComparator());\n    System.out.println("Sort using Age Comparator");\n    System.out.println("\\t" + people);\n    Collections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\n    System.out.println("Sort using Reverse Age Comparator");\n    System.out.println("\\t" + people);\n}'
p571
aS'people.add(new Person("Homer", 38));\npeople.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\nSystem.out.println("Sort using Reverse Age Comparator");'
p572
aS'System.out.println("Sort by Natural order");'
p573
aS'Collections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);'
p574
aS'public int compareTo(Person p) {\n    return getName().compareTo(p.getName());\n}\nstatic class AgeComparator implements Comparator<Person> {\n\n    public int compare(Person p1, Person p2) {\n        int age1 = p1.getAge();\n        int age2 = p2.getAge();\n        if (age1 == age2)\n            return 0;\n        else if (age1 > age2)\n            return 1;\n        else\n            return -1;\n    }\n}'
p575
aS'people.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));'
p576
aS'System.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());'
p577
aS'Collections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\nSystem.out.println("Sort using Reverse Age Comparator");\nSystem.out.println("\\t" + people);'
p578
aS'Collections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");'
p579
aS'public int getAge() {\n    return age;\n}'
p580
aS'Collections.sort(people);'
p581
aS'System.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());'
p582
aS'public String getName() {\n    return name;\n}\npublic int getAge() {\n    return age;\n}\npublic String toString() {\n    return name + " : " + age;\n}\npublic int compareTo(Person p) {\n    return getName().compareTo(p.getName());\n}'
p583
aS'List<Person> people = new ArrayList<Person>();\npeople.add(new Person("Homer", 38));\npeople.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\nSystem.out.println("Sort using Reverse Age Comparator");'
p584
aS'System.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\nSystem.out.println("Sort using Reverse Age Comparator");\nSystem.out.println("\\t" + people);'
p585
aS'String name;\nint age;'
p586
aS'people.add(new Person("Homer", 38));\npeople.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);'
p587
aS'public int getAge() {\n    return age;\n}\npublic String toString() {\n    return name + " : " + age;\n}\npublic int compareTo(Person p) {\n    return getName().compareTo(p.getName());\n}'
p588
aS'personList.sort((a, b) -> b.getName().compareTo(a.getName()));'
p589
aS'people.add(new Person("Homer", 38));'
p590
aS'people.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\nSystem.out.println("Sort using Reverse Age Comparator");'
p591
aS'int age2 = p2.getAge();\nif (age1 == age2)\n    return 0;\nelse if (age1 > age2)\n    return 1;\nelse\n    return -1;'
p592
aS'System.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\nSystem.out.println("Sort using Reverse Age Comparator");'
p593
aS'Arrays.sort(s, new Comparator<String>() {\n\n    @Override\n    public int compare(String o1, String o2) {\n        return o2.compareTo(o1);\n    }\n});'
p594
aS'System.out.println("Sort using Age Comparator");'
p595
aS'Collections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");'
p596
aS'public Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n}\npublic String getName() {\n    return name;\n}'
p597
aS'Collections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\nSystem.out.println("Sort using Reverse Age Comparator");'
p598
aS'people.add(new Person("Homer", 38));\npeople.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);'
p599
aS'System.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);'
p600
aS'System.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\nSystem.out.println("Sort using Reverse Age Comparator");'
p601
aS'public static void main(String[] args) {\n    List<Person> people = new ArrayList<Person>();\n    people.add(new Person("Homer", 38));\n    people.add(new Person("Marge", 35));\n    people.add(new Person("Bart", 15));\n    people.add(new Person("Lisa", 13));\n    Collections.sort(people);\n    System.out.println("Sort by Natural order");\n    System.out.println("\\t" + people);\n    Collections.sort(people, Collections.reverseOrder());\n    System.out.println("Sort by reverse natural order");\n    System.out.println("\\t" + people);\n    Collections.sort(people, new Person.AgeComparator());\n    System.out.println("Sort using Age Comparator");\n    System.out.println("\\t" + people);\n    Collections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\n    System.out.println("Sort using Reverse Age Comparator");\n    System.out.println("\\t" + people);\n}'
p602
aS'List<Person> people = new ArrayList<Person>();\npeople.add(new Person("Homer", 38));\npeople.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");'
p603
aS'System.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");'
p604
aS'Collections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);'
p605
aS'String name;'
p606
aS'List<Person> people = new ArrayList<Person>();\npeople.add(new Person("Homer", 38));\npeople.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");'
p607
aS'System.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);'
p608
aS'people.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);'
p609
aS'public int compare(Person p1, Person p2) {\n    int age1 = p1.getAge();\n    int age2 = p2.getAge();\n    if (age1 == age2)\n        return 0;\n    else if (age1 > age2)\n        return 1;\n    else\n        return -1;\n}'
p610
aS'people.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);'
p611
aS'people.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());'
p612
aS'people.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");'
p613
aS'Collections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\nSystem.out.println("Sort using Reverse Age Comparator");\nSystem.out.println("\\t" + people);'
p614
aS'Collections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);'
p615
aS'people.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());'
p616
aS'if (age1 == age2) {\n}'
p617
aS'static class AgeComparator implements Comparator<Person> {\n\n    public int compare(Person p1, Person p2) {\n        int age1 = p1.getAge();\n        int age2 = p2.getAge();\n        if (age1 == age2)\n            return 0;\n        else if (age1 > age2)\n            return 1;\n        else\n            return -1;\n    }\n}'
p618
aS'return name;'
p619
aS'int age;\npublic Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n}\npublic String getName() {\n    return name;\n}\npublic int getAge() {\n    return age;\n}\npublic String toString() {\n    return name + " : " + age;\n}'
p620
aS'people.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");'
p621
aS'people.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);'
p622
aS'int age2 = p2.getAge();'
p623
aS'Collections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));'
p624
aS'people.add(new Person("Marge", 35));\npeople.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));\nSystem.out.println("Sort using Reverse Age Comparator");'
p625
aS'people.add(new Person("Bart", 15));\npeople.add(new Person("Lisa", 13));\nCollections.sort(people);\nSystem.out.println("Sort by Natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder());\nSystem.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);'
p626
aS'System.out.println("Sort by reverse natural order");\nSystem.out.println("\\t" + people);\nCollections.sort(people, new Person.AgeComparator());\nSystem.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));'
p627
aS'System.out.println("Sort using Age Comparator");\nSystem.out.println("\\t" + people);\nCollections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));'
p628
atp629
Rp630
sI822322
g1
((lp631
S'Map<K2, K1> m2;'
p632
aS'Map<K2, K1> m2;\nMap<K1, V> m1;'
p633
aS'Map<K1, V> m1;'
p634
atp635
Rp636
sI4967482
g1
((lp637
S'String redirectURL = "http://whatever.com/myJSPFile.jsp";'
p638
aS'String redirectURL = "http://whatever.com/myJSPFile.jsp";\nresponse.sendRedirect(redirectURL);'
p639
aS'response.sendRedirect(redirectURL);'
p640
atp641
Rp642
sI10959424
g1
((lp643
S'double i2 = i / 60000;'
p644
aS'double value = 12.3457652133;'
p645
aS'double i2 = i / 60000;\ntv.setText(new DecimalFormat("##.##").format(i2));'
p646
aS'tv.setText(new DecimalFormat("##.##").format(i2));'
p647
aS'value = Double.parseDouble(new DecimalFormat("##.####").format(value));'
p648
atp649
Rp650
sI15874117
g1
((lp651
S'@Override\npublic void run() {\n    buttons[inew][jnew].setBackgroundColor(Color.BLACK);\n}'
p652
aS'public void onFinish() {\n}'
p653
aS'final Handler handler = new Handler();\nhandler.postDelayed(new Runnable() {\n\n    @Override\n    public void run() {\n        buttons[inew][jnew].setBackgroundColor(Color.BLACK);\n    }\n}, 5000);'
p654
aS'buttons[inew][jnew].setBackgroundColor(Color.BLACK);'
p655
aS'public void onFinish() {\n}\npublic void onTick(long millisUntilFinished) {\n}'
p656
aS'final Handler handler = new Handler();'
p657
aS'public void run() {\n    buttons[inew][jnew].setBackgroundColor(Color.BLACK);\n}'
p658
aS'handler.postDelayed(new Runnable() {\n\n    @Override\n    public void run() {\n        buttons[inew][jnew].setBackgroundColor(Color.BLACK);\n    }\n}, 5000);'
p659
aS'new CountDownTimer(30000, 1000) {\n\n    public void onFinish() {\n    }\n\n    public void onTick(long millisUntilFinished) {\n    }\n}.start();'
p660
aS'public void onTick(long millisUntilFinished) {\n}'
p661
atp662
Rp663
sI8119366
g1
((lp664
S'printMap(unsortMap);'
p665
aS'System.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);'
p666
aS'unsortMap.put("A", 80);\nunsortMap.put("D", 20);\nunsortMap.put("C", 70);'
p667
aS'public static boolean ASC = true;'
p668
aS'Collections.sort(mapValues);\nCollections.sort(mapKeys);\nLinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n    String val = valueIt.next();\n}'
p669
aS'Iterator<Integer> keyIt = mapKeys.iterator();\nwhile (keyIt.hasNext()) {\n    Integer key = keyIt.next();\n}'
p670
aS'import java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\npublic class SortMapByValue {\n\n    public static boolean ASC = true;\n\n    public static boolean DESC = false;\n\n    public static void main(String[] args) {\n        Map<String, Integer> unsortMap = new HashMap<String, Integer>();\n        unsortMap.put("B", 55);\n        unsortMap.put("A", 80);\n        unsortMap.put("D", 20);\n        unsortMap.put("C", 70);\n        System.out.println("Before sorting......");\n        printMap(unsortMap);\n        System.out.println("After sorting ascending order......");\n        Map<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\n        printMap(sortedMapAsc);\n        System.out.println("After sorting descindeng order......");\n        Map<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\n        printMap(sortedMapDesc);\n    }\n\n    private static Map<String, Integer> sortByComparator(Map<String, Integer> unsortMap, final boolean order) {\n        List<Entry<String, Integer>> list = new LinkedList<Entry<String, Integer>>(unsortMap.entrySet());\n        Collections.sort(list, new Comparator<Entry<String, Integer>>() {\n\n            public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {\n                if (order) {\n                    return o1.getValue().compareTo(o2.getValue());\n                } else {\n                    return o2.getValue().compareTo(o1.getValue());\n                }\n            }\n        });\n        Map<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();\n        for (Entry<String, Integer> entry : list) {\n            sortedMap.put(entry.getKey(), entry.getValue());\n        }\n        return sortedMap;\n    }\n\n    public static void printMap(Map<String, Integer> map) {\n        for (Entry<String, Integer> entry : map.entrySet()) {\n            System.out.println("Key : " + entry.getKey() + " Value : " + entry.getValue());\n        }\n    }\n}'
p671
aS'unsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);\nSystem.out.println("After sorting descindeng order......");'
p672
aS'keyIt.remove();\nsortedMap.put(key, val);'
p673
aS'import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;'
p674
aS'String comp2 = val;\nif (comp1.equals(comp2)) {\n    keyIt.remove();\n}'
p675
aS'Collections.sort(mapKeys);\nLinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n}'
p676
aS'Map<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);'
p677
aS'Map<String, Integer> unsortMap = new HashMap<String, Integer>();\nunsortMap.put("B", 55);\nunsortMap.put("A", 80);\nunsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);'
p678
aS'String comp1 = passedMap.get(key);\nString comp2 = val;'
p679
aS'List<Entry<String, Integer>> list = new LinkedList<Entry<String, Integer>>(unsortMap.entrySet());\nCollections.sort(list, new Comparator<Entry<String, Integer>>() {\n\n    public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {\n        if (order) {\n            return o1.getValue().compareTo(o2.getValue());\n        } else {\n            return o2.getValue().compareTo(o1.getValue());\n        }\n    }\n});\nMap<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();\nfor (Entry<String, Integer> entry : list) {\n    sortedMap.put(entry.getKey(), entry.getValue());\n}'
p680
aS'unsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);\nSystem.out.println("After sorting descindeng order......");\nMap<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\nprintMap(sortedMapDesc);'
p681
aS'import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;'
p682
aS'public static void main(String[] args) {\n    Map<String, Integer> unsortMap = new HashMap<String, Integer>();\n    unsortMap.put("B", 55);\n    unsortMap.put("A", 80);\n    unsortMap.put("D", 20);\n    unsortMap.put("C", 70);\n    System.out.println("Before sorting......");\n    printMap(unsortMap);\n    System.out.println("After sorting ascending order......");\n    Map<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\n    printMap(sortedMapAsc);\n    System.out.println("After sorting descindeng order......");\n    Map<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\n    printMap(sortedMapDesc);\n}\nprivate static Map<String, Integer> sortByComparator(Map<String, Integer> unsortMap, final boolean order) {\n    List<Entry<String, Integer>> list = new LinkedList<Entry<String, Integer>>(unsortMap.entrySet());\n    Collections.sort(list, new Comparator<Entry<String, Integer>>() {\n\n        public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {\n            if (order) {\n                return o1.getValue().compareTo(o2.getValue());\n            } else {\n                return o2.getValue().compareTo(o1.getValue());\n            }\n        }\n    });\n    Map<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();\n    for (Entry<String, Integer> entry : list) {\n        sortedMap.put(entry.getKey(), entry.getValue());\n    }\n    return sortedMap;\n}'
p683
aS'System.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);\nSystem.out.println("After sorting descindeng order......");\nMap<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);'
p684
aS'import java.util.HashMap;\nimport java.util.LinkedHashMap;'
p685
aS'unsortMap.put("C", 70);'
p686
aS'Iterator<Integer> keyIt = mapKeys.iterator();\nwhile (keyIt.hasNext()) {\n    Integer key = keyIt.next();\n    String comp1 = passedMap.get(key);\n    String comp2 = val;\n}'
p687
aS'return o1.getValue().compareTo(o2.getValue());'
p688
aS'import java.util.Collections;'
p689
aS'while (valueIt.hasNext()) {\n    String val = valueIt.next();\n    Iterator<Integer> keyIt = mapKeys.iterator();\n}'
p690
aS'printMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);\nSystem.out.println("After sorting descindeng order......");\nMap<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\nprintMap(sortedMapDesc);'
p691
aS'Map<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();\nfor (Entry<String, Integer> entry : list) {\n    sortedMap.put(entry.getKey(), entry.getValue());\n}\nreturn sortedMap;'
p692
aS'Iterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n    String val = valueIt.next();\n    Iterator<Integer> keyIt = mapKeys.iterator();\n    while (keyIt.hasNext()) {\n        Integer key = keyIt.next();\n        String comp1 = passedMap.get(key);\n        String comp2 = val;\n        if (comp1.equals(comp2)) {\n            keyIt.remove();\n            sortedMap.put(key, val);\n            break;\n        }\n    }\n}'
p693
aS'package com.rais;\n\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;'
p694
aS'unsortMap.put("B", 55);\nunsortMap.put("A", 80);\nunsortMap.put("D", 20);\nunsortMap.put("C", 70);'
p695
aS'List<String> mapValues = new ArrayList<>(passedMap.values());\nCollections.sort(mapValues);\nCollections.sort(mapKeys);\nLinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();'
p696
aS'import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\npublic class SortMapByValue {\n\n    public static boolean ASC = true;\n\n    public static boolean DESC = false;\n\n    public static void main(String[] args) {\n        Map<String, Integer> unsortMap = new HashMap<String, Integer>();\n        unsortMap.put("B", 55);\n        unsortMap.put("A", 80);\n        unsortMap.put("D", 20);\n        unsortMap.put("C", 70);\n        System.out.println("Before sorting......");\n        printMap(unsortMap);\n        System.out.println("After sorting ascending order......");\n        Map<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\n        printMap(sortedMapAsc);\n        System.out.println("After sorting descindeng order......");\n        Map<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\n        printMap(sortedMapDesc);\n    }\n\n    private static Map<String, Integer> sortByComparator(Map<String, Integer> unsortMap, final boolean order) {\n        List<Entry<String, Integer>> list = new LinkedList<Entry<String, Integer>>(unsortMap.entrySet());\n        Collections.sort(list, new Comparator<Entry<String, Integer>>() {\n\n            public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {\n                if (order) {\n                    return o1.getValue().compareTo(o2.getValue());\n                } else {\n                    return o2.getValue().compareTo(o1.getValue());\n                }\n            }\n        });\n        Map<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();\n        for (Entry<String, Integer> entry : list) {\n            sortedMap.put(entry.getKey(), entry.getValue());\n        }\n        return sortedMap;\n    }\n\n    public static void printMap(Map<String, Integer> map) {\n        for (Entry<String, Integer> entry : map.entrySet()) {\n            System.out.println("Key : " + entry.getKey() + " Value : " + entry.getValue());\n        }\n    }\n}'
p697
aS'import java.util.Map;\nimport java.util.Map.Entry;\n\npublic class SortMapByValue {\n\n    public static boolean ASC = true;\n\n    public static boolean DESC = false;\n\n    public static void main(String[] args) {\n        Map<String, Integer> unsortMap = new HashMap<String, Integer>();\n        unsortMap.put("B", 55);\n        unsortMap.put("A", 80);\n        unsortMap.put("D", 20);\n        unsortMap.put("C", 70);\n        System.out.println("Before sorting......");\n        printMap(unsortMap);\n        System.out.println("After sorting ascending order......");\n        Map<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\n        printMap(sortedMapAsc);\n        System.out.println("After sorting descindeng order......");\n        Map<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\n        printMap(sortedMapDesc);\n    }\n\n    private static Map<String, Integer> sortByComparator(Map<String, Integer> unsortMap, final boolean order) {\n        List<Entry<String, Integer>> list = new LinkedList<Entry<String, Integer>>(unsortMap.entrySet());\n        Collections.sort(list, new Comparator<Entry<String, Integer>>() {\n\n            public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {\n                if (order) {\n                    return o1.getValue().compareTo(o2.getValue());\n                } else {\n                    return o2.getValue().compareTo(o1.getValue());\n                }\n            }\n        });\n        Map<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();\n        for (Entry<String, Integer> entry : list) {\n            sortedMap.put(entry.getKey(), entry.getValue());\n        }\n        return sortedMap;\n    }\n\n    public static void printMap(Map<String, Integer> map) {\n        for (Entry<String, Integer> entry : map.entrySet()) {\n            System.out.println("Key : " + entry.getKey() + " Value : " + entry.getValue());\n        }\n    }\n}'
p698
aS'public static boolean DESC = false;\npublic static void main(String[] args) {\n    Map<String, Integer> unsortMap = new HashMap<String, Integer>();\n    unsortMap.put("B", 55);\n    unsortMap.put("A", 80);\n    unsortMap.put("D", 20);\n    unsortMap.put("C", 70);\n    System.out.println("Before sorting......");\n    printMap(unsortMap);\n    System.out.println("After sorting ascending order......");\n    Map<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\n    printMap(sortedMapAsc);\n    System.out.println("After sorting descindeng order......");\n    Map<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\n    printMap(sortedMapDesc);\n}\nprivate static Map<String, Integer> sortByComparator(Map<String, Integer> unsortMap, final boolean order) {\n    List<Entry<String, Integer>> list = new LinkedList<Entry<String, Integer>>(unsortMap.entrySet());\n    Collections.sort(list, new Comparator<Entry<String, Integer>>() {\n\n        public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {\n            if (order) {\n                return o1.getValue().compareTo(o2.getValue());\n            } else {\n                return o2.getValue().compareTo(o1.getValue());\n            }\n        }\n    });\n    Map<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();\n    for (Entry<String, Integer> entry : list) {\n        sortedMap.put(entry.getKey(), entry.getValue());\n    }\n    return sortedMap;\n}\npublic static void printMap(Map<String, Integer> map) {\n    for (Entry<String, Integer> entry : map.entrySet()) {\n        System.out.println("Key : " + entry.getKey() + " Value : " + entry.getValue());\n    }\n}'
p699
aS'public static void main(String[] args) {\n    Map<String, Integer> unsortMap = new HashMap<String, Integer>();\n    unsortMap.put("B", 55);\n    unsortMap.put("A", 80);\n    unsortMap.put("D", 20);\n    unsortMap.put("C", 70);\n    System.out.println("Before sorting......");\n    printMap(unsortMap);\n    System.out.println("After sorting ascending order......");\n    Map<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\n    printMap(sortedMapAsc);\n    System.out.println("After sorting descindeng order......");\n    Map<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\n    printMap(sortedMapDesc);\n}\nprivate static Map<String, Integer> sortByComparator(Map<String, Integer> unsortMap, final boolean order) {\n    List<Entry<String, Integer>> list = new LinkedList<Entry<String, Integer>>(unsortMap.entrySet());\n    Collections.sort(list, new Comparator<Entry<String, Integer>>() {\n\n        public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {\n            if (order) {\n                return o1.getValue().compareTo(o2.getValue());\n            } else {\n                return o2.getValue().compareTo(o1.getValue());\n            }\n        }\n    });\n    Map<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();\n    for (Entry<String, Integer> entry : list) {\n        sortedMap.put(entry.getKey(), entry.getValue());\n    }\n    return sortedMap;\n}\npublic static void printMap(Map<String, Integer> map) {\n    for (Entry<String, Integer> entry : map.entrySet()) {\n        System.out.println("Key : " + entry.getKey() + " Value : " + entry.getValue());\n    }\n}'
p700
aS'import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;'
p701
aS'Map<String, Integer> unsortMap = new HashMap<String, Integer>();\nunsortMap.put("B", 55);\nunsortMap.put("A", 80);\nunsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);\nSystem.out.println("After sorting descindeng order......");'
p702
aS'Map<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);\nSystem.out.println("After sorting descindeng order......");'
p703
aS'String comp2 = val;\nif (comp1.equals(comp2)) {\n    keyIt.remove();\n    sortedMap.put(key, val);\n    break;\n}'
p704
aS'unsortMap.put("B", 55);\nunsortMap.put("A", 80);\nunsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);'
p705
aS'printMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);\nSystem.out.println("After sorting descindeng order......");\nMap<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);'
p706
aS'System.out.println("Before sorting......");'
p707
aS'List<Integer> mapKeys = new ArrayList<>(passedMap.keySet());\nList<String> mapValues = new ArrayList<>(passedMap.values());\nCollections.sort(mapValues);\nCollections.sort(mapKeys);\nLinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();'
p708
aS'List<String> mapValues = new ArrayList<>(passedMap.values());\nCollections.sort(mapValues);\nCollections.sort(mapKeys);'
p709
aS'if (comp1.equals(comp2)) {\n    keyIt.remove();\n    sortedMap.put(key, val);\n    break;\n}'
p710
aS'package com.rais;\n\nimport java.util.Collections;\nimport java.util.Comparator;'
p711
aS'public static boolean ASC = true;\npublic static boolean DESC = false;\npublic static void main(String[] args) {\n    Map<String, Integer> unsortMap = new HashMap<String, Integer>();\n    unsortMap.put("B", 55);\n    unsortMap.put("A", 80);\n    unsortMap.put("D", 20);\n    unsortMap.put("C", 70);\n    System.out.println("Before sorting......");\n    printMap(unsortMap);\n    System.out.println("After sorting ascending order......");\n    Map<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\n    printMap(sortedMapAsc);\n    System.out.println("After sorting descindeng order......");\n    Map<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\n    printMap(sortedMapDesc);\n}\nprivate static Map<String, Integer> sortByComparator(Map<String, Integer> unsortMap, final boolean order) {\n    List<Entry<String, Integer>> list = new LinkedList<Entry<String, Integer>>(unsortMap.entrySet());\n    Collections.sort(list, new Comparator<Entry<String, Integer>>() {\n\n        public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {\n            if (order) {\n                return o1.getValue().compareTo(o2.getValue());\n            } else {\n                return o2.getValue().compareTo(o1.getValue());\n            }\n        }\n    });\n    Map<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();\n    for (Entry<String, Integer> entry : list) {\n        sortedMap.put(entry.getKey(), entry.getValue());\n    }\n    return sortedMap;\n}'
p712
aS'Collections.sort(mapKeys);\nLinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();'
p713
aS'unsortMap.put("C", 70);\nSystem.out.println("Before sorting......");'
p714
aS'for (Entry<String, Integer> entry : list) {\n}'
p715
aS'unsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);\nSystem.out.println("After sorting descindeng order......");'
p716
aS'import java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;'
p717
aS'import java.util.Collections;\nimport java.util.Comparator;'
p718
aS'public LinkedHashMap<Integer, String> sortHashMapByValues(HashMap<Integer, String> passedMap) {\n    List<Integer> mapKeys = new ArrayList<>(passedMap.keySet());\n    List<String> mapValues = new ArrayList<>(passedMap.values());\n    Collections.sort(mapValues);\n    Collections.sort(mapKeys);\n    LinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\n    Iterator<String> valueIt = mapValues.iterator();\n    while (valueIt.hasNext()) {\n        String val = valueIt.next();\n        Iterator<Integer> keyIt = mapKeys.iterator();\n        while (keyIt.hasNext()) {\n            Integer key = keyIt.next();\n            String comp1 = passedMap.get(key);\n            String comp2 = val;\n            if (comp1.equals(comp2)) {\n                keyIt.remove();\n                sortedMap.put(key, val);\n                break;\n            }\n        }\n    }\n    return sortedMap;\n}'
p719
aS'LinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();'
p720
aS'Collections.sort(mapKeys);'
p721
aS'sortedMap.put(key, val);'
p722
aS'unsortMap.put("A", 80);\nunsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);'
p723
aS'Iterator<Integer> keyIt = mapKeys.iterator();'
p724
aS'List<Entry<String, Integer>> list = new LinkedList<Entry<String, Integer>>(unsortMap.entrySet());\nCollections.sort(list, new Comparator<Entry<String, Integer>>() {\n\n    public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {\n        if (order) {\n            return o1.getValue().compareTo(o2.getValue());\n        } else {\n            return o2.getValue().compareTo(o1.getValue());\n        }\n    }\n});\nMap<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();\nfor (Entry<String, Integer> entry : list) {\n}'
p725
aS'Collections.sort(mapValues);\nCollections.sort(mapKeys);\nLinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n    String val = valueIt.next();\n    Iterator<Integer> keyIt = mapKeys.iterator();\n    while (keyIt.hasNext()) {\n        Integer key = keyIt.next();\n        String comp1 = passedMap.get(key);\n        String comp2 = val;\n        if (comp1.equals(comp2)) {\n            keyIt.remove();\n            sortedMap.put(key, val);\n            break;\n        }\n    }\n}\nreturn sortedMap;'
p726
aS'String comp1 = passedMap.get(key);'
p727
aS'import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;'
p728
aS'Map<String, Integer> unsortMap = new HashMap<String, Integer>();\nunsortMap.put("B", 55);\nunsortMap.put("A", 80);\nunsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);'
p729
aS'Collections.sort(mapValues);\nCollections.sort(mapKeys);\nLinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n    String val = valueIt.next();\n    Iterator<Integer> keyIt = mapKeys.iterator();\n    while (keyIt.hasNext()) {\n        Integer key = keyIt.next();\n        String comp1 = passedMap.get(key);\n        String comp2 = val;\n        if (comp1.equals(comp2)) {\n            keyIt.remove();\n            sortedMap.put(key, val);\n            break;\n        }\n    }\n}'
p730
aS'import java.util.Map;\nimport java.util.Map.Entry;'
p731
aS'List<Integer> mapKeys = new ArrayList<>(passedMap.keySet());\nList<String> mapValues = new ArrayList<>(passedMap.values());\nCollections.sort(mapValues);\nCollections.sort(mapKeys);\nLinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();'
p732
aS'package com.rais;\n\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;'
p733
aS'List<Integer> mapKeys = new ArrayList<>(passedMap.keySet());\nList<String> mapValues = new ArrayList<>(passedMap.values());\nCollections.sort(mapValues);\nCollections.sort(mapKeys);\nLinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n    String val = valueIt.next();\n    Iterator<Integer> keyIt = mapKeys.iterator();\n}'
p734
aS'printMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);'
p735
aS'Iterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n    String val = valueIt.next();\n}'
p736
aS'System.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");'
p737
aS'unsortMap.put("A", 80);\nunsortMap.put("D", 20);'
p738
aS'Map<Integer, String> sortedMap = unsortedMap.entrySet().stream().sorted(Entry.comparingByValue()).collect(Collectors.toMap(Entry::getKey, Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));'
p739
aS'unsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");'
p740
aS'while (valueIt.hasNext()) {\n}'
p741
aS'return sortedMap;'
p742
aS'import java.util.Comparator;'
p743
aS'List<String> mapValues = new ArrayList<>(passedMap.values());'
p744
aS'import java.util.List;\nimport java.util.Map;'
p745
aS'unsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);'
p746
aS'unsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");'
p747
aS'unsortMap.put("B", 55);\nunsortMap.put("A", 80);\nunsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);\nSystem.out.println("After sorting descindeng order......");'
p748
aS'Collections.sort(mapValues);\nCollections.sort(mapKeys);\nLinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();'
p749
aS'unsortMap.put("A", 80);\nunsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);\nSystem.out.println("After sorting descindeng order......");\nMap<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\nprintMap(sortedMapDesc);'
p750
aS'import java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;'
p751
aS'Map<String, Integer> unsortMap = new HashMap<String, Integer>();'
p752
aS'keyIt.remove();\nsortedMap.put(key, val);\nbreak;'
p753
aS'Collections.sort(mapValues);\nCollections.sort(mapKeys);\nLinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();'
p754
aS'import java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;'
p755
aS'package com.rais;\n\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;'
p756
aS'import java.util.LinkedList;'
p757
aS'LinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n}'
p758
aS'while (keyIt.hasNext()) {\n    Integer key = keyIt.next();\n    String comp1 = passedMap.get(key);\n    String comp2 = val;\n    if (comp1.equals(comp2)) {\n        keyIt.remove();\n        sortedMap.put(key, val);\n        break;\n    }\n}'
p759
aS'import java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;'
p760
aS'unsortMap.put("A", 80);\nunsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");'
p761
aS'import java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;'
p762
aS'package com.rais;\n\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\npublic class SortMapByValue {\n\n    public static boolean ASC = true;\n\n    public static boolean DESC = false;\n\n    public static void main(String[] args) {\n        Map<String, Integer> unsortMap = new HashMap<String, Integer>();\n        unsortMap.put("B", 55);\n        unsortMap.put("A", 80);\n        unsortMap.put("D", 20);\n        unsortMap.put("C", 70);\n        System.out.println("Before sorting......");\n        printMap(unsortMap);\n        System.out.println("After sorting ascending order......");\n        Map<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\n        printMap(sortedMapAsc);\n        System.out.println("After sorting descindeng order......");\n        Map<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\n        printMap(sortedMapDesc);\n    }\n\n    private static Map<String, Integer> sortByComparator(Map<String, Integer> unsortMap, final boolean order) {\n        List<Entry<String, Integer>> list = new LinkedList<Entry<String, Integer>>(unsortMap.entrySet());\n        Collections.sort(list, new Comparator<Entry<String, Integer>>() {\n\n            public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {\n                if (order) {\n                    return o1.getValue().compareTo(o2.getValue());\n                } else {\n                    return o2.getValue().compareTo(o1.getValue());\n                }\n            }\n        });\n        Map<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();\n        for (Entry<String, Integer> entry : list) {\n            sortedMap.put(entry.getKey(), entry.getValue());\n        }\n        return sortedMap;\n    }\n\n    public static void printMap(Map<String, Integer> map) {\n        for (Entry<String, Integer> entry : map.entrySet()) {\n            System.out.println("Key : " + entry.getKey() + " Value : " + entry.getValue());\n        }\n    }\n}'
p763
aS'public static boolean ASC = true;\npublic static boolean DESC = false;\npublic static void main(String[] args) {\n    Map<String, Integer> unsortMap = new HashMap<String, Integer>();\n    unsortMap.put("B", 55);\n    unsortMap.put("A", 80);\n    unsortMap.put("D", 20);\n    unsortMap.put("C", 70);\n    System.out.println("Before sorting......");\n    printMap(unsortMap);\n    System.out.println("After sorting ascending order......");\n    Map<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\n    printMap(sortedMapAsc);\n    System.out.println("After sorting descindeng order......");\n    Map<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\n    printMap(sortedMapDesc);\n}\nprivate static Map<String, Integer> sortByComparator(Map<String, Integer> unsortMap, final boolean order) {\n    List<Entry<String, Integer>> list = new LinkedList<Entry<String, Integer>>(unsortMap.entrySet());\n    Collections.sort(list, new Comparator<Entry<String, Integer>>() {\n\n        public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {\n            if (order) {\n                return o1.getValue().compareTo(o2.getValue());\n            } else {\n                return o2.getValue().compareTo(o1.getValue());\n            }\n        }\n    });\n    Map<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();\n    for (Entry<String, Integer> entry : list) {\n        sortedMap.put(entry.getKey(), entry.getValue());\n    }\n    return sortedMap;\n}\npublic static void printMap(Map<String, Integer> map) {\n    for (Entry<String, Integer> entry : map.entrySet()) {\n        System.out.println("Key : " + entry.getKey() + " Value : " + entry.getValue());\n    }\n}'
p764
aS'printMap(unsortMap);\nSystem.out.println("After sorting ascending order......");'
p765
aS'import java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;'
p766
aS'System.out.println("After sorting descindeng order......");'
p767
aS'Iterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n    String val = valueIt.next();\n    Iterator<Integer> keyIt = mapKeys.iterator();\n}'
p768
aS'while (valueIt.hasNext()) {\n    String val = valueIt.next();\n    Iterator<Integer> keyIt = mapKeys.iterator();\n    while (keyIt.hasNext()) {\n        Integer key = keyIt.next();\n        String comp1 = passedMap.get(key);\n        String comp2 = val;\n        if (comp1.equals(comp2)) {\n            keyIt.remove();\n            sortedMap.put(key, val);\n            break;\n        }\n    }\n}'
p769
aS'System.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);'
p770
aS'private static Map<String, Integer> sortByComparator(Map<String, Integer> unsortMap, final boolean order) {\n    List<Entry<String, Integer>> list = new LinkedList<Entry<String, Integer>>(unsortMap.entrySet());\n    Collections.sort(list, new Comparator<Entry<String, Integer>>() {\n\n        public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {\n            if (order) {\n                return o1.getValue().compareTo(o2.getValue());\n            } else {\n                return o2.getValue().compareTo(o1.getValue());\n            }\n        }\n    });\n    Map<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();\n    for (Entry<String, Integer> entry : list) {\n        sortedMap.put(entry.getKey(), entry.getValue());\n    }\n    return sortedMap;\n}\npublic static void printMap(Map<String, Integer> map) {\n    for (Entry<String, Integer> entry : map.entrySet()) {\n        System.out.println("Key : " + entry.getKey() + " Value : " + entry.getValue());\n    }\n}'
p771
aS'unsortMap.put("B", 55);\nunsortMap.put("A", 80);\nunsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);\nSystem.out.println("After sorting descindeng order......");\nMap<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\nprintMap(sortedMapDesc);'
p772
aS'String val = valueIt.next();\nIterator<Integer> keyIt = mapKeys.iterator();\nwhile (keyIt.hasNext()) {\n    Integer key = keyIt.next();\n    String comp1 = passedMap.get(key);\n    String comp2 = val;\n    if (comp1.equals(comp2)) {\n        keyIt.remove();\n        sortedMap.put(key, val);\n        break;\n    }\n}'
p773
aS'Collections.sort(list, new Comparator<Entry<String, Integer>>() {\n\n    public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {\n        if (order) {\n            return o1.getValue().compareTo(o2.getValue());\n        } else {\n            return o2.getValue().compareTo(o1.getValue());\n        }\n    }\n});\nMap<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();\nfor (Entry<String, Integer> entry : list) {\n    sortedMap.put(entry.getKey(), entry.getValue());\n}\nreturn sortedMap;'
p774
aS'List<String> mapValues = new ArrayList<>(passedMap.values());\nCollections.sort(mapValues);\nCollections.sort(mapKeys);\nLinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n    String val = valueIt.next();\n    Iterator<Integer> keyIt = mapKeys.iterator();\n}'
p775
aS'String val = valueIt.next();\nIterator<Integer> keyIt = mapKeys.iterator();'
p776
aS'List<Entry<String, Integer>> list = new LinkedList<Entry<String, Integer>>(unsortMap.entrySet());\nCollections.sort(list, new Comparator<Entry<String, Integer>>() {\n\n    public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {\n        if (order) {\n            return o1.getValue().compareTo(o2.getValue());\n        } else {\n            return o2.getValue().compareTo(o1.getValue());\n        }\n    }\n});\nMap<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();'
p777
aS'System.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);'
p778
aS'package com.rais;\n\nimport java.util.Collections;'
p779
aS'printMap(sortedMapAsc);\nSystem.out.println("After sorting descindeng order......");'
p780
aS'List<String> mapValues = new ArrayList<>(passedMap.values());\nCollections.sort(mapValues);\nCollections.sort(mapKeys);\nLinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n    String val = valueIt.next();\n    Iterator<Integer> keyIt = mapKeys.iterator();\n    while (keyIt.hasNext()) {\n        Integer key = keyIt.next();\n        String comp1 = passedMap.get(key);\n        String comp2 = val;\n        if (comp1.equals(comp2)) {\n            keyIt.remove();\n            sortedMap.put(key, val);\n            break;\n        }\n    }\n}\nreturn sortedMap;'
p781
aS'Map<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);'
p782
aS'String comp1 = passedMap.get(key);\nString comp2 = val;\nif (comp1.equals(comp2)) {\n    keyIt.remove();\n    sortedMap.put(key, val);\n}'
p783
aS'while (keyIt.hasNext()) {\n    Integer key = keyIt.next();\n}'
p784
aS'Iterator<Integer> keyIt = mapKeys.iterator();\nwhile (keyIt.hasNext()) {\n    Integer key = keyIt.next();\n    String comp1 = passedMap.get(key);\n    String comp2 = val;\n    if (comp1.equals(comp2)) {\n        keyIt.remove();\n        sortedMap.put(key, val);\n        break;\n    }\n}'
p785
aS'Collections.sort(mapKeys);\nLinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n    String val = valueIt.next();\n    Iterator<Integer> keyIt = mapKeys.iterator();\n    while (keyIt.hasNext()) {\n        Integer key = keyIt.next();\n        String comp1 = passedMap.get(key);\n        String comp2 = val;\n        if (comp1.equals(comp2)) {\n            keyIt.remove();\n            sortedMap.put(key, val);\n            break;\n        }\n    }\n}\nreturn sortedMap;'
p786
aS'Map<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();'
p787
aS'Map<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);\nSystem.out.println("After sorting descindeng order......");\nMap<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\nprintMap(sortedMapDesc);'
p788
aS'import java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\npublic class SortMapByValue {\n\n    public static boolean ASC = true;\n\n    public static boolean DESC = false;\n\n    public static void main(String[] args) {\n        Map<String, Integer> unsortMap = new HashMap<String, Integer>();\n        unsortMap.put("B", 55);\n        unsortMap.put("A", 80);\n        unsortMap.put("D", 20);\n        unsortMap.put("C", 70);\n        System.out.println("Before sorting......");\n        printMap(unsortMap);\n        System.out.println("After sorting ascending order......");\n        Map<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\n        printMap(sortedMapAsc);\n        System.out.println("After sorting descindeng order......");\n        Map<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\n        printMap(sortedMapDesc);\n    }\n\n    private static Map<String, Integer> sortByComparator(Map<String, Integer> unsortMap, final boolean order) {\n        List<Entry<String, Integer>> list = new LinkedList<Entry<String, Integer>>(unsortMap.entrySet());\n        Collections.sort(list, new Comparator<Entry<String, Integer>>() {\n\n            public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {\n                if (order) {\n                    return o1.getValue().compareTo(o2.getValue());\n                } else {\n                    return o2.getValue().compareTo(o1.getValue());\n                }\n            }\n        });\n        Map<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();\n        for (Entry<String, Integer> entry : list) {\n            sortedMap.put(entry.getKey(), entry.getValue());\n        }\n        return sortedMap;\n    }\n\n    public static void printMap(Map<String, Integer> map) {\n        for (Entry<String, Integer> entry : map.entrySet()) {\n            System.out.println("Key : " + entry.getKey() + " Value : " + entry.getValue());\n        }\n    }\n}'
p789
aS'import java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;'
p790
aS'import java.util.LinkedHashMap;\nimport java.util.LinkedList;'
p791
aS'import java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;'
p792
aS'Integer key = keyIt.next();'
p793
aS'import java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;'
p794
aS'unsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);'
p795
aS'unsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);\nSystem.out.println("After sorting descindeng order......");\nMap<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\nprintMap(sortedMapDesc);'
p796
aS'String val = valueIt.next();\nIterator<Integer> keyIt = mapKeys.iterator();\nwhile (keyIt.hasNext()) {\n}'
p797
aS'public static boolean DESC = false;\npublic static void main(String[] args) {\n    Map<String, Integer> unsortMap = new HashMap<String, Integer>();\n    unsortMap.put("B", 55);\n    unsortMap.put("A", 80);\n    unsortMap.put("D", 20);\n    unsortMap.put("C", 70);\n    System.out.println("Before sorting......");\n    printMap(unsortMap);\n    System.out.println("After sorting ascending order......");\n    Map<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\n    printMap(sortedMapAsc);\n    System.out.println("After sorting descindeng order......");\n    Map<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\n    printMap(sortedMapDesc);\n}'
p798
aS'unsortMap.put("D", 20);'
p799
aS'List<String> mapValues = new ArrayList<>(passedMap.values());\nCollections.sort(mapValues);\nCollections.sort(mapKeys);\nLinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();'
p800
aS'import java.util.Map.Entry;\n\npublic class SortMapByValue {\n\n    public static boolean ASC = true;\n\n    public static boolean DESC = false;\n\n    public static void main(String[] args) {\n        Map<String, Integer> unsortMap = new HashMap<String, Integer>();\n        unsortMap.put("B", 55);\n        unsortMap.put("A", 80);\n        unsortMap.put("D", 20);\n        unsortMap.put("C", 70);\n        System.out.println("Before sorting......");\n        printMap(unsortMap);\n        System.out.println("After sorting ascending order......");\n        Map<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\n        printMap(sortedMapAsc);\n        System.out.println("After sorting descindeng order......");\n        Map<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\n        printMap(sortedMapDesc);\n    }\n\n    private static Map<String, Integer> sortByComparator(Map<String, Integer> unsortMap, final boolean order) {\n        List<Entry<String, Integer>> list = new LinkedList<Entry<String, Integer>>(unsortMap.entrySet());\n        Collections.sort(list, new Comparator<Entry<String, Integer>>() {\n\n            public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {\n                if (order) {\n                    return o1.getValue().compareTo(o2.getValue());\n                } else {\n                    return o2.getValue().compareTo(o1.getValue());\n                }\n            }\n        });\n        Map<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();\n        for (Entry<String, Integer> entry : list) {\n            sortedMap.put(entry.getKey(), entry.getValue());\n        }\n        return sortedMap;\n    }\n\n    public static void printMap(Map<String, Integer> map) {\n        for (Entry<String, Integer> entry : map.entrySet()) {\n            System.out.println("Key : " + entry.getKey() + " Value : " + entry.getValue());\n        }\n    }\n}'
p801
aS'Iterator<Integer> keyIt = mapKeys.iterator();\nwhile (keyIt.hasNext()) {\n}'
p802
aS'Map<String, Integer> unsortMap = new HashMap<String, Integer>();\nunsortMap.put("B", 55);\nunsortMap.put("A", 80);\nunsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);\nSystem.out.println("After sorting descindeng order......");\nMap<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\nprintMap(sortedMapDesc);'
p803
aS'package com.rais;\n\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;'
p804
aS'String comp2 = val;\nif (comp1.equals(comp2)) {\n}'
p805
aS'unsortMap.put("B", 55);\nunsortMap.put("A", 80);'
p806
aS'import java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\npublic class SortMapByValue {\n\n    public static boolean ASC = true;\n\n    public static boolean DESC = false;\n\n    public static void main(String[] args) {\n        Map<String, Integer> unsortMap = new HashMap<String, Integer>();\n        unsortMap.put("B", 55);\n        unsortMap.put("A", 80);\n        unsortMap.put("D", 20);\n        unsortMap.put("C", 70);\n        System.out.println("Before sorting......");\n        printMap(unsortMap);\n        System.out.println("After sorting ascending order......");\n        Map<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\n        printMap(sortedMapAsc);\n        System.out.println("After sorting descindeng order......");\n        Map<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\n        printMap(sortedMapDesc);\n    }\n\n    private static Map<String, Integer> sortByComparator(Map<String, Integer> unsortMap, final boolean order) {\n        List<Entry<String, Integer>> list = new LinkedList<Entry<String, Integer>>(unsortMap.entrySet());\n        Collections.sort(list, new Comparator<Entry<String, Integer>>() {\n\n            public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {\n                if (order) {\n                    return o1.getValue().compareTo(o2.getValue());\n                } else {\n                    return o2.getValue().compareTo(o1.getValue());\n                }\n            }\n        });\n        Map<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();\n        for (Entry<String, Integer> entry : list) {\n            sortedMap.put(entry.getKey(), entry.getValue());\n        }\n        return sortedMap;\n    }\n\n    public static void printMap(Map<String, Integer> map) {\n        for (Entry<String, Integer> entry : map.entrySet()) {\n            System.out.println("Key : " + entry.getKey() + " Value : " + entry.getValue());\n        }\n    }\n}'
p807
aS'Iterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n}'
p808
aS'unsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);'
p809
aS'String val = valueIt.next();\nIterator<Integer> keyIt = mapKeys.iterator();\nwhile (keyIt.hasNext()) {\n    Integer key = keyIt.next();\n}'
p810
aS'unsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);'
p811
aS'String comp1 = passedMap.get(key);\nString comp2 = val;\nif (comp1.equals(comp2)) {\n    keyIt.remove();\n}'
p812
aS'Integer key = keyIt.next();\nString comp1 = passedMap.get(key);\nString comp2 = val;\nif (comp1.equals(comp2)) {\n    keyIt.remove();\n}'
p813
aS'List<Integer> mapKeys = new ArrayList<>(passedMap.keySet());\nList<String> mapValues = new ArrayList<>(passedMap.values());\nCollections.sort(mapValues);\nCollections.sort(mapKeys);\nLinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n    String val = valueIt.next();\n}'
p814
aS'while (valueIt.hasNext()) {\n    String val = valueIt.next();\n}'
p815
aS'String comp1 = passedMap.get(key);\nString comp2 = val;\nif (comp1.equals(comp2)) {\n    keyIt.remove();\n    sortedMap.put(key, val);\n    break;\n}'
p816
aS'Iterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n    String val = valueIt.next();\n    Iterator<Integer> keyIt = mapKeys.iterator();\n    while (keyIt.hasNext()) {\n        Integer key = keyIt.next();\n        String comp1 = passedMap.get(key);\n        String comp2 = val;\n        if (comp1.equals(comp2)) {\n            keyIt.remove();\n            sortedMap.put(key, val);\n            break;\n        }\n    }\n}\nreturn sortedMap;'
p817
aS'LinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();'
p818
aS'String comp2 = val;\nif (comp1.equals(comp2)) {\n    keyIt.remove();\n    sortedMap.put(key, val);\n}'
p819
aS'while (valueIt.hasNext()) {\n    String val = valueIt.next();\n    Iterator<Integer> keyIt = mapKeys.iterator();\n    while (keyIt.hasNext()) {\n        Integer key = keyIt.next();\n        String comp1 = passedMap.get(key);\n        String comp2 = val;\n        if (comp1.equals(comp2)) {\n            keyIt.remove();\n            sortedMap.put(key, val);\n            break;\n        }\n    }\n}\nreturn sortedMap;'
p820
aS'sortedMap.put(entry.getKey(), entry.getValue());'
p821
aS'import java.util.LinkedList;\nimport java.util.List;'
p822
aS'System.out.println("After sorting descindeng order......");\nMap<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);'
p823
aS'Map<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();\nfor (Entry<String, Integer> entry : list) {\n    sortedMap.put(entry.getKey(), entry.getValue());\n}'
p824
aS'Iterator<String> valueIt = mapValues.iterator();'
p825
aS'public static boolean ASC = true;\npublic static boolean DESC = false;\npublic static void main(String[] args) {\n    Map<String, Integer> unsortMap = new HashMap<String, Integer>();\n    unsortMap.put("B", 55);\n    unsortMap.put("A", 80);\n    unsortMap.put("D", 20);\n    unsortMap.put("C", 70);\n    System.out.println("Before sorting......");\n    printMap(unsortMap);\n    System.out.println("After sorting ascending order......");\n    Map<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\n    printMap(sortedMapAsc);\n    System.out.println("After sorting descindeng order......");\n    Map<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\n    printMap(sortedMapDesc);\n}'
p826
aS'Integer key = keyIt.next();\nString comp1 = passedMap.get(key);\nString comp2 = val;'
p827
aS'Collections.sort(mapValues);\nCollections.sort(mapKeys);\nLinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n    String val = valueIt.next();\n    Iterator<Integer> keyIt = mapKeys.iterator();\n}'
p828
aS'Map<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);\nSystem.out.println("After sorting descindeng order......");\nMap<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);'
p829
aS'Map<String, Integer> unsortMap = new HashMap<String, Integer>();\nunsortMap.put("B", 55);'
p830
aS'unsortMap.put("B", 55);\nunsortMap.put("A", 80);\nunsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);'
p831
aS'import java.util.Map.Entry;'
p832
aS'for (Entry<String, Integer> entry : map.entrySet()) {\n}'
p833
aS'public static void main(String[] args) {\n    Map<String, Integer> unsortMap = new HashMap<String, Integer>();\n    unsortMap.put("B", 55);\n    unsortMap.put("A", 80);\n    unsortMap.put("D", 20);\n    unsortMap.put("C", 70);\n    System.out.println("Before sorting......");\n    printMap(unsortMap);\n    System.out.println("After sorting ascending order......");\n    Map<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\n    printMap(sortedMapAsc);\n    System.out.println("After sorting descindeng order......");\n    Map<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\n    printMap(sortedMapDesc);\n}'
p834
aS'List<String> mapValues = new ArrayList<>(passedMap.values());\nCollections.sort(mapValues);\nCollections.sort(mapKeys);\nLinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n    String val = valueIt.next();\n    Iterator<Integer> keyIt = mapKeys.iterator();\n    while (keyIt.hasNext()) {\n        Integer key = keyIt.next();\n        String comp1 = passedMap.get(key);\n        String comp2 = val;\n        if (comp1.equals(comp2)) {\n            keyIt.remove();\n            sortedMap.put(key, val);\n            break;\n        }\n    }\n}'
p835
aS'Integer key = keyIt.next();\nString comp1 = passedMap.get(key);\nString comp2 = val;\nif (comp1.equals(comp2)) {\n    keyIt.remove();\n    sortedMap.put(key, val);\n    break;\n}'
p836
aS'unsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);'
p837
aS'if (comp1.equals(comp2)) {\n    keyIt.remove();\n}'
p838
aS'printMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);\nSystem.out.println("After sorting descindeng order......");'
p839
aS'Map<String, Integer> unsortMap = new HashMap<String, Integer>();\nunsortMap.put("B", 55);\nunsortMap.put("A", 80);\nunsortMap.put("D", 20);'
p840
aS'public class SortMapByValue {\n\n    public static boolean ASC = true;\n\n    public static boolean DESC = false;\n\n    public static void main(String[] args) {\n        Map<String, Integer> unsortMap = new HashMap<String, Integer>();\n        unsortMap.put("B", 55);\n        unsortMap.put("A", 80);\n        unsortMap.put("D", 20);\n        unsortMap.put("C", 70);\n        System.out.println("Before sorting......");\n        printMap(unsortMap);\n        System.out.println("After sorting ascending order......");\n        Map<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\n        printMap(sortedMapAsc);\n        System.out.println("After sorting descindeng order......");\n        Map<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\n        printMap(sortedMapDesc);\n    }\n\n    private static Map<String, Integer> sortByComparator(Map<String, Integer> unsortMap, final boolean order) {\n        List<Entry<String, Integer>> list = new LinkedList<Entry<String, Integer>>(unsortMap.entrySet());\n        Collections.sort(list, new Comparator<Entry<String, Integer>>() {\n\n            public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {\n                if (order) {\n                    return o1.getValue().compareTo(o2.getValue());\n                } else {\n                    return o2.getValue().compareTo(o1.getValue());\n                }\n            }\n        });\n        Map<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();\n        for (Entry<String, Integer> entry : list) {\n            sortedMap.put(entry.getKey(), entry.getValue());\n        }\n        return sortedMap;\n    }\n\n    public static void printMap(Map<String, Integer> map) {\n        for (Entry<String, Integer> entry : map.entrySet()) {\n            System.out.println("Key : " + entry.getKey() + " Value : " + entry.getValue());\n        }\n    }\n}'
p841
aS'Iterator<Integer> keyIt = mapKeys.iterator();\nwhile (keyIt.hasNext()) {\n    Integer key = keyIt.next();\n    String comp1 = passedMap.get(key);\n}'
p842
aS'List<Integer> mapKeys = new ArrayList<>(passedMap.keySet());\nList<String> mapValues = new ArrayList<>(passedMap.values());'
p843
aS'List<Entry<String, Integer>> list = new LinkedList<Entry<String, Integer>>(unsortMap.entrySet());'
p844
aS'import java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;'
p845
aS'unsortMap.put("A", 80);\nunsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");'
p846
aS'public static boolean DESC = false;'
p847
aS'for (Entry<String, Integer> entry : list) {\n    sortedMap.put(entry.getKey(), entry.getValue());\n}'
p848
aS'Map<String, Integer> unsortMap = new HashMap<String, Integer>();\nunsortMap.put("B", 55);\nunsortMap.put("A", 80);\nunsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");'
p849
aS'import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;'
p850
aS'package com.rais;\n\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;'
p851
aS'Map<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();\nfor (Entry<String, Integer> entry : list) {\n}'
p852
aS'public static boolean ASC = true;\npublic static boolean DESC = false;'
p853
aS'List<String> mapValues = new ArrayList<>(passedMap.values());\nCollections.sort(mapValues);\nCollections.sort(mapKeys);\nLinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n}'
p854
aS'String comp1 = passedMap.get(key);\nString comp2 = val;\nif (comp1.equals(comp2)) {\n}'
p855
aS'Map<String, Integer> unsortMap = new HashMap<String, Integer>();\nunsortMap.put("B", 55);\nunsortMap.put("A", 80);\nunsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");'
p856
aS'if (order) {\n    return o1.getValue().compareTo(o2.getValue());\n} else {\n}'
p857
aS'if (order) {\n}'
p858
aS'import java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;'
p859
aS'System.out.println("Before sorting......");\nprintMap(unsortMap);'
p860
aS'Collections.sort(list, new Comparator<Entry<String, Integer>>() {\n\n    public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {\n        if (order) {\n            return o1.getValue().compareTo(o2.getValue());\n        } else {\n            return o2.getValue().compareTo(o1.getValue());\n        }\n    }\n});\nMap<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();'
p861
aS'import java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;'
p862
aS'printMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);'
p863
aS'if (comp1.equals(comp2)) {\n}'
p864
aS'List<Entry<String, Integer>> list = new LinkedList<Entry<String, Integer>>(unsortMap.entrySet());\nCollections.sort(list, new Comparator<Entry<String, Integer>>() {\n\n    public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {\n        if (order) {\n            return o1.getValue().compareTo(o2.getValue());\n        } else {\n            return o2.getValue().compareTo(o1.getValue());\n        }\n    }\n});\nMap<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();\nfor (Entry<String, Integer> entry : list) {\n    sortedMap.put(entry.getKey(), entry.getValue());\n}\nreturn sortedMap;'
p865
aS'import java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\npublic class SortMapByValue {\n\n    public static boolean ASC = true;\n\n    public static boolean DESC = false;\n\n    public static void main(String[] args) {\n        Map<String, Integer> unsortMap = new HashMap<String, Integer>();\n        unsortMap.put("B", 55);\n        unsortMap.put("A", 80);\n        unsortMap.put("D", 20);\n        unsortMap.put("C", 70);\n        System.out.println("Before sorting......");\n        printMap(unsortMap);\n        System.out.println("After sorting ascending order......");\n        Map<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\n        printMap(sortedMapAsc);\n        System.out.println("After sorting descindeng order......");\n        Map<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\n        printMap(sortedMapDesc);\n    }\n\n    private static Map<String, Integer> sortByComparator(Map<String, Integer> unsortMap, final boolean order) {\n        List<Entry<String, Integer>> list = new LinkedList<Entry<String, Integer>>(unsortMap.entrySet());\n        Collections.sort(list, new Comparator<Entry<String, Integer>>() {\n\n            public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {\n                if (order) {\n                    return o1.getValue().compareTo(o2.getValue());\n                } else {\n                    return o2.getValue().compareTo(o1.getValue());\n                }\n            }\n        });\n        Map<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();\n        for (Entry<String, Integer> entry : list) {\n            sortedMap.put(entry.getKey(), entry.getValue());\n        }\n        return sortedMap;\n    }\n\n    public static void printMap(Map<String, Integer> map) {\n        for (Entry<String, Integer> entry : map.entrySet()) {\n            System.out.println("Key : " + entry.getKey() + " Value : " + entry.getValue());\n        }\n    }\n}'
p866
aS'import java.util.Map;'
p867
aS'LinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n    String val = valueIt.next();\n    Iterator<Integer> keyIt = mapKeys.iterator();\n}'
p868
aS'sortedMap.put(key, val);\nbreak;'
p869
aS'private static Map<String, Integer> sortByComparator(Map<String, Integer> unsortMap, final boolean order) {\n    List<Entry<String, Integer>> list = new LinkedList<Entry<String, Integer>>(unsortMap.entrySet());\n    Collections.sort(list, new Comparator<Entry<String, Integer>>() {\n\n        public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {\n            if (order) {\n                return o1.getValue().compareTo(o2.getValue());\n            } else {\n                return o2.getValue().compareTo(o1.getValue());\n            }\n        }\n    });\n    Map<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();\n    for (Entry<String, Integer> entry : list) {\n        sortedMap.put(entry.getKey(), entry.getValue());\n    }\n    return sortedMap;\n}'
p870
aS'LinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n    String val = valueIt.next();\n}'
p871
aS'while (keyIt.hasNext()) {\n    Integer key = keyIt.next();\n    String comp1 = passedMap.get(key);\n    String comp2 = val;\n}'
p872
aS'import java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\npublic class SortMapByValue {\n\n    public static boolean ASC = true;\n\n    public static boolean DESC = false;\n\n    public static void main(String[] args) {\n        Map<String, Integer> unsortMap = new HashMap<String, Integer>();\n        unsortMap.put("B", 55);\n        unsortMap.put("A", 80);\n        unsortMap.put("D", 20);\n        unsortMap.put("C", 70);\n        System.out.println("Before sorting......");\n        printMap(unsortMap);\n        System.out.println("After sorting ascending order......");\n        Map<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\n        printMap(sortedMapAsc);\n        System.out.println("After sorting descindeng order......");\n        Map<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\n        printMap(sortedMapDesc);\n    }\n\n    private static Map<String, Integer> sortByComparator(Map<String, Integer> unsortMap, final boolean order) {\n        List<Entry<String, Integer>> list = new LinkedList<Entry<String, Integer>>(unsortMap.entrySet());\n        Collections.sort(list, new Comparator<Entry<String, Integer>>() {\n\n            public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {\n                if (order) {\n                    return o1.getValue().compareTo(o2.getValue());\n                } else {\n                    return o2.getValue().compareTo(o1.getValue());\n                }\n            }\n        });\n        Map<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();\n        for (Entry<String, Integer> entry : list) {\n            sortedMap.put(entry.getKey(), entry.getValue());\n        }\n        return sortedMap;\n    }\n\n    public static void printMap(Map<String, Integer> map) {\n        for (Entry<String, Integer> entry : map.entrySet()) {\n            System.out.println("Key : " + entry.getKey() + " Value : " + entry.getValue());\n        }\n    }\n}'
p873
aS'System.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);\nSystem.out.println("After sorting descindeng order......");\nMap<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);'
p874
aS'List<Entry<String, Integer>> list = new LinkedList<Entry<String, Integer>>(unsortMap.entrySet());\nCollections.sort(list, new Comparator<Entry<String, Integer>>() {\n\n    public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {\n        if (order) {\n            return o1.getValue().compareTo(o2.getValue());\n        } else {\n            return o2.getValue().compareTo(o1.getValue());\n        }\n    }\n});'
p875
aS'String val = valueIt.next();'
p876
aS'unsortMap.put("A", 80);\nunsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);'
p877
aS'Map<String, Integer> unsortMap = new HashMap<String, Integer>();\nunsortMap.put("B", 55);\nunsortMap.put("A", 80);'
p878
aS'for (Entry<String, Integer> entry : list) {\n    sortedMap.put(entry.getKey(), entry.getValue());\n}\nreturn sortedMap;'
p879
aS'break;'
p880
aS'unsortMap.put("A", 80);\nunsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);\nSystem.out.println("After sorting descindeng order......");'
p881
aS'unsortMap.put("A", 80);\nunsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);\nSystem.out.println("After sorting descindeng order......");\nMap<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);'
p882
aS'String val = valueIt.next();\nIterator<Integer> keyIt = mapKeys.iterator();\nwhile (keyIt.hasNext()) {\n    Integer key = keyIt.next();\n    String comp1 = passedMap.get(key);\n}'
p883
aS'unsortMap.put("B", 55);\nunsortMap.put("A", 80);\nunsortMap.put("D", 20);'
p884
aS'printMap(sortedMapDesc);'
p885
aS'unsortMap.put("B", 55);\nunsortMap.put("A", 80);\nunsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);'
p886
aS'printMap(sortedMapAsc);\nSystem.out.println("After sorting descindeng order......");\nMap<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\nprintMap(sortedMapDesc);'
p887
aS'List<Integer> mapKeys = new ArrayList<>(passedMap.keySet());\nList<String> mapValues = new ArrayList<>(passedMap.values());\nCollections.sort(mapValues);\nCollections.sort(mapKeys);\nLinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n    String val = valueIt.next();\n    Iterator<Integer> keyIt = mapKeys.iterator();\n    while (keyIt.hasNext()) {\n        Integer key = keyIt.next();\n        String comp1 = passedMap.get(key);\n        String comp2 = val;\n        if (comp1.equals(comp2)) {\n            keyIt.remove();\n            sortedMap.put(key, val);\n            break;\n        }\n    }\n}'
p888
aS'while (keyIt.hasNext()) {\n}'
p889
aS'if (comp1.equals(comp2)) {\n    keyIt.remove();\n    sortedMap.put(key, val);\n}'
p890
aS'System.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);\nSystem.out.println("After sorting descindeng order......");\nMap<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\nprintMap(sortedMapDesc);'
p891
aS'printMap(sortedMapAsc);\nSystem.out.println("After sorting descindeng order......");\nMap<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);'
p892
aS'String comp2 = val;'
p893
aS'Collections.sort(mapValues);'
p894
aS'unsortMap.put("A", 80);\nunsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);'
p895
aS'Collections.sort(list, new Comparator<Entry<String, Integer>>() {\n\n    public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {\n        if (order) {\n            return o1.getValue().compareTo(o2.getValue());\n        } else {\n            return o2.getValue().compareTo(o1.getValue());\n        }\n    }\n});\nMap<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();\nfor (Entry<String, Integer> entry : list) {\n}'
p896
aS'while (keyIt.hasNext()) {\n    Integer key = keyIt.next();\n    String comp1 = passedMap.get(key);\n}'
p897
aS'String val = valueIt.next();\nIterator<Integer> keyIt = mapKeys.iterator();\nwhile (keyIt.hasNext()) {\n    Integer key = keyIt.next();\n    String comp1 = passedMap.get(key);\n    String comp2 = val;\n}'
p898
aS'keyIt.remove();'
p899
aS'Map<String, Integer> unsortMap = new HashMap<String, Integer>();\nunsortMap.put("B", 55);\nunsortMap.put("A", 80);\nunsortMap.put("D", 20);\nunsortMap.put("C", 70);'
p900
aS'System.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);\nSystem.out.println("After sorting descindeng order......");\nMap<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\nprintMap(sortedMapDesc);'
p901
aS'import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;'
p902
aS'if (order) {\n    return o1.getValue().compareTo(o2.getValue());\n}'
p903
aS'LinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n    String val = valueIt.next();\n    Iterator<Integer> keyIt = mapKeys.iterator();\n    while (keyIt.hasNext()) {\n        Integer key = keyIt.next();\n        String comp1 = passedMap.get(key);\n        String comp2 = val;\n        if (comp1.equals(comp2)) {\n            keyIt.remove();\n            sortedMap.put(key, val);\n            break;\n        }\n    }\n}\nreturn sortedMap;'
p904
aS'unsortMap.put("B", 55);\nunsortMap.put("A", 80);\nunsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");'
p905
aS'unsortMap.put("B", 55);'
p906
aS'System.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);\nSystem.out.println("After sorting descindeng order......");'
p907
aS'Integer key = keyIt.next();\nString comp1 = passedMap.get(key);\nString comp2 = val;\nif (comp1.equals(comp2)) {\n}'
p908
aS'List<Integer> mapKeys = new ArrayList<>(passedMap.keySet());'
p909
aS'List<String> mapValues = new ArrayList<>(passedMap.values());\nCollections.sort(mapValues);'
p910
aS'System.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);\nSystem.out.println("After sorting descindeng order......");'
p911
aS'Collections.sort(mapKeys);\nLinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n    String val = valueIt.next();\n    Iterator<Integer> keyIt = mapKeys.iterator();\n    while (keyIt.hasNext()) {\n        Integer key = keyIt.next();\n        String comp1 = passedMap.get(key);\n        String comp2 = val;\n        if (comp1.equals(comp2)) {\n            keyIt.remove();\n            sortedMap.put(key, val);\n            break;\n        }\n    }\n}'
p912
aS'Collections.sort(mapKeys);\nLinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n    String val = valueIt.next();\n}'
p913
aS'import java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;'
p914
aS'package com.rais;'
p915
aS'Collections.sort(list, new Comparator<Entry<String, Integer>>() {\n\n    public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {\n        if (order) {\n            return o1.getValue().compareTo(o2.getValue());\n        } else {\n            return o2.getValue().compareTo(o1.getValue());\n        }\n    }\n});\nMap<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();\nfor (Entry<String, Integer> entry : list) {\n    sortedMap.put(entry.getKey(), entry.getValue());\n}'
p916
aS'List<Integer> mapKeys = new ArrayList<>(passedMap.keySet());\nList<String> mapValues = new ArrayList<>(passedMap.values());\nCollections.sort(mapValues);'
p917
aS'public static void printMap(Map<String, Integer> map) {\n    for (Entry<String, Integer> entry : map.entrySet()) {\n        System.out.println("Key : " + entry.getKey() + " Value : " + entry.getValue());\n    }\n}'
p918
aS'unsortMap.put("B", 55);\nunsortMap.put("A", 80);\nunsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");'
p919
aS'unsortMap.put("A", 80);'
p920
aS'List<Integer> mapKeys = new ArrayList<>(passedMap.keySet());\nList<String> mapValues = new ArrayList<>(passedMap.values());\nCollections.sort(mapValues);\nCollections.sort(mapKeys);\nLinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n}'
p921
aS'System.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);'
p922
aS'unsortMap.put("B", 55);\nunsortMap.put("A", 80);\nunsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);\nSystem.out.println("After sorting descindeng order......");\nMap<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);'
p923
aS'Collections.sort(list, new Comparator<Entry<String, Integer>>() {\n\n    public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {\n        if (order) {\n            return o1.getValue().compareTo(o2.getValue());\n        } else {\n            return o2.getValue().compareTo(o1.getValue());\n        }\n    }\n});'
p924
aS'public static boolean DESC = false;\npublic static void main(String[] args) {\n    Map<String, Integer> unsortMap = new HashMap<String, Integer>();\n    unsortMap.put("B", 55);\n    unsortMap.put("A", 80);\n    unsortMap.put("D", 20);\n    unsortMap.put("C", 70);\n    System.out.println("Before sorting......");\n    printMap(unsortMap);\n    System.out.println("After sorting ascending order......");\n    Map<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\n    printMap(sortedMapAsc);\n    System.out.println("After sorting descindeng order......");\n    Map<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\n    printMap(sortedMapDesc);\n}\nprivate static Map<String, Integer> sortByComparator(Map<String, Integer> unsortMap, final boolean order) {\n    List<Entry<String, Integer>> list = new LinkedList<Entry<String, Integer>>(unsortMap.entrySet());\n    Collections.sort(list, new Comparator<Entry<String, Integer>>() {\n\n        public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {\n            if (order) {\n                return o1.getValue().compareTo(o2.getValue());\n            } else {\n                return o2.getValue().compareTo(o1.getValue());\n            }\n        }\n    });\n    Map<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();\n    for (Entry<String, Integer> entry : list) {\n        sortedMap.put(entry.getKey(), entry.getValue());\n    }\n    return sortedMap;\n}'
p925
aS'public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {\n    if (order) {\n        return o1.getValue().compareTo(o2.getValue());\n    } else {\n        return o2.getValue().compareTo(o1.getValue());\n    }\n}'
p926
aS'import java.util.HashMap;'
p927
aS'Map<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);'
p928
aS'unsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);\nSystem.out.println("After sorting descindeng order......");\nMap<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);'
p929
aS'List<Integer> mapKeys = new ArrayList<>(passedMap.keySet());\nList<String> mapValues = new ArrayList<>(passedMap.values());\nCollections.sort(mapValues);\nCollections.sort(mapKeys);\nLinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n    String val = valueIt.next();\n    Iterator<Integer> keyIt = mapKeys.iterator();\n    while (keyIt.hasNext()) {\n        Integer key = keyIt.next();\n        String comp1 = passedMap.get(key);\n        String comp2 = val;\n        if (comp1.equals(comp2)) {\n            keyIt.remove();\n            sortedMap.put(key, val);\n            break;\n        }\n    }\n}\nreturn sortedMap;'
p930
aS'import java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;'
p931
aS'Map<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\nprintMap(sortedMapDesc);'
p932
aS'printMap(sortedMapAsc);'
p933
aS'unsortMap.put("D", 20);\nunsortMap.put("C", 70);'
p934
aS'if (order) {\n    return o1.getValue().compareTo(o2.getValue());\n} else {\n    return o2.getValue().compareTo(o1.getValue());\n}'
p935
aS'return o2.getValue().compareTo(o1.getValue());'
p936
aS'Integer key = keyIt.next();\nString comp1 = passedMap.get(key);\nString comp2 = val;\nif (comp1.equals(comp2)) {\n    keyIt.remove();\n    sortedMap.put(key, val);\n}'
p937
aS'List<Integer> mapKeys = new ArrayList<>(passedMap.keySet());\nList<String> mapValues = new ArrayList<>(passedMap.values());\nCollections.sort(mapValues);\nCollections.sort(mapKeys);'
p938
aS'Collections.sort(mapValues);\nCollections.sort(mapKeys);'
p939
aS'System.out.println("Key : " + entry.getKey() + " Value : " + entry.getValue());'
p940
aS'System.out.println("After sorting ascending order......");'
p941
aS'Collections.sort(mapKeys);\nLinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n    String val = valueIt.next();\n    Iterator<Integer> keyIt = mapKeys.iterator();\n}'
p942
aS'Collections.sort(mapKeys);\nLinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();'
p943
aS'import java.util.LinkedHashMap;'
p944
aS'List<String> mapValues = new ArrayList<>(passedMap.values());\nCollections.sort(mapValues);\nCollections.sort(mapKeys);\nLinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n    String val = valueIt.next();\n}'
p945
aS'import java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;'
p946
aS'System.out.println("After sorting descindeng order......");\nMap<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);\nprintMap(sortedMapDesc);'
p947
aS'unsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);\nSystem.out.println("After sorting descindeng order......");\nMap<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);'
p948
aS'unsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");'
p949
aS'unsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);'
p950
aS'Collections.sort(mapValues);\nCollections.sort(mapKeys);\nLinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n}'
p951
aS'Map<String, Integer> unsortMap = new HashMap<String, Integer>();\nunsortMap.put("B", 55);\nunsortMap.put("A", 80);\nunsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);'
p952
aS'import java.util.List;'
p953
aS'Integer key = keyIt.next();\nString comp1 = passedMap.get(key);'
p954
aS'import java.util.Comparator;\nimport java.util.HashMap;'
p955
aS'LinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n    String val = valueIt.next();\n    Iterator<Integer> keyIt = mapKeys.iterator();\n    while (keyIt.hasNext()) {\n        Integer key = keyIt.next();\n        String comp1 = passedMap.get(key);\n        String comp2 = val;\n        if (comp1.equals(comp2)) {\n            keyIt.remove();\n            sortedMap.put(key, val);\n            break;\n        }\n    }\n}'
p956
aS'package com.rais;\n\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;'
p957
aS'Map<String, Integer> unsortMap = new HashMap<String, Integer>();\nunsortMap.put("B", 55);\nunsortMap.put("A", 80);\nunsortMap.put("D", 20);\nunsortMap.put("C", 70);\nSystem.out.println("Before sorting......");\nprintMap(unsortMap);\nSystem.out.println("After sorting ascending order......");\nMap<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);\nprintMap(sortedMapAsc);\nSystem.out.println("After sorting descindeng order......");\nMap<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);'
p958
atp959
Rp960
sI1816673
g1
((lp961
S'new File("path/to/file.txt").isFile();'
p962
aS'if (f.exists() && !f.isDirectory()) {\n}'
p963
aS'Path path = Paths.get(filePathString);\nif (Files.exists(path)) {\n}'
p964
aS'Path path = Paths.get(filePathString);'
p965
aS'File f = new File(filePathString);'
p966
aS'import java.nio.file.*;'
p967
aS'if (Files.isRegularFile(path)) {\n}'
p968
aS'if (Files.exists(path)) {\n}'
p969
aS'if (Files.exists(path)) {\n}\nif (Files.notExists(path)) {\n}'
p970
aS'if (Files.isDirectory(path)) {\n}\nif (Files.isRegularFile(path)) {\n}'
p971
aS'File f = new File(filePathString);\nif (f.exists() && !f.isDirectory()) {\n}'
p972
aS'if (Files.isDirectory(path)) {\n}'
p973
aS'Path path = Paths.get(filePathString);\nif (Files.exists(path)) {\n}\nif (Files.notExists(path)) {\n}'
p974
aS'if (Files.notExists(path)) {\n}'
p975
atp976
Rp977
sI3551821
g1
((lp978
S'boolean mExternalStorageAvailable = false;\nboolean mExternalStorageWriteable = false;\nString state = Environment.getExternalStorageState();'
p979
aS'dir.mkdirs();\nFile file = new File(dir, "filename");\nFileOutputStream f = new FileOutputStream(file);'
p980
aS'FileOutputStream os = outStream = new FileOutputStream(file);'
p981
aS'FileWriter writer = new FileWriter(getExternalStorageDirectory());\nwriter.write("This\\n is\\n an\\n example\\n");\nwriter.flush();'
p982
aS'boolean mExternalStorageWriteable = false;\nString state = Environment.getExternalStorageState();\nif (Environment.MEDIA_MOUNTED.equals(state)) {\n    mExternalStorageAvailable = mExternalStorageWriteable = true;\n} else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {\n}'
p983
aS'FileWriter writer = new FileWriter(getExternalStorageDirectory());\nwriter.write("This\\n is\\n an\\n example\\n");'
p984
aS'File sdCard = Environment.getExternalStorageDirectory();\nFile dir = new File(sdCard.getAbsolutePath() + "/dir1/dir2");\ndir.mkdirs();'
p985
aS'dir.mkdir();'
p986
aS'if (Environment.MEDIA_MOUNTED.equals(state)) {\n    mExternalStorageAvailable = mExternalStorageWriteable = true;\n}'
p987
aS'FileOutputStream f = new FileOutputStream(file);'
p988
aS'File sdcard = Environment.getExternalStorageDirectory();'
p989
aS'boolean mExternalStorageAvailable = false;\nboolean mExternalStorageWriteable = false;\nString state = Environment.getExternalStorageState();\nif (Environment.MEDIA_MOUNTED.equals(state)) {\n    mExternalStorageAvailable = mExternalStorageWriteable = true;\n} else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {\n    mExternalStorageAvailable = true;\n    mExternalStorageWriteable = false;\n} else {\n    mExternalStorageAvailable = mExternalStorageWriteable = false;\n}'
p990
aS'String state = Environment.getExternalStorageState();\nif (Environment.MEDIA_MOUNTED.equals(state)) {\n    mExternalStorageAvailable = mExternalStorageWriteable = true;\n} else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {\n    mExternalStorageAvailable = true;\n    mExternalStorageWriteable = false;\n} else {\n}'
p991
aS'boolean mExternalStorageAvailable = false;\nboolean mExternalStorageWriteable = false;\nString state = Environment.getExternalStorageState();\nif (Environment.MEDIA_MOUNTED.equals(state)) {\n}'
p992
aS'writer.flush();\nwriter.close();'
p993
aS'if (Environment.MEDIA_MOUNTED.equals(state)) {\n    mExternalStorageAvailable = mExternalStorageWriteable = true;\n} else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {\n    mExternalStorageAvailable = true;\n    mExternalStorageWriteable = false;\n}'
p994
aS'File sdCard = Environment.getExternalStorageDirectory();\nFile dir = new File(sdCard.getAbsolutePath() + "/dir1/dir2");\ndir.mkdirs();\nFile file = new File(dir, "filename");'
p995
aS'writer.write("This\\n is\\n an\\n example\\n");\nwriter.flush();\nwriter.close();'
p996
aS'File dir = new File(sdCard.getAbsolutePath() + "/dir1/dir2");\ndir.mkdirs();\nFile file = new File(dir, "filename");\nFileOutputStream f = new FileOutputStream(file);'
p997
aS'return false;'
p998
aS'String state = Environment.getExternalStorageState();\nif (Environment.MEDIA_MOUNTED.equals(state)) {\n    mExternalStorageAvailable = mExternalStorageWriteable = true;\n}'
p999
aS'if (Environment.MEDIA_MOUNTED.equals(state)) {\n    mExternalStorageAvailable = mExternalStorageWriteable = true;\n} else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {\n}'
p1000
aS'mExternalStorageAvailable = true;\nmExternalStorageWriteable = false;'
p1001
aS'boolean mExternalStorageAvailable = false;\nboolean mExternalStorageWriteable = false;\nString state = Environment.getExternalStorageState();\nif (Environment.MEDIA_MOUNTED.equals(state)) {\n    mExternalStorageAvailable = mExternalStorageWriteable = true;\n} else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {\n    mExternalStorageAvailable = true;\n    mExternalStorageWriteable = false;\n}'
p1002
aS'writer.write("This\\n is\\n an\\n example\\n");\nwriter.flush();'
p1003
aS'boolean mExternalStorageWriteable = false;\nString state = Environment.getExternalStorageState();\nif (Environment.MEDIA_MOUNTED.equals(state)) {\n    mExternalStorageAvailable = mExternalStorageWriteable = true;\n} else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {\n    mExternalStorageAvailable = true;\n    mExternalStorageWriteable = false;\n} else {\n    mExternalStorageAvailable = mExternalStorageWriteable = false;\n}'
p1004
aS'String state = Environment.getExternalStorageState();\nif (Environment.MEDIA_MOUNTED.equals(state)) {\n    mExternalStorageAvailable = mExternalStorageWriteable = true;\n} else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {\n}'
p1005
aS'boolean mExternalStorageWriteable = false;\nString state = Environment.getExternalStorageState();\nif (Environment.MEDIA_MOUNTED.equals(state)) {\n}'
p1006
aS'File file = new File(dir, "filename");'
p1007
aS'File sdCard = Environment.getExternalStorageDirectory();'
p1008
aS'boolean mExternalStorageWriteable = false;\nString state = Environment.getExternalStorageState();\nif (Environment.MEDIA_MOUNTED.equals(state)) {\n    mExternalStorageAvailable = mExternalStorageWriteable = true;\n}'
p1009
aS'os.close();'
p1010
aS'mExternalStorageWriteable = false;'
p1011
aS'mExternalStorageAvailable = true;'
p1012
aS'boolean mExternalStorageWriteable = false;\nString state = Environment.getExternalStorageState();\nif (Environment.MEDIA_MOUNTED.equals(state)) {\n    mExternalStorageAvailable = mExternalStorageWriteable = true;\n} else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {\n    mExternalStorageAvailable = true;\n    mExternalStorageWriteable = false;\n} else {\n}'
p1013
aS'os.write(data.getBytes());\nos.close();'
p1014
aS'if (Environment.MEDIA_MOUNTED.equals(state)) {\n    mExternalStorageAvailable = mExternalStorageWriteable = true;\n} else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {\n    mExternalStorageAvailable = true;\n}'
p1015
aS'File dir = new File(sdCard.getAbsolutePath() + "/dir1/dir2");\ndir.mkdirs();\nFile file = new File(dir, "filename");'
p1016
aS'/**\n\n* Method to check if user has permissions to write on external storage or not\n\n*/'
p1017
aS'String state = Environment.getExternalStorageState();\nif (Environment.MEDIA_MOUNTED.equals(state)) {\n}'
p1018
aS'String state = Environment.getExternalStorageState();\nif (Environment.MEDIA_MOUNTED.equals(state)) {\n    mExternalStorageAvailable = mExternalStorageWriteable = true;\n} else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {\n    mExternalStorageAvailable = true;\n    mExternalStorageWriteable = false;\n}'
p1019
aS'dir.mkdirs();'
p1020
aS'boolean mExternalStorageWriteable = false;\nString state = Environment.getExternalStorageState();\nif (Environment.MEDIA_MOUNTED.equals(state)) {\n    mExternalStorageAvailable = mExternalStorageWriteable = true;\n} else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {\n    mExternalStorageAvailable = true;\n}'
p1021
aS'File dir = new File(sdCard.getAbsolutePath() + "/dir1/dir2");\ndir.mkdirs();'
p1022
aS'File dir = new File(sdCard.getAbsolutePath() + "/dir1/dir2");'
p1023
aS'File file = new File(dir, "filename");\nFileOutputStream f = new FileOutputStream(file);'
p1024
aS'mExternalStorageAvailable = mExternalStorageWriteable = false;'
p1025
aS'boolean mExternalStorageAvailable = false;\nboolean mExternalStorageWriteable = false;'
p1026
aS'dir.mkdirs();\nFile file = new File(dir, "filename");'
p1027
aS'boolean mExternalStorageWriteable = false;'
p1028
aS'String state = Environment.getExternalStorageState();\nif (Environment.MEDIA_MOUNTED.equals(state)) {\n    mExternalStorageAvailable = mExternalStorageWriteable = true;\n} else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {\n    mExternalStorageAvailable = true;\n}'
p1029
aS'mExternalStorageAvailable = mExternalStorageWriteable = true;'
p1030
aS'return true;'
p1031
aS'String state = Environment.getExternalStorageState();\nif (Environment.MEDIA_MOUNTED.equals(state)) {\n    mExternalStorageAvailable = mExternalStorageWriteable = true;\n} else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {\n    mExternalStorageAvailable = true;\n    mExternalStorageWriteable = false;\n} else {\n    mExternalStorageAvailable = mExternalStorageWriteable = false;\n}'
p1032
aS'boolean mExternalStorageAvailable = false;\nboolean mExternalStorageWriteable = false;\nString state = Environment.getExternalStorageState();\nif (Environment.MEDIA_MOUNTED.equals(state)) {\n    mExternalStorageAvailable = mExternalStorageWriteable = true;\n} else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {\n    mExternalStorageAvailable = true;\n}'
p1033
aS'boolean mExternalStorageAvailable = false;'
p1034
aS'boolean mExternalStorageAvailable = false;\nboolean mExternalStorageWriteable = false;\nString state = Environment.getExternalStorageState();\nif (Environment.MEDIA_MOUNTED.equals(state)) {\n    mExternalStorageAvailable = mExternalStorageWriteable = true;\n}'
p1035
aS'FileWriter writer = new FileWriter(getExternalStorageDirectory());'
p1036
aS'writer.close();'
p1037
aS'String state = Environment.getExternalStorageState();'
p1038
aS'File sdCard = Environment.getExternalStorageDirectory();\nFile dir = new File(sdCard.getAbsolutePath() + "/dir1/dir2");\ndir.mkdirs();\nFile file = new File(dir, "filename");\nFileOutputStream f = new FileOutputStream(file);'
p1039
aS'boolean mExternalStorageWriteable = false;\nString state = Environment.getExternalStorageState();\nif (Environment.MEDIA_MOUNTED.equals(state)) {\n    mExternalStorageAvailable = mExternalStorageWriteable = true;\n} else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {\n    mExternalStorageAvailable = true;\n    mExternalStorageWriteable = false;\n}'
p1040
aS'if (Environment.MEDIA_MOUNTED.equals(state)) {\n    mExternalStorageAvailable = mExternalStorageWriteable = true;\n} else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {\n    mExternalStorageAvailable = true;\n    mExternalStorageWriteable = false;\n} else {\n    mExternalStorageAvailable = mExternalStorageWriteable = false;\n}'
p1041
aS'writer.flush();'
p1042
aS'if (Environment.MEDIA_MOUNTED.equals(state)) {\n}'
p1043
aS'File sdCard = Environment.getExternalStorageDirectory();\nFile dir = new File(sdCard.getAbsolutePath() + "/dir1/dir2");'
p1044
aS'FileWriter writer = new FileWriter(getExternalStorageDirectory());\nwriter.write("This\\n is\\n an\\n example\\n");\nwriter.flush();\nwriter.close();'
p1045
aS'boolean mExternalStorageWriteable = false;\nString state = Environment.getExternalStorageState();'
p1046
aS'boolean mExternalStorageAvailable = false;\nboolean mExternalStorageWriteable = false;\nString state = Environment.getExternalStorageState();\nif (Environment.MEDIA_MOUNTED.equals(state)) {\n    mExternalStorageAvailable = mExternalStorageWriteable = true;\n} else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {\n    mExternalStorageAvailable = true;\n    mExternalStorageWriteable = false;\n} else {\n}'
p1047
aS'writer.write("This\\n is\\n an\\n example\\n");'
p1048
aS'boolean mExternalStorageAvailable = false;\nboolean mExternalStorageWriteable = false;\nString state = Environment.getExternalStorageState();\nif (Environment.MEDIA_MOUNTED.equals(state)) {\n    mExternalStorageAvailable = mExternalStorageWriteable = true;\n} else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {\n}'
p1049
aS'if (Environment.MEDIA_MOUNTED.equals(state)) {\n    mExternalStorageAvailable = mExternalStorageWriteable = true;\n} else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {\n    mExternalStorageAvailable = true;\n    mExternalStorageWriteable = false;\n} else {\n}'
p1050
aS'os.write(data.getBytes());'
p1051
atp1052
Rp1053
sI7833689
g1
((lp1054
S'System.out.println("I\\nam\\na\\nboy");'
p1055
aS'System.out.println("I\\nam\\na\\nboy");\nSystem.out.println("I am a boy".replaceAll("\\\\s+", "\\n"));'
p1056
aS'System.out.println("I am a boy".replaceAll("\\\\s+", "\\n"));\nSystem.out.println("I am a boy".replaceAll("\\\\s+", System.getProperty("line.separator")));'
p1057
aS'System.out.println("I\\nam\\na\\nboy");\nSystem.out.println("I am a boy".replaceAll("\\\\s+", "\\n"));\nSystem.out.println("I am a boy".replaceAll("\\\\s+", System.getProperty("line.separator")));'
p1058
aS'System.out.println("I am a boy".replaceAll("\\\\s+", System.getProperty("line.separator")));'
p1059
aS'String x = "Hello," + System.lineSeparator() + "there";'
p1060
aS'System.out.println("I am a boy".replaceAll("\\\\s+", "\\n"));'
p1061
atp1062
Rp1063
sI16027229
g1
((lp1064
S'StringBuilder sb = new StringBuilder();\nString line = br.readLine();'
p1065
aS'try {\n    StringBuilder sb = new StringBuilder();\n    String line = br.readLine();\n    while (line != null) {\n        sb.append(line);\n        sb.append("\\n");\n        line = br.readLine();\n    }\n    return sb.toString();\n} finally {\n}'
p1066
aS'StringBuilder sb = new StringBuilder();\nString line = br.readLine();\nwhile (line != null) {\n    sb.append(line);\n    sb.append("\\n");\n    line = br.readLine();\n}\nreturn sb.toString();'
p1067
aS'String line = br.readLine();'
p1068
aS'BufferedReader br = new BufferedReader(new FileReader(fileName));\ntry {\n    StringBuilder sb = new StringBuilder();\n    String line = br.readLine();\n    while (line != null) {\n        sb.append(line);\n        sb.append("\\n");\n        line = br.readLine();\n    }\n    return sb.toString();\n} finally {\n}'
p1069
aS'StringBuilder sb = new StringBuilder();'
p1070
aS'StringBuilder sb = new StringBuilder();\nString line = br.readLine();\nwhile (line != null) {\n    sb.append(line);\n}'
p1071
aS'sb.append("\\n");'
p1072
aS'import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;'
p1073
aS'String line = br.readLine();\nwhile (line != null) {\n    sb.append(line);\n    sb.append("\\n");\n    line = br.readLine();\n}\nreturn sb.toString();'
p1074
aS'sb.append("\\n");\nline = br.readLine();'
p1075
aS'StringBuilder sb = new StringBuilder();\nString line = br.readLine();\nwhile (line != null) {\n    sb.append(line);\n    sb.append("\\n");\n    line = br.readLine();\n}'
p1076
aS'String line = br.readLine();\nwhile (line != null) {\n    sb.append(line);\n}'
p1077
aS'while (line != null) {\n    sb.append(line);\n    sb.append("\\n");\n}'
p1078
aS'while (line != null) {\n}'
p1079
aS'String line = br.readLine();\nwhile (line != null) {\n    sb.append(line);\n    sb.append("\\n");\n}'
p1080
aS'import java.io.BufferedReader;\nimport java.io.FileReader;'
p1081
aS'String line = br.readLine();\nwhile (line != null) {\n}'
p1082
aS'BufferedReader br = new BufferedReader(new FileReader(fileName));'
p1083
aS'while (line != null) {\n    sb.append(line);\n}'
p1084
aS'while (line != null) {\n    sb.append(line);\n    sb.append("\\n");\n    line = br.readLine();\n}\nreturn sb.toString();'
p1085
aS'String line = br.readLine();\nwhile (line != null) {\n    sb.append(line);\n    sb.append("\\n");\n    line = br.readLine();\n}'
p1086
aS'line = br.readLine();'
p1087
aS'sb.append(line);\nsb.append("\\n");\nline = br.readLine();'
p1088
aS'import java.io.BufferedReader;'
p1089
aS'while (line != null) {\n    sb.append(line);\n    sb.append("\\n");\n    line = br.readLine();\n}'
p1090
aS'try {\n    StringBuilder sb = new StringBuilder();\n    String line = br.readLine();\n    while (line != null) {\n        sb.append(line);\n        sb.append("\\n");\n        line = br.readLine();\n    }\n    return sb.toString();\n} finally {\n    br.close();\n}'
p1091
aS'BufferedReader br = new BufferedReader(new FileReader(fileName));\ntry {\n    StringBuilder sb = new StringBuilder();\n    String line = br.readLine();\n    while (line != null) {\n        sb.append(line);\n        sb.append("\\n");\n        line = br.readLine();\n    }\n    return sb.toString();\n} finally {\n    br.close();\n}'
p1092
aS'import java.io.FileReader;\nimport java.io.IOException;'
p1093
aS'br.close();'
p1094
aS'StringBuilder sb = new StringBuilder();\nString line = br.readLine();\nwhile (line != null) {\n}'
p1095
aS'sb.append(line);'
p1096
aS'import java.io.IOException;'
p1097
aS'String readFile(String fileName) throws IOException {\n    BufferedReader br = new BufferedReader(new FileReader(fileName));\n    try {\n        StringBuilder sb = new StringBuilder();\n        String line = br.readLine();\n        while (line != null) {\n            sb.append(line);\n            sb.append("\\n");\n            line = br.readLine();\n        }\n        return sb.toString();\n    } finally {\n        br.close();\n    }\n}'
p1098
aS'sb.append(line);\nsb.append("\\n");'
p1099
aS'StringBuilder sb = new StringBuilder();\nString line = br.readLine();\nwhile (line != null) {\n    sb.append(line);\n    sb.append("\\n");\n}'
p1100
aS'import java.io.FileReader;'
p1101
aS'return sb.toString();'
p1102
atp1103
Rp1104
sI2891361
g1
((lp1105
S'System.out.println(date1);\nTimeZone.setDefault(TimeZone.getTimeZone("UTC"));\nDate date2 = new Date();\nSystem.out.println(date2);'
p1106
aS'System.out.println(date2);'
p1107
aS'TimeZone.setDefault(TimeZone.getTimeZone("UTC"));'
p1108
aS'Date date1 = new Date();\nSystem.out.println(date1);'
p1109
aS'Date date1 = new Date();\nSystem.out.println(date1);\nTimeZone.setDefault(TimeZone.getTimeZone("UTC"));\nDate date2 = new Date();'
p1110
aS'System.out.println(date1);\nTimeZone.setDefault(TimeZone.getTimeZone("UTC"));\nDate date2 = new Date();'
p1111
aS'isoFormat.setTimeZone(TimeZone.getTimeZone("UTC"));'
p1112
aS'Date date2 = new Date();\nSystem.out.println(date2);'
p1113
aS'Date date1 = new Date();\nSystem.out.println(date1);\nTimeZone.setDefault(TimeZone.getTimeZone("UTC"));'
p1114
aS'Date date1 = new Date();'
p1115
aS'TimeZone.setDefault(TimeZone.getTimeZone("UTC"));\nDate date2 = new Date();\nSystem.out.println(date2);'
p1116
aS'SimpleDateFormat isoFormat = new SimpleDateFormat("yyyy-MM-dd\'T\'HH:mm:ss");\nisoFormat.setTimeZone(TimeZone.getTimeZone("UTC"));'
p1117
aS'Date date2 = new Date();'
p1118
aS'TimeZone.setDefault(TimeZone.getTimeZone("UTC"));\nDate date2 = new Date();'
p1119
aS'System.out.println(date1);\nTimeZone.setDefault(TimeZone.getTimeZone("UTC"));'
p1120
aS'Date date = isoFormat.parse("2010-05-23T09:01:02");'
p1121
aS'Date date1 = new Date();\nSystem.out.println(date1);\nTimeZone.setDefault(TimeZone.getTimeZone("UTC"));\nDate date2 = new Date();\nSystem.out.println(date2);'
p1122
aS'SimpleDateFormat isoFormat = new SimpleDateFormat("yyyy-MM-dd\'T\'HH:mm:ss");'
p1123
aS'isoFormat.setTimeZone(TimeZone.getTimeZone("UTC"));\nDate date = isoFormat.parse("2010-05-23T09:01:02");'
p1124
aS'System.out.println(date1);'
p1125
aS'SimpleDateFormat isoFormat = new SimpleDateFormat("yyyy-MM-dd\'T\'HH:mm:ss");\nisoFormat.setTimeZone(TimeZone.getTimeZone("UTC"));\nDate date = isoFormat.parse("2010-05-23T09:01:02");'
p1126
atp1127
Rp1128
sI7074402
g1
((lp1129
S'str.add(2);\nstr.add(3);\nstr.add(1, 11);\nstr.add(2, 12);'
p1130
aS'str.add(3);\nstr.add(1, 11);'
p1131
aS'str.add(1);\nstr.add(2);'
p1132
aS'ArrayList<Integer> str = new ArrayList<Integer>();\nstr.add(0);\nstr.add(1);\nstr.add(2);'
p1133
aS'str.add(0);\nstr.add(1);\nstr.add(2);\nstr.add(3);\nstr.add(1, 11);'
p1134
aS'ArrayList<Integer> str = new ArrayList<Integer>();\nstr.add(0);\nstr.add(1);\nstr.add(2);\nstr.add(3);'
p1135
aS'str.add(1, 11);'
p1136
aS'str.add(0);\nstr.add(1);\nstr.add(2);\nstr.add(3);\nstr.add(1, 11);\nstr.add(2, 12);'
p1137
aS'ArrayList<Integer> str = new ArrayList<Integer>();'
p1138
aS'str.add(1);\nstr.add(2);\nstr.add(3);\nstr.add(1, 11);\nstr.add(2, 12);'
p1139
aS'str.add(3);\nstr.add(1, 11);\nstr.add(2, 12);'
p1140
aS'ArrayList<Integer> str = new ArrayList<Integer>();\nstr.add(0);'
p1141
aS'str.add(1);\nstr.add(2);\nstr.add(3);'
p1142
aS'str.add(0);\nstr.add(1);\nstr.add(2);'
p1143
aS'str.add(2);'
p1144
aS'str.add(0);\nstr.add(1);'
p1145
aS'str.add(0);\nstr.add(1);\nstr.add(2);\nstr.add(3);'
p1146
aS'str.add(3);'
p1147
aS'str.add(1);'
p1148
aS'str.add(1, 11);\nstr.add(2, 12);'
p1149
aS'ArrayList<Integer> str = new ArrayList<Integer>();\nstr.add(0);\nstr.add(1);\nstr.add(2);\nstr.add(3);\nstr.add(1, 11);'
p1150
aS'str.add(2, 12);'
p1151
aS'str.add(2);\nstr.add(3);'
p1152
aS'ArrayList<Integer> str = new ArrayList<Integer>();\nstr.add(0);\nstr.add(1);'
p1153
aS'str.add(1);\nstr.add(2);\nstr.add(3);\nstr.add(1, 11);'
p1154
aS'ArrayList<Integer> str = new ArrayList<Integer>();\nstr.add(0);\nstr.add(1);\nstr.add(2);\nstr.add(3);\nstr.add(1, 11);\nstr.add(2, 12);'
p1155
aS'str.add(2);\nstr.add(3);\nstr.add(1, 11);'
p1156
aS'str.add(0);'
p1157
atp1158
Rp1159
sI1378920
g1
((lp1160
S'HttpPost uploadFile = new HttpPost("...");\nMultipartEntityBuilder builder = MultipartEntityBuilder.create();\nbuilder.addTextBody("field1", "yes", ContentType.TEXT_PLAIN);\nFile f = new File("[/path/to/upload]");\nbuilder.addBinaryBody("file", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());\nHttpEntity multipart = builder.build();\nuploadFile.setEntity(multipart);\nCloseableHttpResponse response = httpClient.execute(uploadFile);\nHttpEntity responseEntity = response.getEntity();'
p1161
aS'CloseableHttpClient httpClient = HttpClients.createDefault();\nHttpPost uploadFile = new HttpPost("...");\nMultipartEntityBuilder builder = MultipartEntityBuilder.create();\nbuilder.addTextBody("field1", "yes", ContentType.TEXT_PLAIN);\nFile f = new File("[/path/to/upload]");\nbuilder.addBinaryBody("file", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());'
p1162
aS'HttpPost httpPost = new HttpPost(url);\nFileBody uploadFilePart = new FileBody(uploadFile);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("upload-file", uploadFilePart);\nhttpPost.setEntity(reqEntity);\nHttpResponse response = httpclient.execute(httpPost);'
p1163
aS'FileBody fileBody = new FileBody(new File(fileName));\nMultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);'
p1164
aS'HttpPost uploadFile = new HttpPost("...");\nMultipartEntityBuilder builder = MultipartEntityBuilder.create();\nbuilder.addTextBody("field1", "yes", ContentType.TEXT_PLAIN);\nFile f = new File("[/path/to/upload]");'
p1165
aS'HttpPost httpPost = new HttpPost(url);\nFileBody uploadFilePart = new FileBody(uploadFile);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("upload-file", uploadFilePart);'
p1166
aS'multipartEntity.addPart("file", fileBody);\nconnection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());\nOutputStream out = connection.getOutputStream();\ntry {\n    multipartEntity.writeTo(out);\n} finally {\n}'
p1167
aS'StringBody comment = new StringBody("Filename: " + fileName);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("bin", bin);\nreqEntity.addPart("comment", comment);\nhttppost.setEntity(reqEntity);'
p1168
aS'HttpClient httpclient = new DefaultHttpClient();\nHttpPost httppost = new HttpPost(url);'
p1169
aS'FileBody fileBody = new FileBody(new File(fileName));'
p1170
aS'connection.setDoOutput(true);\nconnection.setRequestMethod("POST");\nFileBody fileBody = new FileBody(new File(fileName));\nMultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart("file", fileBody);\nconnection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());\nOutputStream out = connection.getOutputStream();\ntry {\n    multipartEntity.writeTo(out);\n} finally {\n    out.close();\n}\nint status = connection.getResponseCode();'
p1171
aS'CloseableHttpClient httpClient = HttpClients.createDefault();\nHttpPost uploadFile = new HttpPost("...");'
p1172
aS'MultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("bin", bin);'
p1173
aS'HttpResponse response = httpclient.execute(httppost);\nHttpEntity resEntity = response.getEntity();'
p1174
aS'HttpPost uploadFile = new HttpPost("...");\nMultipartEntityBuilder builder = MultipartEntityBuilder.create();\nbuilder.addTextBody("field1", "yes", ContentType.TEXT_PLAIN);\nFile f = new File("[/path/to/upload]");\nbuilder.addBinaryBody("file", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());\nHttpEntity multipart = builder.build();\nuploadFile.setEntity(multipart);'
p1175
aS'OutputStream out = connection.getOutputStream();\ntry {\n    multipartEntity.writeTo(out);\n} finally {\n    out.close();\n}\nint status = connection.getResponseCode();'
p1176
aS'StringBody comment = new StringBody("Filename: " + fileName);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("bin", bin);'
p1177
aS'File f = new File("[/path/to/upload]");'
p1178
aS'multipartEntity.writeTo(out);'
p1179
aS'connection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());\nOutputStream out = connection.getOutputStream();'
p1180
aS'MultipartEntityBuilder builder = MultipartEntityBuilder.create();\nbuilder.addTextBody("field1", "yes", ContentType.TEXT_PLAIN);\nFile f = new File("[/path/to/upload]");\nbuilder.addBinaryBody("file", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());\nHttpEntity multipart = builder.build();\nuploadFile.setEntity(multipart);\nCloseableHttpResponse response = httpClient.execute(uploadFile);\nHttpEntity responseEntity = response.getEntity();'
p1181
aS'HttpURLConnection connection = (HttpURLConnection) url.openConnection();\nconnection.setDoOutput(true);\nconnection.setRequestMethod("POST");\nFileBody fileBody = new FileBody(new File(fileName));\nMultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart("file", fileBody);'
p1182
aS'builder.addBinaryBody("file", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());\nHttpEntity multipart = builder.build();'
p1183
aS'MultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart("file", fileBody);\nconnection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());\nOutputStream out = connection.getOutputStream();'
p1184
aS'multipartEntity.addPart("file", fileBody);\nconnection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());\nOutputStream out = connection.getOutputStream();'
p1185
aS'connection.setRequestMethod("POST");\nFileBody fileBody = new FileBody(new File(fileName));\nMultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart("file", fileBody);\nconnection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());\nOutputStream out = connection.getOutputStream();\ntry {\n    multipartEntity.writeTo(out);\n} finally {\n    out.close();\n}\nint status = connection.getResponseCode();'
p1186
aS'CloseableHttpClient httpClient = HttpClients.createDefault();'
p1187
aS'FileBody uploadFilePart = new FileBody(uploadFile);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("upload-file", uploadFilePart);'
p1188
aS'connection.setDoOutput(true);\nconnection.setRequestMethod("POST");\nFileBody fileBody = new FileBody(new File(fileName));\nMultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart("file", fileBody);\nconnection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());'
p1189
aS'connection.setRequestMethod("POST");\nFileBody fileBody = new FileBody(new File(fileName));\nMultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart("file", fileBody);\nconnection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());\nOutputStream out = connection.getOutputStream();\ntry {\n    multipartEntity.writeTo(out);\n} finally {\n    out.close();\n}'
p1190
aS'builder.addTextBody("field1", "yes", ContentType.TEXT_PLAIN);'
p1191
aS'CloseableHttpClient httpClient = HttpClients.createDefault();\nHttpPost uploadFile = new HttpPost("...");\nMultipartEntityBuilder builder = MultipartEntityBuilder.create();\nbuilder.addTextBody("field1", "yes", ContentType.TEXT_PLAIN);'
p1192
aS'HttpURLConnection connection = (HttpURLConnection) url.openConnection();\nconnection.setDoOutput(true);\nconnection.setRequestMethod("POST");\nFileBody fileBody = new FileBody(new File(fileName));\nMultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart("file", fileBody);\nconnection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());\nOutputStream out = connection.getOutputStream();\ntry {\n    multipartEntity.writeTo(out);\n} finally {\n}'
p1193
aS'File f = new File("[/path/to/upload]");\nbuilder.addBinaryBody("file", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());\nHttpEntity multipart = builder.build();\nuploadFile.setEntity(multipart);\nCloseableHttpResponse response = httpClient.execute(uploadFile);\nHttpEntity responseEntity = response.getEntity();'
p1194
aS'connection.setRequestMethod("POST");\nFileBody fileBody = new FileBody(new File(fileName));\nMultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart("file", fileBody);\nconnection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());\nOutputStream out = connection.getOutputStream();'
p1195
aS'HttpURLConnection connection = (HttpURLConnection) url.openConnection();\nconnection.setDoOutput(true);\nconnection.setRequestMethod("POST");\nFileBody fileBody = new FileBody(new File(fileName));\nMultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart("file", fileBody);\nconnection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());\nOutputStream out = connection.getOutputStream();'
p1196
aS'MultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("upload-file", uploadFilePart);\nhttpPost.setEntity(reqEntity);\nHttpResponse response = httpclient.execute(httpPost);'
p1197
aS'try {\n    multipartEntity.writeTo(out);\n} finally {\n    out.close();\n}\nint status = connection.getResponseCode();'
p1198
aS'HttpURLConnection connection = (HttpURLConnection) url.openConnection();\nconnection.setDoOutput(true);\nconnection.setRequestMethod("POST");\nFileBody fileBody = new FileBody(new File(fileName));\nMultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart("file", fileBody);\nconnection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());'
p1199
aS'reqEntity.addPart("bin", bin);\nreqEntity.addPart("comment", comment);\nhttppost.setEntity(reqEntity);'
p1200
aS'OutputStream out = connection.getOutputStream();\ntry {\n    multipartEntity.writeTo(out);\n} finally {\n    out.close();\n}'
p1201
aS'out.close();'
p1202
aS'FileBody bin = new FileBody(new File(fileName));\nStringBody comment = new StringBody("Filename: " + fileName);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("bin", bin);\nreqEntity.addPart("comment", comment);'
p1203
aS'reqEntity.addPart("comment", comment);'
p1204
aS'HttpClient httpclient = new DefaultHttpClient();\nHttpPost httppost = new HttpPost(url);\nFileBody bin = new FileBody(new File(fileName));'
p1205
aS'HttpClient httpclient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost(url);\nFileBody uploadFilePart = new FileBody(uploadFile);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("upload-file", uploadFilePart);'
p1206
aS'connection.setDoOutput(true);\nconnection.setRequestMethod("POST");\nFileBody fileBody = new FileBody(new File(fileName));\nMultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart("file", fileBody);\nconnection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());\nOutputStream out = connection.getOutputStream();'
p1207
aS'StringBody comment = new StringBody("Filename: " + fileName);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("bin", bin);\nreqEntity.addPart("comment", comment);\nhttppost.setEntity(reqEntity);\nHttpResponse response = httpclient.execute(httppost);\nHttpEntity resEntity = response.getEntity();'
p1208
aS'HttpClient httpclient = new DefaultHttpClient();\nHttpPost httppost = new HttpPost(url);\nFileBody bin = new FileBody(new File(fileName));\nStringBody comment = new StringBody("Filename: " + fileName);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("bin", bin);\nreqEntity.addPart("comment", comment);'
p1209
aS'reqEntity.addPart("bin", bin);\nreqEntity.addPart("comment", comment);'
p1210
aS'connection.setDoOutput(true);\nconnection.setRequestMethod("POST");\nFileBody fileBody = new FileBody(new File(fileName));\nMultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);'
p1211
aS'StringBody comment = new StringBody("Filename: " + fileName);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("bin", bin);\nreqEntity.addPart("comment", comment);\nhttppost.setEntity(reqEntity);\nHttpResponse response = httpclient.execute(httppost);'
p1212
aS'multipartEntity.addPart("file", fileBody);\nconnection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());\nOutputStream out = connection.getOutputStream();\ntry {\n    multipartEntity.writeTo(out);\n} finally {\n    out.close();\n}'
p1213
aS'connection.setRequestMethod("POST");\nFileBody fileBody = new FileBody(new File(fileName));\nMultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);'
p1214
aS'HttpClient httpclient = new DefaultHttpClient();\nHttpPost httppost = new HttpPost(url);\nFileBody bin = new FileBody(new File(fileName));\nStringBody comment = new StringBody("Filename: " + fileName);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("bin", bin);'
p1215
aS'uploadFile.setEntity(multipart);'
p1216
aS'HttpURLConnection connection = (HttpURLConnection) url.openConnection();\nconnection.setDoOutput(true);\nconnection.setRequestMethod("POST");\nFileBody fileBody = new FileBody(new File(fileName));'
p1217
aS'connection.setRequestMethod("POST");'
p1218
aS'HttpEntity multipart = builder.build();'
p1219
aS'HttpPost httppost = new HttpPost(url);'
p1220
aS'try {\n    multipartEntity.writeTo(out);\n} finally {\n    out.close();\n}'
p1221
aS'multipartEntity.addPart("file", fileBody);\nconnection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());'
p1222
aS'try {\n    multipartEntity.writeTo(out);\n} finally {\n}'
p1223
aS'connection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());\nOutputStream out = connection.getOutputStream();\ntry {\n    multipartEntity.writeTo(out);\n} finally {\n    out.close();\n}'
p1224
aS'connection.setDoOutput(true);\nconnection.setRequestMethod("POST");\nFileBody fileBody = new FileBody(new File(fileName));\nMultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart("file", fileBody);\nconnection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());\nOutputStream out = connection.getOutputStream();\ntry {\n    multipartEntity.writeTo(out);\n} finally {\n    out.close();\n}'
p1225
aS'HttpClient httpclient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost(url);\nFileBody uploadFilePart = new FileBody(uploadFile);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("upload-file", uploadFilePart);\nhttpPost.setEntity(reqEntity);\nHttpResponse response = httpclient.execute(httpPost);'
p1226
aS'HttpClient httpclient = new DefaultHttpClient();'
p1227
aS'HttpEntity multipart = builder.build();\nuploadFile.setEntity(multipart);\nCloseableHttpResponse response = httpClient.execute(uploadFile);\nHttpEntity responseEntity = response.getEntity();'
p1228
aS'builder.addBinaryBody("file", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());'
p1229
aS'HttpPost uploadFile = new HttpPost("...");\nMultipartEntityBuilder builder = MultipartEntityBuilder.create();\nbuilder.addTextBody("field1", "yes", ContentType.TEXT_PLAIN);'
p1230
aS'HttpPost httppost = new HttpPost(url);\nFileBody bin = new FileBody(new File(fileName));\nStringBody comment = new StringBody("Filename: " + fileName);\nMultipartEntity reqEntity = new MultipartEntity();'
p1231
aS'builder.addTextBody("field1", "yes", ContentType.TEXT_PLAIN);\nFile f = new File("[/path/to/upload]");'
p1232
aS'HttpPost httpPost = new HttpPost(url);\nFileBody uploadFilePart = new FileBody(uploadFile);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("upload-file", uploadFilePart);\nhttpPost.setEntity(reqEntity);'
p1233
aS'File f = new File("[/path/to/upload]");\nbuilder.addBinaryBody("file", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());\nHttpEntity multipart = builder.build();\nuploadFile.setEntity(multipart);'
p1234
aS'FileBody bin = new FileBody(new File(fileName));\nStringBody comment = new StringBody("Filename: " + fileName);'
p1235
aS'MultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("bin", bin);\nreqEntity.addPart("comment", comment);'
p1236
aS'MultipartEntityBuilder builder = MultipartEntityBuilder.create();\nbuilder.addTextBody("field1", "yes", ContentType.TEXT_PLAIN);'
p1237
aS'reqEntity.addPart("bin", bin);\nreqEntity.addPart("comment", comment);\nhttppost.setEntity(reqEntity);\nHttpResponse response = httpclient.execute(httppost);'
p1238
aS'HttpEntity responseEntity = response.getEntity();'
p1239
aS'reqEntity.addPart("bin", bin);'
p1240
aS'MultipartEntityBuilder builder = MultipartEntityBuilder.create();\nbuilder.addTextBody("field1", "yes", ContentType.TEXT_PLAIN);\nFile f = new File("[/path/to/upload]");\nbuilder.addBinaryBody("file", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());\nHttpEntity multipart = builder.build();'
p1241
aS'MultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart("file", fileBody);\nconnection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());\nOutputStream out = connection.getOutputStream();\ntry {\n    multipartEntity.writeTo(out);\n} finally {\n    out.close();\n}\nint status = connection.getResponseCode();'
p1242
aS'builder.addTextBody("field1", "yes", ContentType.TEXT_PLAIN);\nFile f = new File("[/path/to/upload]");\nbuilder.addBinaryBody("file", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());\nHttpEntity multipart = builder.build();\nuploadFile.setEntity(multipart);\nCloseableHttpResponse response = httpClient.execute(uploadFile);'
p1243
aS'OutputStream out = connection.getOutputStream();\ntry {\n    multipartEntity.writeTo(out);\n} finally {\n}'
p1244
aS'reqEntity.addPart("comment", comment);\nhttppost.setEntity(reqEntity);\nHttpResponse response = httpclient.execute(httppost);'
p1245
aS'FileBody bin = new FileBody(new File(fileName));\nStringBody comment = new StringBody("Filename: " + fileName);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("bin", bin);\nreqEntity.addPart("comment", comment);\nhttppost.setEntity(reqEntity);\nHttpResponse response = httpclient.execute(httppost);'
p1246
aS'httppost.setEntity(reqEntity);\nHttpResponse response = httpclient.execute(httppost);\nHttpEntity resEntity = response.getEntity();'
p1247
aS'connection.setDoOutput(true);\nconnection.setRequestMethod("POST");\nFileBody fileBody = new FileBody(new File(fileName));\nMultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart("file", fileBody);\nconnection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());\nOutputStream out = connection.getOutputStream();\ntry {\n    multipartEntity.writeTo(out);\n} finally {\n}'
p1248
aS'connection.setRequestMethod("POST");\nFileBody fileBody = new FileBody(new File(fileName));\nMultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart("file", fileBody);'
p1249
aS'HttpClient httpclient = new DefaultHttpClient();\nHttpPost httppost = new HttpPost(url);\nFileBody bin = new FileBody(new File(fileName));\nStringBody comment = new StringBody("Filename: " + fileName);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("bin", bin);\nreqEntity.addPart("comment", comment);\nhttppost.setEntity(reqEntity);\nHttpResponse response = httpclient.execute(httppost);\nHttpEntity resEntity = response.getEntity();'
p1250
aS'builder.addTextBody("field1", "yes", ContentType.TEXT_PLAIN);\nFile f = new File("[/path/to/upload]");\nbuilder.addBinaryBody("file", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());'
p1251
aS'FileBody fileBody = new FileBody(new File(fileName));\nMultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart("file", fileBody);\nconnection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());\nOutputStream out = connection.getOutputStream();\ntry {\n    multipartEntity.writeTo(out);\n} finally {\n    out.close();\n}\nint status = connection.getResponseCode();'
p1252
aS'HttpPost uploadFile = new HttpPost("...");\nMultipartEntityBuilder builder = MultipartEntityBuilder.create();\nbuilder.addTextBody("field1", "yes", ContentType.TEXT_PLAIN);\nFile f = new File("[/path/to/upload]");\nbuilder.addBinaryBody("file", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());\nHttpEntity multipart = builder.build();\nuploadFile.setEntity(multipart);\nCloseableHttpResponse response = httpClient.execute(uploadFile);'
p1253
aS'connection.setRequestMethod("POST");\nFileBody fileBody = new FileBody(new File(fileName));\nMultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart("file", fileBody);\nconnection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());'
p1254
aS'HttpPost httppost = new HttpPost(url);\nFileBody bin = new FileBody(new File(fileName));\nStringBody comment = new StringBody("Filename: " + fileName);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("bin", bin);\nreqEntity.addPart("comment", comment);'
p1255
aS'MultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("bin", bin);\nreqEntity.addPart("comment", comment);\nhttppost.setEntity(reqEntity);\nHttpResponse response = httpclient.execute(httppost);'
p1256
aS'connection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());'
p1257
aS'HttpClient httpclient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost(url);\nFileBody uploadFilePart = new FileBody(uploadFile);'
p1258
aS'CloseableHttpClient httpClient = HttpClients.createDefault();\nHttpPost uploadFile = new HttpPost("...");\nMultipartEntityBuilder builder = MultipartEntityBuilder.create();\nbuilder.addTextBody("field1", "yes", ContentType.TEXT_PLAIN);\nFile f = new File("[/path/to/upload]");\nbuilder.addBinaryBody("file", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());\nHttpEntity multipart = builder.build();\nuploadFile.setEntity(multipart);\nCloseableHttpResponse response = httpClient.execute(uploadFile);\nHttpEntity responseEntity = response.getEntity();'
p1259
aS'FileBody fileBody = new FileBody(new File(fileName));\nMultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart("file", fileBody);\nconnection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());'
p1260
aS'StringBody comment = new StringBody("Filename: " + fileName);'
p1261
aS'builder.addTextBody("field1", "yes", ContentType.TEXT_PLAIN);\nFile f = new File("[/path/to/upload]");\nbuilder.addBinaryBody("file", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());\nHttpEntity multipart = builder.build();'
p1262
aS'FileBody fileBody = new FileBody(new File(fileName));\nMultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart("file", fileBody);'
p1263
aS'HttpURLConnection connection = (HttpURLConnection) url.openConnection();\nconnection.setDoOutput(true);\nconnection.setRequestMethod("POST");'
p1264
aS'httppost.setEntity(reqEntity);'
p1265
aS'builder.addBinaryBody("file", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());\nHttpEntity multipart = builder.build();\nuploadFile.setEntity(multipart);'
p1266
aS'connection.setDoOutput(true);\nconnection.setRequestMethod("POST");\nFileBody fileBody = new FileBody(new File(fileName));\nMultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart("file", fileBody);'
p1267
aS'builder.addTextBody("field1", "yes", ContentType.TEXT_PLAIN);\nFile f = new File("[/path/to/upload]");\nbuilder.addBinaryBody("file", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());\nHttpEntity multipart = builder.build();\nuploadFile.setEntity(multipart);'
p1268
aS'CloseableHttpClient httpClient = HttpClients.createDefault();\nHttpPost uploadFile = new HttpPost("...");\nMultipartEntityBuilder builder = MultipartEntityBuilder.create();\nbuilder.addTextBody("field1", "yes", ContentType.TEXT_PLAIN);\nFile f = new File("[/path/to/upload]");\nbuilder.addBinaryBody("file", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());\nHttpEntity multipart = builder.build();\nuploadFile.setEntity(multipart);'
p1269
aS'multipartEntity.addPart("file", fileBody);'
p1270
aS'StringBody comment = new StringBody("Filename: " + fileName);\nMultipartEntity reqEntity = new MultipartEntity();'
p1271
aS'MultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("bin", bin);\nreqEntity.addPart("comment", comment);\nhttppost.setEntity(reqEntity);\nHttpResponse response = httpclient.execute(httppost);\nHttpEntity resEntity = response.getEntity();'
p1272
aS'OutputStream out = connection.getOutputStream();'
p1273
aS'HttpPost uploadFile = new HttpPost("...");\nMultipartEntityBuilder builder = MultipartEntityBuilder.create();\nbuilder.addTextBody("field1", "yes", ContentType.TEXT_PLAIN);\nFile f = new File("[/path/to/upload]");\nbuilder.addBinaryBody("file", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());'
p1274
aS'reqEntity.addPart("comment", comment);\nhttppost.setEntity(reqEntity);'
p1275
aS'HttpPost httppost = new HttpPost(url);\nFileBody bin = new FileBody(new File(fileName));\nStringBody comment = new StringBody("Filename: " + fileName);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("bin", bin);\nreqEntity.addPart("comment", comment);\nhttppost.setEntity(reqEntity);\nHttpResponse response = httpclient.execute(httppost);\nHttpEntity resEntity = response.getEntity();'
p1276
aS'CloseableHttpClient httpClient = HttpClients.createDefault();\nHttpPost uploadFile = new HttpPost("...");\nMultipartEntityBuilder builder = MultipartEntityBuilder.create();\nbuilder.addTextBody("field1", "yes", ContentType.TEXT_PLAIN);\nFile f = new File("[/path/to/upload]");'
p1277
aS'File f = new File("[/path/to/upload]");\nbuilder.addBinaryBody("file", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());'
p1278
aS'int status = connection.getResponseCode();'
p1279
aS'MultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("bin", bin);\nreqEntity.addPart("comment", comment);\nhttppost.setEntity(reqEntity);'
p1280
aS'FileBody bin = new FileBody(new File(fileName));\nStringBody comment = new StringBody("Filename: " + fileName);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("bin", bin);'
p1281
aS'HttpURLConnection connection = (HttpURLConnection) url.openConnection();\nconnection.setDoOutput(true);\nconnection.setRequestMethod("POST");\nFileBody fileBody = new FileBody(new File(fileName));\nMultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart("file", fileBody);\nconnection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());\nOutputStream out = connection.getOutputStream();\ntry {\n    multipartEntity.writeTo(out);\n} finally {\n    out.close();\n}\nint status = connection.getResponseCode();'
p1282
aS'FileBody fileBody = new FileBody(new File(fileName));\nMultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart("file", fileBody);\nconnection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());\nOutputStream out = connection.getOutputStream();'
p1283
aS'MultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);'
p1284
aS'connection.setDoOutput(true);'
p1285
aS'HttpClient httpclient = new DefaultHttpClient();\nHttpPost httppost = new HttpPost(url);\nFileBody bin = new FileBody(new File(fileName));\nStringBody comment = new StringBody("Filename: " + fileName);\nMultipartEntity reqEntity = new MultipartEntity();'
p1286
aS'connection.setDoOutput(true);\nconnection.setRequestMethod("POST");'
p1287
aS'HttpPost uploadFile = new HttpPost("...");'
p1288
aS'HttpPost uploadFile = new HttpPost("...");\nMultipartEntityBuilder builder = MultipartEntityBuilder.create();\nbuilder.addTextBody("field1", "yes", ContentType.TEXT_PLAIN);\nFile f = new File("[/path/to/upload]");\nbuilder.addBinaryBody("file", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());\nHttpEntity multipart = builder.build();'
p1289
aS'uploadFile.setEntity(multipart);\nCloseableHttpResponse response = httpClient.execute(uploadFile);\nHttpEntity responseEntity = response.getEntity();'
p1290
aS'CloseableHttpClient httpClient = HttpClients.createDefault();\nHttpPost uploadFile = new HttpPost("...");\nMultipartEntityBuilder builder = MultipartEntityBuilder.create();\nbuilder.addTextBody("field1", "yes", ContentType.TEXT_PLAIN);\nFile f = new File("[/path/to/upload]");\nbuilder.addBinaryBody("file", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());\nHttpEntity multipart = builder.build();\nuploadFile.setEntity(multipart);\nCloseableHttpResponse response = httpClient.execute(uploadFile);'
p1291
aS'HttpPost httpPost = new HttpPost(url);\nFileBody uploadFilePart = new FileBody(uploadFile);\nMultipartEntity reqEntity = new MultipartEntity();'
p1292
aS'multipartEntity.addPart("file", fileBody);\nconnection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());\nOutputStream out = connection.getOutputStream();\ntry {\n    multipartEntity.writeTo(out);\n} finally {\n    out.close();\n}\nint status = connection.getResponseCode();'
p1293
aS'HttpURLConnection connection = (HttpURLConnection) url.openConnection();\nconnection.setDoOutput(true);\nconnection.setRequestMethod("POST");\nFileBody fileBody = new FileBody(new File(fileName));\nMultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);'
p1294
aS'HttpEntity multipart = builder.build();\nuploadFile.setEntity(multipart);'
p1295
aS'FileBody uploadFilePart = new FileBody(uploadFile);\nMultipartEntity reqEntity = new MultipartEntity();'
p1296
aS'FileBody uploadFilePart = new FileBody(uploadFile);'
p1297
aS'FileBody bin = new FileBody(new File(fileName));\nStringBody comment = new StringBody("Filename: " + fileName);\nMultipartEntity reqEntity = new MultipartEntity();'
p1298
aS'FileBody bin = new FileBody(new File(fileName));\nStringBody comment = new StringBody("Filename: " + fileName);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("bin", bin);\nreqEntity.addPart("comment", comment);\nhttppost.setEntity(reqEntity);\nHttpResponse response = httpclient.execute(httppost);\nHttpEntity resEntity = response.getEntity();'
p1299
aS'builder.addBinaryBody("file", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());\nHttpEntity multipart = builder.build();\nuploadFile.setEntity(multipart);\nCloseableHttpResponse response = httpClient.execute(uploadFile);'
p1300
aS'FileBody fileBody = new FileBody(new File(fileName));\nMultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart("file", fileBody);\nconnection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());\nOutputStream out = connection.getOutputStream();\ntry {\n    multipartEntity.writeTo(out);\n} finally {\n    out.close();\n}'
p1301
aS'CloseableHttpClient httpClient = HttpClients.createDefault();\nHttpPost uploadFile = new HttpPost("...");\nMultipartEntityBuilder builder = MultipartEntityBuilder.create();\nbuilder.addTextBody("field1", "yes", ContentType.TEXT_PLAIN);\nFile f = new File("[/path/to/upload]");\nbuilder.addBinaryBody("file", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());\nHttpEntity multipart = builder.build();'
p1302
aS'connection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());\nOutputStream out = connection.getOutputStream();\ntry {\n    multipartEntity.writeTo(out);\n} finally {\n}'
p1303
aS'MultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart("file", fileBody);\nconnection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());\nOutputStream out = connection.getOutputStream();\ntry {\n    multipartEntity.writeTo(out);\n} finally {\n    out.close();\n}'
p1304
aS'builder.addBinaryBody("file", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());\nHttpEntity multipart = builder.build();\nuploadFile.setEntity(multipart);\nCloseableHttpResponse response = httpClient.execute(uploadFile);\nHttpEntity responseEntity = response.getEntity();'
p1305
aS'reqEntity.addPart("upload-file", uploadFilePart);\nhttpPost.setEntity(reqEntity);\nHttpResponse response = httpclient.execute(httpPost);'
p1306
aS'CloseableHttpClient httpClient = HttpClients.createDefault();\nHttpPost uploadFile = new HttpPost("...");\nMultipartEntityBuilder builder = MultipartEntityBuilder.create();'
p1307
aS'connection.setRequestMethod("POST");\nFileBody fileBody = new FileBody(new File(fileName));'
p1308
aS'HttpClient httpclient = new DefaultHttpClient();\nHttpPost httppost = new HttpPost(url);\nFileBody bin = new FileBody(new File(fileName));\nStringBody comment = new StringBody("Filename: " + fileName);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("bin", bin);\nreqEntity.addPart("comment", comment);\nhttppost.setEntity(reqEntity);\nHttpResponse response = httpclient.execute(httppost);'
p1309
aS'HttpURLConnection connection = (HttpURLConnection) url.openConnection();'
p1310
aS'File f = new File("[/path/to/upload]");\nbuilder.addBinaryBody("file", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());\nHttpEntity multipart = builder.build();\nuploadFile.setEntity(multipart);\nCloseableHttpResponse response = httpClient.execute(uploadFile);'
p1311
aS'HttpClient httpclient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost(url);\nFileBody uploadFilePart = new FileBody(uploadFile);\nMultipartEntity reqEntity = new MultipartEntity();'
p1312
aS'MultipartEntityBuilder builder = MultipartEntityBuilder.create();\nbuilder.addTextBody("field1", "yes", ContentType.TEXT_PLAIN);\nFile f = new File("[/path/to/upload]");\nbuilder.addBinaryBody("file", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());\nHttpEntity multipart = builder.build();\nuploadFile.setEntity(multipart);'
p1313
aS'HttpPost httppost = new HttpPost(url);\nFileBody bin = new FileBody(new File(fileName));\nStringBody comment = new StringBody("Filename: " + fileName);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("bin", bin);'
p1314
aS'HttpPost httppost = new HttpPost(url);\nFileBody bin = new FileBody(new File(fileName));\nStringBody comment = new StringBody("Filename: " + fileName);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("bin", bin);\nreqEntity.addPart("comment", comment);\nhttppost.setEntity(reqEntity);'
p1315
aS'httppost.setEntity(reqEntity);\nHttpResponse response = httpclient.execute(httppost);'
p1316
aS'MultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart("file", fileBody);'
p1317
aS'MultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("upload-file", uploadFilePart);'
p1318
aS'MultipartEntity reqEntity = new MultipartEntity();'
p1319
aS'connection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());\nOutputStream out = connection.getOutputStream();\ntry {\n    multipartEntity.writeTo(out);\n} finally {\n    out.close();\n}\nint status = connection.getResponseCode();'
p1320
aS'httpPost.setEntity(reqEntity);\nHttpResponse response = httpclient.execute(httpPost);'
p1321
aS'FileBody uploadFilePart = new FileBody(uploadFile);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("upload-file", uploadFilePart);\nhttpPost.setEntity(reqEntity);\nHttpResponse response = httpclient.execute(httpPost);'
p1322
aS'reqEntity.addPart("bin", bin);\nreqEntity.addPart("comment", comment);\nhttppost.setEntity(reqEntity);\nHttpResponse response = httpclient.execute(httppost);\nHttpEntity resEntity = response.getEntity();'
p1323
aS'MultipartEntityBuilder builder = MultipartEntityBuilder.create();'
p1324
aS'HttpPost uploadFile = new HttpPost("...");\nMultipartEntityBuilder builder = MultipartEntityBuilder.create();'
p1325
aS'connection.setRequestMethod("POST");\nFileBody fileBody = new FileBody(new File(fileName));\nMultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart("file", fileBody);\nconnection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());\nOutputStream out = connection.getOutputStream();\ntry {\n    multipartEntity.writeTo(out);\n} finally {\n}'
p1326
aS'StringBody comment = new StringBody("Filename: " + fileName);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("bin", bin);\nreqEntity.addPart("comment", comment);'
p1327
aS'HttpEntity resEntity = response.getEntity();'
p1328
aS'FileBody uploadFilePart = new FileBody(uploadFile);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("upload-file", uploadFilePart);\nhttpPost.setEntity(reqEntity);'
p1329
aS'File f = new File("[/path/to/upload]");\nbuilder.addBinaryBody("file", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());\nHttpEntity multipart = builder.build();'
p1330
aS'HttpPost httppost = new HttpPost(url);\nFileBody bin = new FileBody(new File(fileName));\nStringBody comment = new StringBody("Filename: " + fileName);'
p1331
aS'builder.addTextBody("field1", "yes", ContentType.TEXT_PLAIN);\nFile f = new File("[/path/to/upload]");\nbuilder.addBinaryBody("file", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());\nHttpEntity multipart = builder.build();\nuploadFile.setEntity(multipart);\nCloseableHttpResponse response = httpClient.execute(uploadFile);\nHttpEntity responseEntity = response.getEntity();'
p1332
aS'HttpResponse response = httpclient.execute(httppost);'
p1333
aS'CloseableHttpResponse response = httpClient.execute(uploadFile);\nHttpEntity responseEntity = response.getEntity();'
p1334
aS'uploadFile.setEntity(multipart);\nCloseableHttpResponse response = httpClient.execute(uploadFile);'
p1335
aS'HttpURLConnection connection = (HttpURLConnection) url.openConnection();\nconnection.setDoOutput(true);\nconnection.setRequestMethod("POST");\nFileBody fileBody = new FileBody(new File(fileName));\nMultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart("file", fileBody);\nconnection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());\nOutputStream out = connection.getOutputStream();\ntry {\n    multipartEntity.writeTo(out);\n} finally {\n    out.close();\n}'
p1336
aS'reqEntity.addPart("upload-file", uploadFilePart);'
p1337
aS'HttpPost httpPost = new HttpPost(url);'
p1338
aS'HttpClient httpclient = new DefaultHttpClient();\nHttpPost httppost = new HttpPost(url);\nFileBody bin = new FileBody(new File(fileName));\nStringBody comment = new StringBody("Filename: " + fileName);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("bin", bin);\nreqEntity.addPart("comment", comment);\nhttppost.setEntity(reqEntity);'
p1339
aS'FileBody bin = new FileBody(new File(fileName));\nStringBody comment = new StringBody("Filename: " + fileName);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("bin", bin);\nreqEntity.addPart("comment", comment);\nhttppost.setEntity(reqEntity);'
p1340
aS'FileBody fileBody = new FileBody(new File(fileName));\nMultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart("file", fileBody);\nconnection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());\nOutputStream out = connection.getOutputStream();\ntry {\n    multipartEntity.writeTo(out);\n} finally {\n}'
p1341
aS'HttpPost httpPost = new HttpPost(url);\nFileBody uploadFilePart = new FileBody(uploadFile);'
p1342
aS'MultipartEntityBuilder builder = MultipartEntityBuilder.create();\nbuilder.addTextBody("field1", "yes", ContentType.TEXT_PLAIN);\nFile f = new File("[/path/to/upload]");\nbuilder.addBinaryBody("file", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());'
p1343
aS'HttpEntity multipart = builder.build();\nuploadFile.setEntity(multipart);\nCloseableHttpResponse response = httpClient.execute(uploadFile);'
p1344
aS'MultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart("file", fileBody);\nconnection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());'
p1345
aS'HttpResponse response = httpclient.execute(httpPost);'
p1346
aS'connection.setDoOutput(true);\nconnection.setRequestMethod("POST");\nFileBody fileBody = new FileBody(new File(fileName));'
p1347
aS'CloseableHttpResponse response = httpClient.execute(uploadFile);'
p1348
aS'HttpPost httppost = new HttpPost(url);\nFileBody bin = new FileBody(new File(fileName));'
p1349
aS'httpPost.setEntity(reqEntity);'
p1350
aS'HttpClient httpclient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost(url);\nFileBody uploadFilePart = new FileBody(uploadFile);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("upload-file", uploadFilePart);\nhttpPost.setEntity(reqEntity);'
p1351
aS'reqEntity.addPart("comment", comment);\nhttppost.setEntity(reqEntity);\nHttpResponse response = httpclient.execute(httppost);\nHttpEntity resEntity = response.getEntity();'
p1352
aS'HttpPost httppost = new HttpPost(url);\nFileBody bin = new FileBody(new File(fileName));\nStringBody comment = new StringBody("Filename: " + fileName);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("bin", bin);\nreqEntity.addPart("comment", comment);\nhttppost.setEntity(reqEntity);\nHttpResponse response = httpclient.execute(httppost);'
p1353
aS'MultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart("file", fileBody);\nconnection.setRequestProperty("Content-Type", multipartEntity.getContentType().getValue());\nOutputStream out = connection.getOutputStream();\ntry {\n    multipartEntity.writeTo(out);\n} finally {\n}'
p1354
aS'HttpURLConnection connection = (HttpURLConnection) url.openConnection();\nconnection.setDoOutput(true);'
p1355
aS'FileBody bin = new FileBody(new File(fileName));'
p1356
aS'HttpClient httpclient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost(url);'
p1357
aS'reqEntity.addPart("upload-file", uploadFilePart);\nhttpPost.setEntity(reqEntity);'
p1358
aS'MultipartEntityBuilder builder = MultipartEntityBuilder.create();\nbuilder.addTextBody("field1", "yes", ContentType.TEXT_PLAIN);\nFile f = new File("[/path/to/upload]");'
p1359
aS'MultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart("upload-file", uploadFilePart);\nhttpPost.setEntity(reqEntity);'
p1360
aS'HttpClient httpclient = new DefaultHttpClient();\nHttpPost httppost = new HttpPost(url);\nFileBody bin = new FileBody(new File(fileName));\nStringBody comment = new StringBody("Filename: " + fileName);'
p1361
aS'MultipartEntityBuilder builder = MultipartEntityBuilder.create();\nbuilder.addTextBody("field1", "yes", ContentType.TEXT_PLAIN);\nFile f = new File("[/path/to/upload]");\nbuilder.addBinaryBody("file", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());\nHttpEntity multipart = builder.build();\nuploadFile.setEntity(multipart);\nCloseableHttpResponse response = httpClient.execute(uploadFile);'
p1362
atp1363
Rp1364
sI6349421
g1
((lp1365
S'List<User> lstUser = null;'
p1366
aS'TypeReference<List<User>> tRef = new TypeReference<List<User>>() {\n};\nlstUser = mapper.readValue(jp, tRef);\nfor (User user : lstUser) {\n}'
p1367
aS'try {\n    ObjectMapper mapper = new ObjectMapper();\n    JsonFactory f = new JsonFactory();\n    List<User> lstUser = null;\n    JsonParser jp = f.createJsonParser(new File("C:\\\\maven\\\\user.json"));\n    TypeReference<List<User>> tRef = new TypeReference<List<User>>() {\n    };\n    lstUser = mapper.readValue(jp, tRef);\n    for (User user : lstUser) {\n        System.out.println(user.toString());\n    }\n} catch (JsonGenerationException e) {\n    e.printStackTrace();\n} catch (JsonMappingException e) {\n}'
p1368
aS'List<User> lstUser = null;\nJsonParser jp = f.createJsonParser(new File("C:\\\\maven\\\\user.json"));'
p1369
aS'ObjectMapper mapper = new ObjectMapper();\nJsonFactory f = new JsonFactory();\nList<User> lstUser = null;'
p1370
aS'JsonParser jp = f.createJsonParser(new File("C:\\\\maven\\\\user.json"));\nTypeReference<List<User>> tRef = new TypeReference<List<User>>() {\n};\nlstUser = mapper.readValue(jp, tRef);\nfor (User user : lstUser) {\n    System.out.println(user.toString());\n}'
p1371
aS'JsonFactory f = new JsonFactory();\nList<User> lstUser = null;\nJsonParser jp = f.createJsonParser(new File("C:\\\\maven\\\\user.json"));\nTypeReference<List<User>> tRef = new TypeReference<List<User>>() {\n};\nlstUser = mapper.readValue(jp, tRef);'
p1372
aS'TypeReference<List<User>> tRef = new TypeReference<List<User>>() {\n};\nlstUser = mapper.readValue(jp, tRef);\nfor (User user : lstUser) {\n    System.out.println(user.toString());\n}'
p1373
aS'List<User> lstUser = null;\nJsonParser jp = f.createJsonParser(new File("C:\\\\maven\\\\user.json"));\nTypeReference<List<User>> tRef = new TypeReference<List<User>>() {\n};'
p1374
aS'List<User> lstUser = null;\nJsonParser jp = f.createJsonParser(new File("C:\\\\maven\\\\user.json"));\nTypeReference<List<User>> tRef = new TypeReference<List<User>>() {\n};\nlstUser = mapper.readValue(jp, tRef);\nfor (User user : lstUser) {\n}'
p1375
aS'TypeReference<List<User>> tRef = new TypeReference<List<User>>() {\n};'
p1376
aS'import com.fasterxml.jackson.databind.ObjectMapper;'
p1377
aS'ObjectMapper mapper = new ObjectMapper();'
p1378
aS'List<User> lstUser = null;\nJsonParser jp = f.createJsonParser(new File("C:\\\\maven\\\\user.json"));\nTypeReference<List<User>> tRef = new TypeReference<List<User>>() {\n};\nlstUser = mapper.readValue(jp, tRef);'
p1379
aS'TypeReference<List<User>> tRef = new TypeReference<List<User>>() {\n};\nlstUser = mapper.readValue(jp, tRef);'
p1380
aS'try {\n    ObjectMapper mapper = new ObjectMapper();\n    JsonFactory f = new JsonFactory();\n    List<User> lstUser = null;\n    JsonParser jp = f.createJsonParser(new File("C:\\\\maven\\\\user.json"));\n    TypeReference<List<User>> tRef = new TypeReference<List<User>>() {\n    };\n    lstUser = mapper.readValue(jp, tRef);\n    for (User user : lstUser) {\n        System.out.println(user.toString());\n    }\n} catch (JsonGenerationException e) {\n    e.printStackTrace();\n} catch (JsonMappingException e) {\n    e.printStackTrace();\n}'
p1381
aS'JsonFactory f = new JsonFactory();\nList<User> lstUser = null;\nJsonParser jp = f.createJsonParser(new File("C:\\\\maven\\\\user.json"));\nTypeReference<List<User>> tRef = new TypeReference<List<User>>() {\n};\nlstUser = mapper.readValue(jp, tRef);\nfor (User user : lstUser) {\n}'
p1382
aS'JsonParser jp = f.createJsonParser(new File("C:\\\\maven\\\\user.json"));\nTypeReference<List<User>> tRef = new TypeReference<List<User>>() {\n};\nlstUser = mapper.readValue(jp, tRef);\nfor (User user : lstUser) {\n}'
p1383
aS'e.printStackTrace();'
p1384
aS'JsonFactory f = new JsonFactory();\nList<User> lstUser = null;'
p1385
aS'ObjectMapper mapper = new ObjectMapper();\nJsonFactory f = new JsonFactory();\nList<User> lstUser = null;\nJsonParser jp = f.createJsonParser(new File("C:\\\\maven\\\\user.json"));\nTypeReference<List<User>> tRef = new TypeReference<List<User>>() {\n};\nlstUser = mapper.readValue(jp, tRef);\nfor (User user : lstUser) {\n    System.out.println(user.toString());\n}'
p1386
aS'List<MyClass> myObjects = mapper.readValue(jsonInput, mapper.getTypeFactory().constructCollectionType(List.class, MyClass.class));'
p1387
aS'ObjectMapper mapper = new ObjectMapper();\nJsonFactory f = new JsonFactory();'
p1388
aS'ObjectMapper mapper = new ObjectMapper();\nJsonFactory f = new JsonFactory();\nList<User> lstUser = null;\nJsonParser jp = f.createJsonParser(new File("C:\\\\maven\\\\user.json"));\nTypeReference<List<User>> tRef = new TypeReference<List<User>>() {\n};\nlstUser = mapper.readValue(jp, tRef);'
p1389
aS'System.out.println(user.toString());'
p1390
aS'JsonFactory f = new JsonFactory();\nList<User> lstUser = null;\nJsonParser jp = f.createJsonParser(new File("C:\\\\maven\\\\user.json"));'
p1391
aS'List<MyClass> myObjects = Arrays.asList(mapper.readValue(json, MyClass[].class));'
p1392
aS'MyClass[] myObjects = mapper.readValue(json, MyClass[].class);'
p1393
aS'try {\n    ObjectMapper mapper = new ObjectMapper();\n    JsonFactory f = new JsonFactory();\n    List<User> lstUser = null;\n    JsonParser jp = f.createJsonParser(new File("C:\\\\maven\\\\user.json"));\n    TypeReference<List<User>> tRef = new TypeReference<List<User>>() {\n    };\n    lstUser = mapper.readValue(jp, tRef);\n    for (User user : lstUser) {\n        System.out.println(user.toString());\n    }\n} catch (JsonGenerationException e) {\n    e.printStackTrace();\n} catch (JsonMappingException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n}'
p1394
aS'List<MyClass> myObjects = mapper.readValue(jsonInput, new TypeReference<List<MyClass>>() {\n});'
p1395
aS'JsonFactory f = new JsonFactory();'
p1396
aS'JsonParser jp = f.createJsonParser(new File("C:\\\\maven\\\\user.json"));\nTypeReference<List<User>> tRef = new TypeReference<List<User>>() {\n};'
p1397
aS'ObjectMapper mapper = new ObjectMapper();\nJsonFactory f = new JsonFactory();\nList<User> lstUser = null;\nJsonParser jp = f.createJsonParser(new File("C:\\\\maven\\\\user.json"));'
p1398
aS'lstUser = mapper.readValue(jp, tRef);'
p1399
aS'try {\n    ObjectMapper mapper = new ObjectMapper();\n    JsonFactory f = new JsonFactory();\n    List<User> lstUser = null;\n    JsonParser jp = f.createJsonParser(new File("C:\\\\maven\\\\user.json"));\n    TypeReference<List<User>> tRef = new TypeReference<List<User>>() {\n    };\n    lstUser = mapper.readValue(jp, tRef);\n    for (User user : lstUser) {\n        System.out.println(user.toString());\n    }\n} catch (JsonGenerationException e) {\n    e.printStackTrace();\n} catch (JsonMappingException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n}'
p1400
aS'lstUser = mapper.readValue(jp, tRef);\nfor (User user : lstUser) {\n}'
p1401
aS'JsonParser jp = f.createJsonParser(new File("C:\\\\maven\\\\user.json"));'
p1402
aS'JsonFactory f = new JsonFactory();\nList<User> lstUser = null;\nJsonParser jp = f.createJsonParser(new File("C:\\\\maven\\\\user.json"));\nTypeReference<List<User>> tRef = new TypeReference<List<User>>() {\n};\nlstUser = mapper.readValue(jp, tRef);\nfor (User user : lstUser) {\n    System.out.println(user.toString());\n}'
p1403
aS'JsonParser jp = f.createJsonParser(new File("C:\\\\maven\\\\user.json"));\nTypeReference<List<User>> tRef = new TypeReference<List<User>>() {\n};\nlstUser = mapper.readValue(jp, tRef);'
p1404
aS'try {\n    ObjectMapper mapper = new ObjectMapper();\n    JsonFactory f = new JsonFactory();\n    List<User> lstUser = null;\n    JsonParser jp = f.createJsonParser(new File("C:\\\\maven\\\\user.json"));\n    TypeReference<List<User>> tRef = new TypeReference<List<User>>() {\n    };\n    lstUser = mapper.readValue(jp, tRef);\n    for (User user : lstUser) {\n        System.out.println(user.toString());\n    }\n} catch (JsonGenerationException e) {\n}'
p1405
aS'try {\n    ObjectMapper mapper = new ObjectMapper();\n    JsonFactory f = new JsonFactory();\n    List<User> lstUser = null;\n    JsonParser jp = f.createJsonParser(new File("C:\\\\maven\\\\user.json"));\n    TypeReference<List<User>> tRef = new TypeReference<List<User>>() {\n    };\n    lstUser = mapper.readValue(jp, tRef);\n    for (User user : lstUser) {\n        System.out.println(user.toString());\n    }\n} catch (JsonGenerationException e) {\n    e.printStackTrace();\n}'
p1406
aS'lstUser = mapper.readValue(jp, tRef);\nfor (User user : lstUser) {\n    System.out.println(user.toString());\n}'
p1407
aS'JsonFactory f = new JsonFactory();\nList<User> lstUser = null;\nJsonParser jp = f.createJsonParser(new File("C:\\\\maven\\\\user.json"));\nTypeReference<List<User>> tRef = new TypeReference<List<User>>() {\n};'
p1408
aS'ObjectMapper mapper = new ObjectMapper();\nJsonFactory f = new JsonFactory();\nList<User> lstUser = null;\nJsonParser jp = f.createJsonParser(new File("C:\\\\maven\\\\user.json"));\nTypeReference<List<User>> tRef = new TypeReference<List<User>>() {\n};'
p1409
aS'List<User> lstUser = null;\nJsonParser jp = f.createJsonParser(new File("C:\\\\maven\\\\user.json"));\nTypeReference<List<User>> tRef = new TypeReference<List<User>>() {\n};\nlstUser = mapper.readValue(jp, tRef);\nfor (User user : lstUser) {\n    System.out.println(user.toString());\n}'
p1410
aS'ObjectMapper mapper = new ObjectMapper();\nJsonFactory f = new JsonFactory();\nList<User> lstUser = null;\nJsonParser jp = f.createJsonParser(new File("C:\\\\maven\\\\user.json"));\nTypeReference<List<User>> tRef = new TypeReference<List<User>>() {\n};\nlstUser = mapper.readValue(jp, tRef);\nfor (User user : lstUser) {\n}'
p1411
aS'for (User user : lstUser) {\n}'
p1412
atp1413
Rp1414
sI5283444
g1
((lp1415
S'String joinedString = StringUtils.join(new Object[] { "a", "b", 1 }, "-");'
p1416
aS'StringBuilder builder = new StringBuilder();\nfor (String s : arr) {\n    builder.append(s);\n}\nString str = builder.toString();'
p1417
aS'String joinedString = StringUtils.join(new Object[] { "a", "b", 1 }, "-");\nSystem.out.println(joinedString);'
p1418
aS'StringBuilder builder = new StringBuilder();\nfor (String s : arr) {\n    builder.append(s);\n}'
p1419
aS'String str = builder.toString();'
p1420
aS'String str = Arrays.toString(arr);'
p1421
aS'String.join(", ", "Harry", "Ron", "Hermione");'
p1422
aS'for (String s : arr) {\n    builder.append(s);\n}'
p1423
aS'new String("Harry, Ron, Hermione");'
p1424
aS'String str = String.join(",", arr);'
p1425
aS'StringBuilder builder = new StringBuilder();'
p1426
aS'Joiner.on(", ").skipNulls().join("Harry", null, "Ron", "Hermione");'
p1427
aS'System.out.println(joinedString);'
p1428
aS'for (String s : arr) {\n}'
p1429
aS'builder.append(s);'
p1430
aS'StringBuilder builder = new StringBuilder();\nfor (String s : arr) {\n}'
p1431
aS'for (String s : arr) {\n    builder.append(s);\n}\nString str = builder.toString();'
p1432
atp1433
Rp1434
sI18441846
g1
((lp1435
S'@Override\npublic int compareTo(Fruit fruit) {\n}'
p1436
aS'for (int i = 0; i < 100; i++) {\n}'
p1437
aS'BeanComparator fieldComparator = new BeanComparator("fruitName");'
p1438
aS'@Override\npublic int compare(Fruit fruit2, Fruit fruit1) {\n    return fruit1.fruitName.compareTo(fruit2.fruitName);\n}'
p1439
aS'for (int i = 0; i < 100; i++) ;'
p1440
aS'Fruit fruit;'
p1441
aS'Collections.sort(fruits, fieldComparator);'
p1442
aS'List<Fruit> fruits = new ArrayList<Fruit>();\nFruit fruit;\nfor (int i = 0; i < 100; i++) {\n}'
p1443
aS'BeanComparator fieldComparator = new BeanComparator("fruitName");\nCollections.sort(fruits, fieldComparator);'
p1444
aS'List<Fruit> fruits = new ArrayList<Fruit>();\nFruit fruit;'
p1445
aS'fruit = new Fruit();'
p1446
aS'{\n}'
p1447
aS'fruits.add(fruit);'
p1448
aS'Fruit fruit;\nfor (int i = 0; i < 100; i++) {\n    fruit = new Fruit();\n}'
p1449
aS'Collections.sort(fruits, new Comparator<Fruit>() {\n\n    @Override\n    public int compare(Fruit fruit2, Fruit fruit1) {\n        return fruit1.fruitName.compareTo(fruit2.fruitName);\n    }\n});'
p1450
aS'List<Fruit> fruits = new ArrayList<Fruit>();\nFruit fruit;\nfor (int i = 0; i < 100; i++) {\n    fruit = new Fruit();\n}'
p1451
aS'public int compareTo(Fruit fruit) {\n}'
p1452
aS'for (int i = 0; i < 100; i++) {\n    fruit = new Fruit();\n}'
p1453
aS'{\n    return fruit1.fruitName.compareTo(fruit2.fruitName);\n}'
p1454
aS'{\n    fruit = new Fruit();\n}'
p1455
aS'Collections.sort(fruitList);'
p1456
aS'return fruit1.fruitName.compareTo(fruit2.fruitName);'
p1457
aS'List<Fruit> fruits = new ArrayList<Fruit>();'
p1458
aS'public int compare(Fruit fruit2, Fruit fruit1) {\n    return fruit1.fruitName.compareTo(fruit2.fruitName);\n}'
p1459
aS'Fruit fruit;\nfor (int i = 0; i < 100; i++) {\n}'
p1460
atp1461
Rp1462
sI1519736
g1
((lp1463
S'List<Integer> solution = new ArrayList<>();\nfor (int i = 1; i <= 6; i++) {\n    solution.add(i);\n}'
p1464
aS'Random rnd = ThreadLocalRandom.current();'
p1465
aS'Collections.shuffle(solution);'
p1466
aS'for (int i = ar.length - 1; i > 0; i--) {\n    int index = rnd.nextInt(i + 1);\n    int a = ar[index];\n}'
p1467
aS'for (int i = array.length - 1; i > 0; i--) {\n}'
p1468
aS'for (int i = ar.length - 1; i > 0; i--) {\n}'
p1469
aS'Random random = new Random();'
p1470
aS'import java.util.*;'
p1471
aS'array[i] ^= array[index];'
p1472
aS'index = random.nextInt(i + 1);'
p1473
aS'Random rnd = ThreadLocalRandom.current();\nfor (int i = ar.length - 1; i > 0; i--) {\n    int index = rnd.nextInt(i + 1);\n    int a = ar[index];\n}'
p1474
aS'Random rnd = ThreadLocalRandom.current();\nfor (int i = ar.length - 1; i > 0; i--) {\n}'
p1475
aS'List<Integer> solution = new ArrayList<>();\nfor (int i = 1; i <= 6; i++) {\n}'
p1476
aS'temp = array[index];\narray[index] = array[i];'
p1477
aS'int index, temp;\nRandom random = new Random();\nfor (int i = array.length - 1; i > 0; i--) {\n}'
p1478
aS'List<Integer> solution = new ArrayList<>();\nfor (int i = 1; i <= 6; i++) {\n    solution.add(i);\n}\nCollections.shuffle(solution);'
p1479
aS'Random random = new Random();\nfor (int i = array.length - 1; i > 0; i--) {\n    index = random.nextInt(i + 1);\n    temp = array[index];\n}'
p1480
aS'int[] solutionArray = { 1, 2, 3, 4, 5, 6, 16, 15, 14, 13, 12, 11 };\nshuffleArray(solutionArray);\nfor (int i = 0; i < solutionArray.length; i++) {\n    System.out.print(solutionArray[i] + " ");\n}\nSystem.out.println();'
p1481
aS'if (index != i) {\n    array[index] ^= array[i];\n}'
p1482
aS'index = random.nextInt(i + 1);\ntemp = array[index];\narray[index] = array[i];\narray[i] = temp;'
p1483
aS'for (int i = 0; i < solutionArray.length; i++) {\n    System.out.print(solutionArray[i] + " ");\n}'
p1484
aS'array[index] = array[i];\narray[i] = temp;'
p1485
aS'array[index] ^= array[i];\narray[i] ^= array[index];\narray[index] ^= array[i];'
p1486
aS'array[index] = array[i];'
p1487
aS'int index = rnd.nextInt(i + 1);'
p1488
aS'if (index != i) {\n    array[index] ^= array[i];\n    array[i] ^= array[index];\n    array[index] ^= array[i];\n}'
p1489
aS'int index = rnd.nextInt(i + 1);\nint a = ar[index];\nar[index] = ar[i];'
p1490
aS'for (int i = 0; i < solutionArray.length; i++) {\n    System.out.print(solutionArray[i] + " ");\n}\nSystem.out.println();'
p1491
aS'array[i] = temp;'
p1492
aS'Random rnd = ThreadLocalRandom.current();\nfor (int i = ar.length - 1; i > 0; i--) {\n    int index = rnd.nextInt(i + 1);\n    int a = ar[index];\n    ar[index] = ar[i];\n}'
p1493
aS'for (int i = ar.length - 1; i > 0; i--) {\n    int index = rnd.nextInt(i + 1);\n}'
p1494
aS'int index;\nRandom random = new Random();\nfor (int i = array.length - 1; i > 0; i--) {\n    index = random.nextInt(i + 1);\n    if (index != i) {\n        array[index] ^= array[i];\n        array[i] ^= array[index];\n        array[index] ^= array[i];\n    }\n}'
p1495
aS'shuffleArray(solutionArray);\nfor (int i = 0; i < solutionArray.length; i++) {\n}'
p1496
aS'for (int i = 0; i < solutionArray.length; i++) {\n}'
p1497
aS'int[] solutionArray = { 1, 2, 3, 4, 5, 6, 16, 15, 14, 13, 12, 11 };\nshuffleArray(solutionArray);\nfor (int i = 0; i < solutionArray.length; i++) {\n}'
p1498
aS'int index;\nRandom random = new Random();\nfor (int i = array.length - 1; i > 0; i--) {\n    index = random.nextInt(i + 1);\n}'
p1499
aS'index = random.nextInt(i + 1);\nif (index != i) {\n    array[index] ^= array[i];\n    array[i] ^= array[index];\n}'
p1500
aS'for (int i = 1; i <= 6; i++) {\n}'
p1501
aS'ar[index] = ar[i];'
p1502
aS'shuffleArray(solutionArray);\nfor (int i = 0; i < solutionArray.length; i++) {\n    System.out.print(solutionArray[i] + " ");\n}'
p1503
aS'import java.util.*;\nimport java.util.concurrent.ThreadLocalRandom;\n\nclass Test {\n\n    public static void main(String[] args) {\n        int[] solutionArray = { 1, 2, 3, 4, 5, 6, 16, 15, 14, 13, 12, 11 };\n        shuffleArray(solutionArray);\n        for (int i = 0; i < solutionArray.length; i++) {\n            System.out.print(solutionArray[i] + " ");\n        }\n        System.out.println();\n    }\n\n    static void shuffleArray(int[] ar) {\n        Random rnd = ThreadLocalRandom.current();\n        for (int i = ar.length - 1; i > 0; i--) {\n            int index = rnd.nextInt(i + 1);\n            int a = ar[index];\n            ar[index] = ar[i];\n            ar[i] = a;\n        }\n    }\n}'
p1504
aS'int index, temp;\nRandom random = new Random();\nfor (int i = array.length - 1; i > 0; i--) {\n    index = random.nextInt(i + 1);\n    temp = array[index];\n    array[index] = array[i];\n    array[i] = temp;\n}'
p1505
aS'Random random = new Random();\nfor (int i = array.length - 1; i > 0; i--) {\n    index = random.nextInt(i + 1);\n    if (index != i) {\n        array[index] ^= array[i];\n        array[i] ^= array[index];\n        array[index] ^= array[i];\n    }\n}'
p1506
aS'Random random = new Random();\nfor (int i = array.length - 1; i > 0; i--) {\n    index = random.nextInt(i + 1);\n    temp = array[index];\n    array[index] = array[i];\n}'
p1507
aS'Random random = new Random();\nfor (int i = array.length - 1; i > 0; i--) {\n    index = random.nextInt(i + 1);\n    temp = array[index];\n    array[index] = array[i];\n    array[i] = temp;\n}'
p1508
aS'for (int i = array.length - 1; i > 0; i--) {\n    index = random.nextInt(i + 1);\n}'
p1509
aS'for (int i = 1; i <= 6; i++) {\n    solution.add(i);\n}\nCollections.shuffle(solution);'
p1510
aS'int a = ar[index];'
p1511
aS'int index;'
p1512
aS'for (int i = array.length - 1; i > 0; i--) {\n    index = random.nextInt(i + 1);\n    if (index != i) {\n        array[index] ^= array[i];\n        array[i] ^= array[index];\n        array[index] ^= array[i];\n    }\n}'
p1513
aS'import java.util.*;\nimport java.util.concurrent.ThreadLocalRandom;'
p1514
aS'if (index != i) {\n}'
p1515
aS'int[] solutionArray = { 1, 2, 3, 4, 5, 6, 16, 15, 14, 13, 12, 11 };\nshuffleArray(solutionArray);'
p1516
aS'index = random.nextInt(i + 1);\nif (index != i) {\n}'
p1517
aS'class Test {\n\n    public static void main(String[] args) {\n        int[] solutionArray = { 1, 2, 3, 4, 5, 6, 16, 15, 14, 13, 12, 11 };\n        shuffleArray(solutionArray);\n        for (int i = 0; i < solutionArray.length; i++) {\n            System.out.print(solutionArray[i] + " ");\n        }\n        System.out.println();\n    }\n}'
p1518
aS'int index, temp;\nRandom random = new Random();\nfor (int i = array.length - 1; i > 0; i--) {\n    index = random.nextInt(i + 1);\n}'
p1519
aS'for (int i = ar.length - 1; i > 0; i--) {\n    int index = rnd.nextInt(i + 1);\n    int a = ar[index];\n    ar[index] = ar[i];\n    ar[i] = a;\n}'
p1520
aS'Random rnd = ThreadLocalRandom.current();\nfor (int i = ar.length - 1; i > 0; i--) {\n    int index = rnd.nextInt(i + 1);\n    int a = ar[index];\n    ar[index] = ar[i];\n    ar[i] = a;\n}'
p1521
aS'Random random = new Random();\nfor (int i = array.length - 1; i > 0; i--) {\n    index = random.nextInt(i + 1);\n}'
p1522
aS'int[] solutionArray = { 1, 2, 3, 4, 5, 6, 16, 15, 14, 13, 12, 11 };'
p1523
aS'for (int i = array.length - 1; i > 0; i--) {\n    index = random.nextInt(i + 1);\n    temp = array[index];\n    array[index] = array[i];\n}'
p1524
aS'shuffleArray(solutionArray);'
p1525
aS'solution.add(i);'
p1526
aS'array[i] ^= array[index];\narray[index] ^= array[i];'
p1527
aS'array[index] ^= array[i];\narray[i] ^= array[index];'
p1528
aS'int index = rnd.nextInt(i + 1);\nint a = ar[index];'
p1529
aS'int a = ar[index];\nar[index] = ar[i];\nar[i] = a;'
p1530
aS'class Test {\n\n    public static void main(String[] args) {\n        int[] solutionArray = { 1, 2, 3, 4, 5, 6, 16, 15, 14, 13, 12, 11 };\n        shuffleArray(solutionArray);\n        for (int i = 0; i < solutionArray.length; i++) {\n            System.out.print(solutionArray[i] + " ");\n        }\n        System.out.println();\n    }\n\n    static void shuffleArray(int[] ar) {\n        Random rnd = ThreadLocalRandom.current();\n        for (int i = ar.length - 1; i > 0; i--) {\n            int index = rnd.nextInt(i + 1);\n            int a = ar[index];\n            ar[index] = ar[i];\n            ar[i] = a;\n        }\n    }\n}'
p1531
aS'int a = ar[index];\nar[index] = ar[i];'
p1532
aS'System.out.print(solutionArray[i] + " ");'
p1533
aS'index = random.nextInt(i + 1);\nif (index != i) {\n    array[index] ^= array[i];\n}'
p1534
aS'int[] solutionArray = { 1, 2, 3, 4, 5, 6, 16, 15, 14, 13, 12, 11 };\nshuffleArray(solutionArray);\nfor (int i = 0; i < solutionArray.length; i++) {\n    System.out.print(solutionArray[i] + " ");\n}'
p1535
aS'shuffleArray(solutionArray);\nfor (int i = 0; i < solutionArray.length; i++) {\n    System.out.print(solutionArray[i] + " ");\n}\nSystem.out.println();'
p1536
aS'temp = array[index];\narray[index] = array[i];\narray[i] = temp;'
p1537
aS'array[index] ^= array[i];'
p1538
aS'int index, temp;\nRandom random = new Random();'
p1539
aS'private static void shuffleArray(int[] array) {\n    int index;\n    Random random = new Random();\n    for (int i = array.length - 1; i > 0; i--) {\n        index = random.nextInt(i + 1);\n        if (index != i) {\n            array[index] ^= array[i];\n            array[i] ^= array[index];\n            array[index] ^= array[i];\n        }\n    }\n}'
p1540
aS'public static void main(String[] args) {\n    int[] solutionArray = { 1, 2, 3, 4, 5, 6, 16, 15, 14, 13, 12, 11 };\n    shuffleArray(solutionArray);\n    for (int i = 0; i < solutionArray.length; i++) {\n        System.out.print(solutionArray[i] + " ");\n    }\n    System.out.println();\n}'
p1541
aS'private static void shuffleArray(int[] array) {\n    int index, temp;\n    Random random = new Random();\n    for (int i = array.length - 1; i > 0; i--) {\n        index = random.nextInt(i + 1);\n        temp = array[index];\n        array[index] = array[i];\n        array[i] = temp;\n    }\n}'
p1542
aS'ar[i] = a;'
p1543
aS'if (index != i) {\n    array[index] ^= array[i];\n    array[i] ^= array[index];\n}'
p1544
aS'int index = rnd.nextInt(i + 1);\nint a = ar[index];\nar[index] = ar[i];\nar[i] = a;'
p1545
aS'for (int i = 1; i <= 6; i++) {\n    solution.add(i);\n}'
p1546
aS'Random random = new Random();\nfor (int i = array.length - 1; i > 0; i--) {\n}'
p1547
aS'import java.util.concurrent.ThreadLocalRandom;\n\nclass Test {\n\n    public static void main(String[] args) {\n        int[] solutionArray = { 1, 2, 3, 4, 5, 6, 16, 15, 14, 13, 12, 11 };\n        shuffleArray(solutionArray);\n        for (int i = 0; i < solutionArray.length; i++) {\n            System.out.print(solutionArray[i] + " ");\n        }\n        System.out.println();\n    }\n\n    static void shuffleArray(int[] ar) {\n        Random rnd = ThreadLocalRandom.current();\n        for (int i = ar.length - 1; i > 0; i--) {\n            int index = rnd.nextInt(i + 1);\n            int a = ar[index];\n            ar[index] = ar[i];\n            ar[i] = a;\n        }\n    }\n}'
p1548
aS'int index, temp;\nRandom random = new Random();\nfor (int i = array.length - 1; i > 0; i--) {\n    index = random.nextInt(i + 1);\n    temp = array[index];\n}'
p1549
aS'import java.util.concurrent.ThreadLocalRandom;'
p1550
aS'int index, temp;\nRandom random = new Random();\nfor (int i = array.length - 1; i > 0; i--) {\n    index = random.nextInt(i + 1);\n    temp = array[index];\n    array[index] = array[i];\n}'
p1551
aS'ar[index] = ar[i];\nar[i] = a;'
p1552
aS'class Test {\n}'
p1553
aS'Random rnd = ThreadLocalRandom.current();\nfor (int i = ar.length - 1; i > 0; i--) {\n    int index = rnd.nextInt(i + 1);\n}'
p1554
aS'index = random.nextInt(i + 1);\nif (index != i) {\n    array[index] ^= array[i];\n    array[i] ^= array[index];\n    array[index] ^= array[i];\n}'
p1555
aS'temp = array[index];'
p1556
aS'index = random.nextInt(i + 1);\ntemp = array[index];'
p1557
aS'public static void main(String[] args) {\n    int[] solutionArray = { 1, 2, 3, 4, 5, 6, 16, 15, 14, 13, 12, 11 };\n    shuffleArray(solutionArray);\n    for (int i = 0; i < solutionArray.length; i++) {\n        System.out.print(solutionArray[i] + " ");\n    }\n    System.out.println();\n}\nstatic void shuffleArray(int[] ar) {\n    Random rnd = ThreadLocalRandom.current();\n    for (int i = ar.length - 1; i > 0; i--) {\n        int index = rnd.nextInt(i + 1);\n        int a = ar[index];\n        ar[index] = ar[i];\n        ar[i] = a;\n    }\n}'
p1558
aS'for (int i = array.length - 1; i > 0; i--) {\n    index = random.nextInt(i + 1);\n    temp = array[index];\n    array[index] = array[i];\n    array[i] = temp;\n}'
p1559
aS'int index;\nRandom random = new Random();\nfor (int i = array.length - 1; i > 0; i--) {\n}'
p1560
aS'for (int i = array.length - 1; i > 0; i--) {\n    index = random.nextInt(i + 1);\n    temp = array[index];\n}'
p1561
aS'int index, temp;'
p1562
aS'List<Integer> solution = new ArrayList<>();'
p1563
aS'static void shuffleArray(int[] ar) {\n    Random rnd = ThreadLocalRandom.current();\n    for (int i = ar.length - 1; i > 0; i--) {\n        int index = rnd.nextInt(i + 1);\n        int a = ar[index];\n        ar[index] = ar[i];\n        ar[i] = a;\n    }\n}'
p1564
aS'System.out.println();'
p1565
aS'for (int i = ar.length - 1; i > 0; i--) {\n    int index = rnd.nextInt(i + 1);\n    int a = ar[index];\n    ar[index] = ar[i];\n}'
p1566
aS'index = random.nextInt(i + 1);\ntemp = array[index];\narray[index] = array[i];'
p1567
aS'int index;\nRandom random = new Random();'
p1568
atp1569
Rp1570
sI12678781
g1
((lp1571
S'System.out.println(list);\nCollections.reverse(list);'
p1572
aS'List<Integer> list = Arrays.asList(1, 4, 9, 16, 9, 7, 4, 9, 11);'
p1573
aS'array[i] = array[array.length - 1 - i];'
p1574
aS'for (i = 0; i < array.length / 2; i++) {\n    int temp = array[i];\n    array[i] = array[array.length - 1 - i];\n}'
p1575
aS'System.out.println(list);'
p1576
aS'System.out.println(list);\nCollections.reverse(list);\nSystem.out.println(list);'
p1577
aS'List<Integer> list = Arrays.asList(1, 4, 9, 16, 9, 7, 4, 9, 11);\nSystem.out.println(list);\nCollections.reverse(list);'
p1578
aS'for (i = 0; i < array.length / 2; i++) {\n    int temp = array[i];\n    array[i] = array[array.length - 1 - i];\n    array[array.length - 1 - i] = temp;\n}'
p1579
aS'int temp = array[i];\narray[i] = array[array.length - 1 - i];'
p1580
aS'Collections.reverse(list);\nSystem.out.println(list);'
p1581
aS'int temp = array[i];'
p1582
aS'for (i = 0; i < array.length / 2; i++) {\n}'
p1583
aS'List<Integer> list = Arrays.asList(1, 4, 9, 16, 9, 7, 4, 9, 11);\nSystem.out.println(list);'
p1584
aS'for (i = 0; i < array.length / 2; i++) {\n    int temp = array[i];\n}'
p1585
aS'array[array.length - 1 - i] = temp;'
p1586
aS'Collections.reverse(Arrays.asList(array));'
p1587
aS'int temp = array[i];\narray[i] = array[array.length - 1 - i];\narray[array.length - 1 - i] = temp;'
p1588
aS'List<Integer> list = Arrays.asList(1, 4, 9, 16, 9, 7, 4, 9, 11);\nSystem.out.println(list);\nCollections.reverse(list);\nSystem.out.println(list);'
p1589
aS'array[i] = array[array.length - 1 - i];\narray[array.length - 1 - i] = temp;'
p1590
aS'Collections.reverse(list);'
p1591
atp1592
Rp1593
sI10796160
g1
((lp1594
S'string.split(Pattern.quote("|"));'
p1595
aS'test.split(Pattern.quote("|"));'
p1596
aS'test.split("\\\\|");'
p1597
aS'String test = "A|B|C||D";'
p1598
aS'String test = "A|B|C||D";\nString[] result = test.split("\\\\|");'
p1599
aS'String[] result = test.split("\\\\|");'
p1600
aS'for (String s : result) {\n}'
p1601
aS'String test = "A|B|C||D";\nString[] result = test.split("\\\\|");\nfor (String s : result) {\n}'
p1602
aS'String[] result = test.split("\\\\|");\nfor (String s : result) {\n    System.out.println(">" + s + "<");\n}'
p1603
aS'public static void main(String[] args) {\n    String test = "A|B|C||D";\n    String[] result = test.split("\\\\|");\n    for (String s : result) {\n        System.out.println(">" + s + "<");\n    }\n}'
p1604
aS'String test = "A|B|C||D";\nString[] result = test.split("\\\\|");\nfor (String s : result) {\n    System.out.println(">" + s + "<");\n}'
p1605
aS'String[] result = test.split("\\\\|");\nfor (String s : result) {\n}'
p1606
aS'System.out.println(">" + s + "<");'
p1607
atp1608
Rp1609
sI2938502
g1
((lp1610
S'public class Empty extends AsyncTask<Void, Void, Boolean> {\n\n    String urlString = "http://www.yoursite.com/";\n\n    private final String TAG = "post json example";\n\n    private Context context;\n\n    private int advertisementId;\n\n    public Empty(Context contex, int advertisementId) {\n        this.context = contex;\n        this.advertisementId = advertisementId;\n    }\n\n    @Override\n    protected void onPreExecute() {\n        Log.e(TAG, "1 - RequestVoteTask is about to start...");\n    }\n\n    @Override\n    protected Boolean doInBackground(Void... params) {\n        boolean status = false;\n        String response = "";\n        Log.e(TAG, "2 - pre Request to response...");\n        try {\n            response = performPostCall(urlString, new HashMap<String, String>() {\n\n                private static final long serialVersionUID = 1L;\n\n                {\n                    put("Accept", "application/json");\n                    put("Content-Type", "application/json");\n                }\n            });\n            Log.e(TAG, "3 - give Response...");\n            Log.e(TAG, "4 " + response.toString());\n        } catch (Exception e) {\n            Log.e(TAG, "Error ...");\n        }\n        Log.e(TAG, "5 - after Response...");\n        if (!response.equalsIgnoreCase("")) {\n            try {\n                Log.e(TAG, "6 - response !empty...");\n                JSONObject jRoot = new JSONObject(response);\n                JSONObject d = jRoot.getJSONObject("d");\n                int ResultType = d.getInt("ResultType");\n                Log.e("ResultType", ResultType + "");\n                if (ResultType == 1) {\n                    status = true;\n                }\n            } catch (JSONException e) {\n                Log.e(TAG, "Error " + e.getMessage());\n            } finally {\n            }\n        } else {\n            Log.e(TAG, "6 - response is empty...");\n            status = false;\n        }\n        return status;\n    }\n\n    @Override\n    protected void onPostExecute(Boolean result) {\n        Log.e(TAG, "7 - onPostExecute ...");\n        if (result) {\n            Log.e(TAG, "8 - Update UI ...");\n        } else {\n            Log.e(TAG, "8 - Finish ...");\n        }\n    }\n\n    public String performPostCall(String requestURL, HashMap<String, String> postDataParams) {\n        URL url;\n        String response = "";\n        try {\n            url = new URL(requestURL);\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n            conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n            conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n            conn.setRequestMethod("POST");\n            conn.setDoInput(true);\n            conn.setDoOutput(true);\n            conn.setRequestProperty("Content-Type", "application/json");\n            Log.e(TAG, "11 - url : " + requestURL);\n            JSONObject root = new JSONObject();\n            String token = Static.getPrefsToken(context);\n            root.put("securityInfo", Static.getSecurityInfo(context));\n            root.put("advertisementId", advertisementId);\n            Log.e(TAG, "12 - root : " + root.toString());\n            String str = root.toString();\n            byte[] outputBytes = str.getBytes("UTF-8");\n            OutputStream os = conn.getOutputStream();\n            os.write(outputBytes);\n            int responseCode = conn.getResponseCode();\n            Log.e(TAG, "13 - responseCode : " + responseCode);\n            if (responseCode == HttpsURLConnection.HTTP_OK) {\n                Log.e(TAG, "14 - HTTP_OK");\n                String line;\n                BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n                while ((line = br.readLine()) != null) {\n                    response += line;\n                }\n            } else {\n                Log.e(TAG, "14 - False - HTTP_OK");\n                response = "";\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return response;\n    }\n}'
p1611
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p1612
aS'System.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);'
p1613
aS'boolean status = false;\nString response = "";'
p1614
aS'class SendPostReqAsyncTask extends AsyncTask<String, Void, String> {\n\n    @Override\n    protected String doInBackground(String... params) {\n        String paramUsername = params[0];\n        String paramPassword = params[1];\n        System.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\n        HttpClient httpClient = new DefaultHttpClient();\n        HttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\n        BasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\n        BasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\n        List<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\n        nameValuePairList.add(usernameBasicNameValuePair);\n        nameValuePairList.add(passwordBasicNameValuePAir);\n        try {\n            UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n            httpPost.setEntity(urlEncodedFormEntity);\n            try {\n                HttpResponse httpResponse = httpClient.execute(httpPost);\n                InputStream inputStream = httpResponse.getEntity().getContent();\n                InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n                BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n                StringBuilder stringBuilder = new StringBuilder();\n                String bufferedStrChunk = null;\n                while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n                    stringBuilder.append(bufferedStrChunk);\n                }\n                return stringBuilder.toString();\n            } catch (ClientProtocolException cpe) {\n                System.out.println("First Exception caz of HttpResponese :" + cpe);\n                cpe.printStackTrace();\n            } catch (IOException ioe) {\n                System.out.println("Second Exception caz of HttpResponse :" + ioe);\n                ioe.printStackTrace();\n            }\n        } catch (UnsupportedEncodingException uee) {\n            System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n            uee.printStackTrace();\n        }\n        return null;\n    }\n\n    @Override\n    protected void onPostExecute(String result) {\n        super.onPostExecute(result);\n        if (result.equals("working")) {\n            Toast.makeText(getApplicationContext(), "HTTP POST is working...", Toast.LENGTH_LONG).show();\n        } else {\n            Toast.makeText(getApplicationContext(), "Invalid POST req...", Toast.LENGTH_LONG).show();\n        }\n    }\n}'
p1615
aS'try {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}\nLog.e(TAG, "5 - after Response...");\nif (!response.equalsIgnoreCase("")) {\n    try {\n        Log.e(TAG, "6 - response !empty...");\n        JSONObject jRoot = new JSONObject(response);\n        JSONObject d = jRoot.getJSONObject("d");\n        int ResultType = d.getInt("ResultType");\n        Log.e("ResultType", ResultType + "");\n        if (ResultType == 1) {\n            status = true;\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, "Error " + e.getMessage());\n    } finally {\n    }\n} else {\n    Log.e(TAG, "6 - response is empty...");\n    status = false;\n}'
p1616
aS'Log.e(TAG, "2 - pre Request to response...");\ntry {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}\nLog.e(TAG, "5 - after Response...");\nif (!response.equalsIgnoreCase("")) {\n}'
p1617
aS'if (v.getId() == R.id.login_clear_button) {\n    usernameEditText.setText("");\n    passwordEditText.setText("");\n    passwordEditText.setCursorVisible(false);\n    passwordEditText.setFocusable(false);\n    usernameEditText.setCursorVisible(true);\n    passwordEditText.setFocusable(true);\n} else if (v.getId() == R.id.login_sendPostReq_button) {\n}'
p1618
aS'StringBuilder stringBuilder = new StringBuilder();\nString bufferedStrChunk = null;\nwhile ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n    stringBuilder.append(bufferedStrChunk);\n}'
p1619
aS'try {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n    uee.printStackTrace();\n}\nreturn null;'
p1620
aS'String response = "";\ntry {\n    url = new URL(requestURL);\n    HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n    conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n    conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n    conn.setRequestMethod("POST");\n    conn.setDoInput(true);\n    conn.setDoOutput(true);\n    conn.setRequestProperty("Content-Type", "application/json");\n    Log.e(TAG, "11 - url : " + requestURL);\n    JSONObject root = new JSONObject();\n    String token = Static.getPrefsToken(context);\n    root.put("securityInfo", Static.getSecurityInfo(context));\n    root.put("advertisementId", advertisementId);\n    Log.e(TAG, "12 - root : " + root.toString());\n    String str = root.toString();\n    byte[] outputBytes = str.getBytes("UTF-8");\n    OutputStream os = conn.getOutputStream();\n    os.write(outputBytes);\n    int responseCode = conn.getResponseCode();\n    Log.e(TAG, "13 - responseCode : " + responseCode);\n    if (responseCode == HttpsURLConnection.HTTP_OK) {\n        Log.e(TAG, "14 - HTTP_OK");\n        String line;\n        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        while ((line = br.readLine()) != null) {\n            response += line;\n        }\n    } else {\n        Log.e(TAG, "14 - False - HTTP_OK");\n        response = "";\n    }\n} catch (Exception e) {\n    e.printStackTrace();\n}\nreturn response;'
p1621
aS'nameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n}'
p1622
aS'BasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);'
p1623
aS'BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();'
p1624
aS'protected Boolean doInBackground(Void... params) {\n    boolean status = false;\n    String response = "";\n    Log.e(TAG, "2 - pre Request to response...");\n    try {\n        response = performPostCall(urlString, new HashMap<String, String>() {\n\n            private static final long serialVersionUID = 1L;\n\n            {\n                put("Accept", "application/json");\n                put("Content-Type", "application/json");\n            }\n        });\n        Log.e(TAG, "3 - give Response...");\n        Log.e(TAG, "4 " + response.toString());\n    } catch (Exception e) {\n        Log.e(TAG, "Error ...");\n    }\n    Log.e(TAG, "5 - after Response...");\n    if (!response.equalsIgnoreCase("")) {\n        try {\n            Log.e(TAG, "6 - response !empty...");\n            JSONObject jRoot = new JSONObject(response);\n            JSONObject d = jRoot.getJSONObject("d");\n            int ResultType = d.getInt("ResultType");\n            Log.e("ResultType", ResultType + "");\n            if (ResultType == 1) {\n                status = true;\n            }\n        } catch (JSONException e) {\n            Log.e(TAG, "Error " + e.getMessage());\n        } finally {\n        }\n    } else {\n        Log.e(TAG, "6 - response is empty...");\n        status = false;\n    }\n    return status;\n}\n@Override\nprotected void onPostExecute(Boolean result) {\n    Log.e(TAG, "7 - onPostExecute ...");\n    if (result) {\n        Log.e(TAG, "8 - Update UI ...");\n    } else {\n        Log.e(TAG, "8 - Finish ...");\n    }\n}'
p1625
aS'System.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();'
p1626
aS'String paramUsername = params[0];\nString paramPassword = params[1];'
p1627
aS'String str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);'
p1628
aS'conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");'
p1629
aS'httpPost.setEntity(urlEncodedFormEntity);\ntry {\n    HttpResponse httpResponse = httpClient.execute(httpPost);\n    InputStream inputStream = httpResponse.getEntity().getContent();\n    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n    StringBuilder stringBuilder = new StringBuilder();\n    String bufferedStrChunk = null;\n    while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n        stringBuilder.append(bufferedStrChunk);\n    }\n    return stringBuilder.toString();\n} catch (ClientProtocolException cpe) {\n    System.out.println("First Exception caz of HttpResponese :" + cpe);\n    cpe.printStackTrace();\n} catch (IOException ioe) {\n    System.out.println("Second Exception caz of HttpResponse :" + ioe);\n    ioe.printStackTrace();\n}'
p1630
aS'conn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();'
p1631
aS'if (v.getId() == R.id.login_clear_button) {\n    usernameEditText.setText("");\n    passwordEditText.setText("");\n    passwordEditText.setCursorVisible(false);\n}'
p1632
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");'
p1633
aS'System.out.println(e.getMessage());\nreturn e.getMessage();'
p1634
aS'InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\nBufferedReader bufferedReader = new BufferedReader(inputStreamReader);\nStringBuilder stringBuilder = new StringBuilder();\nString bufferedStrChunk = null;\nwhile ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n    stringBuilder.append(bufferedStrChunk);\n}'
p1635
aS'String token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p1636
aS'@Override\nprotected void onPostExecute(Boolean result) {\n    Log.e(TAG, "7 - onPostExecute ...");\n    if (result) {\n        Log.e(TAG, "8 - Update UI ...");\n    } else {\n        Log.e(TAG, "8 - Finish ...");\n    }\n}'
p1637
aS'BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p1638
aS'JSONObject d = jRoot.getJSONObject("d");'
p1639
aS'String bufferedStrChunk = null;\nwhile ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n    stringBuilder.append(bufferedStrChunk);\n}\nreturn stringBuilder.toString();'
p1640
aS'boolean first = true;\nfor (Map.Entry<String, String> entry : params.entrySet()) {\n    if (first)\n        first = false;\n    else\n        result.append("&");\n    result.append(URLEncoder.encode(entry.getKey(), "UTF-8"));\n    result.append("=");\n    result.append(URLEncoder.encode(entry.getValue(), "UTF-8"));\n}'
p1641
aS'conn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    response = "";\n}'
p1642
aS'conn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n}'
p1643
aS'conn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p1644
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));'
p1645
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n}'
p1646
aS'conn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();'
p1647
aS'conn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();'
p1648
aS'Log.e(TAG, "2 - pre Request to response...");\ntry {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}'
p1649
aS'String urlString = params[0];\nString resultToDisplay = "";\nInputStream in = null;'
p1650
aS'in = new BufferedInputStream(urlConnection.getInputStream());'
p1651
aS'boolean status = false;'
p1652
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");'
p1653
aS'Log.e(TAG, "6 - response !empty...");\nJSONObject jRoot = new JSONObject(response);\nJSONObject d = jRoot.getJSONObject("d");'
p1654
aS'try {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}'
p1655
aS'return resultToDisplay;'
p1656
aS'String token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);'
p1657
aS'for (Map.Entry<String, String> entry : params.entrySet()) {\n    if (first)\n        first = false;\n    else\n        result.append("&");\n    result.append(URLEncoder.encode(entry.getKey(), "UTF-8"));\n    result.append("=");\n    result.append(URLEncoder.encode(entry.getValue(), "UTF-8"));\n}'
p1658
aS'private int advertisementId;\npublic Empty(Context contex, int advertisementId) {\n    this.context = contex;\n    this.advertisementId = advertisementId;\n}\n@Override\nprotected void onPreExecute() {\n    Log.e(TAG, "1 - RequestVoteTask is about to start...");\n}\n@Override\nprotected Boolean doInBackground(Void... params) {\n    boolean status = false;\n    String response = "";\n    Log.e(TAG, "2 - pre Request to response...");\n    try {\n        response = performPostCall(urlString, new HashMap<String, String>() {\n\n            private static final long serialVersionUID = 1L;\n\n            {\n                put("Accept", "application/json");\n                put("Content-Type", "application/json");\n            }\n        });\n        Log.e(TAG, "3 - give Response...");\n        Log.e(TAG, "4 " + response.toString());\n    } catch (Exception e) {\n        Log.e(TAG, "Error ...");\n    }\n    Log.e(TAG, "5 - after Response...");\n    if (!response.equalsIgnoreCase("")) {\n        try {\n            Log.e(TAG, "6 - response !empty...");\n            JSONObject jRoot = new JSONObject(response);\n            JSONObject d = jRoot.getJSONObject("d");\n            int ResultType = d.getInt("ResultType");\n            Log.e("ResultType", ResultType + "");\n            if (ResultType == 1) {\n                status = true;\n            }\n        } catch (JSONException e) {\n            Log.e(TAG, "Error " + e.getMessage());\n        } finally {\n        }\n    } else {\n        Log.e(TAG, "6 - response is empty...");\n        status = false;\n    }\n    return status;\n}'
p1659
aS'Log.e(TAG, "11 - url : " + requestURL);'
p1660
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);'
p1661
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);'
p1662
aS'Log.e(TAG, "8 - Finish ...");'
p1663
aS'String resultToDisplay = "";\nInputStream in = null;\ntry {\n    URL url = new URL(urlString);\n    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n    in = new BufferedInputStream(urlConnection.getInputStream());\n} catch (Exception e) {\n    System.out.println(e.getMessage());\n    return e.getMessage();\n}'
p1664
aS'conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);'
p1665
aS'super.onPostExecute(result);\nif (result.equals("working")) {\n    Toast.makeText(getApplicationContext(), "HTTP POST is working...", Toast.LENGTH_LONG).show();\n} else {\n}'
p1666
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p1667
aS'OutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n    response = "";\n}'
p1668
aS'String response = "";\nLog.e(TAG, "2 - pre Request to response...");\ntry {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}\nLog.e(TAG, "5 - after Response...");\nif (!response.equalsIgnoreCase("")) {\n    try {\n        Log.e(TAG, "6 - response !empty...");\n        JSONObject jRoot = new JSONObject(response);\n        JSONObject d = jRoot.getJSONObject("d");\n        int ResultType = d.getInt("ResultType");\n        Log.e("ResultType", ResultType + "");\n        if (ResultType == 1) {\n            status = true;\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, "Error " + e.getMessage());\n    } finally {\n    }\n}'
p1669
aS'String str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();'
p1670
aS'boolean first = true;\nfor (Map.Entry<String, String> entry : params.entrySet()) {\n    if (first)\n        first = false;\n    else\n        result.append("&");\n}'
p1671
aS'List<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n}'
p1672
aS'conn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p1673
aS'String paramUsername = params[0];\nString paramPassword = params[1];\nSystem.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n}'
p1674
aS'int responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n    response = "";\n}'
p1675
aS'OutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p1676
aS'Log.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();'
p1677
aS'UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\nhttpPost.setEntity(urlEncodedFormEntity);\ntry {\n    HttpResponse httpResponse = httpClient.execute(httpPost);\n    InputStream inputStream = httpResponse.getEntity().getContent();\n    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n    StringBuilder stringBuilder = new StringBuilder();\n    String bufferedStrChunk = null;\n    while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n        stringBuilder.append(bufferedStrChunk);\n    }\n    return stringBuilder.toString();\n} catch (ClientProtocolException cpe) {\n    System.out.println("First Exception caz of HttpResponese :" + cpe);\n}'
p1678
aS'String response = "";\nLog.e(TAG, "2 - pre Request to response...");\ntry {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}\nLog.e(TAG, "5 - after Response...");'
p1679
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();'
p1680
aS'HttpPost httppost = new HttpPost("http://www.yoursite.com/script.php");\ntry {\n    List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\n    nameValuePairs.add(new BasicNameValuePair("id", "12345"));\n    nameValuePairs.add(new BasicNameValuePair("stringdata", "Hi"));\n    httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n    HttpResponse response = httpclient.execute(httppost);\n} catch (ClientProtocolException e) {\n}'
p1681
aS'private int advertisementId;\npublic Empty(Context contex, int advertisementId) {\n    this.context = contex;\n    this.advertisementId = advertisementId;\n}\n@Override\nprotected void onPreExecute() {\n    Log.e(TAG, "1 - RequestVoteTask is about to start...");\n}'
p1682
aS'HttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);'
p1683
aS'boolean first = true;'
p1684
aS'String token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();'
p1685
aS'byte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n}'
p1686
aS'String token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();'
p1687
aS'private int advertisementId;\npublic Empty(Context contex, int advertisementId) {\n    this.context = contex;\n    this.advertisementId = advertisementId;\n}'
p1688
aS'BasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);'
p1689
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n}'
p1690
aS'try {\n    List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\n    nameValuePairs.add(new BasicNameValuePair("id", "12345"));\n    nameValuePairs.add(new BasicNameValuePair("stringdata", "Hi"));\n    httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n    HttpResponse response = httpclient.execute(httppost);\n} catch (ClientProtocolException e) {\n}'
p1691
aS'writer.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    response = "";\n}'
p1692
aS'result.append(URLEncoder.encode(entry.getKey(), "UTF-8"));\nresult.append("=");\nresult.append(URLEncoder.encode(entry.getValue(), "UTF-8"));'
p1693
aS'Log.e(TAG, "7 - onPostExecute ...");\nif (result) {\n}'
p1694
aS'Log.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n}'
p1695
aS'result.append("=");\nresult.append(URLEncoder.encode(entry.getValue(), "UTF-8"));'
p1696
aS'String token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");'
p1697
aS'conn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p1698
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();'
p1699
aS'BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\nStringBuilder stringBuilder = new StringBuilder();'
p1700
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);'
p1701
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n    response = "";\n}'
p1702
aS'clearButton = (Button) findViewById(R.id.login_clear_button);\nclearButton.setOnClickListener(this);'
p1703
aS'JSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p1704
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();'
p1705
aS'conn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));'
p1706
aS'String paramPassword = params[1];\nSystem.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n}'
p1707
aS'try {\n    URL url = new URL(urlString);\n    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n    in = new BufferedInputStream(urlConnection.getInputStream());\n} catch (Exception e) {\n}'
p1708
aS'OutputStream os = conn.getOutputStream();\nos.write(outputBytes);'
p1709
aS'String paramPassword = params[1];\nSystem.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();'
p1710
aS'passwordEditText = (EditText) findViewById(R.id.login_password_editText);\nsendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\nsendPostReqButton.setOnClickListener(this);\nclearButton = (Button) findViewById(R.id.login_clear_button);'
p1711
aS'conn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p1712
aS'Log.e(TAG, "2 - pre Request to response...");\ntry {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}\nLog.e(TAG, "5 - after Response...");\nif (!response.equalsIgnoreCase("")) {\n    try {\n        Log.e(TAG, "6 - response !empty...");\n        JSONObject jRoot = new JSONObject(response);\n        JSONObject d = jRoot.getJSONObject("d");\n        int ResultType = d.getInt("ResultType");\n        Log.e("ResultType", ResultType + "");\n        if (ResultType == 1) {\n            status = true;\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, "Error " + e.getMessage());\n    } finally {\n    }\n} else {\n    Log.e(TAG, "6 - response is empty...");\n    status = false;\n}\nreturn status;'
p1713
aS'String givenPassword = passwordEditText.getEditableText().toString();\nSystem.out.println("Given username :" + givenUsername + " Given password :" + givenPassword);'
p1714
aS'HttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);'
p1715
aS'BasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);'
p1716
aS'httpPost.setEntity(urlEncodedFormEntity);\ntry {\n    HttpResponse httpResponse = httpClient.execute(httpPost);\n    InputStream inputStream = httpResponse.getEntity().getContent();\n    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n    StringBuilder stringBuilder = new StringBuilder();\n    String bufferedStrChunk = null;\n    while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n        stringBuilder.append(bufferedStrChunk);\n    }\n    return stringBuilder.toString();\n} catch (ClientProtocolException cpe) {\n    System.out.println("First Exception caz of HttpResponese :" + cpe);\n    cpe.printStackTrace();\n}'
p1717
aS'byte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p1718
aS'sendPostReqButton.setOnClickListener(this);\nclearButton = (Button) findViewById(R.id.login_clear_button);'
p1719
aS'Log.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);'
p1720
aS'conn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);'
p1721
aS'String paramUsername = params[0];\nString paramPassword = params[1];\nSystem.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);'
p1722
aS'private int advertisementId;\npublic Empty(Context contex, int advertisementId) {\n    this.context = contex;\n    this.advertisementId = advertisementId;\n}\n@Override\nprotected void onPreExecute() {\n    Log.e(TAG, "1 - RequestVoteTask is about to start...");\n}\n@Override\nprotected Boolean doInBackground(Void... params) {\n    boolean status = false;\n    String response = "";\n    Log.e(TAG, "2 - pre Request to response...");\n    try {\n        response = performPostCall(urlString, new HashMap<String, String>() {\n\n            private static final long serialVersionUID = 1L;\n\n            {\n                put("Accept", "application/json");\n                put("Content-Type", "application/json");\n            }\n        });\n        Log.e(TAG, "3 - give Response...");\n        Log.e(TAG, "4 " + response.toString());\n    } catch (Exception e) {\n        Log.e(TAG, "Error ...");\n    }\n    Log.e(TAG, "5 - after Response...");\n    if (!response.equalsIgnoreCase("")) {\n        try {\n            Log.e(TAG, "6 - response !empty...");\n            JSONObject jRoot = new JSONObject(response);\n            JSONObject d = jRoot.getJSONObject("d");\n            int ResultType = d.getInt("ResultType");\n            Log.e("ResultType", ResultType + "");\n            if (ResultType == 1) {\n                status = true;\n            }\n        } catch (JSONException e) {\n            Log.e(TAG, "Error " + e.getMessage());\n        } finally {\n        }\n    } else {\n        Log.e(TAG, "6 - response is empty...");\n        status = false;\n    }\n    return status;\n}\n@Override\nprotected void onPostExecute(Boolean result) {\n    Log.e(TAG, "7 - onPostExecute ...");\n    if (result) {\n        Log.e(TAG, "8 - Update UI ...");\n    } else {\n        Log.e(TAG, "8 - Finish ...");\n    }\n}\npublic String performPostCall(String requestURL, HashMap<String, String> postDataParams) {\n    URL url;\n    String response = "";\n    try {\n        url = new URL(requestURL);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n        conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n        conn.setRequestMethod("POST");\n        conn.setDoInput(true);\n        conn.setDoOutput(true);\n        conn.setRequestProperty("Content-Type", "application/json");\n        Log.e(TAG, "11 - url : " + requestURL);\n        JSONObject root = new JSONObject();\n        String token = Static.getPrefsToken(context);\n        root.put("securityInfo", Static.getSecurityInfo(context));\n        root.put("advertisementId", advertisementId);\n        Log.e(TAG, "12 - root : " + root.toString());\n        String str = root.toString();\n        byte[] outputBytes = str.getBytes("UTF-8");\n        OutputStream os = conn.getOutputStream();\n        os.write(outputBytes);\n        int responseCode = conn.getResponseCode();\n        Log.e(TAG, "13 - responseCode : " + responseCode);\n        if (responseCode == HttpsURLConnection.HTTP_OK) {\n            Log.e(TAG, "14 - HTTP_OK");\n            String line;\n            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            while ((line = br.readLine()) != null) {\n                response += line;\n            }\n        } else {\n            Log.e(TAG, "14 - False - HTTP_OK");\n            response = "";\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return response;\n}'
p1723
aS'InputStream in = null;'
p1724
aS'OutputStream os = conn.getOutputStream();'
p1725
aS'Log.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p1726
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");'
p1727
aS'HttpPost httppost = new HttpPost("http://www.yoursite.com/script.php");'
p1728
aS'boolean status = false;\nString response = "";\nLog.e(TAG, "2 - pre Request to response...");\ntry {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}\nLog.e(TAG, "5 - after Response...");\nif (!response.equalsIgnoreCase("")) {\n    try {\n        Log.e(TAG, "6 - response !empty...");\n        JSONObject jRoot = new JSONObject(response);\n        JSONObject d = jRoot.getJSONObject("d");\n        int ResultType = d.getInt("ResultType");\n        Log.e("ResultType", ResultType + "");\n        if (ResultType == 1) {\n            status = true;\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, "Error " + e.getMessage());\n    } finally {\n    }\n} else {\n    Log.e(TAG, "6 - response is empty...");\n}'
p1729
aS'System.out.println("Given username :" + givenUsername + " Given password :" + givenPassword);'
p1730
aS'conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p1731
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);'
p1732
aS'@Override\nprotected void onPostExecute(Boolean result) {\n    Log.e(TAG, "7 - onPostExecute ...");\n    if (result) {\n        Log.e(TAG, "8 - Update UI ...");\n    } else {\n        Log.e(TAG, "8 - Finish ...");\n    }\n}\npublic String performPostCall(String requestURL, HashMap<String, String> postDataParams) {\n    URL url;\n    String response = "";\n    try {\n        url = new URL(requestURL);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n        conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n        conn.setRequestMethod("POST");\n        conn.setDoInput(true);\n        conn.setDoOutput(true);\n        conn.setRequestProperty("Content-Type", "application/json");\n        Log.e(TAG, "11 - url : " + requestURL);\n        JSONObject root = new JSONObject();\n        String token = Static.getPrefsToken(context);\n        root.put("securityInfo", Static.getSecurityInfo(context));\n        root.put("advertisementId", advertisementId);\n        Log.e(TAG, "12 - root : " + root.toString());\n        String str = root.toString();\n        byte[] outputBytes = str.getBytes("UTF-8");\n        OutputStream os = conn.getOutputStream();\n        os.write(outputBytes);\n        int responseCode = conn.getResponseCode();\n        Log.e(TAG, "13 - responseCode : " + responseCode);\n        if (responseCode == HttpsURLConnection.HTTP_OK) {\n            Log.e(TAG, "14 - HTTP_OK");\n            String line;\n            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            while ((line = br.readLine()) != null) {\n                response += line;\n            }\n        } else {\n            Log.e(TAG, "14 - False - HTTP_OK");\n            response = "";\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return response;\n}'
p1733
aS'StringBuilder result = new StringBuilder();\nboolean first = true;\nfor (Map.Entry<String, String> entry : params.entrySet()) {\n    if (first)\n        first = false;\n    else\n        result.append("&");\n    result.append(URLEncoder.encode(entry.getKey(), "UTF-8"));\n}'
p1734
aS'if (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n}'
p1735
aS'nameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n}'
p1736
aS'conn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p1737
aS'HttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n}'
p1738
aS'writer.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    response = "";\n}'
p1739
aS'conn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);'
p1740
aS'System.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();'
p1741
aS'String urlString = params[0];'
p1742
aS'InputStream in = null;\ntry {\n    URL url = new URL(urlString);\n    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n    in = new BufferedInputStream(urlConnection.getInputStream());\n} catch (Exception e) {\n    System.out.println(e.getMessage());\n    return e.getMessage();\n}\ntry {\n    resultToDisplay = IOUtils.toString(in, "UTF-8");\n} catch (IOException e) {\n    e.printStackTrace();\n}\nreturn resultToDisplay;'
p1743
aS'try {\n    Log.e(TAG, "6 - response !empty...");\n    JSONObject jRoot = new JSONObject(response);\n    JSONObject d = jRoot.getJSONObject("d");\n    int ResultType = d.getInt("ResultType");\n    Log.e("ResultType", ResultType + "");\n    if (ResultType == 1) {\n        status = true;\n    }\n} catch (JSONException e) {\n}'
p1744
aS'httpPost.setEntity(urlEncodedFormEntity);\ntry {\n    HttpResponse httpResponse = httpClient.execute(httpPost);\n    InputStream inputStream = httpResponse.getEntity().getContent();\n    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n    StringBuilder stringBuilder = new StringBuilder();\n    String bufferedStrChunk = null;\n    while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n        stringBuilder.append(bufferedStrChunk);\n    }\n    return stringBuilder.toString();\n} catch (ClientProtocolException cpe) {\n    System.out.println("First Exception caz of HttpResponese :" + cpe);\n}'
p1745
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p1746
aS'private int advertisementId;\npublic Empty(Context contex, int advertisementId) {\n    this.context = contex;\n    this.advertisementId = advertisementId;\n}\n@Override\nprotected void onPreExecute() {\n    Log.e(TAG, "1 - RequestVoteTask is about to start...");\n}\n@Override\nprotected Boolean doInBackground(Void... params) {\n    boolean status = false;\n    String response = "";\n    Log.e(TAG, "2 - pre Request to response...");\n    try {\n        response = performPostCall(urlString, new HashMap<String, String>() {\n\n            private static final long serialVersionUID = 1L;\n\n            {\n                put("Accept", "application/json");\n                put("Content-Type", "application/json");\n            }\n        });\n        Log.e(TAG, "3 - give Response...");\n        Log.e(TAG, "4 " + response.toString());\n    } catch (Exception e) {\n        Log.e(TAG, "Error ...");\n    }\n    Log.e(TAG, "5 - after Response...");\n    if (!response.equalsIgnoreCase("")) {\n        try {\n            Log.e(TAG, "6 - response !empty...");\n            JSONObject jRoot = new JSONObject(response);\n            JSONObject d = jRoot.getJSONObject("d");\n            int ResultType = d.getInt("ResultType");\n            Log.e("ResultType", ResultType + "");\n            if (ResultType == 1) {\n                status = true;\n            }\n        } catch (JSONException e) {\n            Log.e(TAG, "Error " + e.getMessage());\n        } finally {\n        }\n    } else {\n        Log.e(TAG, "6 - response is empty...");\n        status = false;\n    }\n    return status;\n}\n@Override\nprotected void onPostExecute(Boolean result) {\n    Log.e(TAG, "7 - onPostExecute ...");\n    if (result) {\n        Log.e(TAG, "8 - Update UI ...");\n    } else {\n        Log.e(TAG, "8 - Finish ...");\n    }\n}'
p1747
aS'conn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));'
p1748
aS'OutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();'
p1749
aS'if (!response.equalsIgnoreCase("")) {\n    try {\n        Log.e(TAG, "6 - response !empty...");\n        JSONObject jRoot = new JSONObject(response);\n        JSONObject d = jRoot.getJSONObject("d");\n        int ResultType = d.getInt("ResultType");\n        Log.e("ResultType", ResultType + "");\n        if (ResultType == 1) {\n            status = true;\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, "Error " + e.getMessage());\n    } finally {\n    }\n} else {\n    Log.e(TAG, "6 - response is empty...");\n    status = false;\n}\nreturn status;'
p1750
aS'passwordEditText.setText("");\npasswordEditText.setCursorVisible(false);\npasswordEditText.setFocusable(false);\nusernameEditText.setCursorVisible(true);'
p1751
aS'conn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p1752
aS'int ResultType = d.getInt("ResultType");'
p1753
aS'BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));'
p1754
aS'String response = "";\ntry {\n    url = new URL(requestURL);\n    HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n    conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n    conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n    conn.setRequestMethod("POST");\n    conn.setDoInput(true);\n    conn.setDoOutput(true);\n    conn.setRequestProperty("Content-Type", "application/json");\n    Log.e(TAG, "11 - url : " + requestURL);\n    JSONObject root = new JSONObject();\n    String token = Static.getPrefsToken(context);\n    root.put("securityInfo", Static.getSecurityInfo(context));\n    root.put("advertisementId", advertisementId);\n    Log.e(TAG, "12 - root : " + root.toString());\n    String str = root.toString();\n    byte[] outputBytes = str.getBytes("UTF-8");\n    OutputStream os = conn.getOutputStream();\n    os.write(outputBytes);\n    int responseCode = conn.getResponseCode();\n    Log.e(TAG, "13 - responseCode : " + responseCode);\n    if (responseCode == HttpsURLConnection.HTTP_OK) {\n        Log.e(TAG, "14 - HTTP_OK");\n        String line;\n        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        while ((line = br.readLine()) != null) {\n            response += line;\n        }\n    } else {\n        Log.e(TAG, "14 - False - HTTP_OK");\n        response = "";\n    }\n} catch (Exception e) {\n    e.printStackTrace();\n}'
p1755
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();'
p1756
aS'System.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");'
p1757
aS'conn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p1758
aS'passwordEditText = (EditText) findViewById(R.id.login_password_editText);\nsendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\nsendPostReqButton.setOnClickListener(this);'
p1759
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());'
p1760
aS'conn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();'
p1761
aS'boolean status = false;\nString response = "";\nLog.e(TAG, "2 - pre Request to response...");\ntry {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}\nLog.e(TAG, "5 - after Response...");\nif (!response.equalsIgnoreCase("")) {\n    try {\n        Log.e(TAG, "6 - response !empty...");\n        JSONObject jRoot = new JSONObject(response);\n        JSONObject d = jRoot.getJSONObject("d");\n        int ResultType = d.getInt("ResultType");\n        Log.e("ResultType", ResultType + "");\n        if (ResultType == 1) {\n            status = true;\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, "Error " + e.getMessage());\n    } finally {\n    }\n} else {\n    Log.e(TAG, "6 - response is empty...");\n    status = false;\n}'
p1762
aS'conn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p1763
aS'public CallAPI() {\n}\n@Override\nprotected void onPreExecute() {\n    super.onPreExecute();\n}'
p1764
aS'conn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p1765
aS'List<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n}'
p1766
aS'int responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n}'
p1767
aS'Log.e(TAG, "6 - response !empty...");\nJSONObject jRoot = new JSONObject(response);'
p1768
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n}'
p1769
aS'Log.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p1770
aS'private Context context;\nprivate int advertisementId;\npublic Empty(Context contex, int advertisementId) {\n    this.context = contex;\n    this.advertisementId = advertisementId;\n}\n@Override\nprotected void onPreExecute() {\n    Log.e(TAG, "1 - RequestVoteTask is about to start...");\n}\n@Override\nprotected Boolean doInBackground(Void... params) {\n    boolean status = false;\n    String response = "";\n    Log.e(TAG, "2 - pre Request to response...");\n    try {\n        response = performPostCall(urlString, new HashMap<String, String>() {\n\n            private static final long serialVersionUID = 1L;\n\n            {\n                put("Accept", "application/json");\n                put("Content-Type", "application/json");\n            }\n        });\n        Log.e(TAG, "3 - give Response...");\n        Log.e(TAG, "4 " + response.toString());\n    } catch (Exception e) {\n        Log.e(TAG, "Error ...");\n    }\n    Log.e(TAG, "5 - after Response...");\n    if (!response.equalsIgnoreCase("")) {\n        try {\n            Log.e(TAG, "6 - response !empty...");\n            JSONObject jRoot = new JSONObject(response);\n            JSONObject d = jRoot.getJSONObject("d");\n            int ResultType = d.getInt("ResultType");\n            Log.e("ResultType", ResultType + "");\n            if (ResultType == 1) {\n                status = true;\n            }\n        } catch (JSONException e) {\n            Log.e(TAG, "Error " + e.getMessage());\n        } finally {\n        }\n    } else {\n        Log.e(TAG, "6 - response is empty...");\n        status = false;\n    }\n    return status;\n}'
p1771
aS'super.onCreate(savedInstanceState);\nsetContentView(R.layout.login);\nusernameEditText = (EditText) findViewById(R.id.login_username_editText);\npasswordEditText = (EditText) findViewById(R.id.login_password_editText);'
p1772
aS'sendPostRequest(givenUsername, givenPassword);'
p1773
aS'conn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    response = "";\n}'
p1774
aS'String givenUsername = usernameEditText.getEditableText().toString();\nString givenPassword = passwordEditText.getEditableText().toString();'
p1775
aS'put("Content-Type", "application/json");'
p1776
aS'root.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());'
p1777
aS'try {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n}'
p1778
aS'if (!response.equalsIgnoreCase("")) {\n    try {\n        Log.e(TAG, "6 - response !empty...");\n        JSONObject jRoot = new JSONObject(response);\n        JSONObject d = jRoot.getJSONObject("d");\n        int ResultType = d.getInt("ResultType");\n        Log.e("ResultType", ResultType + "");\n        if (ResultType == 1) {\n            status = true;\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, "Error " + e.getMessage());\n    } finally {\n    }\n} else {\n    Log.e(TAG, "6 - response is empty...");\n    status = false;\n}'
p1779
aS'InputStream inputStream = httpResponse.getEntity().getContent();\nInputStreamReader inputStreamReader = new InputStreamReader(inputStream);\nBufferedReader bufferedReader = new BufferedReader(inputStreamReader);\nStringBuilder stringBuilder = new StringBuilder();'
p1780
aS'List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);'
p1781
aS'writer.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p1782
aS'conn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();'
p1783
aS'writer.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n}'
p1784
aS'writer.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p1785
aS'e.printStackTrace();'
p1786
aS'public void onClick(View v) {\n    if (v.getId() == R.id.login_clear_button) {\n        usernameEditText.setText("");\n        passwordEditText.setText("");\n        passwordEditText.setCursorVisible(false);\n        passwordEditText.setFocusable(false);\n        usernameEditText.setCursorVisible(true);\n        passwordEditText.setFocusable(true);\n    } else if (v.getId() == R.id.login_sendPostReq_button) {\n        String givenUsername = usernameEditText.getEditableText().toString();\n        String givenPassword = passwordEditText.getEditableText().toString();\n        System.out.println("Given username :" + givenUsername + " Given password :" + givenPassword);\n        sendPostRequest(givenUsername, givenPassword);\n    }\n}'
p1787
aS'conn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));'
p1788
aS'while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n    stringBuilder.append(bufferedStrChunk);\n}\nreturn stringBuilder.toString();'
p1789
aS'{\n    put("Accept", "application/json");\n    put("Content-Type", "application/json");\n}'
p1790
aS'setContentView(R.layout.login);\nusernameEditText = (EditText) findViewById(R.id.login_username_editText);\npasswordEditText = (EditText) findViewById(R.id.login_password_editText);\nsendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\nsendPostReqButton.setOnClickListener(this);\nclearButton = (Button) findViewById(R.id.login_clear_button);'
p1791
aS'byte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n}'
p1792
aS'conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();'
p1793
aS'conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);'
p1794
aS'try {\n    url = new URL(requestURL);\n    HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n    conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n    conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n    conn.setRequestMethod("POST");\n    conn.setDoInput(true);\n    conn.setDoOutput(true);\n    conn.setRequestProperty("Content-Type", "application/json");\n    Log.e(TAG, "11 - url : " + requestURL);\n    JSONObject root = new JSONObject();\n    String token = Static.getPrefsToken(context);\n    root.put("securityInfo", Static.getSecurityInfo(context));\n    root.put("advertisementId", advertisementId);\n    Log.e(TAG, "12 - root : " + root.toString());\n    String str = root.toString();\n    byte[] outputBytes = str.getBytes("UTF-8");\n    OutputStream os = conn.getOutputStream();\n    os.write(outputBytes);\n    int responseCode = conn.getResponseCode();\n    Log.e(TAG, "13 - responseCode : " + responseCode);\n    if (responseCode == HttpsURLConnection.HTTP_OK) {\n        Log.e(TAG, "14 - HTTP_OK");\n        String line;\n        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        while ((line = br.readLine()) != null) {\n            response += line;\n        }\n    } else {\n        Log.e(TAG, "14 - False - HTTP_OK");\n        response = "";\n    }\n} catch (Exception e) {\n    e.printStackTrace();\n}'
p1795
aS'byte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p1796
aS'Log.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);'
p1797
aS'root.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();'
p1798
aS'conn.setRequestMethod("POST");'
p1799
aS'super.onCreate(savedInstanceState);\nsetContentView(R.layout.login);\nusernameEditText = (EditText) findViewById(R.id.login_username_editText);\npasswordEditText = (EditText) findViewById(R.id.login_password_editText);\nsendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\nsendPostReqButton.setOnClickListener(this);'
p1800
aS'BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n}'
p1801
aS'super.onPostExecute(result);\nif (result.equals("working")) {\n    Toast.makeText(getApplicationContext(), "HTTP POST is working...", Toast.LENGTH_LONG).show();\n}'
p1802
aS'sendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\nsendPostReqButton.setOnClickListener(this);'
p1803
aS'root.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");'
p1804
aS'System.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);'
p1805
aS'BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\nStringBuilder stringBuilder = new StringBuilder();\nString bufferedStrChunk = null;\nwhile ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n}'
p1806
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");'
p1807
aS'conn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();'
p1808
aS'root.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p1809
aS'byte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p1810
aS'InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\nBufferedReader bufferedReader = new BufferedReader(inputStreamReader);\nStringBuilder stringBuilder = new StringBuilder();\nString bufferedStrChunk = null;\nwhile ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n    stringBuilder.append(bufferedStrChunk);\n}\nreturn stringBuilder.toString();'
p1811
aS'Log.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);'
p1812
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();'
p1813
aS'Log.e(TAG, "3 - give Response...");\nLog.e(TAG, "4 " + response.toString());'
p1814
aS'root.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p1815
aS'conn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();'
p1816
aS'protected void onPreExecute() {\n    super.onPreExecute();\n}\n@Override\nprotected String doInBackground(String... params) {\n    String urlString = params[0];\n    String resultToDisplay = "";\n    InputStream in = null;\n    try {\n        URL url = new URL(urlString);\n        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n        in = new BufferedInputStream(urlConnection.getInputStream());\n    } catch (Exception e) {\n        System.out.println(e.getMessage());\n        return e.getMessage();\n    }\n    try {\n        resultToDisplay = IOUtils.toString(in, "UTF-8");\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return resultToDisplay;\n}\n@Override\nprotected void onPostExecute(String result) {\n}'
p1817
aS'private Context context;\nprivate int advertisementId;\npublic Empty(Context contex, int advertisementId) {\n    this.context = contex;\n    this.advertisementId = advertisementId;\n}\n@Override\nprotected void onPreExecute() {\n    Log.e(TAG, "1 - RequestVoteTask is about to start...");\n}\n@Override\nprotected Boolean doInBackground(Void... params) {\n    boolean status = false;\n    String response = "";\n    Log.e(TAG, "2 - pre Request to response...");\n    try {\n        response = performPostCall(urlString, new HashMap<String, String>() {\n\n            private static final long serialVersionUID = 1L;\n\n            {\n                put("Accept", "application/json");\n                put("Content-Type", "application/json");\n            }\n        });\n        Log.e(TAG, "3 - give Response...");\n        Log.e(TAG, "4 " + response.toString());\n    } catch (Exception e) {\n        Log.e(TAG, "Error ...");\n    }\n    Log.e(TAG, "5 - after Response...");\n    if (!response.equalsIgnoreCase("")) {\n        try {\n            Log.e(TAG, "6 - response !empty...");\n            JSONObject jRoot = new JSONObject(response);\n            JSONObject d = jRoot.getJSONObject("d");\n            int ResultType = d.getInt("ResultType");\n            Log.e("ResultType", ResultType + "");\n            if (ResultType == 1) {\n                status = true;\n            }\n        } catch (JSONException e) {\n            Log.e(TAG, "Error " + e.getMessage());\n        } finally {\n        }\n    } else {\n        Log.e(TAG, "6 - response is empty...");\n        status = false;\n    }\n    return status;\n}\n@Override\nprotected void onPostExecute(Boolean result) {\n    Log.e(TAG, "7 - onPostExecute ...");\n    if (result) {\n        Log.e(TAG, "8 - Update UI ...");\n    } else {\n        Log.e(TAG, "8 - Finish ...");\n    }\n}\npublic String performPostCall(String requestURL, HashMap<String, String> postDataParams) {\n    URL url;\n    String response = "";\n    try {\n        url = new URL(requestURL);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n        conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n        conn.setRequestMethod("POST");\n        conn.setDoInput(true);\n        conn.setDoOutput(true);\n        conn.setRequestProperty("Content-Type", "application/json");\n        Log.e(TAG, "11 - url : " + requestURL);\n        JSONObject root = new JSONObject();\n        String token = Static.getPrefsToken(context);\n        root.put("securityInfo", Static.getSecurityInfo(context));\n        root.put("advertisementId", advertisementId);\n        Log.e(TAG, "12 - root : " + root.toString());\n        String str = root.toString();\n        byte[] outputBytes = str.getBytes("UTF-8");\n        OutputStream os = conn.getOutputStream();\n        os.write(outputBytes);\n        int responseCode = conn.getResponseCode();\n        Log.e(TAG, "13 - responseCode : " + responseCode);\n        if (responseCode == HttpsURLConnection.HTTP_OK) {\n            Log.e(TAG, "14 - HTTP_OK");\n            String line;\n            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            while ((line = br.readLine()) != null) {\n                response += line;\n            }\n        } else {\n            Log.e(TAG, "14 - False - HTTP_OK");\n            response = "";\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return response;\n}'
p1818
aS'private EditText usernameEditText;\nprivate EditText passwordEditText;'
p1819
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n}'
p1820
aS'String token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));'
p1821
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));'
p1822
aS'conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n}'
p1823
aS'if (v.getId() == R.id.login_clear_button) {\n    usernameEditText.setText("");\n    passwordEditText.setText("");\n    passwordEditText.setCursorVisible(false);\n    passwordEditText.setFocusable(false);\n    usernameEditText.setCursorVisible(true);\n    passwordEditText.setFocusable(true);\n} else if (v.getId() == R.id.login_sendPostReq_button) {\n    String givenUsername = usernameEditText.getEditableText().toString();\n    String givenPassword = passwordEditText.getEditableText().toString();\n}'
p1824
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    response = "";\n}'
p1825
aS'InputStream in = null;\ntry {\n    URL url = new URL(urlString);\n    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n    in = new BufferedInputStream(urlConnection.getInputStream());\n} catch (Exception e) {\n    System.out.println(e.getMessage());\n    return e.getMessage();\n}\ntry {\n    resultToDisplay = IOUtils.toString(in, "UTF-8");\n} catch (IOException e) {\n    e.printStackTrace();\n}'
p1826
aS'root.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p1827
aS'private Button clearButton;'
p1828
aS'sendPostReqButton.setOnClickListener(this);'
p1829
aS'os.close();\nint responseCode = conn.getResponseCode();'
p1830
aS'if (v.getId() == R.id.login_clear_button) {\n    usernameEditText.setText("");\n    passwordEditText.setText("");\n    passwordEditText.setCursorVisible(false);\n    passwordEditText.setFocusable(false);\n    usernameEditText.setCursorVisible(true);\n    passwordEditText.setFocusable(true);\n} else if (v.getId() == R.id.login_sendPostReq_button) {\n    String givenUsername = usernameEditText.getEditableText().toString();\n    String givenPassword = passwordEditText.getEditableText().toString();\n    System.out.println("Given username :" + givenUsername + " Given password :" + givenPassword);\n    sendPostRequest(givenUsername, givenPassword);\n}'
p1831
aS'URL url;\nString response = "";\ntry {\n    url = new URL(requestURL);\n    HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n    conn.setReadTimeout(15000);\n    conn.setConnectTimeout(15000);\n    conn.setRequestMethod("GET");\n    conn.setDoInput(true);\n    conn.setDoOutput(true);\n    OutputStream os = conn.getOutputStream();\n    BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\n    writer.write(getPostDataString(postDataParams));\n    writer.flush();\n    writer.close();\n    os.close();\n    int responseCode = conn.getResponseCode();\n    if (responseCode == HttpsURLConnection.HTTP_OK) {\n        String line;\n        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        while ((line = br.readLine()) != null) {\n            response += line;\n        }\n    } else {\n        response = "";\n    }\n} catch (Exception e) {\n    e.printStackTrace();\n}'
p1832
aS'uee.printStackTrace();'
p1833
aS'conn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();'
p1834
aS'conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);'
p1835
aS'conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();'
p1836
aS'OutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();'
p1837
aS'private int advertisementId;'
p1838
aS'BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\nStringBuilder stringBuilder = new StringBuilder();\nString bufferedStrChunk = null;'
p1839
aS'conn.setConnectTimeout(15000);'
p1840
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n    response = "";\n}'
p1841
aS'nameValuePairs.add(new BasicNameValuePair("id", "12345"));\nnameValuePairs.add(new BasicNameValuePair("stringdata", "Hi"));\nhttppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));\nHttpResponse response = httpclient.execute(httppost);'
p1842
aS'public CallAPI() {\n}\n@Override\nprotected void onPreExecute() {\n    super.onPreExecute();\n}\n@Override\nprotected String doInBackground(String... params) {\n    String urlString = params[0];\n    String resultToDisplay = "";\n    InputStream in = null;\n    try {\n        URL url = new URL(urlString);\n        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n        in = new BufferedInputStream(urlConnection.getInputStream());\n    } catch (Exception e) {\n        System.out.println(e.getMessage());\n        return e.getMessage();\n    }\n    try {\n        resultToDisplay = IOUtils.toString(in, "UTF-8");\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return resultToDisplay;\n}'
p1843
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));'
p1844
aS'InputStream inputStream = httpResponse.getEntity().getContent();\nInputStreamReader inputStreamReader = new InputStreamReader(inputStream);\nBufferedReader bufferedReader = new BufferedReader(inputStreamReader);\nStringBuilder stringBuilder = new StringBuilder();\nString bufferedStrChunk = null;\nwhile ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n    stringBuilder.append(bufferedStrChunk);\n}\nreturn stringBuilder.toString();'
p1845
aS'private final String TAG = "post json example";\nprivate Context context;\nprivate int advertisementId;\npublic Empty(Context contex, int advertisementId) {\n    this.context = contex;\n    this.advertisementId = advertisementId;\n}\n@Override\nprotected void onPreExecute() {\n    Log.e(TAG, "1 - RequestVoteTask is about to start...");\n}\n@Override\nprotected Boolean doInBackground(Void... params) {\n    boolean status = false;\n    String response = "";\n    Log.e(TAG, "2 - pre Request to response...");\n    try {\n        response = performPostCall(urlString, new HashMap<String, String>() {\n\n            private static final long serialVersionUID = 1L;\n\n            {\n                put("Accept", "application/json");\n                put("Content-Type", "application/json");\n            }\n        });\n        Log.e(TAG, "3 - give Response...");\n        Log.e(TAG, "4 " + response.toString());\n    } catch (Exception e) {\n        Log.e(TAG, "Error ...");\n    }\n    Log.e(TAG, "5 - after Response...");\n    if (!response.equalsIgnoreCase("")) {\n        try {\n            Log.e(TAG, "6 - response !empty...");\n            JSONObject jRoot = new JSONObject(response);\n            JSONObject d = jRoot.getJSONObject("d");\n            int ResultType = d.getInt("ResultType");\n            Log.e("ResultType", ResultType + "");\n            if (ResultType == 1) {\n                status = true;\n            }\n        } catch (JSONException e) {\n            Log.e(TAG, "Error " + e.getMessage());\n        } finally {\n        }\n    } else {\n        Log.e(TAG, "6 - response is empty...");\n        status = false;\n    }\n    return status;\n}\n@Override\nprotected void onPostExecute(Boolean result) {\n    Log.e(TAG, "7 - onPostExecute ...");\n    if (result) {\n        Log.e(TAG, "8 - Update UI ...");\n    } else {\n        Log.e(TAG, "8 - Finish ...");\n    }\n}'
p1846
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();'
p1847
aS'String response = "";\nLog.e(TAG, "2 - pre Request to response...");\ntry {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}'
p1848
aS'conn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();'
p1849
aS'InputStream inputStream = httpResponse.getEntity().getContent();\nInputStreamReader inputStreamReader = new InputStreamReader(inputStream);\nBufferedReader bufferedReader = new BufferedReader(inputStreamReader);'
p1850
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p1851
aS'Log.e(TAG, "2 - pre Request to response...");\ntry {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}\nLog.e(TAG, "5 - after Response...");\nif (!response.equalsIgnoreCase("")) {\n    try {\n        Log.e(TAG, "6 - response !empty...");\n        JSONObject jRoot = new JSONObject(response);\n        JSONObject d = jRoot.getJSONObject("d");\n        int ResultType = d.getInt("ResultType");\n        Log.e("ResultType", ResultType + "");\n        if (ResultType == 1) {\n            status = true;\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, "Error " + e.getMessage());\n    } finally {\n    }\n} else {\n}'
p1852
aS'conn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();'
p1853
aS'@Override\npublic void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.login);\n    usernameEditText = (EditText) findViewById(R.id.login_username_editText);\n    passwordEditText = (EditText) findViewById(R.id.login_password_editText);\n    sendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\n    sendPostReqButton.setOnClickListener(this);\n    clearButton = (Button) findViewById(R.id.login_clear_button);\n    clearButton.setOnClickListener(this);\n}\n@Override\npublic void onClick(View v) {\n    if (v.getId() == R.id.login_clear_button) {\n        usernameEditText.setText("");\n        passwordEditText.setText("");\n        passwordEditText.setCursorVisible(false);\n        passwordEditText.setFocusable(false);\n        usernameEditText.setCursorVisible(true);\n        passwordEditText.setFocusable(true);\n    } else if (v.getId() == R.id.login_sendPostReq_button) {\n        String givenUsername = usernameEditText.getEditableText().toString();\n        String givenPassword = passwordEditText.getEditableText().toString();\n        System.out.println("Given username :" + givenUsername + " Given password :" + givenPassword);\n        sendPostRequest(givenUsername, givenPassword);\n    }\n}\nprivate void sendPostRequest(String givenUsername, String givenPassword) {\n    class SendPostReqAsyncTask extends AsyncTask<String, Void, String> {\n\n        @Override\n        protected String doInBackground(String... params) {\n            String paramUsername = params[0];\n            String paramPassword = params[1];\n            System.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\n            HttpClient httpClient = new DefaultHttpClient();\n            HttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\n            BasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\n            BasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\n            List<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\n            nameValuePairList.add(usernameBasicNameValuePair);\n            nameValuePairList.add(passwordBasicNameValuePAir);\n            try {\n                UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n                httpPost.setEntity(urlEncodedFormEntity);\n                try {\n                    HttpResponse httpResponse = httpClient.execute(httpPost);\n                    InputStream inputStream = httpResponse.getEntity().getContent();\n                    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n                    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n                    StringBuilder stringBuilder = new StringBuilder();\n                    String bufferedStrChunk = null;\n                    while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n                        stringBuilder.append(bufferedStrChunk);\n                    }\n                    return stringBuilder.toString();\n                } catch (ClientProtocolException cpe) {\n                    System.out.println("First Exception caz of HttpResponese :" + cpe);\n                    cpe.printStackTrace();\n                } catch (IOException ioe) {\n                    System.out.println("Second Exception caz of HttpResponse :" + ioe);\n                    ioe.printStackTrace();\n                }\n            } catch (UnsupportedEncodingException uee) {\n                System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n                uee.printStackTrace();\n            }\n            return null;\n        }\n\n        @Override\n        protected void onPostExecute(String result) {\n            super.onPostExecute(result);\n            if (result.equals("working")) {\n                Toast.makeText(getApplicationContext(), "HTTP POST is working...", Toast.LENGTH_LONG).show();\n            } else {\n                Toast.makeText(getApplicationContext(), "Invalid POST req...", Toast.LENGTH_LONG).show();\n            }\n        }\n    }\n    SendPostReqAsyncTask sendPostReqAsyncTask = new SendPostReqAsyncTask();\n    sendPostReqAsyncTask.execute(givenUsername, givenPassword);\n}'
p1854
aS'boolean status = false;\nString response = "";\nLog.e(TAG, "2 - pre Request to response...");\ntry {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}\nLog.e(TAG, "5 - after Response...");\nif (!response.equalsIgnoreCase("")) {\n    try {\n        Log.e(TAG, "6 - response !empty...");\n        JSONObject jRoot = new JSONObject(response);\n        JSONObject d = jRoot.getJSONObject("d");\n        int ResultType = d.getInt("ResultType");\n        Log.e("ResultType", ResultType + "");\n        if (ResultType == 1) {\n            status = true;\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, "Error " + e.getMessage());\n    } finally {\n    }\n}'
p1855
aS'String paramPassword = params[1];\nSystem.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n}'
p1856
aS'Log.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n}'
p1857
aS'setContentView(R.layout.login);\nusernameEditText = (EditText) findViewById(R.id.login_username_editText);\npasswordEditText = (EditText) findViewById(R.id.login_password_editText);\nsendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\nsendPostReqButton.setOnClickListener(this);'
p1858
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();'
p1859
aS'byte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();'
p1860
aS'boolean status = false;\nString response = "";\nLog.e(TAG, "2 - pre Request to response...");\ntry {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}'
p1861
aS'JSONObject jRoot = new JSONObject(response);\nJSONObject d = jRoot.getJSONObject("d");\nint ResultType = d.getInt("ResultType");\nLog.e("ResultType", ResultType + "");\nif (ResultType == 1) {\n}'
p1862
aS'Log.e(TAG, "7 - onPostExecute ...");\nif (result) {\n    Log.e(TAG, "8 - Update UI ...");\n} else {\n    Log.e(TAG, "8 - Finish ...");\n}'
p1863
aS'byte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);'
p1864
aS'root.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n}'
p1865
aS'conn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();'
p1866
aS'StringBuilder stringBuilder = new StringBuilder();\nString bufferedStrChunk = null;'
p1867
aS'HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\nin = new BufferedInputStream(urlConnection.getInputStream());'
p1868
aS'Log.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n    response = "";\n}'
p1869
aS'response = "";'
p1870
aS'JSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p1871
aS'nameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n    uee.printStackTrace();\n}'
p1872
aS'String resultToDisplay = "";\nInputStream in = null;'
p1873
aS'OutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p1874
aS'HttpClient httpClient = new DefaultHttpClient();'
p1875
aS'HttpResponse response = httpclient.execute(httppost);'
p1876
aS'Log.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p1877
aS'passwordEditText.setText("");\npasswordEditText.setCursorVisible(false);\npasswordEditText.setFocusable(false);\nusernameEditText.setCursorVisible(true);\npasswordEditText.setFocusable(true);'
p1878
aS'public Empty(Context contex, int advertisementId) {\n    this.context = contex;\n    this.advertisementId = advertisementId;\n}\n@Override\nprotected void onPreExecute() {\n    Log.e(TAG, "1 - RequestVoteTask is about to start...");\n}'
p1879
aS'protected void onPreExecute() {\n    super.onPreExecute();\n}\n@Override\nprotected String doInBackground(String... params) {\n    String urlString = params[0];\n    String resultToDisplay = "";\n    InputStream in = null;\n    try {\n        URL url = new URL(urlString);\n        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n        in = new BufferedInputStream(urlConnection.getInputStream());\n    } catch (Exception e) {\n        System.out.println(e.getMessage());\n        return e.getMessage();\n    }\n    try {\n        resultToDisplay = IOUtils.toString(in, "UTF-8");\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return resultToDisplay;\n}'
p1880
aS'conn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();'
p1881
aS'StringBuilder stringBuilder = new StringBuilder();'
p1882
aS'conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p1883
aS'boolean first = true;\nfor (Map.Entry<String, String> entry : params.entrySet()) {\n    if (first)\n        first = false;\n    else\n        result.append("&");\n    result.append(URLEncoder.encode(entry.getKey(), "UTF-8"));\n    result.append("=");\n}'
p1884
aS'Toast.makeText(getApplicationContext(), "HTTP POST is working...", Toast.LENGTH_LONG).show();'
p1885
aS'writer.flush();\nwriter.close();\nos.close();'
p1886
aS'Log.e(TAG, "7 - onPostExecute ...");\nif (result) {\n    Log.e(TAG, "8 - Update UI ...");\n}'
p1887
aS'UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\nhttpPost.setEntity(urlEncodedFormEntity);\ntry {\n    HttpResponse httpResponse = httpClient.execute(httpPost);\n    InputStream inputStream = httpResponse.getEntity().getContent();\n    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n    StringBuilder stringBuilder = new StringBuilder();\n    String bufferedStrChunk = null;\n    while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n        stringBuilder.append(bufferedStrChunk);\n    }\n    return stringBuilder.toString();\n} catch (ClientProtocolException cpe) {\n    System.out.println("First Exception caz of HttpResponese :" + cpe);\n    cpe.printStackTrace();\n} catch (IOException ioe) {\n    System.out.println("Second Exception caz of HttpResponse :" + ioe);\n}'
p1888
aS'int ResultType = d.getInt("ResultType");\nLog.e("ResultType", ResultType + "");\nif (ResultType == 1) {\n}'
p1889
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));'
p1890
aS'@Override\nprotected void onPreExecute() {\n    super.onPreExecute();\n}\n@Override\nprotected String doInBackground(String... params) {\n    String urlString = params[0];\n    String resultToDisplay = "";\n    InputStream in = null;\n    try {\n        URL url = new URL(urlString);\n        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n        in = new BufferedInputStream(urlConnection.getInputStream());\n    } catch (Exception e) {\n        System.out.println(e.getMessage());\n        return e.getMessage();\n    }\n    try {\n        resultToDisplay = IOUtils.toString(in, "UTF-8");\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return resultToDisplay;\n}'
p1891
aS'Log.e("ResultType", ResultType + "");\nif (ResultType == 1) {\n}'
p1892
aS'root.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p1893
aS'HttpClient httpclient = new DefaultHttpClient();\nHttpPost httppost = new HttpPost("http://www.yoursite.com/script.php");\ntry {\n    List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\n    nameValuePairs.add(new BasicNameValuePair("id", "12345"));\n    nameValuePairs.add(new BasicNameValuePair("stringdata", "Hi"));\n    httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n    HttpResponse response = httpclient.execute(httppost);\n} catch (ClientProtocolException e) {\n} catch (IOException e) {\n}'
p1894
aS'conn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);'
p1895
aS'Log.e(TAG, "7 - onPostExecute ...");'
p1896
aS'conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");'
p1897
aS'if (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p1898
aS'conn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());'
p1899
aS'HttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n    uee.printStackTrace();\n}'
p1900
aS'conn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n}'
p1901
aS'passwordEditText = (EditText) findViewById(R.id.login_password_editText);'
p1902
aS'String token = Static.getPrefsToken(context);'
p1903
aS'InputStream inputStream = httpResponse.getEntity().getContent();'
p1904
aS'if (v.getId() == R.id.login_clear_button) {\n    usernameEditText.setText("");\n    passwordEditText.setText("");\n    passwordEditText.setCursorVisible(false);\n    passwordEditText.setFocusable(false);\n    usernameEditText.setCursorVisible(true);\n    passwordEditText.setFocusable(true);\n} else if (v.getId() == R.id.login_sendPostReq_button) {\n    String givenUsername = usernameEditText.getEditableText().toString();\n}'
p1905
aS'String resultToDisplay = "";\nInputStream in = null;\ntry {\n    URL url = new URL(urlString);\n    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n    in = new BufferedInputStream(urlConnection.getInputStream());\n} catch (Exception e) {\n    System.out.println(e.getMessage());\n    return e.getMessage();\n}\ntry {\n    resultToDisplay = IOUtils.toString(in, "UTF-8");\n} catch (IOException e) {\n}'
p1906
aS'os.close();'
p1907
aS'conn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());'
p1908
aS'resultToDisplay = IOUtils.toString(in, "UTF-8");'
p1909
aS'public CallAPI() {\n}\n@Override\nprotected void onPreExecute() {\n    super.onPreExecute();\n}\n@Override\nprotected String doInBackground(String... params) {\n    String urlString = params[0];\n    String resultToDisplay = "";\n    InputStream in = null;\n    try {\n        URL url = new URL(urlString);\n        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n        in = new BufferedInputStream(urlConnection.getInputStream());\n    } catch (Exception e) {\n        System.out.println(e.getMessage());\n        return e.getMessage();\n    }\n    try {\n        resultToDisplay = IOUtils.toString(in, "UTF-8");\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return resultToDisplay;\n}\n@Override\nprotected void onPostExecute(String result) {\n}'
p1910
aS'StringBuilder result = new StringBuilder();\nboolean first = true;\nfor (Map.Entry<String, String> entry : params.entrySet()) {\n    if (first)\n        first = false;\n}'
p1911
aS'String paramPassword = params[1];\nSystem.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);'
p1912
aS'if (first)\n    first = false;\nelse\n    result.append("&");\nresult.append(URLEncoder.encode(entry.getKey(), "UTF-8"));'
p1913
aS'BasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n    uee.printStackTrace();\n}'
p1914
aS'conn.setRequestProperty("Content-Type", "application/json");'
p1915
aS'BasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n    uee.printStackTrace();\n}\nreturn null;'
p1916
aS'os.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n}'
p1917
aS'super.onCreate(savedInstanceState);\nsetContentView(R.layout.login);\nusernameEditText = (EditText) findViewById(R.id.login_username_editText);\npasswordEditText = (EditText) findViewById(R.id.login_password_editText);\nsendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\nsendPostReqButton.setOnClickListener(this);\nclearButton = (Button) findViewById(R.id.login_clear_button);'
p1918
aS'private Button sendPostReqButton;\nprivate Button clearButton;\n@Override\npublic void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.login);\n    usernameEditText = (EditText) findViewById(R.id.login_username_editText);\n    passwordEditText = (EditText) findViewById(R.id.login_password_editText);\n    sendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\n    sendPostReqButton.setOnClickListener(this);\n    clearButton = (Button) findViewById(R.id.login_clear_button);\n    clearButton.setOnClickListener(this);\n}\n@Override\npublic void onClick(View v) {\n    if (v.getId() == R.id.login_clear_button) {\n        usernameEditText.setText("");\n        passwordEditText.setText("");\n        passwordEditText.setCursorVisible(false);\n        passwordEditText.setFocusable(false);\n        usernameEditText.setCursorVisible(true);\n        passwordEditText.setFocusable(true);\n    } else if (v.getId() == R.id.login_sendPostReq_button) {\n        String givenUsername = usernameEditText.getEditableText().toString();\n        String givenPassword = passwordEditText.getEditableText().toString();\n        System.out.println("Given username :" + givenUsername + " Given password :" + givenPassword);\n        sendPostRequest(givenUsername, givenPassword);\n    }\n}\nprivate void sendPostRequest(String givenUsername, String givenPassword) {\n    class SendPostReqAsyncTask extends AsyncTask<String, Void, String> {\n\n        @Override\n        protected String doInBackground(String... params) {\n            String paramUsername = params[0];\n            String paramPassword = params[1];\n            System.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\n            HttpClient httpClient = new DefaultHttpClient();\n            HttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\n            BasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\n            BasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\n            List<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\n            nameValuePairList.add(usernameBasicNameValuePair);\n            nameValuePairList.add(passwordBasicNameValuePAir);\n            try {\n                UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n                httpPost.setEntity(urlEncodedFormEntity);\n                try {\n                    HttpResponse httpResponse = httpClient.execute(httpPost);\n                    InputStream inputStream = httpResponse.getEntity().getContent();\n                    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n                    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n                    StringBuilder stringBuilder = new StringBuilder();\n                    String bufferedStrChunk = null;\n                    while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n                        stringBuilder.append(bufferedStrChunk);\n                    }\n                    return stringBuilder.toString();\n                } catch (ClientProtocolException cpe) {\n                    System.out.println("First Exception caz of HttpResponese :" + cpe);\n                    cpe.printStackTrace();\n                } catch (IOException ioe) {\n                    System.out.println("Second Exception caz of HttpResponse :" + ioe);\n                    ioe.printStackTrace();\n                }\n            } catch (UnsupportedEncodingException uee) {\n                System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n                uee.printStackTrace();\n            }\n            return null;\n        }\n\n        @Override\n        protected void onPostExecute(String result) {\n            super.onPostExecute(result);\n            if (result.equals("working")) {\n                Toast.makeText(getApplicationContext(), "HTTP POST is working...", Toast.LENGTH_LONG).show();\n            } else {\n                Toast.makeText(getApplicationContext(), "Invalid POST req...", Toast.LENGTH_LONG).show();\n            }\n        }\n    }\n    SendPostReqAsyncTask sendPostReqAsyncTask = new SendPostReqAsyncTask();\n    sendPostReqAsyncTask.execute(givenUsername, givenPassword);\n}'
p1919
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");'
p1920
aS'Log.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);'
p1921
aS'System.out.println("Second Exception caz of HttpResponse :" + ioe);\nioe.printStackTrace();'
p1922
aS'System.out.println("Given username :" + givenUsername + " Given password :" + givenPassword);\nsendPostRequest(givenUsername, givenPassword);'
p1923
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());'
p1924
aS'Log.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);'
p1925
aS'{\n    put("Accept", "application/json");\n}'
p1926
aS'for (Map.Entry<String, String> entry : params.entrySet()) {\n    if (first)\n        first = false;\n}'
p1927
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));'
p1928
aS'os.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p1929
aS'BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();'
p1930
aS'if (first)\n    first = false;\nelse\n    result.append("&");\nresult.append(URLEncoder.encode(entry.getKey(), "UTF-8"));\nresult.append("=");'
p1931
aS'JSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n}'
p1932
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);'
p1933
aS'HttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();'
p1934
aS'conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n}'
p1935
aS'writer.write(getPostDataString(postDataParams));\nwriter.flush();'
p1936
aS'put("Accept", "application/json");\nput("Content-Type", "application/json");'
p1937
aS'Log.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n}'
p1938
aS'passwordEditText.setText("");'
p1939
aS'try {\n    HttpResponse httpResponse = httpClient.execute(httpPost);\n    InputStream inputStream = httpResponse.getEntity().getContent();\n    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n    StringBuilder stringBuilder = new StringBuilder();\n    String bufferedStrChunk = null;\n    while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n        stringBuilder.append(bufferedStrChunk);\n    }\n    return stringBuilder.toString();\n} catch (ClientProtocolException cpe) {\n    System.out.println("First Exception caz of HttpResponese :" + cpe);\n    cpe.printStackTrace();\n} catch (IOException ioe) {\n    System.out.println("Second Exception caz of HttpResponse :" + ioe);\n    ioe.printStackTrace();\n}'
p1940
aS'public Empty(Context contex, int advertisementId) {\n    this.context = contex;\n    this.advertisementId = advertisementId;\n}'
p1941
aS'BasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n}'
p1942
aS'BasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n}'
p1943
aS'conn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n}'
p1944
aS'if (v.getId() == R.id.login_clear_button) {\n    usernameEditText.setText("");\n    passwordEditText.setText("");\n    passwordEditText.setCursorVisible(false);\n    passwordEditText.setFocusable(false);\n    usernameEditText.setCursorVisible(true);\n}'
p1945
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();'
p1946
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();'
p1947
aS'try {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}\nLog.e(TAG, "5 - after Response...");\nif (!response.equalsIgnoreCase("")) {\n    try {\n        Log.e(TAG, "6 - response !empty...");\n        JSONObject jRoot = new JSONObject(response);\n        JSONObject d = jRoot.getJSONObject("d");\n        int ResultType = d.getInt("ResultType");\n        Log.e("ResultType", ResultType + "");\n        if (ResultType == 1) {\n            status = true;\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, "Error " + e.getMessage());\n    } finally {\n    }\n} else {\n    Log.e(TAG, "6 - response is empty...");\n}'
p1948
aS'private Button clearButton;\n@Override\npublic void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.login);\n    usernameEditText = (EditText) findViewById(R.id.login_username_editText);\n    passwordEditText = (EditText) findViewById(R.id.login_password_editText);\n    sendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\n    sendPostReqButton.setOnClickListener(this);\n    clearButton = (Button) findViewById(R.id.login_clear_button);\n    clearButton.setOnClickListener(this);\n}\n@Override\npublic void onClick(View v) {\n    if (v.getId() == R.id.login_clear_button) {\n        usernameEditText.setText("");\n        passwordEditText.setText("");\n        passwordEditText.setCursorVisible(false);\n        passwordEditText.setFocusable(false);\n        usernameEditText.setCursorVisible(true);\n        passwordEditText.setFocusable(true);\n    } else if (v.getId() == R.id.login_sendPostReq_button) {\n        String givenUsername = usernameEditText.getEditableText().toString();\n        String givenPassword = passwordEditText.getEditableText().toString();\n        System.out.println("Given username :" + givenUsername + " Given password :" + givenPassword);\n        sendPostRequest(givenUsername, givenPassword);\n    }\n}\nprivate void sendPostRequest(String givenUsername, String givenPassword) {\n    class SendPostReqAsyncTask extends AsyncTask<String, Void, String> {\n\n        @Override\n        protected String doInBackground(String... params) {\n            String paramUsername = params[0];\n            String paramPassword = params[1];\n            System.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\n            HttpClient httpClient = new DefaultHttpClient();\n            HttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\n            BasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\n            BasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\n            List<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\n            nameValuePairList.add(usernameBasicNameValuePair);\n            nameValuePairList.add(passwordBasicNameValuePAir);\n            try {\n                UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n                httpPost.setEntity(urlEncodedFormEntity);\n                try {\n                    HttpResponse httpResponse = httpClient.execute(httpPost);\n                    InputStream inputStream = httpResponse.getEntity().getContent();\n                    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n                    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n                    StringBuilder stringBuilder = new StringBuilder();\n                    String bufferedStrChunk = null;\n                    while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n                        stringBuilder.append(bufferedStrChunk);\n                    }\n                    return stringBuilder.toString();\n                } catch (ClientProtocolException cpe) {\n                    System.out.println("First Exception caz of HttpResponese :" + cpe);\n                    cpe.printStackTrace();\n                } catch (IOException ioe) {\n                    System.out.println("Second Exception caz of HttpResponse :" + ioe);\n                    ioe.printStackTrace();\n                }\n            } catch (UnsupportedEncodingException uee) {\n                System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n                uee.printStackTrace();\n            }\n            return null;\n        }\n\n        @Override\n        protected void onPostExecute(String result) {\n            super.onPostExecute(result);\n            if (result.equals("working")) {\n                Toast.makeText(getApplicationContext(), "HTTP POST is working...", Toast.LENGTH_LONG).show();\n            } else {\n                Toast.makeText(getApplicationContext(), "Invalid POST req...", Toast.LENGTH_LONG).show();\n            }\n        }\n    }\n    SendPostReqAsyncTask sendPostReqAsyncTask = new SendPostReqAsyncTask();\n    sendPostReqAsyncTask.execute(givenUsername, givenPassword);\n}'
p1949
aS'if (result.equals("working")) {\n}'
p1950
aS'String paramPassword = params[1];\nSystem.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();'
p1951
aS'boolean status = false;\nString response = "";\nLog.e(TAG, "2 - pre Request to response...");\ntry {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}\nLog.e(TAG, "5 - after Response...");\nif (!response.equalsIgnoreCase("")) {\n}'
p1952
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p1953
aS'conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");'
p1954
aS'Log.e(TAG, "14 - HTTP_OK");\nString line;\nBufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\nwhile ((line = br.readLine()) != null) {\n    response += line;\n}'
p1955
aS'nameValuePairs.add(new BasicNameValuePair("stringdata", "Hi"));\nhttppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));\nHttpResponse response = httpclient.execute(httppost);'
p1956
aS'conn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n}'
p1957
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);'
p1958
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p1959
aS'public String performPostCall(String requestURL, HashMap<String, String> postDataParams) {\n    URL url;\n    String response = "";\n    try {\n        url = new URL(requestURL);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setReadTimeout(15000);\n        conn.setConnectTimeout(15000);\n        conn.setRequestMethod("GET");\n        conn.setDoInput(true);\n        conn.setDoOutput(true);\n        OutputStream os = conn.getOutputStream();\n        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\n        writer.write(getPostDataString(postDataParams));\n        writer.flush();\n        writer.close();\n        os.close();\n        int responseCode = conn.getResponseCode();\n        if (responseCode == HttpsURLConnection.HTTP_OK) {\n            String line;\n            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            while ((line = br.readLine()) != null) {\n                response += line;\n            }\n        } else {\n            response = "";\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return response;\n}'
p1960
aS'int ResultType = d.getInt("ResultType");\nLog.e("ResultType", ResultType + "");'
p1961
aS'System.out.println(e.getMessage());'
p1962
aS'String str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p1963
aS'Log.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p1964
aS'Log.e(TAG, "14 - False - HTTP_OK");'
p1965
aS'HttpPost httppost = new HttpPost("http://www.yoursite.com/script.php");\ntry {\n    List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\n    nameValuePairs.add(new BasicNameValuePair("id", "12345"));\n    nameValuePairs.add(new BasicNameValuePair("stringdata", "Hi"));\n    httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n    HttpResponse response = httpclient.execute(httppost);\n} catch (ClientProtocolException e) {\n} catch (IOException e) {\n}'
p1966
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);'
p1967
aS'private EditText usernameEditText;\nprivate EditText passwordEditText;\nprivate Button sendPostReqButton;\nprivate Button clearButton;\n@Override\npublic void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.login);\n    usernameEditText = (EditText) findViewById(R.id.login_username_editText);\n    passwordEditText = (EditText) findViewById(R.id.login_password_editText);\n    sendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\n    sendPostReqButton.setOnClickListener(this);\n    clearButton = (Button) findViewById(R.id.login_clear_button);\n    clearButton.setOnClickListener(this);\n}\n@Override\npublic void onClick(View v) {\n    if (v.getId() == R.id.login_clear_button) {\n        usernameEditText.setText("");\n        passwordEditText.setText("");\n        passwordEditText.setCursorVisible(false);\n        passwordEditText.setFocusable(false);\n        usernameEditText.setCursorVisible(true);\n        passwordEditText.setFocusable(true);\n    } else if (v.getId() == R.id.login_sendPostReq_button) {\n        String givenUsername = usernameEditText.getEditableText().toString();\n        String givenPassword = passwordEditText.getEditableText().toString();\n        System.out.println("Given username :" + givenUsername + " Given password :" + givenPassword);\n        sendPostRequest(givenUsername, givenPassword);\n    }\n}'
p1968
aS'List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\nnameValuePairs.add(new BasicNameValuePair("id", "12345"));\nnameValuePairs.add(new BasicNameValuePair("stringdata", "Hi"));\nhttppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));\nHttpResponse response = httpclient.execute(httppost);'
p1969
aS'JSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));'
p1970
aS'System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\nuee.printStackTrace();'
p1971
aS'conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();'
p1972
aS'int responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p1973
aS'HttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n}'
p1974
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();'
p1975
aS'setContentView(R.layout.login);\nusernameEditText = (EditText) findViewById(R.id.login_username_editText);\npasswordEditText = (EditText) findViewById(R.id.login_password_editText);\nsendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);'
p1976
aS'conn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();'
p1977
aS'conn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n}'
p1978
aS'Log.e(TAG, "6 - response is empty...");'
p1979
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);'
p1980
aS'protected void onPostExecute(String result) {\n}'
p1981
aS'Log.e(TAG, "13 - responseCode : " + responseCode);'
p1982
aS'private final String TAG = "post json example";\nprivate Context context;\nprivate int advertisementId;\npublic Empty(Context contex, int advertisementId) {\n    this.context = contex;\n    this.advertisementId = advertisementId;\n}\n@Override\nprotected void onPreExecute() {\n    Log.e(TAG, "1 - RequestVoteTask is about to start...");\n}'
p1983
aS'String paramUsername = params[0];\nString paramPassword = params[1];\nSystem.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);'
p1984
aS'String line;\nBufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\nwhile ((line = br.readLine()) != null) {\n}'
p1985
aS'if (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n    response = "";\n}'
p1986
aS'protected void onPreExecute() {\n    Log.e(TAG, "1 - RequestVoteTask is about to start...");\n}\n@Override\nprotected Boolean doInBackground(Void... params) {\n    boolean status = false;\n    String response = "";\n    Log.e(TAG, "2 - pre Request to response...");\n    try {\n        response = performPostCall(urlString, new HashMap<String, String>() {\n\n            private static final long serialVersionUID = 1L;\n\n            {\n                put("Accept", "application/json");\n                put("Content-Type", "application/json");\n            }\n        });\n        Log.e(TAG, "3 - give Response...");\n        Log.e(TAG, "4 " + response.toString());\n    } catch (Exception e) {\n        Log.e(TAG, "Error ...");\n    }\n    Log.e(TAG, "5 - after Response...");\n    if (!response.equalsIgnoreCase("")) {\n        try {\n            Log.e(TAG, "6 - response !empty...");\n            JSONObject jRoot = new JSONObject(response);\n            JSONObject d = jRoot.getJSONObject("d");\n            int ResultType = d.getInt("ResultType");\n            Log.e("ResultType", ResultType + "");\n            if (ResultType == 1) {\n                status = true;\n            }\n        } catch (JSONException e) {\n            Log.e(TAG, "Error " + e.getMessage());\n        } finally {\n        }\n    } else {\n        Log.e(TAG, "6 - response is empty...");\n        status = false;\n    }\n    return status;\n}\n@Override\nprotected void onPostExecute(Boolean result) {\n    Log.e(TAG, "7 - onPostExecute ...");\n    if (result) {\n        Log.e(TAG, "8 - Update UI ...");\n    } else {\n        Log.e(TAG, "8 - Finish ...");\n    }\n}'
p1987
aS'HttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n}'
p1988
aS'private final String TAG = "post json example";'
p1989
aS'byte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n}'
p1990
aS'conn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();'
p1991
aS'String urlString = "http://www.yoursite.com/";\nprivate final String TAG = "post json example";\nprivate Context context;\nprivate int advertisementId;'
p1992
aS'if (ResultType == 1) {\n}'
p1993
aS'sendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);'
p1994
aS'if (v.getId() == R.id.login_clear_button) {\n    usernameEditText.setText("");\n    passwordEditText.setText("");\n}'
p1995
aS'Log.e(TAG, "5 - after Response...");\nif (!response.equalsIgnoreCase("")) {\n    try {\n        Log.e(TAG, "6 - response !empty...");\n        JSONObject jRoot = new JSONObject(response);\n        JSONObject d = jRoot.getJSONObject("d");\n        int ResultType = d.getInt("ResultType");\n        Log.e("ResultType", ResultType + "");\n        if (ResultType == 1) {\n            status = true;\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, "Error " + e.getMessage());\n    } finally {\n    }\n} else {\n    Log.e(TAG, "6 - response is empty...");\n    status = false;\n}\nreturn status;'
p1996
aS'List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\nnameValuePairs.add(new BasicNameValuePair("id", "12345"));\nnameValuePairs.add(new BasicNameValuePair("stringdata", "Hi"));'
p1997
aS'root.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();'
p1998
aS'private Button clearButton;\n@Override\npublic void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.login);\n    usernameEditText = (EditText) findViewById(R.id.login_username_editText);\n    passwordEditText = (EditText) findViewById(R.id.login_password_editText);\n    sendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\n    sendPostReqButton.setOnClickListener(this);\n    clearButton = (Button) findViewById(R.id.login_clear_button);\n    clearButton.setOnClickListener(this);\n}'
p1999
aS'super.onPostExecute(result);\nif (result.equals("working")) {\n}'
p2000
aS'if (!response.equalsIgnoreCase("")) {\n    try {\n        Log.e(TAG, "6 - response !empty...");\n        JSONObject jRoot = new JSONObject(response);\n        JSONObject d = jRoot.getJSONObject("d");\n        int ResultType = d.getInt("ResultType");\n        Log.e("ResultType", ResultType + "");\n        if (ResultType == 1) {\n            status = true;\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, "Error " + e.getMessage());\n    } finally {\n    }\n} else {\n    Log.e(TAG, "6 - response is empty...");\n}'
p2001
aS'conn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);'
p2002
aS'try {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n    uee.printStackTrace();\n}'
p2003
aS'String urlString = params[0];\nString resultToDisplay = "";\nInputStream in = null;\ntry {\n    URL url = new URL(urlString);\n    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n    in = new BufferedInputStream(urlConnection.getInputStream());\n} catch (Exception e) {\n}'
p2004
aS'Log.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p2005
aS'root.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p2006
aS'HttpClient httpclient = new DefaultHttpClient();'
p2007
aS'conn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();'
p2008
aS'Log.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();'
p2009
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n}'
p2010
aS'Log.e(TAG, "5 - after Response...");\nif (!response.equalsIgnoreCase("")) {\n    try {\n        Log.e(TAG, "6 - response !empty...");\n        JSONObject jRoot = new JSONObject(response);\n        JSONObject d = jRoot.getJSONObject("d");\n        int ResultType = d.getInt("ResultType");\n        Log.e("ResultType", ResultType + "");\n        if (ResultType == 1) {\n            status = true;\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, "Error " + e.getMessage());\n    } finally {\n    }\n} else {\n    Log.e(TAG, "6 - response is empty...");\n    status = false;\n}'
p2011
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);'
p2012
aS'conn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p2013
aS'return result.toString();'
p2014
aS'Log.e(TAG, "2 - pre Request to response...");\ntry {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}\nLog.e(TAG, "5 - after Response...");\nif (!response.equalsIgnoreCase("")) {\n    try {\n        Log.e(TAG, "6 - response !empty...");\n        JSONObject jRoot = new JSONObject(response);\n        JSONObject d = jRoot.getJSONObject("d");\n        int ResultType = d.getInt("ResultType");\n        Log.e("ResultType", ResultType + "");\n        if (ResultType == 1) {\n            status = true;\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, "Error " + e.getMessage());\n    } finally {\n    }\n}'
p2015
aS'Log.e(TAG, "5 - after Response...");\nif (!response.equalsIgnoreCase("")) {\n    try {\n        Log.e(TAG, "6 - response !empty...");\n        JSONObject jRoot = new JSONObject(response);\n        JSONObject d = jRoot.getJSONObject("d");\n        int ResultType = d.getInt("ResultType");\n        Log.e("ResultType", ResultType + "");\n        if (ResultType == 1) {\n            status = true;\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, "Error " + e.getMessage());\n    } finally {\n    }\n}'
p2016
aS'conn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));'
p2017
aS'return stringBuilder.toString();'
p2018
aS'clearButton = (Button) findViewById(R.id.login_clear_button);'
p2019
aS'writer.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p2020
aS'Log.e(TAG, "6 - response !empty...");\nJSONObject jRoot = new JSONObject(response);\nJSONObject d = jRoot.getJSONObject("d");\nint ResultType = d.getInt("ResultType");\nLog.e("ResultType", ResultType + "");\nif (ResultType == 1) {\n}'
p2021
aS'writer.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    response = "";\n}'
p2022
aS'usernameEditText.setText("");\npasswordEditText.setText("");\npasswordEditText.setCursorVisible(false);\npasswordEditText.setFocusable(false);'
p2023
aS'conn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n    response = "";\n}'
p2024
aS'String token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p2025
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));'
p2026
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n    response = "";\n}'
p2027
aS'root.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);'
p2028
aS'String paramUsername = params[0];\nString paramPassword = params[1];\nSystem.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();'
p2029
aS'Log.e(TAG, "5 - after Response...");\nif (!response.equalsIgnoreCase("")) {\n    try {\n        Log.e(TAG, "6 - response !empty...");\n        JSONObject jRoot = new JSONObject(response);\n        JSONObject d = jRoot.getJSONObject("d");\n        int ResultType = d.getInt("ResultType");\n        Log.e("ResultType", ResultType + "");\n        if (ResultType == 1) {\n            status = true;\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, "Error " + e.getMessage());\n    } finally {\n    }\n} else {\n    Log.e(TAG, "6 - response is empty...");\n}'
p2030
aS'try {\n    URL url = new URL(urlString);\n    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n    in = new BufferedInputStream(urlConnection.getInputStream());\n} catch (Exception e) {\n    System.out.println(e.getMessage());\n    return e.getMessage();\n}\ntry {\n    resultToDisplay = IOUtils.toString(in, "UTF-8");\n} catch (IOException e) {\n    e.printStackTrace();\n}\nreturn resultToDisplay;'
p2031
aS'conn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));'
p2032
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();'
p2033
aS'Log.e(TAG, "5 - after Response...");'
p2034
aS'public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.login);\n    usernameEditText = (EditText) findViewById(R.id.login_username_editText);\n    passwordEditText = (EditText) findViewById(R.id.login_password_editText);\n    sendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\n    sendPostReqButton.setOnClickListener(this);\n    clearButton = (Button) findViewById(R.id.login_clear_button);\n    clearButton.setOnClickListener(this);\n}\n@Override\npublic void onClick(View v) {\n    if (v.getId() == R.id.login_clear_button) {\n        usernameEditText.setText("");\n        passwordEditText.setText("");\n        passwordEditText.setCursorVisible(false);\n        passwordEditText.setFocusable(false);\n        usernameEditText.setCursorVisible(true);\n        passwordEditText.setFocusable(true);\n    } else if (v.getId() == R.id.login_sendPostReq_button) {\n        String givenUsername = usernameEditText.getEditableText().toString();\n        String givenPassword = passwordEditText.getEditableText().toString();\n        System.out.println("Given username :" + givenUsername + " Given password :" + givenPassword);\n        sendPostRequest(givenUsername, givenPassword);\n    }\n}'
p2035
aS'conn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p2036
aS'conn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n}'
p2037
aS'conn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p2038
aS'passwordEditText = (EditText) findViewById(R.id.login_password_editText);\nsendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);'
p2039
aS'os.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    response = "";\n}'
p2040
aS'Log.e(TAG, "2 - pre Request to response...");'
p2041
aS'conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);'
p2042
aS'conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);'
p2043
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);'
p2044
aS'String urlString = params[0];\nString resultToDisplay = "";\nInputStream in = null;\ntry {\n    URL url = new URL(urlString);\n    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n    in = new BufferedInputStream(urlConnection.getInputStream());\n} catch (Exception e) {\n    System.out.println(e.getMessage());\n}'
p2045
aS'try {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n}'
p2046
aS'os.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p2047
aS'nameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n    uee.printStackTrace();\n}'
p2048
aS'if (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p2049
aS'return null;'
p2050
aS'conn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p2051
aS'try {\n    resultToDisplay = IOUtils.toString(in, "UTF-8");\n} catch (IOException e) {\n    e.printStackTrace();\n}\nreturn resultToDisplay;'
p2052
aS'httpPost.setEntity(urlEncodedFormEntity);\ntry {\n    HttpResponse httpResponse = httpClient.execute(httpPost);\n    InputStream inputStream = httpResponse.getEntity().getContent();\n    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n    StringBuilder stringBuilder = new StringBuilder();\n    String bufferedStrChunk = null;\n    while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n        stringBuilder.append(bufferedStrChunk);\n    }\n    return stringBuilder.toString();\n} catch (ClientProtocolException cpe) {\n    System.out.println("First Exception caz of HttpResponese :" + cpe);\n    cpe.printStackTrace();\n} catch (IOException ioe) {\n}'
p2053
aS'boolean first = true;\nfor (Map.Entry<String, String> entry : params.entrySet()) {\n    if (first)\n        first = false;\n    else\n        result.append("&");\n    result.append(URLEncoder.encode(entry.getKey(), "UTF-8"));\n    result.append("=");\n    result.append(URLEncoder.encode(entry.getValue(), "UTF-8"));\n}\nreturn result.toString();'
p2054
aS'UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\nhttpPost.setEntity(urlEncodedFormEntity);\ntry {\n    HttpResponse httpResponse = httpClient.execute(httpPost);\n    InputStream inputStream = httpResponse.getEntity().getContent();\n    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n    StringBuilder stringBuilder = new StringBuilder();\n    String bufferedStrChunk = null;\n    while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n        stringBuilder.append(bufferedStrChunk);\n    }\n    return stringBuilder.toString();\n} catch (ClientProtocolException cpe) {\n    System.out.println("First Exception caz of HttpResponese :" + cpe);\n    cpe.printStackTrace();\n} catch (IOException ioe) {\n}'
p2055
aS'int responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p2056
aS'OutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p2057
aS'conn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);'
p2058
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();'
p2059
aS'for (Map.Entry<String, String> entry : params.entrySet()) {\n    if (first)\n        first = false;\n    else\n        result.append("&");\n    result.append(URLEncoder.encode(entry.getKey(), "UTF-8"));\n    result.append("=");\n    result.append(URLEncoder.encode(entry.getValue(), "UTF-8"));\n}\nreturn result.toString();'
p2060
aS'private EditText passwordEditText;\nprivate Button sendPostReqButton;\nprivate Button clearButton;\n@Override\npublic void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.login);\n    usernameEditText = (EditText) findViewById(R.id.login_username_editText);\n    passwordEditText = (EditText) findViewById(R.id.login_password_editText);\n    sendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\n    sendPostReqButton.setOnClickListener(this);\n    clearButton = (Button) findViewById(R.id.login_clear_button);\n    clearButton.setOnClickListener(this);\n}\n@Override\npublic void onClick(View v) {\n    if (v.getId() == R.id.login_clear_button) {\n        usernameEditText.setText("");\n        passwordEditText.setText("");\n        passwordEditText.setCursorVisible(false);\n        passwordEditText.setFocusable(false);\n        usernameEditText.setCursorVisible(true);\n        passwordEditText.setFocusable(true);\n    } else if (v.getId() == R.id.login_sendPostReq_button) {\n        String givenUsername = usernameEditText.getEditableText().toString();\n        String givenPassword = passwordEditText.getEditableText().toString();\n        System.out.println("Given username :" + givenUsername + " Given password :" + givenPassword);\n        sendPostRequest(givenUsername, givenPassword);\n    }\n}\nprivate void sendPostRequest(String givenUsername, String givenPassword) {\n    class SendPostReqAsyncTask extends AsyncTask<String, Void, String> {\n\n        @Override\n        protected String doInBackground(String... params) {\n            String paramUsername = params[0];\n            String paramPassword = params[1];\n            System.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\n            HttpClient httpClient = new DefaultHttpClient();\n            HttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\n            BasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\n            BasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\n            List<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\n            nameValuePairList.add(usernameBasicNameValuePair);\n            nameValuePairList.add(passwordBasicNameValuePAir);\n            try {\n                UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n                httpPost.setEntity(urlEncodedFormEntity);\n                try {\n                    HttpResponse httpResponse = httpClient.execute(httpPost);\n                    InputStream inputStream = httpResponse.getEntity().getContent();\n                    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n                    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n                    StringBuilder stringBuilder = new StringBuilder();\n                    String bufferedStrChunk = null;\n                    while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n                        stringBuilder.append(bufferedStrChunk);\n                    }\n                    return stringBuilder.toString();\n                } catch (ClientProtocolException cpe) {\n                    System.out.println("First Exception caz of HttpResponese :" + cpe);\n                    cpe.printStackTrace();\n                } catch (IOException ioe) {\n                    System.out.println("Second Exception caz of HttpResponse :" + ioe);\n                    ioe.printStackTrace();\n                }\n            } catch (UnsupportedEncodingException uee) {\n                System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n                uee.printStackTrace();\n            }\n            return null;\n        }\n\n        @Override\n        protected void onPostExecute(String result) {\n            super.onPostExecute(result);\n            if (result.equals("working")) {\n                Toast.makeText(getApplicationContext(), "HTTP POST is working...", Toast.LENGTH_LONG).show();\n            } else {\n                Toast.makeText(getApplicationContext(), "Invalid POST req...", Toast.LENGTH_LONG).show();\n            }\n        }\n    }\n    SendPostReqAsyncTask sendPostReqAsyncTask = new SendPostReqAsyncTask();\n    sendPostReqAsyncTask.execute(givenUsername, givenPassword);\n}'
p2061
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p2062
aS'passwordEditText.setText("");\npasswordEditText.setCursorVisible(false);\npasswordEditText.setFocusable(false);'
p2063
aS'JSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p2064
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);'
p2065
aS'if (result.equals("working")) {\n    Toast.makeText(getApplicationContext(), "HTTP POST is working...", Toast.LENGTH_LONG).show();\n} else {\n    Toast.makeText(getApplicationContext(), "Invalid POST req...", Toast.LENGTH_LONG).show();\n}'
p2066
aS'BasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);'
p2067
aS'JSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");'
p2068
aS'conn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();'
p2069
aS'return response;'
p2070
aS'private Context context;\nprivate int advertisementId;\npublic Empty(Context contex, int advertisementId) {\n    this.context = contex;\n    this.advertisementId = advertisementId;\n}'
p2071
aS'String paramPassword = params[1];\nSystem.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);'
p2072
aS'BasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);'
p2073
aS'String paramUsername = params[0];'
p2074
aS'try {\n    URL url = new URL(urlString);\n    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n    in = new BufferedInputStream(urlConnection.getInputStream());\n} catch (Exception e) {\n    System.out.println(e.getMessage());\n}'
p2075
aS'OutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);'
p2076
aS'public CallAPI() {\n}'
p2077
aS'first = false;'
p2078
aS'conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());'
p2079
aS'conn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();'
p2080
aS'conn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();'
p2081
aS'private EditText passwordEditText;\nprivate Button sendPostReqButton;'
p2082
aS'HttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n}'
p2083
aS'Log.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n}'
p2084
aS'if (!response.equalsIgnoreCase("")) {\n}'
p2085
aS'writer.close();\nos.close();\nint responseCode = conn.getResponseCode();'
p2086
aS'passwordEditText.setCursorVisible(false);\npasswordEditText.setFocusable(false);\nusernameEditText.setCursorVisible(true);\npasswordEditText.setFocusable(true);'
p2087
aS'if (result.equals("working")) {\n    Toast.makeText(getApplicationContext(), "HTTP POST is working...", Toast.LENGTH_LONG).show();\n} else {\n}'
p2088
aS'Log.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));'
p2089
aS'conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();'
p2090
aS'conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p2091
aS'HttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");'
p2092
aS'InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\nBufferedReader bufferedReader = new BufferedReader(inputStreamReader);'
p2093
aS'os.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p2094
aS'usernameEditText = (EditText) findViewById(R.id.login_username_editText);\npasswordEditText = (EditText) findViewById(R.id.login_password_editText);\nsendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\nsendPostReqButton.setOnClickListener(this);\nclearButton = (Button) findViewById(R.id.login_clear_button);'
p2095
aS'String str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n}'
p2096
aS'conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);'
p2097
aS'if (first)\n    first = false;\nelse {\n}'
p2098
aS'@Override\nprotected String doInBackground(String... params) {\n    String urlString = params[0];\n    String resultToDisplay = "";\n    InputStream in = null;\n    try {\n        URL url = new URL(urlString);\n        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n        in = new BufferedInputStream(urlConnection.getInputStream());\n    } catch (Exception e) {\n        System.out.println(e.getMessage());\n        return e.getMessage();\n    }\n    try {\n        resultToDisplay = IOUtils.toString(in, "UTF-8");\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return resultToDisplay;\n}\n@Override\nprotected void onPostExecute(String result) {\n}'
p2099
aS'super.onCreate(savedInstanceState);\nsetContentView(R.layout.login);\nusernameEditText = (EditText) findViewById(R.id.login_username_editText);'
p2100
aS'BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));'
p2101
aS'conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));'
p2102
aS'conn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n}'
p2103
aS'UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\nhttpPost.setEntity(urlEncodedFormEntity);\ntry {\n    HttpResponse httpResponse = httpClient.execute(httpPost);\n    InputStream inputStream = httpResponse.getEntity().getContent();\n    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n    StringBuilder stringBuilder = new StringBuilder();\n    String bufferedStrChunk = null;\n    while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n        stringBuilder.append(bufferedStrChunk);\n    }\n    return stringBuilder.toString();\n} catch (ClientProtocolException cpe) {\n    System.out.println("First Exception caz of HttpResponese :" + cpe);\n    cpe.printStackTrace();\n} catch (IOException ioe) {\n    System.out.println("Second Exception caz of HttpResponse :" + ioe);\n    ioe.printStackTrace();\n}'
p2104
aS'conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p2105
aS'private EditText usernameEditText;\nprivate EditText passwordEditText;\nprivate Button sendPostReqButton;\nprivate Button clearButton;\n@Override\npublic void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.login);\n    usernameEditText = (EditText) findViewById(R.id.login_username_editText);\n    passwordEditText = (EditText) findViewById(R.id.login_password_editText);\n    sendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\n    sendPostReqButton.setOnClickListener(this);\n    clearButton = (Button) findViewById(R.id.login_clear_button);\n    clearButton.setOnClickListener(this);\n}\n@Override\npublic void onClick(View v) {\n    if (v.getId() == R.id.login_clear_button) {\n        usernameEditText.setText("");\n        passwordEditText.setText("");\n        passwordEditText.setCursorVisible(false);\n        passwordEditText.setFocusable(false);\n        usernameEditText.setCursorVisible(true);\n        passwordEditText.setFocusable(true);\n    } else if (v.getId() == R.id.login_sendPostReq_button) {\n        String givenUsername = usernameEditText.getEditableText().toString();\n        String givenPassword = passwordEditText.getEditableText().toString();\n        System.out.println("Given username :" + givenUsername + " Given password :" + givenPassword);\n        sendPostRequest(givenUsername, givenPassword);\n    }\n}\nprivate void sendPostRequest(String givenUsername, String givenPassword) {\n    class SendPostReqAsyncTask extends AsyncTask<String, Void, String> {\n\n        @Override\n        protected String doInBackground(String... params) {\n            String paramUsername = params[0];\n            String paramPassword = params[1];\n            System.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\n            HttpClient httpClient = new DefaultHttpClient();\n            HttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\n            BasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\n            BasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\n            List<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\n            nameValuePairList.add(usernameBasicNameValuePair);\n            nameValuePairList.add(passwordBasicNameValuePAir);\n            try {\n                UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n                httpPost.setEntity(urlEncodedFormEntity);\n                try {\n                    HttpResponse httpResponse = httpClient.execute(httpPost);\n                    InputStream inputStream = httpResponse.getEntity().getContent();\n                    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n                    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n                    StringBuilder stringBuilder = new StringBuilder();\n                    String bufferedStrChunk = null;\n                    while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n                        stringBuilder.append(bufferedStrChunk);\n                    }\n                    return stringBuilder.toString();\n                } catch (ClientProtocolException cpe) {\n                    System.out.println("First Exception caz of HttpResponese :" + cpe);\n                    cpe.printStackTrace();\n                } catch (IOException ioe) {\n                    System.out.println("Second Exception caz of HttpResponse :" + ioe);\n                    ioe.printStackTrace();\n                }\n            } catch (UnsupportedEncodingException uee) {\n                System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n                uee.printStackTrace();\n            }\n            return null;\n        }\n\n        @Override\n        protected void onPostExecute(String result) {\n            super.onPostExecute(result);\n            if (result.equals("working")) {\n                Toast.makeText(getApplicationContext(), "HTTP POST is working...", Toast.LENGTH_LONG).show();\n            } else {\n                Toast.makeText(getApplicationContext(), "Invalid POST req...", Toast.LENGTH_LONG).show();\n            }\n        }\n    }\n    SendPostReqAsyncTask sendPostReqAsyncTask = new SendPostReqAsyncTask();\n    sendPostReqAsyncTask.execute(givenUsername, givenPassword);\n}'
p2106
aS'public Empty(Context contex, int advertisementId) {\n    this.context = contex;\n    this.advertisementId = advertisementId;\n}\n@Override\nprotected void onPreExecute() {\n    Log.e(TAG, "1 - RequestVoteTask is about to start...");\n}\n@Override\nprotected Boolean doInBackground(Void... params) {\n    boolean status = false;\n    String response = "";\n    Log.e(TAG, "2 - pre Request to response...");\n    try {\n        response = performPostCall(urlString, new HashMap<String, String>() {\n\n            private static final long serialVersionUID = 1L;\n\n            {\n                put("Accept", "application/json");\n                put("Content-Type", "application/json");\n            }\n        });\n        Log.e(TAG, "3 - give Response...");\n        Log.e(TAG, "4 " + response.toString());\n    } catch (Exception e) {\n        Log.e(TAG, "Error ...");\n    }\n    Log.e(TAG, "5 - after Response...");\n    if (!response.equalsIgnoreCase("")) {\n        try {\n            Log.e(TAG, "6 - response !empty...");\n            JSONObject jRoot = new JSONObject(response);\n            JSONObject d = jRoot.getJSONObject("d");\n            int ResultType = d.getInt("ResultType");\n            Log.e("ResultType", ResultType + "");\n            if (ResultType == 1) {\n                status = true;\n            }\n        } catch (JSONException e) {\n            Log.e(TAG, "Error " + e.getMessage());\n        } finally {\n        }\n    } else {\n        Log.e(TAG, "6 - response is empty...");\n        status = false;\n    }\n    return status;\n}'
p2107
aS'@Override\nprotected String doInBackground(String... params) {\n    String paramUsername = params[0];\n    String paramPassword = params[1];\n    System.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\n    HttpClient httpClient = new DefaultHttpClient();\n    HttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\n    BasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\n    BasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\n    List<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\n    nameValuePairList.add(usernameBasicNameValuePair);\n    nameValuePairList.add(passwordBasicNameValuePAir);\n    try {\n        UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n        httpPost.setEntity(urlEncodedFormEntity);\n        try {\n            HttpResponse httpResponse = httpClient.execute(httpPost);\n            InputStream inputStream = httpResponse.getEntity().getContent();\n            InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n            StringBuilder stringBuilder = new StringBuilder();\n            String bufferedStrChunk = null;\n            while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n                stringBuilder.append(bufferedStrChunk);\n            }\n            return stringBuilder.toString();\n        } catch (ClientProtocolException cpe) {\n            System.out.println("First Exception caz of HttpResponese :" + cpe);\n            cpe.printStackTrace();\n        } catch (IOException ioe) {\n            System.out.println("Second Exception caz of HttpResponse :" + ioe);\n            ioe.printStackTrace();\n        }\n    } catch (UnsupportedEncodingException uee) {\n        System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n        uee.printStackTrace();\n    }\n    return null;\n}\n@Override\nprotected void onPostExecute(String result) {\n    super.onPostExecute(result);\n    if (result.equals("working")) {\n        Toast.makeText(getApplicationContext(), "HTTP POST is working...", Toast.LENGTH_LONG).show();\n    } else {\n        Toast.makeText(getApplicationContext(), "Invalid POST req...", Toast.LENGTH_LONG).show();\n    }\n}'
p2108
aS'setContentView(R.layout.login);\nusernameEditText = (EditText) findViewById(R.id.login_username_editText);\npasswordEditText = (EditText) findViewById(R.id.login_password_editText);'
p2109
aS'Log.e(TAG, "14 - HTTP_OK");\nString line;\nBufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));'
p2110
aS'Log.e(TAG, "2 - pre Request to response...");\ntry {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}\nLog.e(TAG, "5 - after Response...");'
p2111
aS'String urlString = params[0];\nString resultToDisplay = "";\nInputStream in = null;\ntry {\n    URL url = new URL(urlString);\n    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n    in = new BufferedInputStream(urlConnection.getInputStream());\n} catch (Exception e) {\n    System.out.println(e.getMessage());\n    return e.getMessage();\n}'
p2112
aS'boolean status = false;\nString response = "";\nLog.e(TAG, "2 - pre Request to response...");\ntry {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}\nLog.e(TAG, "5 - after Response...");\nif (!response.equalsIgnoreCase("")) {\n    try {\n        Log.e(TAG, "6 - response !empty...");\n        JSONObject jRoot = new JSONObject(response);\n        JSONObject d = jRoot.getJSONObject("d");\n        int ResultType = d.getInt("ResultType");\n        Log.e("ResultType", ResultType + "");\n        if (ResultType == 1) {\n            status = true;\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, "Error " + e.getMessage());\n    } finally {\n    }\n} else {\n    Log.e(TAG, "6 - response is empty...");\n    status = false;\n}\nreturn status;'
p2113
aS'class SendPostReqAsyncTask extends AsyncTask<String, Void, String> {\n\n    @Override\n    protected String doInBackground(String... params) {\n        String paramUsername = params[0];\n        String paramPassword = params[1];\n        System.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\n        HttpClient httpClient = new DefaultHttpClient();\n        HttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\n        BasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\n        BasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\n        List<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\n        nameValuePairList.add(usernameBasicNameValuePair);\n        nameValuePairList.add(passwordBasicNameValuePAir);\n        try {\n            UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n            httpPost.setEntity(urlEncodedFormEntity);\n            try {\n                HttpResponse httpResponse = httpClient.execute(httpPost);\n                InputStream inputStream = httpResponse.getEntity().getContent();\n                InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n                BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n                StringBuilder stringBuilder = new StringBuilder();\n                String bufferedStrChunk = null;\n                while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n                    stringBuilder.append(bufferedStrChunk);\n                }\n                return stringBuilder.toString();\n            } catch (ClientProtocolException cpe) {\n                System.out.println("First Exception caz of HttpResponese :" + cpe);\n                cpe.printStackTrace();\n            } catch (IOException ioe) {\n                System.out.println("Second Exception caz of HttpResponse :" + ioe);\n                ioe.printStackTrace();\n            }\n        } catch (UnsupportedEncodingException uee) {\n            System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n            uee.printStackTrace();\n        }\n        return null;\n    }\n\n    @Override\n    protected void onPostExecute(String result) {\n        super.onPostExecute(result);\n        if (result.equals("working")) {\n            Toast.makeText(getApplicationContext(), "HTTP POST is working...", Toast.LENGTH_LONG).show();\n        } else {\n            Toast.makeText(getApplicationContext(), "Invalid POST req...", Toast.LENGTH_LONG).show();\n        }\n    }\n}\nSendPostReqAsyncTask sendPostReqAsyncTask = new SendPostReqAsyncTask();'
p2114
aS'String urlString = "http://www.yoursite.com/";\nprivate final String TAG = "post json example";\nprivate Context context;\nprivate int advertisementId;\npublic Empty(Context contex, int advertisementId) {\n    this.context = contex;\n    this.advertisementId = advertisementId;\n}\n@Override\nprotected void onPreExecute() {\n    Log.e(TAG, "1 - RequestVoteTask is about to start...");\n}\n@Override\nprotected Boolean doInBackground(Void... params) {\n    boolean status = false;\n    String response = "";\n    Log.e(TAG, "2 - pre Request to response...");\n    try {\n        response = performPostCall(urlString, new HashMap<String, String>() {\n\n            private static final long serialVersionUID = 1L;\n\n            {\n                put("Accept", "application/json");\n                put("Content-Type", "application/json");\n            }\n        });\n        Log.e(TAG, "3 - give Response...");\n        Log.e(TAG, "4 " + response.toString());\n    } catch (Exception e) {\n        Log.e(TAG, "Error ...");\n    }\n    Log.e(TAG, "5 - after Response...");\n    if (!response.equalsIgnoreCase("")) {\n        try {\n            Log.e(TAG, "6 - response !empty...");\n            JSONObject jRoot = new JSONObject(response);\n            JSONObject d = jRoot.getJSONObject("d");\n            int ResultType = d.getInt("ResultType");\n            Log.e("ResultType", ResultType + "");\n            if (ResultType == 1) {\n                status = true;\n            }\n        } catch (JSONException e) {\n            Log.e(TAG, "Error " + e.getMessage());\n        } finally {\n        }\n    } else {\n        Log.e(TAG, "6 - response is empty...");\n        status = false;\n    }\n    return status;\n}\n@Override\nprotected void onPostExecute(Boolean result) {\n    Log.e(TAG, "7 - onPostExecute ...");\n    if (result) {\n        Log.e(TAG, "8 - Update UI ...");\n    } else {\n        Log.e(TAG, "8 - Finish ...");\n    }\n}'
p2115
aS'Log.e("ResultType", ResultType + "");'
p2116
aS'BasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();'
p2117
aS'OutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));'
p2118
aS'response = performPostCall(urlString, new HashMap<String, String>() {\n\n    private static final long serialVersionUID = 1L;\n\n    {\n        put("Accept", "application/json");\n        put("Content-Type", "application/json");\n    }\n});\nLog.e(TAG, "3 - give Response...");'
p2119
aS'conn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);'
p2120
aS'String givenPassword = passwordEditText.getEditableText().toString();\nSystem.out.println("Given username :" + givenUsername + " Given password :" + givenPassword);\nsendPostRequest(givenUsername, givenPassword);'
p2121
aS'private EditText usernameEditText;\nprivate EditText passwordEditText;\nprivate Button sendPostReqButton;\nprivate Button clearButton;\n@Override\npublic void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.login);\n    usernameEditText = (EditText) findViewById(R.id.login_username_editText);\n    passwordEditText = (EditText) findViewById(R.id.login_password_editText);\n    sendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\n    sendPostReqButton.setOnClickListener(this);\n    clearButton = (Button) findViewById(R.id.login_clear_button);\n    clearButton.setOnClickListener(this);\n}'
p2122
aS'String token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n}'
p2123
aS'if (v.getId() == R.id.login_clear_button) {\n    usernameEditText.setText("");\n    passwordEditText.setText("");\n    passwordEditText.setCursorVisible(false);\n    passwordEditText.setFocusable(false);\n}'
p2124
aS'conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();'
p2125
aS'if (ResultType == 1) {\n    status = true;\n}'
p2126
aS'writer.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p2127
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p2128
aS'os.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);'
p2129
aS'String line;\nBufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));'
p2130
aS'conn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);'
p2131
aS'Log.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();'
p2132
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();'
p2133
aS'conn.setDoOutput(true);'
p2134
aS'OutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p2135
aS'URL url = new URL(urlString);'
p2136
aS'OutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));'
p2137
aS'OutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();'
p2138
aS'if (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    response = "";\n}'
p2139
aS'{\n}'
p2140
aS'URL url;\nString response = "";\ntry {\n    url = new URL(requestURL);\n    HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n    conn.setReadTimeout(15000);\n    conn.setConnectTimeout(15000);\n    conn.setRequestMethod("GET");\n    conn.setDoInput(true);\n    conn.setDoOutput(true);\n    OutputStream os = conn.getOutputStream();\n    BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\n    writer.write(getPostDataString(postDataParams));\n    writer.flush();\n    writer.close();\n    os.close();\n    int responseCode = conn.getResponseCode();\n    if (responseCode == HttpsURLConnection.HTTP_OK) {\n        String line;\n        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        while ((line = br.readLine()) != null) {\n            response += line;\n        }\n    } else {\n        response = "";\n    }\n} catch (Exception e) {\n    e.printStackTrace();\n}\nreturn response;'
p2141
aS'String token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);'
p2142
aS'usernameEditText.setCursorVisible(true);'
p2143
aS'BasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);'
p2144
aS'writer.flush();\nwriter.close();'
p2145
aS'String paramUsername = params[0];\nString paramPassword = params[1];\nSystem.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);'
p2146
aS'os.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p2147
aS'HttpResponse httpResponse = httpClient.execute(httpPost);\nInputStream inputStream = httpResponse.getEntity().getContent();\nInputStreamReader inputStreamReader = new InputStreamReader(inputStream);\nBufferedReader bufferedReader = new BufferedReader(inputStreamReader);\nStringBuilder stringBuilder = new StringBuilder();\nString bufferedStrChunk = null;\nwhile ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n    stringBuilder.append(bufferedStrChunk);\n}\nreturn stringBuilder.toString();'
p2148
aS'StringBuilder result = new StringBuilder();\nboolean first = true;\nfor (Map.Entry<String, String> entry : params.entrySet()) {\n    if (first)\n        first = false;\n    else\n        result.append("&");\n    result.append(URLEncoder.encode(entry.getKey(), "UTF-8"));\n    result.append("=");\n}'
p2149
aS'conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p2150
aS'String response = "";\ntry {\n    url = new URL(requestURL);\n    HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n    conn.setReadTimeout(15000);\n    conn.setConnectTimeout(15000);\n    conn.setRequestMethod("GET");\n    conn.setDoInput(true);\n    conn.setDoOutput(true);\n    OutputStream os = conn.getOutputStream();\n    BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\n    writer.write(getPostDataString(postDataParams));\n    writer.flush();\n    writer.close();\n    os.close();\n    int responseCode = conn.getResponseCode();\n    if (responseCode == HttpsURLConnection.HTTP_OK) {\n        String line;\n        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        while ((line = br.readLine()) != null) {\n            response += line;\n        }\n    } else {\n        response = "";\n    }\n} catch (Exception e) {\n}'
p2151
aS'Log.e(TAG, "14 - HTTP_OK");\nString line;'
p2152
aS'status = false;'
p2153
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);'
p2154
aS'Log.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();'
p2155
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();'
p2156
aS'int responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n}'
p2157
aS'@Override\nprotected void onPreExecute() {\n    Log.e(TAG, "1 - RequestVoteTask is about to start...");\n}\n@Override\nprotected Boolean doInBackground(Void... params) {\n    boolean status = false;\n    String response = "";\n    Log.e(TAG, "2 - pre Request to response...");\n    try {\n        response = performPostCall(urlString, new HashMap<String, String>() {\n\n            private static final long serialVersionUID = 1L;\n\n            {\n                put("Accept", "application/json");\n                put("Content-Type", "application/json");\n            }\n        });\n        Log.e(TAG, "3 - give Response...");\n        Log.e(TAG, "4 " + response.toString());\n    } catch (Exception e) {\n        Log.e(TAG, "Error ...");\n    }\n    Log.e(TAG, "5 - after Response...");\n    if (!response.equalsIgnoreCase("")) {\n        try {\n            Log.e(TAG, "6 - response !empty...");\n            JSONObject jRoot = new JSONObject(response);\n            JSONObject d = jRoot.getJSONObject("d");\n            int ResultType = d.getInt("ResultType");\n            Log.e("ResultType", ResultType + "");\n            if (ResultType == 1) {\n                status = true;\n            }\n        } catch (JSONException e) {\n            Log.e(TAG, "Error " + e.getMessage());\n        } finally {\n        }\n    } else {\n        Log.e(TAG, "6 - response is empty...");\n        status = false;\n    }\n    return status;\n}\n@Override\nprotected void onPostExecute(Boolean result) {\n    Log.e(TAG, "7 - onPostExecute ...");\n    if (result) {\n        Log.e(TAG, "8 - Update UI ...");\n    } else {\n        Log.e(TAG, "8 - Finish ...");\n    }\n}\npublic String performPostCall(String requestURL, HashMap<String, String> postDataParams) {\n    URL url;\n    String response = "";\n    try {\n        url = new URL(requestURL);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n        conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n        conn.setRequestMethod("POST");\n        conn.setDoInput(true);\n        conn.setDoOutput(true);\n        conn.setRequestProperty("Content-Type", "application/json");\n        Log.e(TAG, "11 - url : " + requestURL);\n        JSONObject root = new JSONObject();\n        String token = Static.getPrefsToken(context);\n        root.put("securityInfo", Static.getSecurityInfo(context));\n        root.put("advertisementId", advertisementId);\n        Log.e(TAG, "12 - root : " + root.toString());\n        String str = root.toString();\n        byte[] outputBytes = str.getBytes("UTF-8");\n        OutputStream os = conn.getOutputStream();\n        os.write(outputBytes);\n        int responseCode = conn.getResponseCode();\n        Log.e(TAG, "13 - responseCode : " + responseCode);\n        if (responseCode == HttpsURLConnection.HTTP_OK) {\n            Log.e(TAG, "14 - HTTP_OK");\n            String line;\n            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            while ((line = br.readLine()) != null) {\n                response += line;\n            }\n        } else {\n            Log.e(TAG, "14 - False - HTTP_OK");\n            response = "";\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return response;\n}'
p2158
aS'conn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);'
p2159
aS'writer.close();\nos.close();'
p2160
aS'StringBuilder result = new StringBuilder();\nboolean first = true;\nfor (Map.Entry<String, String> entry : params.entrySet()) {\n}'
p2161
aS'OutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n}'
p2162
aS'sendPostReqAsyncTask.execute(givenUsername, givenPassword);'
p2163
aS'List<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);'
p2164
aS'String line;\nBufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\nwhile ((line = br.readLine()) != null) {\n    response += line;\n}'
p2165
aS'HttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");'
p2166
aS'conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n}'
p2167
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();'
p2168
aS'Log.e(TAG, "2 - pre Request to response...");\ntry {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}\nLog.e(TAG, "5 - after Response...");\nif (!response.equalsIgnoreCase("")) {\n    try {\n        Log.e(TAG, "6 - response !empty...");\n        JSONObject jRoot = new JSONObject(response);\n        JSONObject d = jRoot.getJSONObject("d");\n        int ResultType = d.getInt("ResultType");\n        Log.e("ResultType", ResultType + "");\n        if (ResultType == 1) {\n            status = true;\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, "Error " + e.getMessage());\n    } finally {\n    }\n} else {\n    Log.e(TAG, "6 - response is empty...");\n    status = false;\n}'
p2169
aS'passwordEditText.setFocusable(false);\nusernameEditText.setCursorVisible(true);'
p2170
aS'usernameEditText.setCursorVisible(true);\npasswordEditText.setFocusable(true);'
p2171
aS'BasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);'
p2172
aS'HttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);'
p2173
aS'JSONObject jRoot = new JSONObject(response);\nJSONObject d = jRoot.getJSONObject("d");\nint ResultType = d.getInt("ResultType");'
p2174
aS'StringBuilder result = new StringBuilder();\nboolean first = true;'
p2175
aS'writer.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n}'
p2176
aS'try {\n    URL url = new URL(urlString);\n    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n    in = new BufferedInputStream(urlConnection.getInputStream());\n} catch (Exception e) {\n    System.out.println(e.getMessage());\n    return e.getMessage();\n}\ntry {\n    resultToDisplay = IOUtils.toString(in, "UTF-8");\n} catch (IOException e) {\n}'
p2177
aS'result.append(URLEncoder.encode(entry.getKey(), "UTF-8"));\nresult.append("=");'
p2178
aS'Log.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p2179
aS'result.append(URLEncoder.encode(entry.getKey(), "UTF-8"));'
p2180
aS'try {\n    url = new URL(requestURL);\n    HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n    conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n    conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n    conn.setRequestMethod("POST");\n    conn.setDoInput(true);\n    conn.setDoOutput(true);\n    conn.setRequestProperty("Content-Type", "application/json");\n    Log.e(TAG, "11 - url : " + requestURL);\n    JSONObject root = new JSONObject();\n    String token = Static.getPrefsToken(context);\n    root.put("securityInfo", Static.getSecurityInfo(context));\n    root.put("advertisementId", advertisementId);\n    Log.e(TAG, "12 - root : " + root.toString());\n    String str = root.toString();\n    byte[] outputBytes = str.getBytes("UTF-8");\n    OutputStream os = conn.getOutputStream();\n    os.write(outputBytes);\n    int responseCode = conn.getResponseCode();\n    Log.e(TAG, "13 - responseCode : " + responseCode);\n    if (responseCode == HttpsURLConnection.HTTP_OK) {\n        Log.e(TAG, "14 - HTTP_OK");\n        String line;\n        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        while ((line = br.readLine()) != null) {\n            response += line;\n        }\n    } else {\n        Log.e(TAG, "14 - False - HTTP_OK");\n        response = "";\n    }\n} catch (Exception e) {\n    e.printStackTrace();\n}\nreturn response;'
p2181
aS'nameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n}'
p2182
aS'writer.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p2183
aS'conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n}'
p2184
aS'return status;'
p2185
aS'protected void onPostExecute(String result) {\n    super.onPostExecute(result);\n    if (result.equals("working")) {\n        Toast.makeText(getApplicationContext(), "HTTP POST is working...", Toast.LENGTH_LONG).show();\n    } else {\n        Toast.makeText(getApplicationContext(), "Invalid POST req...", Toast.LENGTH_LONG).show();\n    }\n}'
p2186
aS'JSONObject jRoot = new JSONObject(response);\nJSONObject d = jRoot.getJSONObject("d");\nint ResultType = d.getInt("ResultType");\nLog.e("ResultType", ResultType + "");\nif (ResultType == 1) {\n    status = true;\n}'
p2187
aS'InputStream inputStream = httpResponse.getEntity().getContent();\nInputStreamReader inputStreamReader = new InputStreamReader(inputStream);'
p2188
aS'int responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p2189
aS'conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();'
p2190
aS'usernameEditText = (EditText) findViewById(R.id.login_username_editText);\npasswordEditText = (EditText) findViewById(R.id.login_password_editText);'
p2191
aS'conn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();'
p2192
aS'System.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n}'
p2193
aS'writer.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p2194
aS'JSONObject d = jRoot.getJSONObject("d");\nint ResultType = d.getInt("ResultType");\nLog.e("ResultType", ResultType + "");\nif (ResultType == 1) {\n    status = true;\n}'
p2195
aS'usernameEditText.setText("");\npasswordEditText.setText("");\npasswordEditText.setCursorVisible(false);'
p2196
aS'conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p2197
aS'conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));'
p2198
aS'root.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");'
p2199
aS'protected String doInBackground(String... params) {\n    String paramUsername = params[0];\n    String paramPassword = params[1];\n    System.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\n    HttpClient httpClient = new DefaultHttpClient();\n    HttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\n    BasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\n    BasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\n    List<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\n    nameValuePairList.add(usernameBasicNameValuePair);\n    nameValuePairList.add(passwordBasicNameValuePAir);\n    try {\n        UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n        httpPost.setEntity(urlEncodedFormEntity);\n        try {\n            HttpResponse httpResponse = httpClient.execute(httpPost);\n            InputStream inputStream = httpResponse.getEntity().getContent();\n            InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n            StringBuilder stringBuilder = new StringBuilder();\n            String bufferedStrChunk = null;\n            while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n                stringBuilder.append(bufferedStrChunk);\n            }\n            return stringBuilder.toString();\n        } catch (ClientProtocolException cpe) {\n            System.out.println("First Exception caz of HttpResponese :" + cpe);\n            cpe.printStackTrace();\n        } catch (IOException ioe) {\n            System.out.println("Second Exception caz of HttpResponse :" + ioe);\n            ioe.printStackTrace();\n        }\n    } catch (UnsupportedEncodingException uee) {\n        System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n        uee.printStackTrace();\n    }\n    return null;\n}'
p2200
aS'nameValuePairs.add(new BasicNameValuePair("id", "12345"));\nnameValuePairs.add(new BasicNameValuePair("stringdata", "Hi"));\nhttppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));'
p2201
aS'conn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n}'
p2202
aS'UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\nhttpPost.setEntity(urlEncodedFormEntity);\ntry {\n    HttpResponse httpResponse = httpClient.execute(httpPost);\n    InputStream inputStream = httpResponse.getEntity().getContent();\n    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n    StringBuilder stringBuilder = new StringBuilder();\n    String bufferedStrChunk = null;\n    while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n        stringBuilder.append(bufferedStrChunk);\n    }\n    return stringBuilder.toString();\n} catch (ClientProtocolException cpe) {\n    System.out.println("First Exception caz of HttpResponese :" + cpe);\n    cpe.printStackTrace();\n}'
p2203
aS'HttpResponse httpResponse = httpClient.execute(httpPost);'
p2204
aS'conn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p2205
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);'
p2206
aS'root.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);'
p2207
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    response = "";\n}'
p2208
aS'System.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n}'
p2209
aS'conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p2210
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));'
p2211
aS'JSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n    response = "";\n}'
p2212
aS'httpPost.setEntity(urlEncodedFormEntity);\ntry {\n    HttpResponse httpResponse = httpClient.execute(httpPost);\n    InputStream inputStream = httpResponse.getEntity().getContent();\n    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n    StringBuilder stringBuilder = new StringBuilder();\n    String bufferedStrChunk = null;\n    while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n        stringBuilder.append(bufferedStrChunk);\n    }\n    return stringBuilder.toString();\n} catch (ClientProtocolException cpe) {\n}'
p2213
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");'
p2214
aS'HttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();'
p2215
aS'while ((line = br.readLine()) != null) {\n    response += line;\n}'
p2216
aS'conn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n}'
p2217
aS'conn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p2218
aS'passwordEditText.setFocusable(true);'
p2219
aS'byte[] outputBytes = str.getBytes("UTF-8");'
p2220
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);'
p2221
aS'passwordEditText.setCursorVisible(false);'
p2222
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);'
p2223
aS'private Button sendPostReqButton;\nprivate Button clearButton;\n@Override\npublic void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.login);\n    usernameEditText = (EditText) findViewById(R.id.login_username_editText);\n    passwordEditText = (EditText) findViewById(R.id.login_password_editText);\n    sendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\n    sendPostReqButton.setOnClickListener(this);\n    clearButton = (Button) findViewById(R.id.login_clear_button);\n    clearButton.setOnClickListener(this);\n}\n@Override\npublic void onClick(View v) {\n    if (v.getId() == R.id.login_clear_button) {\n        usernameEditText.setText("");\n        passwordEditText.setText("");\n        passwordEditText.setCursorVisible(false);\n        passwordEditText.setFocusable(false);\n        usernameEditText.setCursorVisible(true);\n        passwordEditText.setFocusable(true);\n    } else if (v.getId() == R.id.login_sendPostReq_button) {\n        String givenUsername = usernameEditText.getEditableText().toString();\n        String givenPassword = passwordEditText.getEditableText().toString();\n        System.out.println("Given username :" + givenUsername + " Given password :" + givenPassword);\n        sendPostRequest(givenUsername, givenPassword);\n    }\n}'
p2224
aS'usernameEditText.setText("");'
p2225
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p2226
aS'InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\nBufferedReader bufferedReader = new BufferedReader(inputStreamReader);\nStringBuilder stringBuilder = new StringBuilder();\nString bufferedStrChunk = null;\nwhile ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n}'
p2227
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);'
p2228
aS'InputStream inputStream = httpResponse.getEntity().getContent();\nInputStreamReader inputStreamReader = new InputStreamReader(inputStream);\nBufferedReader bufferedReader = new BufferedReader(inputStreamReader);\nStringBuilder stringBuilder = new StringBuilder();\nString bufferedStrChunk = null;\nwhile ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n}'
p2229
aS'private EditText usernameEditText;\nprivate EditText passwordEditText;\nprivate Button sendPostReqButton;\nprivate Button clearButton;'
p2230
aS'super.onCreate(savedInstanceState);\nsetContentView(R.layout.login);'
p2231
aS'Log.e(TAG, "6 - response is empty...");\nstatus = false;'
p2232
aS'private Button sendPostReqButton;\nprivate Button clearButton;'
p2233
aS'writer.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p2234
aS'root.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();'
p2235
aS'String str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n}'
p2236
aS'Log.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p2237
aS'usernameEditText = (EditText) findViewById(R.id.login_username_editText);\npasswordEditText = (EditText) findViewById(R.id.login_password_editText);\nsendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\nsendPostReqButton.setOnClickListener(this);'
p2238
aS'HttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);'
p2239
aS'conn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();'
p2240
aS'conn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));'
p2241
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p2242
aS'int responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p2243
aS'private final String TAG = "post json example";\nprivate Context context;\nprivate int advertisementId;'
p2244
aS'URL url;\nString response = "";\ntry {\n    url = new URL(requestURL);\n    HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n    conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n    conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n    conn.setRequestMethod("POST");\n    conn.setDoInput(true);\n    conn.setDoOutput(true);\n    conn.setRequestProperty("Content-Type", "application/json");\n    Log.e(TAG, "11 - url : " + requestURL);\n    JSONObject root = new JSONObject();\n    String token = Static.getPrefsToken(context);\n    root.put("securityInfo", Static.getSecurityInfo(context));\n    root.put("advertisementId", advertisementId);\n    Log.e(TAG, "12 - root : " + root.toString());\n    String str = root.toString();\n    byte[] outputBytes = str.getBytes("UTF-8");\n    OutputStream os = conn.getOutputStream();\n    os.write(outputBytes);\n    int responseCode = conn.getResponseCode();\n    Log.e(TAG, "13 - responseCode : " + responseCode);\n    if (responseCode == HttpsURLConnection.HTTP_OK) {\n        Log.e(TAG, "14 - HTTP_OK");\n        String line;\n        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        while ((line = br.readLine()) != null) {\n            response += line;\n        }\n    } else {\n        Log.e(TAG, "14 - False - HTTP_OK");\n        response = "";\n    }\n} catch (Exception e) {\n    e.printStackTrace();\n}\nreturn response;'
p2245
aS'@Override\npublic void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.login);\n    usernameEditText = (EditText) findViewById(R.id.login_username_editText);\n    passwordEditText = (EditText) findViewById(R.id.login_password_editText);\n    sendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\n    sendPostReqButton.setOnClickListener(this);\n    clearButton = (Button) findViewById(R.id.login_clear_button);\n    clearButton.setOnClickListener(this);\n}\n@Override\npublic void onClick(View v) {\n    if (v.getId() == R.id.login_clear_button) {\n        usernameEditText.setText("");\n        passwordEditText.setText("");\n        passwordEditText.setCursorVisible(false);\n        passwordEditText.setFocusable(false);\n        usernameEditText.setCursorVisible(true);\n        passwordEditText.setFocusable(true);\n    } else if (v.getId() == R.id.login_sendPostReq_button) {\n        String givenUsername = usernameEditText.getEditableText().toString();\n        String givenPassword = passwordEditText.getEditableText().toString();\n        System.out.println("Given username :" + givenUsername + " Given password :" + givenPassword);\n        sendPostRequest(givenUsername, givenPassword);\n    }\n}'
p2246
aS'conn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p2247
aS'BasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();'
p2248
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);'
p2249
aS'root.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();'
p2250
aS'conn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);'
p2251
aS'Log.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p2252
aS'if (v.getId() == R.id.login_clear_button) {\n    usernameEditText.setText("");\n    passwordEditText.setText("");\n    passwordEditText.setCursorVisible(false);\n    passwordEditText.setFocusable(false);\n    usernameEditText.setCursorVisible(true);\n    passwordEditText.setFocusable(true);\n} else if (v.getId() == R.id.login_sendPostReq_button) {\n    String givenUsername = usernameEditText.getEditableText().toString();\n    String givenPassword = passwordEditText.getEditableText().toString();\n    System.out.println("Given username :" + givenUsername + " Given password :" + givenPassword);\n}'
p2253
aS'conn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n    response = "";\n}'
p2254
aS'conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n}'
p2255
aS'BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    response = "";\n}'
p2256
aS'if (first)\n    first = false;\nelse\n    result.append("&");\nresult.append(URLEncoder.encode(entry.getKey(), "UTF-8"));\nresult.append("=");\nresult.append(URLEncoder.encode(entry.getValue(), "UTF-8"));'
p2257
aS'try {\n    Log.e(TAG, "6 - response !empty...");\n    JSONObject jRoot = new JSONObject(response);\n    JSONObject d = jRoot.getJSONObject("d");\n    int ResultType = d.getInt("ResultType");\n    Log.e("ResultType", ResultType + "");\n    if (ResultType == 1) {\n        status = true;\n    }\n} catch (JSONException e) {\n    Log.e(TAG, "Error " + e.getMessage());\n}'
p2258
aS'Log.e(TAG, "Error " + e.getMessage());'
p2259
aS'conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));'
p2260
aS'@Override\nprotected void onPreExecute() {\n    Log.e(TAG, "1 - RequestVoteTask is about to start...");\n}\n@Override\nprotected Boolean doInBackground(Void... params) {\n    boolean status = false;\n    String response = "";\n    Log.e(TAG, "2 - pre Request to response...");\n    try {\n        response = performPostCall(urlString, new HashMap<String, String>() {\n\n            private static final long serialVersionUID = 1L;\n\n            {\n                put("Accept", "application/json");\n                put("Content-Type", "application/json");\n            }\n        });\n        Log.e(TAG, "3 - give Response...");\n        Log.e(TAG, "4 " + response.toString());\n    } catch (Exception e) {\n        Log.e(TAG, "Error ...");\n    }\n    Log.e(TAG, "5 - after Response...");\n    if (!response.equalsIgnoreCase("")) {\n        try {\n            Log.e(TAG, "6 - response !empty...");\n            JSONObject jRoot = new JSONObject(response);\n            JSONObject d = jRoot.getJSONObject("d");\n            int ResultType = d.getInt("ResultType");\n            Log.e("ResultType", ResultType + "");\n            if (ResultType == 1) {\n                status = true;\n            }\n        } catch (JSONException e) {\n            Log.e(TAG, "Error " + e.getMessage());\n        } finally {\n        }\n    } else {\n        Log.e(TAG, "6 - response is empty...");\n        status = false;\n    }\n    return status;\n}'
p2261
aS'httpPost.setEntity(urlEncodedFormEntity);\ntry {\n    HttpResponse httpResponse = httpClient.execute(httpPost);\n    InputStream inputStream = httpResponse.getEntity().getContent();\n    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n    StringBuilder stringBuilder = new StringBuilder();\n    String bufferedStrChunk = null;\n    while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n        stringBuilder.append(bufferedStrChunk);\n    }\n    return stringBuilder.toString();\n} catch (ClientProtocolException cpe) {\n    System.out.println("First Exception caz of HttpResponese :" + cpe);\n    cpe.printStackTrace();\n} catch (IOException ioe) {\n    System.out.println("Second Exception caz of HttpResponse :" + ioe);\n}'
p2262
aS'private EditText usernameEditText;'
p2263
aS'if (result) {\n    Log.e(TAG, "8 - Update UI ...");\n} else {\n    Log.e(TAG, "8 - Finish ...");\n}'
p2264
aS'writer.close();'
p2265
aS'os.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p2266
aS'String str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");'
p2267
aS'Log.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");'
p2268
aS'URL url;'
p2269
aS'private Context context;\nprivate int advertisementId;\npublic Empty(Context contex, int advertisementId) {\n    this.context = contex;\n    this.advertisementId = advertisementId;\n}\n@Override\nprotected void onPreExecute() {\n    Log.e(TAG, "1 - RequestVoteTask is about to start...");\n}'
p2270
aS'if (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p2271
aS'Log.e(TAG, "Error ...");'
p2272
aS'Log.e(TAG, "2 - pre Request to response...");\ntry {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n}'
p2273
aS'JSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p2274
aS'writer.flush();'
p2275
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p2276
aS'root.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();'
p2277
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();'
p2278
aS'JSONObject jRoot = new JSONObject(response);\nJSONObject d = jRoot.getJSONObject("d");'
p2279
aS'Log.e(TAG, "6 - response !empty...");\nJSONObject jRoot = new JSONObject(response);\nJSONObject d = jRoot.getJSONObject("d");\nint ResultType = d.getInt("ResultType");\nLog.e("ResultType", ResultType + "");'
p2280
aS'conn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p2281
aS'Log.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n    response = "";\n}'
p2282
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n}'
p2283
aS'StringBuilder stringBuilder = new StringBuilder();\nString bufferedStrChunk = null;\nwhile ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n    stringBuilder.append(bufferedStrChunk);\n}\nreturn stringBuilder.toString();'
p2284
aS'conn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());'
p2285
aS'Log.e(TAG, "2 - pre Request to response...");\ntry {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}\nLog.e(TAG, "5 - after Response...");\nif (!response.equalsIgnoreCase("")) {\n    try {\n        Log.e(TAG, "6 - response !empty...");\n        JSONObject jRoot = new JSONObject(response);\n        JSONObject d = jRoot.getJSONObject("d");\n        int ResultType = d.getInt("ResultType");\n        Log.e("ResultType", ResultType + "");\n        if (ResultType == 1) {\n            status = true;\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, "Error " + e.getMessage());\n    } finally {\n    }\n} else {\n    Log.e(TAG, "6 - response is empty...");\n}'
p2286
aS'String token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p2287
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n}'
p2288
aS'root.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n}'
p2289
aS'root.put("advertisementId", advertisementId);'
p2290
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();'
p2291
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p2292
aS'result.append("&");'
p2293
aS'int responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p2294
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);'
p2295
aS'String urlString = params[0];\nString resultToDisplay = "";\nInputStream in = null;\ntry {\n    URL url = new URL(urlString);\n    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n    in = new BufferedInputStream(urlConnection.getInputStream());\n} catch (Exception e) {\n    System.out.println(e.getMessage());\n    return e.getMessage();\n}\ntry {\n    resultToDisplay = IOUtils.toString(in, "UTF-8");\n} catch (IOException e) {\n    e.printStackTrace();\n}\nreturn resultToDisplay;'
p2296
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p2297
aS'String resultToDisplay = "";\nInputStream in = null;\ntry {\n    URL url = new URL(urlString);\n    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n    in = new BufferedInputStream(urlConnection.getInputStream());\n} catch (Exception e) {\n    System.out.println(e.getMessage());\n}'
p2298
aS'boolean status = false;\nString response = "";\nLog.e(TAG, "2 - pre Request to response...");\ntry {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}\nLog.e(TAG, "5 - after Response...");\nif (!response.equalsIgnoreCase("")) {\n    try {\n        Log.e(TAG, "6 - response !empty...");\n        JSONObject jRoot = new JSONObject(response);\n        JSONObject d = jRoot.getJSONObject("d");\n        int ResultType = d.getInt("ResultType");\n        Log.e("ResultType", ResultType + "");\n        if (ResultType == 1) {\n            status = true;\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, "Error " + e.getMessage());\n    } finally {\n    }\n} else {\n}'
p2299
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p2300
aS'conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n    response = "";\n}'
p2301
aS'os.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n}'
p2302
aS'os.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n    response = "";\n}'
p2303
aS'HttpResponse httpResponse = httpClient.execute(httpPost);\nInputStream inputStream = httpResponse.getEntity().getContent();\nInputStreamReader inputStreamReader = new InputStreamReader(inputStream);'
p2304
aS'String paramPassword = params[1];\nSystem.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");'
p2305
aS'root.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n}'
p2306
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p2307
aS'Log.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);'
p2308
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);'
p2309
aS'HttpResponse httpResponse = httpClient.execute(httpPost);\nInputStream inputStream = httpResponse.getEntity().getContent();\nInputStreamReader inputStreamReader = new InputStreamReader(inputStream);\nBufferedReader bufferedReader = new BufferedReader(inputStreamReader);\nStringBuilder stringBuilder = new StringBuilder();\nString bufferedStrChunk = null;'
p2310
aS'JSONObject d = jRoot.getJSONObject("d");\nint ResultType = d.getInt("ResultType");\nLog.e("ResultType", ResultType + "");'
p2311
aS'Log.e(TAG, "5 - after Response...");\nif (!response.equalsIgnoreCase("")) {\n}'
p2312
aS'nameValuePairList.add(passwordBasicNameValuePAir);'
p2313
aS'conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));'
p2314
aS'result.append("&");\nresult.append(URLEncoder.encode(entry.getKey(), "UTF-8"));\nresult.append("=");\nresult.append(URLEncoder.encode(entry.getValue(), "UTF-8"));'
p2315
aS'conn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");'
p2316
aS'List<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);'
p2317
aS'super.onCreate(savedInstanceState);\nsetContentView(R.layout.login);\nusernameEditText = (EditText) findViewById(R.id.login_username_editText);\npasswordEditText = (EditText) findViewById(R.id.login_password_editText);\nsendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);'
p2318
aS'String paramUsername = params[0];\nString paramPassword = params[1];\nSystem.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);'
p2319
aS'String resultToDisplay = "";\nInputStream in = null;\ntry {\n    URL url = new URL(urlString);\n    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n    in = new BufferedInputStream(urlConnection.getInputStream());\n} catch (Exception e) {\n}'
p2320
aS'System.out.println("Second Exception caz of HttpResponse :" + ioe);'
p2321
aS'int responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n}'
p2322
aS'nameValuePairs.add(new BasicNameValuePair("stringdata", "Hi"));\nhttppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));'
p2323
aS'conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p2324
aS'url = new URL(requestURL);'
p2325
aS'String line;'
p2326
aS'conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();'
p2327
aS'SendPostReqAsyncTask sendPostReqAsyncTask = new SendPostReqAsyncTask();'
p2328
aS'OutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n}'
p2329
aS'JSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();'
p2330
aS'while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n    stringBuilder.append(bufferedStrChunk);\n}'
p2331
aS'root.put("securityInfo", Static.getSecurityInfo(context));'
p2332
aS'protected void onPreExecute() {\n    Log.e(TAG, "1 - RequestVoteTask is about to start...");\n}\n@Override\nprotected Boolean doInBackground(Void... params) {\n    boolean status = false;\n    String response = "";\n    Log.e(TAG, "2 - pre Request to response...");\n    try {\n        response = performPostCall(urlString, new HashMap<String, String>() {\n\n            private static final long serialVersionUID = 1L;\n\n            {\n                put("Accept", "application/json");\n                put("Content-Type", "application/json");\n            }\n        });\n        Log.e(TAG, "3 - give Response...");\n        Log.e(TAG, "4 " + response.toString());\n    } catch (Exception e) {\n        Log.e(TAG, "Error ...");\n    }\n    Log.e(TAG, "5 - after Response...");\n    if (!response.equalsIgnoreCase("")) {\n        try {\n            Log.e(TAG, "6 - response !empty...");\n            JSONObject jRoot = new JSONObject(response);\n            JSONObject d = jRoot.getJSONObject("d");\n            int ResultType = d.getInt("ResultType");\n            Log.e("ResultType", ResultType + "");\n            if (ResultType == 1) {\n                status = true;\n            }\n        } catch (JSONException e) {\n            Log.e(TAG, "Error " + e.getMessage());\n        } finally {\n        }\n    } else {\n        Log.e(TAG, "6 - response is empty...");\n        status = false;\n    }\n    return status;\n}'
p2333
aS'HttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n    uee.printStackTrace();\n}\nreturn null;'
p2334
aS'Log.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p2335
aS'private Button sendPostReqButton;\nprivate Button clearButton;\n@Override\npublic void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.login);\n    usernameEditText = (EditText) findViewById(R.id.login_username_editText);\n    passwordEditText = (EditText) findViewById(R.id.login_password_editText);\n    sendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\n    sendPostReqButton.setOnClickListener(this);\n    clearButton = (Button) findViewById(R.id.login_clear_button);\n    clearButton.setOnClickListener(this);\n}'
p2336
aS'conn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));'
p2337
aS'int responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p2338
aS'httpPost.setEntity(urlEncodedFormEntity);'
p2339
aS'try {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}\nLog.e(TAG, "5 - after Response...");\nif (!response.equalsIgnoreCase("")) {\n    try {\n        Log.e(TAG, "6 - response !empty...");\n        JSONObject jRoot = new JSONObject(response);\n        JSONObject d = jRoot.getJSONObject("d");\n        int ResultType = d.getInt("ResultType");\n        Log.e("ResultType", ResultType + "");\n        if (ResultType == 1) {\n            status = true;\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, "Error " + e.getMessage());\n    } finally {\n    }\n} else {\n}'
p2340
aS'conn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();'
p2341
aS'nameValuePairs.add(new BasicNameValuePair("id", "12345"));\nnameValuePairs.add(new BasicNameValuePair("stringdata", "Hi"));'
p2342
aS'passwordEditText.setText("");\npasswordEditText.setCursorVisible(false);'
p2343
aS'Log.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n}'
p2344
aS'root.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n    response = "";\n}'
p2345
aS'protected void onPostExecute(Boolean result) {\n    Log.e(TAG, "7 - onPostExecute ...");\n    if (result) {\n        Log.e(TAG, "8 - Update UI ...");\n    } else {\n        Log.e(TAG, "8 - Finish ...");\n    }\n}\npublic String performPostCall(String requestURL, HashMap<String, String> postDataParams) {\n    URL url;\n    String response = "";\n    try {\n        url = new URL(requestURL);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n        conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n        conn.setRequestMethod("POST");\n        conn.setDoInput(true);\n        conn.setDoOutput(true);\n        conn.setRequestProperty("Content-Type", "application/json");\n        Log.e(TAG, "11 - url : " + requestURL);\n        JSONObject root = new JSONObject();\n        String token = Static.getPrefsToken(context);\n        root.put("securityInfo", Static.getSecurityInfo(context));\n        root.put("advertisementId", advertisementId);\n        Log.e(TAG, "12 - root : " + root.toString());\n        String str = root.toString();\n        byte[] outputBytes = str.getBytes("UTF-8");\n        OutputStream os = conn.getOutputStream();\n        os.write(outputBytes);\n        int responseCode = conn.getResponseCode();\n        Log.e(TAG, "13 - responseCode : " + responseCode);\n        if (responseCode == HttpsURLConnection.HTTP_OK) {\n            Log.e(TAG, "14 - HTTP_OK");\n            String line;\n            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            while ((line = br.readLine()) != null) {\n                response += line;\n            }\n        } else {\n            Log.e(TAG, "14 - False - HTTP_OK");\n            response = "";\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return response;\n}'
p2346
aS'HttpClient httpclient = new DefaultHttpClient();\nHttpPost httppost = new HttpPost("http://www.yoursite.com/script.php");\ntry {\n    List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\n    nameValuePairs.add(new BasicNameValuePair("id", "12345"));\n    nameValuePairs.add(new BasicNameValuePair("stringdata", "Hi"));\n    httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n    HttpResponse response = httpclient.execute(httppost);\n} catch (ClientProtocolException e) {\n}'
p2347
aS'OutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p2348
aS'StringBuilder result = new StringBuilder();'
p2349
aS'BasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n}'
p2350
aS'System.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);'
p2351
aS'System.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);'
p2352
aS'String givenUsername = usernameEditText.getEditableText().toString();'
p2353
aS'root.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p2354
aS'try {\n    url = new URL(requestURL);\n    HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n    conn.setReadTimeout(15000);\n    conn.setConnectTimeout(15000);\n    conn.setRequestMethod("GET");\n    conn.setDoInput(true);\n    conn.setDoOutput(true);\n    OutputStream os = conn.getOutputStream();\n    BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\n    writer.write(getPostDataString(postDataParams));\n    writer.flush();\n    writer.close();\n    os.close();\n    int responseCode = conn.getResponseCode();\n    if (responseCode == HttpsURLConnection.HTTP_OK) {\n        String line;\n        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        while ((line = br.readLine()) != null) {\n            response += line;\n        }\n    } else {\n        response = "";\n    }\n} catch (Exception e) {\n}'
p2355
aS'InputStreamReader inputStreamReader = new InputStreamReader(inputStream);'
p2356
aS'conn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p2357
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();'
p2358
aS'os.write(outputBytes);'
p2359
aS'byte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();'
p2360
aS'conn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p2361
aS'super.onCreate(savedInstanceState);\nsetContentView(R.layout.login);\nusernameEditText = (EditText) findViewById(R.id.login_username_editText);\npasswordEditText = (EditText) findViewById(R.id.login_password_editText);\nsendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\nsendPostReqButton.setOnClickListener(this);\nclearButton = (Button) findViewById(R.id.login_clear_button);\nclearButton.setOnClickListener(this);'
p2362
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();'
p2363
aS'setContentView(R.layout.login);'
p2364
aS'public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.login);\n    usernameEditText = (EditText) findViewById(R.id.login_username_editText);\n    passwordEditText = (EditText) findViewById(R.id.login_password_editText);\n    sendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\n    sendPostReqButton.setOnClickListener(this);\n    clearButton = (Button) findViewById(R.id.login_clear_button);\n    clearButton.setOnClickListener(this);\n}\n@Override\npublic void onClick(View v) {\n    if (v.getId() == R.id.login_clear_button) {\n        usernameEditText.setText("");\n        passwordEditText.setText("");\n        passwordEditText.setCursorVisible(false);\n        passwordEditText.setFocusable(false);\n        usernameEditText.setCursorVisible(true);\n        passwordEditText.setFocusable(true);\n    } else if (v.getId() == R.id.login_sendPostReq_button) {\n        String givenUsername = usernameEditText.getEditableText().toString();\n        String givenPassword = passwordEditText.getEditableText().toString();\n        System.out.println("Given username :" + givenUsername + " Given password :" + givenPassword);\n        sendPostRequest(givenUsername, givenPassword);\n    }\n}\nprivate void sendPostRequest(String givenUsername, String givenPassword) {\n    class SendPostReqAsyncTask extends AsyncTask<String, Void, String> {\n\n        @Override\n        protected String doInBackground(String... params) {\n            String paramUsername = params[0];\n            String paramPassword = params[1];\n            System.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\n            HttpClient httpClient = new DefaultHttpClient();\n            HttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\n            BasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\n            BasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\n            List<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\n            nameValuePairList.add(usernameBasicNameValuePair);\n            nameValuePairList.add(passwordBasicNameValuePAir);\n            try {\n                UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n                httpPost.setEntity(urlEncodedFormEntity);\n                try {\n                    HttpResponse httpResponse = httpClient.execute(httpPost);\n                    InputStream inputStream = httpResponse.getEntity().getContent();\n                    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n                    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n                    StringBuilder stringBuilder = new StringBuilder();\n                    String bufferedStrChunk = null;\n                    while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n                        stringBuilder.append(bufferedStrChunk);\n                    }\n                    return stringBuilder.toString();\n                } catch (ClientProtocolException cpe) {\n                    System.out.println("First Exception caz of HttpResponese :" + cpe);\n                    cpe.printStackTrace();\n                } catch (IOException ioe) {\n                    System.out.println("Second Exception caz of HttpResponse :" + ioe);\n                    ioe.printStackTrace();\n                }\n            } catch (UnsupportedEncodingException uee) {\n                System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n                uee.printStackTrace();\n            }\n            return null;\n        }\n\n        @Override\n        protected void onPostExecute(String result) {\n            super.onPostExecute(result);\n            if (result.equals("working")) {\n                Toast.makeText(getApplicationContext(), "HTTP POST is working...", Toast.LENGTH_LONG).show();\n            } else {\n                Toast.makeText(getApplicationContext(), "Invalid POST req...", Toast.LENGTH_LONG).show();\n            }\n        }\n    }\n    SendPostReqAsyncTask sendPostReqAsyncTask = new SendPostReqAsyncTask();\n    sendPostReqAsyncTask.execute(givenUsername, givenPassword);\n}'
p2365
aS'String paramPassword = params[1];\nSystem.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);'
p2366
aS'System.out.println("First Exception caz of HttpResponese :" + cpe);\ncpe.printStackTrace();'
p2367
aS'passwordEditText.setCursorVisible(false);\npasswordEditText.setFocusable(false);\nusernameEditText.setCursorVisible(true);'
p2368
aS'conn.setDoInput(true);'
p2369
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);'
p2370
aS'response = performPostCall(urlString, new HashMap<String, String>() {\n\n    private static final long serialVersionUID = 1L;\n\n    {\n        put("Accept", "application/json");\n        put("Content-Type", "application/json");\n    }\n});\nLog.e(TAG, "3 - give Response...");\nLog.e(TAG, "4 " + response.toString());'
p2371
aS'os.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p2372
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p2373
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p2374
aS'JSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);'
p2375
aS'conn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);'
p2376
aS'conn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();'
p2377
aS'conn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();'
p2378
aS'boolean first = true;\nfor (Map.Entry<String, String> entry : params.entrySet()) {\n}'
p2379
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));'
p2380
aS'usernameEditText.setText("");\npasswordEditText.setText("");\npasswordEditText.setCursorVisible(false);\npasswordEditText.setFocusable(false);\nusernameEditText.setCursorVisible(true);\npasswordEditText.setFocusable(true);'
p2381
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n}'
p2382
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p2383
aS'setContentView(R.layout.login);\nusernameEditText = (EditText) findViewById(R.id.login_username_editText);\npasswordEditText = (EditText) findViewById(R.id.login_password_editText);\nsendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\nsendPostReqButton.setOnClickListener(this);\nclearButton = (Button) findViewById(R.id.login_clear_button);\nclearButton.setOnClickListener(this);'
p2384
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();'
p2385
aS'result.append(URLEncoder.encode(entry.getValue(), "UTF-8"));'
p2386
aS'String str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n}'
p2387
aS'conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));'
p2388
aS'protected String doInBackground(String... params) {\n    String urlString = params[0];\n    String resultToDisplay = "";\n    InputStream in = null;\n    try {\n        URL url = new URL(urlString);\n        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n        in = new BufferedInputStream(urlConnection.getInputStream());\n    } catch (Exception e) {\n        System.out.println(e.getMessage());\n        return e.getMessage();\n    }\n    try {\n        resultToDisplay = IOUtils.toString(in, "UTF-8");\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return resultToDisplay;\n}\n@Override\nprotected void onPostExecute(String result) {\n}'
p2389
aS'private Button sendPostReqButton;'
p2390
aS'@Override\nprotected void onPostExecute(String result) {\n    super.onPostExecute(result);\n    if (result.equals("working")) {\n        Toast.makeText(getApplicationContext(), "HTTP POST is working...", Toast.LENGTH_LONG).show();\n    } else {\n        Toast.makeText(getApplicationContext(), "Invalid POST req...", Toast.LENGTH_LONG).show();\n    }\n}'
p2391
aS'try {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}\nLog.e(TAG, "5 - after Response...");\nif (!response.equalsIgnoreCase("")) {\n}'
p2392
aS'String token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);'
p2393
aS'String givenUsername = usernameEditText.getEditableText().toString();\nString givenPassword = passwordEditText.getEditableText().toString();\nSystem.out.println("Given username :" + givenUsername + " Given password :" + givenPassword);\nsendPostRequest(givenUsername, givenPassword);'
p2394
aS'return e.getMessage();'
p2395
aS'String token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n}'
p2396
aS'String bufferedStrChunk = null;'
p2397
aS'String token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n    response = "";\n}'
p2398
aS'BasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n    uee.printStackTrace();\n}\nreturn null;'
p2399
aS'conn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();'
p2400
aS'conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");'
p2401
aS'class SendPostReqAsyncTask extends AsyncTask<String, Void, String> {\n}'
p2402
aS'this.context = contex;'
p2403
aS'conn.setRequestMethod("GET");'
p2404
aS'Log.e("ResultType", ResultType + "");\nif (ResultType == 1) {\n    status = true;\n}'
p2405
aS'if (v.getId() == R.id.login_clear_button) {\n}'
p2406
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n}'
p2407
aS'conn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();'
p2408
aS'BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));'
p2409
aS'Log.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n}'
p2410
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p2411
aS'while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n}'
p2412
aS'private static final long serialVersionUID = 1L;\n{\n    put("Accept", "application/json");\n    put("Content-Type", "application/json");\n}'
p2413
aS'private static final long serialVersionUID = 1L;'
p2414
aS'try {\n    URL url = new URL(urlString);\n    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n    in = new BufferedInputStream(urlConnection.getInputStream());\n} catch (Exception e) {\n    System.out.println(e.getMessage());\n    return e.getMessage();\n}'
p2415
aS'root.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n    response = "";\n}'
p2416
aS'super.onCreate(savedInstanceState);'
p2417
aS'if (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p2418
aS'@Override\nprotected void onPreExecute() {\n    super.onPreExecute();\n}'
p2419
aS'OutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p2420
aS'writer.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p2421
aS'HttpResponse httpResponse = httpClient.execute(httpPost);\nInputStream inputStream = httpResponse.getEntity().getContent();\nInputStreamReader inputStreamReader = new InputStreamReader(inputStream);\nBufferedReader bufferedReader = new BufferedReader(inputStreamReader);\nStringBuilder stringBuilder = new StringBuilder();\nString bufferedStrChunk = null;\nwhile ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n}'
p2422
aS'String str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p2423
aS'Log.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p2424
aS'conn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p2425
aS'setContentView(R.layout.login);\nusernameEditText = (EditText) findViewById(R.id.login_username_editText);'
p2426
aS'Log.e(TAG, "14 - False - HTTP_OK");\nresponse = "";'
p2427
aS'public String performPostCall(String requestURL, HashMap<String, String> postDataParams) {\n    URL url;\n    String response = "";\n    try {\n        url = new URL(requestURL);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n        conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n        conn.setRequestMethod("POST");\n        conn.setDoInput(true);\n        conn.setDoOutput(true);\n        conn.setRequestProperty("Content-Type", "application/json");\n        Log.e(TAG, "11 - url : " + requestURL);\n        JSONObject root = new JSONObject();\n        String token = Static.getPrefsToken(context);\n        root.put("securityInfo", Static.getSecurityInfo(context));\n        root.put("advertisementId", advertisementId);\n        Log.e(TAG, "12 - root : " + root.toString());\n        String str = root.toString();\n        byte[] outputBytes = str.getBytes("UTF-8");\n        OutputStream os = conn.getOutputStream();\n        os.write(outputBytes);\n        int responseCode = conn.getResponseCode();\n        Log.e(TAG, "13 - responseCode : " + responseCode);\n        if (responseCode == HttpsURLConnection.HTTP_OK) {\n            Log.e(TAG, "14 - HTTP_OK");\n            String line;\n            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            while ((line = br.readLine()) != null) {\n                response += line;\n            }\n        } else {\n            Log.e(TAG, "14 - False - HTTP_OK");\n            response = "";\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return response;\n}'
p2428
aS'conn.setRequestMethod("GET");\nconn.setDoInput(true);'
p2429
aS'if (result) {\n    Log.e(TAG, "8 - Update UI ...");\n} else {\n}'
p2430
aS'usernameEditText.setText("");\npasswordEditText.setText("");'
p2431
aS'try {\n    HttpResponse httpResponse = httpClient.execute(httpPost);\n    InputStream inputStream = httpResponse.getEntity().getContent();\n    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n    StringBuilder stringBuilder = new StringBuilder();\n    String bufferedStrChunk = null;\n    while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n        stringBuilder.append(bufferedStrChunk);\n    }\n    return stringBuilder.toString();\n} catch (ClientProtocolException cpe) {\n    System.out.println("First Exception caz of HttpResponese :" + cpe);\n    cpe.printStackTrace();\n} catch (IOException ioe) {\n    System.out.println("Second Exception caz of HttpResponse :" + ioe);\n}'
p2432
aS'String paramPassword = params[1];\nSystem.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);'
p2433
aS'InputStream inputStream = httpResponse.getEntity().getContent();\nInputStreamReader inputStreamReader = new InputStreamReader(inputStream);\nBufferedReader bufferedReader = new BufferedReader(inputStreamReader);\nStringBuilder stringBuilder = new StringBuilder();\nString bufferedStrChunk = null;\nwhile ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n    stringBuilder.append(bufferedStrChunk);\n}'
p2434
aS'passwordEditText.setFocusable(false);'
p2435
aS'conn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);'
p2436
aS'Log.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();'
p2437
aS'conn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n}'
p2438
aS'result.append("=");'
p2439
aS'try {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}\nLog.e(TAG, "5 - after Response...");\nif (!response.equalsIgnoreCase("")) {\n    try {\n        Log.e(TAG, "6 - response !empty...");\n        JSONObject jRoot = new JSONObject(response);\n        JSONObject d = jRoot.getJSONObject("d");\n        int ResultType = d.getInt("ResultType");\n        Log.e("ResultType", ResultType + "");\n        if (ResultType == 1) {\n            status = true;\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, "Error " + e.getMessage());\n    } finally {\n    }\n} else {\n    Log.e(TAG, "6 - response is empty...");\n    status = false;\n}\nreturn status;'
p2440
aS'System.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n    uee.printStackTrace();\n}'
p2441
aS'Log.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n}'
p2442
aS'BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\nStringBuilder stringBuilder = new StringBuilder();\nString bufferedStrChunk = null;\nwhile ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n    stringBuilder.append(bufferedStrChunk);\n}'
p2443
aS'@Override\npublic void onClick(View v) {\n    if (v.getId() == R.id.login_clear_button) {\n        usernameEditText.setText("");\n        passwordEditText.setText("");\n        passwordEditText.setCursorVisible(false);\n        passwordEditText.setFocusable(false);\n        usernameEditText.setCursorVisible(true);\n        passwordEditText.setFocusable(true);\n    } else if (v.getId() == R.id.login_sendPostReq_button) {\n        String givenUsername = usernameEditText.getEditableText().toString();\n        String givenPassword = passwordEditText.getEditableText().toString();\n        System.out.println("Given username :" + givenUsername + " Given password :" + givenPassword);\n        sendPostRequest(givenUsername, givenPassword);\n    }\n}'
p2444
aS'boolean status = false;\nString response = "";\nLog.e(TAG, "2 - pre Request to response...");'
p2445
aS'String response = "";\nLog.e(TAG, "2 - pre Request to response...");\ntry {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n}'
p2446
aS'conn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));'
p2447
aS'private String getPostDataString(HashMap<String, String> params) throws UnsupportedEncodingException {\n    StringBuilder result = new StringBuilder();\n    boolean first = true;\n    for (Map.Entry<String, String> entry : params.entrySet()) {\n        if (first)\n            first = false;\n        else\n            result.append("&");\n        result.append(URLEncoder.encode(entry.getKey(), "UTF-8"));\n        result.append("=");\n        result.append(URLEncoder.encode(entry.getValue(), "UTF-8"));\n    }\n    return result.toString();\n}'
p2448
aS'public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.login);\n    usernameEditText = (EditText) findViewById(R.id.login_username_editText);\n    passwordEditText = (EditText) findViewById(R.id.login_password_editText);\n    sendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\n    sendPostReqButton.setOnClickListener(this);\n    clearButton = (Button) findViewById(R.id.login_clear_button);\n    clearButton.setOnClickListener(this);\n}'
p2449
aS'if (v.getId() == R.id.login_clear_button) {\n    usernameEditText.setText("");\n    passwordEditText.setText("");\n    passwordEditText.setCursorVisible(false);\n    passwordEditText.setFocusable(false);\n    usernameEditText.setCursorVisible(true);\n    passwordEditText.setFocusable(true);\n}'
p2450
aS'String urlString = "http://www.yoursite.com/";\nprivate final String TAG = "post json example";\nprivate Context context;\nprivate int advertisementId;\npublic Empty(Context contex, int advertisementId) {\n    this.context = contex;\n    this.advertisementId = advertisementId;\n}\n@Override\nprotected void onPreExecute() {\n    Log.e(TAG, "1 - RequestVoteTask is about to start...");\n}'
p2451
aS'super.onPreExecute();'
p2452
aS'String paramPassword = params[1];\nSystem.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n    uee.printStackTrace();\n}'
p2453
aS'String paramUsername = params[0];\nString paramPassword = params[1];\nSystem.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n    uee.printStackTrace();\n}\nreturn null;'
p2454
aS'String resultToDisplay = "";'
p2455
aS'conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n}'
p2456
aS'conn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));'
p2457
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);'
p2458
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));'
p2459
aS'String str = root.toString();'
p2460
aS'conn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n}'
p2461
aS'super.onPostExecute(result);'
p2462
aS'String urlString = "http://www.yoursite.com/";\nprivate final String TAG = "post json example";\nprivate Context context;\nprivate int advertisementId;\npublic Empty(Context contex, int advertisementId) {\n    this.context = contex;\n    this.advertisementId = advertisementId;\n}'
p2463
aS'String response = "";\ntry {\n    url = new URL(requestURL);\n    HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n    conn.setReadTimeout(15000);\n    conn.setConnectTimeout(15000);\n    conn.setRequestMethod("GET");\n    conn.setDoInput(true);\n    conn.setDoOutput(true);\n    OutputStream os = conn.getOutputStream();\n    BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\n    writer.write(getPostDataString(postDataParams));\n    writer.flush();\n    writer.close();\n    os.close();\n    int responseCode = conn.getResponseCode();\n    if (responseCode == HttpsURLConnection.HTTP_OK) {\n        String line;\n        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        while ((line = br.readLine()) != null) {\n            response += line;\n        }\n    } else {\n        response = "";\n    }\n} catch (Exception e) {\n    e.printStackTrace();\n}\nreturn response;'
p2464
aS'root.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();'
p2465
aS'usernameEditText = (EditText) findViewById(R.id.login_username_editText);\npasswordEditText = (EditText) findViewById(R.id.login_password_editText);\nsendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);'
p2466
aS'String paramUsername = params[0];\nString paramPassword = params[1];\nSystem.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");'
p2467
aS'Log.e(TAG, "3 - give Response...");'
p2468
aS'HttpResponse httpResponse = httpClient.execute(httpPost);\nInputStream inputStream = httpResponse.getEntity().getContent();'
p2469
aS'conn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();'
p2470
aS'HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();'
p2471
aS'protected void onPreExecute() {\n    Log.e(TAG, "1 - RequestVoteTask is about to start...");\n}\n@Override\nprotected Boolean doInBackground(Void... params) {\n    boolean status = false;\n    String response = "";\n    Log.e(TAG, "2 - pre Request to response...");\n    try {\n        response = performPostCall(urlString, new HashMap<String, String>() {\n\n            private static final long serialVersionUID = 1L;\n\n            {\n                put("Accept", "application/json");\n                put("Content-Type", "application/json");\n            }\n        });\n        Log.e(TAG, "3 - give Response...");\n        Log.e(TAG, "4 " + response.toString());\n    } catch (Exception e) {\n        Log.e(TAG, "Error ...");\n    }\n    Log.e(TAG, "5 - after Response...");\n    if (!response.equalsIgnoreCase("")) {\n        try {\n            Log.e(TAG, "6 - response !empty...");\n            JSONObject jRoot = new JSONObject(response);\n            JSONObject d = jRoot.getJSONObject("d");\n            int ResultType = d.getInt("ResultType");\n            Log.e("ResultType", ResultType + "");\n            if (ResultType == 1) {\n                status = true;\n            }\n        } catch (JSONException e) {\n            Log.e(TAG, "Error " + e.getMessage());\n        } finally {\n        }\n    } else {\n        Log.e(TAG, "6 - response is empty...");\n        status = false;\n    }\n    return status;\n}\n@Override\nprotected void onPostExecute(Boolean result) {\n    Log.e(TAG, "7 - onPostExecute ...");\n    if (result) {\n        Log.e(TAG, "8 - Update UI ...");\n    } else {\n        Log.e(TAG, "8 - Finish ...");\n    }\n}\npublic String performPostCall(String requestURL, HashMap<String, String> postDataParams) {\n    URL url;\n    String response = "";\n    try {\n        url = new URL(requestURL);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n        conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n        conn.setRequestMethod("POST");\n        conn.setDoInput(true);\n        conn.setDoOutput(true);\n        conn.setRequestProperty("Content-Type", "application/json");\n        Log.e(TAG, "11 - url : " + requestURL);\n        JSONObject root = new JSONObject();\n        String token = Static.getPrefsToken(context);\n        root.put("securityInfo", Static.getSecurityInfo(context));\n        root.put("advertisementId", advertisementId);\n        Log.e(TAG, "12 - root : " + root.toString());\n        String str = root.toString();\n        byte[] outputBytes = str.getBytes("UTF-8");\n        OutputStream os = conn.getOutputStream();\n        os.write(outputBytes);\n        int responseCode = conn.getResponseCode();\n        Log.e(TAG, "13 - responseCode : " + responseCode);\n        if (responseCode == HttpsURLConnection.HTTP_OK) {\n            Log.e(TAG, "14 - HTTP_OK");\n            String line;\n            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            while ((line = br.readLine()) != null) {\n                response += line;\n            }\n        } else {\n            Log.e(TAG, "14 - False - HTTP_OK");\n            response = "";\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return response;\n}'
p2472
aS'conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);'
p2473
aS'Log.e(TAG, "6 - response !empty...");\nJSONObject jRoot = new JSONObject(response);\nJSONObject d = jRoot.getJSONObject("d");\nint ResultType = d.getInt("ResultType");'
p2474
aS'List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\nnameValuePairs.add(new BasicNameValuePair("id", "12345"));\nnameValuePairs.add(new BasicNameValuePair("stringdata", "Hi"));\nhttppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));'
p2475
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");'
p2476
aS'writer.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p2477
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p2478
aS'if (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p2479
aS'if (first)\n    first = false;'
p2480
aS'public void postData() {\n    HttpClient httpclient = new DefaultHttpClient();\n    HttpPost httppost = new HttpPost("http://www.yoursite.com/script.php");\n    try {\n        List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\n        nameValuePairs.add(new BasicNameValuePair("id", "12345"));\n        nameValuePairs.add(new BasicNameValuePair("stringdata", "Hi"));\n        httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n        HttpResponse response = httpclient.execute(httppost);\n    } catch (ClientProtocolException e) {\n    } catch (IOException e) {\n    }\n}'
p2481
aS'result.append("&");\nresult.append(URLEncoder.encode(entry.getKey(), "UTF-8"));\nresult.append("=");'
p2482
aS'BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p2483
aS'sendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\nsendPostReqButton.setOnClickListener(this);\nclearButton = (Button) findViewById(R.id.login_clear_button);'
p2484
aS'BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\nStringBuilder stringBuilder = new StringBuilder();\nString bufferedStrChunk = null;\nwhile ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n    stringBuilder.append(bufferedStrChunk);\n}\nreturn stringBuilder.toString();'
p2485
aS'Log.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p2486
aS'nameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n    uee.printStackTrace();\n}\nreturn null;'
p2487
aS'root.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);'
p2488
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();'
p2489
aS'String paramPassword = params[1];'
p2490
aS'protected String doInBackground(String... params) {\n    String urlString = params[0];\n    String resultToDisplay = "";\n    InputStream in = null;\n    try {\n        URL url = new URL(urlString);\n        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n        in = new BufferedInputStream(urlConnection.getInputStream());\n    } catch (Exception e) {\n        System.out.println(e.getMessage());\n        return e.getMessage();\n    }\n    try {\n        resultToDisplay = IOUtils.toString(in, "UTF-8");\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return resultToDisplay;\n}'
p2491
aS'os.write(outputBytes);\nint responseCode = conn.getResponseCode();'
p2492
aS'System.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);'
p2493
aS'usernameEditText = (EditText) findViewById(R.id.login_username_editText);\npasswordEditText = (EditText) findViewById(R.id.login_password_editText);\nsendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\nsendPostReqButton.setOnClickListener(this);\nclearButton = (Button) findViewById(R.id.login_clear_button);\nclearButton.setOnClickListener(this);'
p2494
aS'root.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n}'
p2495
aS'conn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n}'
p2496
aS'InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\nBufferedReader bufferedReader = new BufferedReader(inputStreamReader);\nStringBuilder stringBuilder = new StringBuilder();\nString bufferedStrChunk = null;'
p2497
aS'conn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();'
p2498
aS'conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);'
p2499
aS'public class MyHttpPostProjectActivity extends Activity implements OnClickListener {\n\n    private EditText usernameEditText;\n\n    private EditText passwordEditText;\n\n    private Button sendPostReqButton;\n\n    private Button clearButton;\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.login);\n        usernameEditText = (EditText) findViewById(R.id.login_username_editText);\n        passwordEditText = (EditText) findViewById(R.id.login_password_editText);\n        sendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\n        sendPostReqButton.setOnClickListener(this);\n        clearButton = (Button) findViewById(R.id.login_clear_button);\n        clearButton.setOnClickListener(this);\n    }\n\n    @Override\n    public void onClick(View v) {\n        if (v.getId() == R.id.login_clear_button) {\n            usernameEditText.setText("");\n            passwordEditText.setText("");\n            passwordEditText.setCursorVisible(false);\n            passwordEditText.setFocusable(false);\n            usernameEditText.setCursorVisible(true);\n            passwordEditText.setFocusable(true);\n        } else if (v.getId() == R.id.login_sendPostReq_button) {\n            String givenUsername = usernameEditText.getEditableText().toString();\n            String givenPassword = passwordEditText.getEditableText().toString();\n            System.out.println("Given username :" + givenUsername + " Given password :" + givenPassword);\n            sendPostRequest(givenUsername, givenPassword);\n        }\n    }\n\n    private void sendPostRequest(String givenUsername, String givenPassword) {\n        class SendPostReqAsyncTask extends AsyncTask<String, Void, String> {\n\n            @Override\n            protected String doInBackground(String... params) {\n                String paramUsername = params[0];\n                String paramPassword = params[1];\n                System.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\n                HttpClient httpClient = new DefaultHttpClient();\n                HttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\n                BasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\n                BasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\n                List<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\n                nameValuePairList.add(usernameBasicNameValuePair);\n                nameValuePairList.add(passwordBasicNameValuePAir);\n                try {\n                    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n                    httpPost.setEntity(urlEncodedFormEntity);\n                    try {\n                        HttpResponse httpResponse = httpClient.execute(httpPost);\n                        InputStream inputStream = httpResponse.getEntity().getContent();\n                        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n                        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n                        StringBuilder stringBuilder = new StringBuilder();\n                        String bufferedStrChunk = null;\n                        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n                            stringBuilder.append(bufferedStrChunk);\n                        }\n                        return stringBuilder.toString();\n                    } catch (ClientProtocolException cpe) {\n                        System.out.println("First Exception caz of HttpResponese :" + cpe);\n                        cpe.printStackTrace();\n                    } catch (IOException ioe) {\n                        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n                        ioe.printStackTrace();\n                    }\n                } catch (UnsupportedEncodingException uee) {\n                    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n                    uee.printStackTrace();\n                }\n                return null;\n            }\n\n            @Override\n            protected void onPostExecute(String result) {\n                super.onPostExecute(result);\n                if (result.equals("working")) {\n                    Toast.makeText(getApplicationContext(), "HTTP POST is working...", Toast.LENGTH_LONG).show();\n                } else {\n                    Toast.makeText(getApplicationContext(), "Invalid POST req...", Toast.LENGTH_LONG).show();\n                }\n            }\n        }\n        SendPostReqAsyncTask sendPostReqAsyncTask = new SendPostReqAsyncTask();\n        sendPostReqAsyncTask.execute(givenUsername, givenPassword);\n    }\n}'
p2500
aS'conn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p2501
aS'String str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p2502
aS'URL url;\nString response = "";'
p2503
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);'
p2504
aS'String paramUsername = params[0];\nString paramPassword = params[1];\nSystem.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);'
p2505
aS'super.onPostExecute(result);\nif (result.equals("working")) {\n    Toast.makeText(getApplicationContext(), "HTTP POST is working...", Toast.LENGTH_LONG).show();\n} else {\n    Toast.makeText(getApplicationContext(), "Invalid POST req...", Toast.LENGTH_LONG).show();\n}'
p2506
aS'protected void onPostExecute(Boolean result) {\n    Log.e(TAG, "7 - onPostExecute ...");\n    if (result) {\n        Log.e(TAG, "8 - Update UI ...");\n    } else {\n        Log.e(TAG, "8 - Finish ...");\n    }\n}'
p2507
aS'String response = "";\nLog.e(TAG, "2 - pre Request to response...");\ntry {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}\nLog.e(TAG, "5 - after Response...");\nif (!response.equalsIgnoreCase("")) {\n}'
p2508
aS'response = performPostCall(urlString, new HashMap<String, String>() {\n\n    private static final long serialVersionUID = 1L;\n\n    {\n        put("Accept", "application/json");\n        put("Content-Type", "application/json");\n    }\n});'
p2509
aS'byte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p2510
aS'@Override\npublic void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.login);\n    usernameEditText = (EditText) findViewById(R.id.login_username_editText);\n    passwordEditText = (EditText) findViewById(R.id.login_password_editText);\n    sendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\n    sendPostReqButton.setOnClickListener(this);\n    clearButton = (Button) findViewById(R.id.login_clear_button);\n    clearButton.setOnClickListener(this);\n}'
p2511
aS'root.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p2512
aS'OutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();'
p2513
aS'Log.e(TAG, "4 " + response.toString());'
p2514
aS'if (v.getId() == R.id.login_clear_button) {\n    usernameEditText.setText("");\n}'
p2515
aS'conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n    response = "";\n}'
p2516
aS'JSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());'
p2517
aS'UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\nhttpPost.setEntity(urlEncodedFormEntity);'
p2518
aS'this.context = contex;\nthis.advertisementId = advertisementId;'
p2519
aS'writer.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p2520
aS'nameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n}'
p2521
aS'try {\n    HttpResponse httpResponse = httpClient.execute(httpPost);\n    InputStream inputStream = httpResponse.getEntity().getContent();\n    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n    StringBuilder stringBuilder = new StringBuilder();\n    String bufferedStrChunk = null;\n    while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n        stringBuilder.append(bufferedStrChunk);\n    }\n    return stringBuilder.toString();\n} catch (ClientProtocolException cpe) {\n}'
p2522
aS'conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);'
p2523
aS'public Empty(Context contex, int advertisementId) {\n    this.context = contex;\n    this.advertisementId = advertisementId;\n}\n@Override\nprotected void onPreExecute() {\n    Log.e(TAG, "1 - RequestVoteTask is about to start...");\n}\n@Override\nprotected Boolean doInBackground(Void... params) {\n    boolean status = false;\n    String response = "";\n    Log.e(TAG, "2 - pre Request to response...");\n    try {\n        response = performPostCall(urlString, new HashMap<String, String>() {\n\n            private static final long serialVersionUID = 1L;\n\n            {\n                put("Accept", "application/json");\n                put("Content-Type", "application/json");\n            }\n        });\n        Log.e(TAG, "3 - give Response...");\n        Log.e(TAG, "4 " + response.toString());\n    } catch (Exception e) {\n        Log.e(TAG, "Error ...");\n    }\n    Log.e(TAG, "5 - after Response...");\n    if (!response.equalsIgnoreCase("")) {\n        try {\n            Log.e(TAG, "6 - response !empty...");\n            JSONObject jRoot = new JSONObject(response);\n            JSONObject d = jRoot.getJSONObject("d");\n            int ResultType = d.getInt("ResultType");\n            Log.e("ResultType", ResultType + "");\n            if (ResultType == 1) {\n                status = true;\n            }\n        } catch (JSONException e) {\n            Log.e(TAG, "Error " + e.getMessage());\n        } finally {\n        }\n    } else {\n        Log.e(TAG, "6 - response is empty...");\n        status = false;\n    }\n    return status;\n}\n@Override\nprotected void onPostExecute(Boolean result) {\n    Log.e(TAG, "7 - onPostExecute ...");\n    if (result) {\n        Log.e(TAG, "8 - Update UI ...");\n    } else {\n        Log.e(TAG, "8 - Finish ...");\n    }\n}'
p2524
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));'
p2525
aS'conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);'
p2526
aS'JSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);'
p2527
aS'int responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p2528
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p2529
aS'os.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n}'
p2530
aS'class SendPostReqAsyncTask extends AsyncTask<String, Void, String> {\n\n    @Override\n    protected String doInBackground(String... params) {\n        String paramUsername = params[0];\n        String paramPassword = params[1];\n        System.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\n        HttpClient httpClient = new DefaultHttpClient();\n        HttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\n        BasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\n        BasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\n        List<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\n        nameValuePairList.add(usernameBasicNameValuePair);\n        nameValuePairList.add(passwordBasicNameValuePAir);\n        try {\n            UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n            httpPost.setEntity(urlEncodedFormEntity);\n            try {\n                HttpResponse httpResponse = httpClient.execute(httpPost);\n                InputStream inputStream = httpResponse.getEntity().getContent();\n                InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n                BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n                StringBuilder stringBuilder = new StringBuilder();\n                String bufferedStrChunk = null;\n                while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n                    stringBuilder.append(bufferedStrChunk);\n                }\n                return stringBuilder.toString();\n            } catch (ClientProtocolException cpe) {\n                System.out.println("First Exception caz of HttpResponese :" + cpe);\n                cpe.printStackTrace();\n            } catch (IOException ioe) {\n                System.out.println("Second Exception caz of HttpResponse :" + ioe);\n                ioe.printStackTrace();\n            }\n        } catch (UnsupportedEncodingException uee) {\n            System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n            uee.printStackTrace();\n        }\n        return null;\n    }\n\n    @Override\n    protected void onPostExecute(String result) {\n        super.onPostExecute(result);\n        if (result.equals("working")) {\n            Toast.makeText(getApplicationContext(), "HTTP POST is working...", Toast.LENGTH_LONG).show();\n        } else {\n            Toast.makeText(getApplicationContext(), "Invalid POST req...", Toast.LENGTH_LONG).show();\n        }\n    }\n}\nSendPostReqAsyncTask sendPostReqAsyncTask = new SendPostReqAsyncTask();\nsendPostReqAsyncTask.execute(givenUsername, givenPassword);'
p2531
aS'usernameEditText.setText("");\npasswordEditText.setText("");\npasswordEditText.setCursorVisible(false);\npasswordEditText.setFocusable(false);\nusernameEditText.setCursorVisible(true);'
p2532
aS'conn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();'
p2533
aS'conn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p2534
aS'int responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    response = "";\n}'
p2535
aS'private final String TAG = "post json example";\nprivate Context context;\nprivate int advertisementId;\npublic Empty(Context contex, int advertisementId) {\n    this.context = contex;\n    this.advertisementId = advertisementId;\n}'
p2536
aS'conn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();'
p2537
aS'if (first)\n    first = false;\nelse\n    result.append("&");'
p2538
aS'result.append("&");\nresult.append(URLEncoder.encode(entry.getKey(), "UTF-8"));'
p2539
aS'conn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");'
p2540
aS'nameValuePairList.add(usernameBasicNameValuePair);'
p2541
aS'boolean first = true;\nfor (Map.Entry<String, String> entry : params.entrySet()) {\n    if (first)\n        first = false;\n}'
p2542
aS'nameValuePairs.add(new BasicNameValuePair("stringdata", "Hi"));'
p2543
aS'conn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n    response = "";\n}'
p2544
aS'conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();'
p2545
aS'os.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p2546
aS'conn.setReadTimeout(15000);'
p2547
aS'conn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);'
p2548
aS'class SendPostReqAsyncTask extends AsyncTask<String, Void, String> {\n\n    @Override\n    protected String doInBackground(String... params) {\n        String paramUsername = params[0];\n        String paramPassword = params[1];\n        System.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\n        HttpClient httpClient = new DefaultHttpClient();\n        HttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\n        BasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\n        BasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\n        List<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\n        nameValuePairList.add(usernameBasicNameValuePair);\n        nameValuePairList.add(passwordBasicNameValuePAir);\n        try {\n            UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n            httpPost.setEntity(urlEncodedFormEntity);\n            try {\n                HttpResponse httpResponse = httpClient.execute(httpPost);\n                InputStream inputStream = httpResponse.getEntity().getContent();\n                InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n                BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n                StringBuilder stringBuilder = new StringBuilder();\n                String bufferedStrChunk = null;\n                while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n                    stringBuilder.append(bufferedStrChunk);\n                }\n                return stringBuilder.toString();\n            } catch (ClientProtocolException cpe) {\n                System.out.println("First Exception caz of HttpResponese :" + cpe);\n                cpe.printStackTrace();\n            } catch (IOException ioe) {\n                System.out.println("Second Exception caz of HttpResponse :" + ioe);\n                ioe.printStackTrace();\n            }\n        } catch (UnsupportedEncodingException uee) {\n            System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n            uee.printStackTrace();\n        }\n        return null;\n    }\n}'
p2549
aS'HttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n    uee.printStackTrace();\n}\nreturn null;'
p2550
aS'String str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n    response = "";\n}'
p2551
aS'conn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p2552
aS'Log.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n}'
p2553
aS'if (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n}'
p2554
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n}'
p2555
aS'public Empty(Context contex, int advertisementId) {\n    this.context = contex;\n    this.advertisementId = advertisementId;\n}\n@Override\nprotected void onPreExecute() {\n    Log.e(TAG, "1 - RequestVoteTask is about to start...");\n}\n@Override\nprotected Boolean doInBackground(Void... params) {\n    boolean status = false;\n    String response = "";\n    Log.e(TAG, "2 - pre Request to response...");\n    try {\n        response = performPostCall(urlString, new HashMap<String, String>() {\n\n            private static final long serialVersionUID = 1L;\n\n            {\n                put("Accept", "application/json");\n                put("Content-Type", "application/json");\n            }\n        });\n        Log.e(TAG, "3 - give Response...");\n        Log.e(TAG, "4 " + response.toString());\n    } catch (Exception e) {\n        Log.e(TAG, "Error ...");\n    }\n    Log.e(TAG, "5 - after Response...");\n    if (!response.equalsIgnoreCase("")) {\n        try {\n            Log.e(TAG, "6 - response !empty...");\n            JSONObject jRoot = new JSONObject(response);\n            JSONObject d = jRoot.getJSONObject("d");\n            int ResultType = d.getInt("ResultType");\n            Log.e("ResultType", ResultType + "");\n            if (ResultType == 1) {\n                status = true;\n            }\n        } catch (JSONException e) {\n            Log.e(TAG, "Error " + e.getMessage());\n        } finally {\n        }\n    } else {\n        Log.e(TAG, "6 - response is empty...");\n        status = false;\n    }\n    return status;\n}\n@Override\nprotected void onPostExecute(Boolean result) {\n    Log.e(TAG, "7 - onPostExecute ...");\n    if (result) {\n        Log.e(TAG, "8 - Update UI ...");\n    } else {\n        Log.e(TAG, "8 - Finish ...");\n    }\n}\npublic String performPostCall(String requestURL, HashMap<String, String> postDataParams) {\n    URL url;\n    String response = "";\n    try {\n        url = new URL(requestURL);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n        conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n        conn.setRequestMethod("POST");\n        conn.setDoInput(true);\n        conn.setDoOutput(true);\n        conn.setRequestProperty("Content-Type", "application/json");\n        Log.e(TAG, "11 - url : " + requestURL);\n        JSONObject root = new JSONObject();\n        String token = Static.getPrefsToken(context);\n        root.put("securityInfo", Static.getSecurityInfo(context));\n        root.put("advertisementId", advertisementId);\n        Log.e(TAG, "12 - root : " + root.toString());\n        String str = root.toString();\n        byte[] outputBytes = str.getBytes("UTF-8");\n        OutputStream os = conn.getOutputStream();\n        os.write(outputBytes);\n        int responseCode = conn.getResponseCode();\n        Log.e(TAG, "13 - responseCode : " + responseCode);\n        if (responseCode == HttpsURLConnection.HTTP_OK) {\n            Log.e(TAG, "14 - HTTP_OK");\n            String line;\n            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            while ((line = br.readLine()) != null) {\n                response += line;\n            }\n        } else {\n            Log.e(TAG, "14 - False - HTTP_OK");\n            response = "";\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return response;\n}'
p2556
aS'try {\n    resultToDisplay = IOUtils.toString(in, "UTF-8");\n} catch (IOException e) {\n}'
p2557
aS'try {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}\nLog.e(TAG, "5 - after Response...");\nif (!response.equalsIgnoreCase("")) {\n    try {\n        Log.e(TAG, "6 - response !empty...");\n        JSONObject jRoot = new JSONObject(response);\n        JSONObject d = jRoot.getJSONObject("d");\n        int ResultType = d.getInt("ResultType");\n        Log.e("ResultType", ResultType + "");\n        if (ResultType == 1) {\n            status = true;\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, "Error " + e.getMessage());\n    } finally {\n    }\n}'
p2558
aS'root.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n}'
p2559
aS'URL url = new URL(urlString);\nHttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();'
p2560
aS'try {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n}'
p2561
aS'if (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n}'
p2562
aS'String response = "";\nLog.e(TAG, "2 - pre Request to response...");\ntry {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}\nLog.e(TAG, "5 - after Response...");\nif (!response.equalsIgnoreCase("")) {\n    try {\n        Log.e(TAG, "6 - response !empty...");\n        JSONObject jRoot = new JSONObject(response);\n        JSONObject d = jRoot.getJSONObject("d");\n        int ResultType = d.getInt("ResultType");\n        Log.e("ResultType", ResultType + "");\n        if (ResultType == 1) {\n            status = true;\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, "Error " + e.getMessage());\n    } finally {\n    }\n} else {\n    Log.e(TAG, "6 - response is empty...");\n    status = false;\n}\nreturn status;'
p2563
aS'conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());'
p2564
aS'try {\n    List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\n    nameValuePairs.add(new BasicNameValuePair("id", "12345"));\n    nameValuePairs.add(new BasicNameValuePair("stringdata", "Hi"));\n    httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n    HttpResponse response = httpclient.execute(httppost);\n} catch (ClientProtocolException e) {\n} catch (IOException e) {\n}'
p2565
aS'conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);'
p2566
aS'conn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);'
p2567
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);'
p2568
aS'String token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n}'
p2569
aS'private EditText passwordEditText;\nprivate Button sendPostReqButton;\nprivate Button clearButton;\n@Override\npublic void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.login);\n    usernameEditText = (EditText) findViewById(R.id.login_username_editText);\n    passwordEditText = (EditText) findViewById(R.id.login_password_editText);\n    sendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\n    sendPostReqButton.setOnClickListener(this);\n    clearButton = (Button) findViewById(R.id.login_clear_button);\n    clearButton.setOnClickListener(this);\n}'
p2570
aS'conn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);'
p2571
aS'root.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);'
p2572
aS'nameValuePairs.add(new BasicNameValuePair("id", "12345"));'
p2573
aS'BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\nwhile ((line = br.readLine()) != null) {\n}'
p2574
aS'private void sendPostRequest(String givenUsername, String givenPassword) {\n    class SendPostReqAsyncTask extends AsyncTask<String, Void, String> {\n\n        @Override\n        protected String doInBackground(String... params) {\n            String paramUsername = params[0];\n            String paramPassword = params[1];\n            System.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\n            HttpClient httpClient = new DefaultHttpClient();\n            HttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\n            BasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\n            BasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\n            List<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\n            nameValuePairList.add(usernameBasicNameValuePair);\n            nameValuePairList.add(passwordBasicNameValuePAir);\n            try {\n                UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n                httpPost.setEntity(urlEncodedFormEntity);\n                try {\n                    HttpResponse httpResponse = httpClient.execute(httpPost);\n                    InputStream inputStream = httpResponse.getEntity().getContent();\n                    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n                    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n                    StringBuilder stringBuilder = new StringBuilder();\n                    String bufferedStrChunk = null;\n                    while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n                        stringBuilder.append(bufferedStrChunk);\n                    }\n                    return stringBuilder.toString();\n                } catch (ClientProtocolException cpe) {\n                    System.out.println("First Exception caz of HttpResponese :" + cpe);\n                    cpe.printStackTrace();\n                } catch (IOException ioe) {\n                    System.out.println("Second Exception caz of HttpResponse :" + ioe);\n                    ioe.printStackTrace();\n                }\n            } catch (UnsupportedEncodingException uee) {\n                System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n                uee.printStackTrace();\n            }\n            return null;\n        }\n\n        @Override\n        protected void onPostExecute(String result) {\n            super.onPostExecute(result);\n            if (result.equals("working")) {\n                Toast.makeText(getApplicationContext(), "HTTP POST is working...", Toast.LENGTH_LONG).show();\n            } else {\n                Toast.makeText(getApplicationContext(), "Invalid POST req...", Toast.LENGTH_LONG).show();\n            }\n        }\n    }\n    SendPostReqAsyncTask sendPostReqAsyncTask = new SendPostReqAsyncTask();\n    sendPostReqAsyncTask.execute(givenUsername, givenPassword);\n}'
p2575
aS'Log.e(TAG, "14 - HTTP_OK");'
p2576
aS'OutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p2577
aS'Log.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();'
p2578
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p2579
aS'conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);'
p2580
aS'conn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);'
p2581
aS'conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);'
p2582
aS'OutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();'
p2583
aS'@Override\nprotected Boolean doInBackground(Void... params) {\n    boolean status = false;\n    String response = "";\n    Log.e(TAG, "2 - pre Request to response...");\n    try {\n        response = performPostCall(urlString, new HashMap<String, String>() {\n\n            private static final long serialVersionUID = 1L;\n\n            {\n                put("Accept", "application/json");\n                put("Content-Type", "application/json");\n            }\n        });\n        Log.e(TAG, "3 - give Response...");\n        Log.e(TAG, "4 " + response.toString());\n    } catch (Exception e) {\n        Log.e(TAG, "Error ...");\n    }\n    Log.e(TAG, "5 - after Response...");\n    if (!response.equalsIgnoreCase("")) {\n        try {\n            Log.e(TAG, "6 - response !empty...");\n            JSONObject jRoot = new JSONObject(response);\n            JSONObject d = jRoot.getJSONObject("d");\n            int ResultType = d.getInt("ResultType");\n            Log.e("ResultType", ResultType + "");\n            if (ResultType == 1) {\n                status = true;\n            }\n        } catch (JSONException e) {\n            Log.e(TAG, "Error " + e.getMessage());\n        } finally {\n        }\n    } else {\n        Log.e(TAG, "6 - response is empty...");\n        status = false;\n    }\n    return status;\n}\n@Override\nprotected void onPostExecute(Boolean result) {\n    Log.e(TAG, "7 - onPostExecute ...");\n    if (result) {\n        Log.e(TAG, "8 - Update UI ...");\n    } else {\n        Log.e(TAG, "8 - Finish ...");\n    }\n}\npublic String performPostCall(String requestURL, HashMap<String, String> postDataParams) {\n    URL url;\n    String response = "";\n    try {\n        url = new URL(requestURL);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n        conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n        conn.setRequestMethod("POST");\n        conn.setDoInput(true);\n        conn.setDoOutput(true);\n        conn.setRequestProperty("Content-Type", "application/json");\n        Log.e(TAG, "11 - url : " + requestURL);\n        JSONObject root = new JSONObject();\n        String token = Static.getPrefsToken(context);\n        root.put("securityInfo", Static.getSecurityInfo(context));\n        root.put("advertisementId", advertisementId);\n        Log.e(TAG, "12 - root : " + root.toString());\n        String str = root.toString();\n        byte[] outputBytes = str.getBytes("UTF-8");\n        OutputStream os = conn.getOutputStream();\n        os.write(outputBytes);\n        int responseCode = conn.getResponseCode();\n        Log.e(TAG, "13 - responseCode : " + responseCode);\n        if (responseCode == HttpsURLConnection.HTTP_OK) {\n            Log.e(TAG, "14 - HTTP_OK");\n            String line;\n            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            while ((line = br.readLine()) != null) {\n                response += line;\n            }\n        } else {\n            Log.e(TAG, "14 - False - HTTP_OK");\n            response = "";\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return response;\n}'
p2584
aS'for (Map.Entry<String, String> entry : params.entrySet()) {\n    if (first)\n        first = false;\n    else\n        result.append("&");\n    result.append(URLEncoder.encode(entry.getKey(), "UTF-8"));\n    result.append("=");\n}'
p2585
aS'conn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    response = "";\n}'
p2586
aS'conn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);'
p2587
aS'nameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);'
p2588
aS'String token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();'
p2589
aS'private Context context;\nprivate int advertisementId;'
p2590
aS'try {\n    url = new URL(requestURL);\n    HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n    conn.setReadTimeout(15000);\n    conn.setConnectTimeout(15000);\n    conn.setRequestMethod("GET");\n    conn.setDoInput(true);\n    conn.setDoOutput(true);\n    OutputStream os = conn.getOutputStream();\n    BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\n    writer.write(getPostDataString(postDataParams));\n    writer.flush();\n    writer.close();\n    os.close();\n    int responseCode = conn.getResponseCode();\n    if (responseCode == HttpsURLConnection.HTTP_OK) {\n        String line;\n        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        while ((line = br.readLine()) != null) {\n            response += line;\n        }\n    } else {\n        response = "";\n    }\n} catch (Exception e) {\n    e.printStackTrace();\n}\nreturn response;'
p2591
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");'
p2592
aS'JSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();'
p2593
aS'conn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n}'
p2594
aS'httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));\nHttpResponse response = httpclient.execute(httppost);'
p2595
aS'OutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p2596
aS'protected void onPreExecute() {\n    super.onPreExecute();\n}'
p2597
aS'root.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n}'
p2598
aS'conn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();'
p2599
aS'while ((line = br.readLine()) != null) {\n}'
p2600
aS'private Context context;\nprivate int advertisementId;\npublic Empty(Context contex, int advertisementId) {\n    this.context = contex;\n    this.advertisementId = advertisementId;\n}\n@Override\nprotected void onPreExecute() {\n    Log.e(TAG, "1 - RequestVoteTask is about to start...");\n}\n@Override\nprotected Boolean doInBackground(Void... params) {\n    boolean status = false;\n    String response = "";\n    Log.e(TAG, "2 - pre Request to response...");\n    try {\n        response = performPostCall(urlString, new HashMap<String, String>() {\n\n            private static final long serialVersionUID = 1L;\n\n            {\n                put("Accept", "application/json");\n                put("Content-Type", "application/json");\n            }\n        });\n        Log.e(TAG, "3 - give Response...");\n        Log.e(TAG, "4 " + response.toString());\n    } catch (Exception e) {\n        Log.e(TAG, "Error ...");\n    }\n    Log.e(TAG, "5 - after Response...");\n    if (!response.equalsIgnoreCase("")) {\n        try {\n            Log.e(TAG, "6 - response !empty...");\n            JSONObject jRoot = new JSONObject(response);\n            JSONObject d = jRoot.getJSONObject("d");\n            int ResultType = d.getInt("ResultType");\n            Log.e("ResultType", ResultType + "");\n            if (ResultType == 1) {\n                status = true;\n            }\n        } catch (JSONException e) {\n            Log.e(TAG, "Error " + e.getMessage());\n        } finally {\n        }\n    } else {\n        Log.e(TAG, "6 - response is empty...");\n        status = false;\n    }\n    return status;\n}\n@Override\nprotected void onPostExecute(Boolean result) {\n    Log.e(TAG, "7 - onPostExecute ...");\n    if (result) {\n        Log.e(TAG, "8 - Update UI ...");\n    } else {\n        Log.e(TAG, "8 - Finish ...");\n    }\n}'
p2601
aS'conn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");'
p2602
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();'
p2603
aS'private final String TAG = "post json example";\nprivate Context context;'
p2604
aS'root.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p2605
aS'conn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");'
p2606
aS'conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");'
p2607
aS'@Override\nprotected Boolean doInBackground(Void... params) {\n    boolean status = false;\n    String response = "";\n    Log.e(TAG, "2 - pre Request to response...");\n    try {\n        response = performPostCall(urlString, new HashMap<String, String>() {\n\n            private static final long serialVersionUID = 1L;\n\n            {\n                put("Accept", "application/json");\n                put("Content-Type", "application/json");\n            }\n        });\n        Log.e(TAG, "3 - give Response...");\n        Log.e(TAG, "4 " + response.toString());\n    } catch (Exception e) {\n        Log.e(TAG, "Error ...");\n    }\n    Log.e(TAG, "5 - after Response...");\n    if (!response.equalsIgnoreCase("")) {\n        try {\n            Log.e(TAG, "6 - response !empty...");\n            JSONObject jRoot = new JSONObject(response);\n            JSONObject d = jRoot.getJSONObject("d");\n            int ResultType = d.getInt("ResultType");\n            Log.e("ResultType", ResultType + "");\n            if (ResultType == 1) {\n                status = true;\n            }\n        } catch (JSONException e) {\n            Log.e(TAG, "Error " + e.getMessage());\n        } finally {\n        }\n    } else {\n        Log.e(TAG, "6 - response is empty...");\n        status = false;\n    }\n    return status;\n}'
p2608
aS'JSONObject jRoot = new JSONObject(response);\nJSONObject d = jRoot.getJSONObject("d");\nint ResultType = d.getInt("ResultType");\nLog.e("ResultType", ResultType + "");'
p2609
aS'conn.setRequestMethod("POST");\nconn.setDoInput(true);'
p2610
aS'int responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);'
p2611
aS'Log.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");'
p2612
aS'conn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");'
p2613
aS'if (!response.equalsIgnoreCase("")) {\n    try {\n        Log.e(TAG, "6 - response !empty...");\n        JSONObject jRoot = new JSONObject(response);\n        JSONObject d = jRoot.getJSONObject("d");\n        int ResultType = d.getInt("ResultType");\n        Log.e("ResultType", ResultType + "");\n        if (ResultType == 1) {\n            status = true;\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, "Error " + e.getMessage());\n    } finally {\n    }\n} else {\n}'
p2614
aS'for (Map.Entry<String, String> entry : params.entrySet()) {\n}'
p2615
aS'writer.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();'
p2616
aS'String resultToDisplay = "";\nInputStream in = null;\ntry {\n    URL url = new URL(urlString);\n    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n    in = new BufferedInputStream(urlConnection.getInputStream());\n} catch (Exception e) {\n    System.out.println(e.getMessage());\n    return e.getMessage();\n}\ntry {\n    resultToDisplay = IOUtils.toString(in, "UTF-8");\n} catch (IOException e) {\n    e.printStackTrace();\n}'
p2617
aS'String paramPassword = params[1];\nSystem.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n    uee.printStackTrace();\n}\nreturn null;'
p2618
aS'if (first) {\n}'
p2619
aS'conn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p2620
aS'InputStream in = null;\ntry {\n    URL url = new URL(urlString);\n    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n    in = new BufferedInputStream(urlConnection.getInputStream());\n} catch (Exception e) {\n    System.out.println(e.getMessage());\n}'
p2621
aS'String givenUsername = usernameEditText.getEditableText().toString();\nString givenPassword = passwordEditText.getEditableText().toString();\nSystem.out.println("Given username :" + givenUsername + " Given password :" + givenPassword);'
p2622
aS'BasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n    uee.printStackTrace();\n}'
p2623
aS'conn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p2624
aS'try {\n    HttpResponse httpResponse = httpClient.execute(httpPost);\n    InputStream inputStream = httpResponse.getEntity().getContent();\n    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n    StringBuilder stringBuilder = new StringBuilder();\n    String bufferedStrChunk = null;\n    while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n        stringBuilder.append(bufferedStrChunk);\n    }\n    return stringBuilder.toString();\n} catch (ClientProtocolException cpe) {\n    System.out.println("First Exception caz of HttpResponese :" + cpe);\n}'
p2625
aS'String paramUsername = params[0];\nString paramPassword = params[1];\nSystem.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n}'
p2626
aS'URL url;\nString response = "";\ntry {\n    url = new URL(requestURL);\n    HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n    conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n    conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n    conn.setRequestMethod("POST");\n    conn.setDoInput(true);\n    conn.setDoOutput(true);\n    conn.setRequestProperty("Content-Type", "application/json");\n    Log.e(TAG, "11 - url : " + requestURL);\n    JSONObject root = new JSONObject();\n    String token = Static.getPrefsToken(context);\n    root.put("securityInfo", Static.getSecurityInfo(context));\n    root.put("advertisementId", advertisementId);\n    Log.e(TAG, "12 - root : " + root.toString());\n    String str = root.toString();\n    byte[] outputBytes = str.getBytes("UTF-8");\n    OutputStream os = conn.getOutputStream();\n    os.write(outputBytes);\n    int responseCode = conn.getResponseCode();\n    Log.e(TAG, "13 - responseCode : " + responseCode);\n    if (responseCode == HttpsURLConnection.HTTP_OK) {\n        Log.e(TAG, "14 - HTTP_OK");\n        String line;\n        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        while ((line = br.readLine()) != null) {\n            response += line;\n        }\n    } else {\n        Log.e(TAG, "14 - False - HTTP_OK");\n        response = "";\n    }\n} catch (Exception e) {\n}'
p2627
aS'@Override\nprotected void onPostExecute(String result) {\n}'
p2628
aS'byte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n    response = "";\n}'
p2629
aS'Log.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p2630
aS'String response = "";\nLog.e(TAG, "2 - pre Request to response...");'
p2631
aS'root.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);'
p2632
aS'BasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n}'
p2633
aS'conn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);'
p2634
aS'usernameEditText = (EditText) findViewById(R.id.login_username_editText);'
p2635
aS'BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\nwhile ((line = br.readLine()) != null) {\n    response += line;\n}'
p2636
aS'Log.e(TAG, "14 - HTTP_OK");\nString line;\nBufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\nwhile ((line = br.readLine()) != null) {\n}'
p2637
aS'JSONObject root = new JSONObject();'
p2638
aS'Log.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n}'
p2639
aS'conn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);'
p2640
aS'root.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());'
p2641
aS'byte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);'
p2642
aS'String bufferedStrChunk = null;\nwhile ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n    stringBuilder.append(bufferedStrChunk);\n}'
p2643
aS'URL url = new URL(urlString);\nHttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\nin = new BufferedInputStream(urlConnection.getInputStream());'
p2644
aS'if (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p2645
aS'stringBuilder.append(bufferedStrChunk);'
p2646
aS'int responseCode = conn.getResponseCode();'
p2647
aS'BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();'
p2648
aS'String urlString = "http://www.yoursite.com/";\nprivate final String TAG = "post json example";'
p2649
aS'JSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n}'
p2650
aS'@Override\nprotected void onPreExecute() {\n    Log.e(TAG, "1 - RequestVoteTask is about to start...");\n}'
p2651
aS'String urlString = params[0];\nString resultToDisplay = "";\nInputStream in = null;\ntry {\n    URL url = new URL(urlString);\n    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n    in = new BufferedInputStream(urlConnection.getInputStream());\n} catch (Exception e) {\n    System.out.println(e.getMessage());\n    return e.getMessage();\n}\ntry {\n    resultToDisplay = IOUtils.toString(in, "UTF-8");\n} catch (IOException e) {\n    e.printStackTrace();\n}'
p2652
aS'String urlString = params[0];\nString resultToDisplay = "";\nInputStream in = null;\ntry {\n    URL url = new URL(urlString);\n    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n    in = new BufferedInputStream(urlConnection.getInputStream());\n} catch (Exception e) {\n    System.out.println(e.getMessage());\n    return e.getMessage();\n}\ntry {\n    resultToDisplay = IOUtils.toString(in, "UTF-8");\n} catch (IOException e) {\n}'
p2653
aS'String urlString = "http://www.yoursite.com/";'
p2654
aS'private Button clearButton;\n@Override\npublic void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.login);\n    usernameEditText = (EditText) findViewById(R.id.login_username_editText);\n    passwordEditText = (EditText) findViewById(R.id.login_password_editText);\n    sendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\n    sendPostReqButton.setOnClickListener(this);\n    clearButton = (Button) findViewById(R.id.login_clear_button);\n    clearButton.setOnClickListener(this);\n}\n@Override\npublic void onClick(View v) {\n    if (v.getId() == R.id.login_clear_button) {\n        usernameEditText.setText("");\n        passwordEditText.setText("");\n        passwordEditText.setCursorVisible(false);\n        passwordEditText.setFocusable(false);\n        usernameEditText.setCursorVisible(true);\n        passwordEditText.setFocusable(true);\n    } else if (v.getId() == R.id.login_sendPostReq_button) {\n        String givenUsername = usernameEditText.getEditableText().toString();\n        String givenPassword = passwordEditText.getEditableText().toString();\n        System.out.println("Given username :" + givenUsername + " Given password :" + givenPassword);\n        sendPostRequest(givenUsername, givenPassword);\n    }\n}'
p2655
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();'
p2656
aS'String givenPassword = passwordEditText.getEditableText().toString();'
p2657
aS'ioe.printStackTrace();'
p2658
aS'String response = "";\nLog.e(TAG, "2 - pre Request to response...");\ntry {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}\nLog.e(TAG, "5 - after Response...");\nif (!response.equalsIgnoreCase("")) {\n    try {\n        Log.e(TAG, "6 - response !empty...");\n        JSONObject jRoot = new JSONObject(response);\n        JSONObject d = jRoot.getJSONObject("d");\n        int ResultType = d.getInt("ResultType");\n        Log.e("ResultType", ResultType + "");\n        if (ResultType == 1) {\n            status = true;\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, "Error " + e.getMessage());\n    } finally {\n    }\n} else {\n}'
p2659
aS'OutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n}'
p2660
aS'conn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);'
p2661
aS'String urlString = params[0];\nString resultToDisplay = "";'
p2662
aS'try {\n    Log.e(TAG, "6 - response !empty...");\n    JSONObject jRoot = new JSONObject(response);\n    JSONObject d = jRoot.getJSONObject("d");\n    int ResultType = d.getInt("ResultType");\n    Log.e("ResultType", ResultType + "");\n    if (ResultType == 1) {\n        status = true;\n    }\n} catch (JSONException e) {\n    Log.e(TAG, "Error " + e.getMessage());\n} finally {\n}'
p2663
aS'InputStream in = null;\ntry {\n    URL url = new URL(urlString);\n    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n    in = new BufferedInputStream(urlConnection.getInputStream());\n} catch (Exception e) {\n    System.out.println(e.getMessage());\n    return e.getMessage();\n}'
p2664
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);'
p2665
aS'if (result) {\n}'
p2666
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());'
p2667
aS'JSONObject d = jRoot.getJSONObject("d");\nint ResultType = d.getInt("ResultType");\nLog.e("ResultType", ResultType + "");\nif (ResultType == 1) {\n}'
p2668
aS'String bufferedStrChunk = null;\nwhile ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n}'
p2669
aS'if (result) {\n    Log.e(TAG, "8 - Update UI ...");\n}'
p2670
aS'passwordEditText.setFocusable(false);\nusernameEditText.setCursorVisible(true);\npasswordEditText.setFocusable(true);'
p2671
aS'writer.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p2672
aS'HttpClient httpclient = new DefaultHttpClient();\nHttpPost httppost = new HttpPost("http://www.yoursite.com/script.php");'
p2673
aS'String urlString = "http://www.yoursite.com/";\nprivate final String TAG = "post json example";\nprivate Context context;'
p2674
aS'private final String TAG = "post json example";\nprivate Context context;\nprivate int advertisementId;\npublic Empty(Context contex, int advertisementId) {\n    this.context = contex;\n    this.advertisementId = advertisementId;\n}\n@Override\nprotected void onPreExecute() {\n    Log.e(TAG, "1 - RequestVoteTask is about to start...");\n}\n@Override\nprotected Boolean doInBackground(Void... params) {\n    boolean status = false;\n    String response = "";\n    Log.e(TAG, "2 - pre Request to response...");\n    try {\n        response = performPostCall(urlString, new HashMap<String, String>() {\n\n            private static final long serialVersionUID = 1L;\n\n            {\n                put("Accept", "application/json");\n                put("Content-Type", "application/json");\n            }\n        });\n        Log.e(TAG, "3 - give Response...");\n        Log.e(TAG, "4 " + response.toString());\n    } catch (Exception e) {\n        Log.e(TAG, "Error ...");\n    }\n    Log.e(TAG, "5 - after Response...");\n    if (!response.equalsIgnoreCase("")) {\n        try {\n            Log.e(TAG, "6 - response !empty...");\n            JSONObject jRoot = new JSONObject(response);\n            JSONObject d = jRoot.getJSONObject("d");\n            int ResultType = d.getInt("ResultType");\n            Log.e("ResultType", ResultType + "");\n            if (ResultType == 1) {\n                status = true;\n            }\n        } catch (JSONException e) {\n            Log.e(TAG, "Error " + e.getMessage());\n        } finally {\n        }\n    } else {\n        Log.e(TAG, "6 - response is empty...");\n        status = false;\n    }\n    return status;\n}\n@Override\nprotected void onPostExecute(Boolean result) {\n    Log.e(TAG, "7 - onPostExecute ...");\n    if (result) {\n        Log.e(TAG, "8 - Update UI ...");\n    } else {\n        Log.e(TAG, "8 - Finish ...");\n    }\n}\npublic String performPostCall(String requestURL, HashMap<String, String> postDataParams) {\n    URL url;\n    String response = "";\n    try {\n        url = new URL(requestURL);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n        conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n        conn.setRequestMethod("POST");\n        conn.setDoInput(true);\n        conn.setDoOutput(true);\n        conn.setRequestProperty("Content-Type", "application/json");\n        Log.e(TAG, "11 - url : " + requestURL);\n        JSONObject root = new JSONObject();\n        String token = Static.getPrefsToken(context);\n        root.put("securityInfo", Static.getSecurityInfo(context));\n        root.put("advertisementId", advertisementId);\n        Log.e(TAG, "12 - root : " + root.toString());\n        String str = root.toString();\n        byte[] outputBytes = str.getBytes("UTF-8");\n        OutputStream os = conn.getOutputStream();\n        os.write(outputBytes);\n        int responseCode = conn.getResponseCode();\n        Log.e(TAG, "13 - responseCode : " + responseCode);\n        if (responseCode == HttpsURLConnection.HTTP_OK) {\n            Log.e(TAG, "14 - HTTP_OK");\n            String line;\n            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            while ((line = br.readLine()) != null) {\n                response += line;\n            }\n        } else {\n            Log.e(TAG, "14 - False - HTTP_OK");\n            response = "";\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return response;\n}'
p2675
aS'writer.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();'
p2676
aS'String urlString = "http://www.yoursite.com/";\nprivate final String TAG = "post json example";\nprivate Context context;\nprivate int advertisementId;\npublic Empty(Context contex, int advertisementId) {\n    this.context = contex;\n    this.advertisementId = advertisementId;\n}\n@Override\nprotected void onPreExecute() {\n    Log.e(TAG, "1 - RequestVoteTask is about to start...");\n}\n@Override\nprotected Boolean doInBackground(Void... params) {\n    boolean status = false;\n    String response = "";\n    Log.e(TAG, "2 - pre Request to response...");\n    try {\n        response = performPostCall(urlString, new HashMap<String, String>() {\n\n            private static final long serialVersionUID = 1L;\n\n            {\n                put("Accept", "application/json");\n                put("Content-Type", "application/json");\n            }\n        });\n        Log.e(TAG, "3 - give Response...");\n        Log.e(TAG, "4 " + response.toString());\n    } catch (Exception e) {\n        Log.e(TAG, "Error ...");\n    }\n    Log.e(TAG, "5 - after Response...");\n    if (!response.equalsIgnoreCase("")) {\n        try {\n            Log.e(TAG, "6 - response !empty...");\n            JSONObject jRoot = new JSONObject(response);\n            JSONObject d = jRoot.getJSONObject("d");\n            int ResultType = d.getInt("ResultType");\n            Log.e("ResultType", ResultType + "");\n            if (ResultType == 1) {\n                status = true;\n            }\n        } catch (JSONException e) {\n            Log.e(TAG, "Error " + e.getMessage());\n        } finally {\n        }\n    } else {\n        Log.e(TAG, "6 - response is empty...");\n        status = false;\n    }\n    return status;\n}\n@Override\nprotected void onPostExecute(Boolean result) {\n    Log.e(TAG, "7 - onPostExecute ...");\n    if (result) {\n        Log.e(TAG, "8 - Update UI ...");\n    } else {\n        Log.e(TAG, "8 - Finish ...");\n    }\n}\npublic String performPostCall(String requestURL, HashMap<String, String> postDataParams) {\n    URL url;\n    String response = "";\n    try {\n        url = new URL(requestURL);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n        conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n        conn.setRequestMethod("POST");\n        conn.setDoInput(true);\n        conn.setDoOutput(true);\n        conn.setRequestProperty("Content-Type", "application/json");\n        Log.e(TAG, "11 - url : " + requestURL);\n        JSONObject root = new JSONObject();\n        String token = Static.getPrefsToken(context);\n        root.put("securityInfo", Static.getSecurityInfo(context));\n        root.put("advertisementId", advertisementId);\n        Log.e(TAG, "12 - root : " + root.toString());\n        String str = root.toString();\n        byte[] outputBytes = str.getBytes("UTF-8");\n        OutputStream os = conn.getOutputStream();\n        os.write(outputBytes);\n        int responseCode = conn.getResponseCode();\n        Log.e(TAG, "13 - responseCode : " + responseCode);\n        if (responseCode == HttpsURLConnection.HTTP_OK) {\n            Log.e(TAG, "14 - HTTP_OK");\n            String line;\n            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            while ((line = br.readLine()) != null) {\n                response += line;\n            }\n        } else {\n            Log.e(TAG, "14 - False - HTTP_OK");\n            response = "";\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return response;\n}'
p2677
aS'HttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);'
p2678
aS'@Override\nprotected void onPreExecute() {\n    Log.e(TAG, "1 - RequestVoteTask is about to start...");\n}\n@Override\nprotected Boolean doInBackground(Void... params) {\n    boolean status = false;\n    String response = "";\n    Log.e(TAG, "2 - pre Request to response...");\n    try {\n        response = performPostCall(urlString, new HashMap<String, String>() {\n\n            private static final long serialVersionUID = 1L;\n\n            {\n                put("Accept", "application/json");\n                put("Content-Type", "application/json");\n            }\n        });\n        Log.e(TAG, "3 - give Response...");\n        Log.e(TAG, "4 " + response.toString());\n    } catch (Exception e) {\n        Log.e(TAG, "Error ...");\n    }\n    Log.e(TAG, "5 - after Response...");\n    if (!response.equalsIgnoreCase("")) {\n        try {\n            Log.e(TAG, "6 - response !empty...");\n            JSONObject jRoot = new JSONObject(response);\n            JSONObject d = jRoot.getJSONObject("d");\n            int ResultType = d.getInt("ResultType");\n            Log.e("ResultType", ResultType + "");\n            if (ResultType == 1) {\n                status = true;\n            }\n        } catch (JSONException e) {\n            Log.e(TAG, "Error " + e.getMessage());\n        } finally {\n        }\n    } else {\n        Log.e(TAG, "6 - response is empty...");\n        status = false;\n    }\n    return status;\n}\n@Override\nprotected void onPostExecute(Boolean result) {\n    Log.e(TAG, "7 - onPostExecute ...");\n    if (result) {\n        Log.e(TAG, "8 - Update UI ...");\n    } else {\n        Log.e(TAG, "8 - Finish ...");\n    }\n}'
p2679
aS'conn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p2680
aS'status = true;'
p2681
aS'String str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();'
p2682
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");'
p2683
aS'conn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    response = "";\n}'
p2684
aS'private EditText passwordEditText;\nprivate Button sendPostReqButton;\nprivate Button clearButton;\n@Override\npublic void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.login);\n    usernameEditText = (EditText) findViewById(R.id.login_username_editText);\n    passwordEditText = (EditText) findViewById(R.id.login_password_editText);\n    sendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\n    sendPostReqButton.setOnClickListener(this);\n    clearButton = (Button) findViewById(R.id.login_clear_button);\n    clearButton.setOnClickListener(this);\n}\n@Override\npublic void onClick(View v) {\n    if (v.getId() == R.id.login_clear_button) {\n        usernameEditText.setText("");\n        passwordEditText.setText("");\n        passwordEditText.setCursorVisible(false);\n        passwordEditText.setFocusable(false);\n        usernameEditText.setCursorVisible(true);\n        passwordEditText.setFocusable(true);\n    } else if (v.getId() == R.id.login_sendPostReq_button) {\n        String givenUsername = usernameEditText.getEditableText().toString();\n        String givenPassword = passwordEditText.getEditableText().toString();\n        System.out.println("Given username :" + givenUsername + " Given password :" + givenPassword);\n        sendPostRequest(givenUsername, givenPassword);\n    }\n}'
p2685
aS'private EditText passwordEditText;\nprivate Button sendPostReqButton;\nprivate Button clearButton;'
p2686
aS'int responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n}'
p2687
aS'JSONObject d = jRoot.getJSONObject("d");\nint ResultType = d.getInt("ResultType");'
p2688
aS'put("Accept", "application/json");'
p2689
aS'String response = "";\ntry {\n    url = new URL(requestURL);\n    HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n    conn.setReadTimeout(15000);\n    conn.setConnectTimeout(15000);\n    conn.setRequestMethod("GET");\n    conn.setDoInput(true);\n    conn.setDoOutput(true);\n    OutputStream os = conn.getOutputStream();\n    BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\n    writer.write(getPostDataString(postDataParams));\n    writer.flush();\n    writer.close();\n    os.close();\n    int responseCode = conn.getResponseCode();\n    if (responseCode == HttpsURLConnection.HTTP_OK) {\n        String line;\n        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        while ((line = br.readLine()) != null) {\n            response += line;\n        }\n    } else {\n        response = "";\n    }\n} catch (Exception e) {\n    e.printStackTrace();\n}'
p2690
aS'protected void onPreExecute() {\n    Log.e(TAG, "1 - RequestVoteTask is about to start...");\n}'
p2691
aS'JSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();'
p2692
aS'os.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n}'
p2693
aS'Log.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());'
p2694
aS'@Override\nprotected String doInBackground(String... params) {\n    String paramUsername = params[0];\n    String paramPassword = params[1];\n    System.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\n    HttpClient httpClient = new DefaultHttpClient();\n    HttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\n    BasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\n    BasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\n    List<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\n    nameValuePairList.add(usernameBasicNameValuePair);\n    nameValuePairList.add(passwordBasicNameValuePAir);\n    try {\n        UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n        httpPost.setEntity(urlEncodedFormEntity);\n        try {\n            HttpResponse httpResponse = httpClient.execute(httpPost);\n            InputStream inputStream = httpResponse.getEntity().getContent();\n            InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n            StringBuilder stringBuilder = new StringBuilder();\n            String bufferedStrChunk = null;\n            while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n                stringBuilder.append(bufferedStrChunk);\n            }\n            return stringBuilder.toString();\n        } catch (ClientProtocolException cpe) {\n            System.out.println("First Exception caz of HttpResponese :" + cpe);\n            cpe.printStackTrace();\n        } catch (IOException ioe) {\n            System.out.println("Second Exception caz of HttpResponse :" + ioe);\n            ioe.printStackTrace();\n        }\n    } catch (UnsupportedEncodingException uee) {\n        System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n        uee.printStackTrace();\n    }\n    return null;\n}'
p2695
aS'@Override\nprotected String doInBackground(String... params) {\n    String urlString = params[0];\n    String resultToDisplay = "";\n    InputStream in = null;\n    try {\n        URL url = new URL(urlString);\n        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n        in = new BufferedInputStream(urlConnection.getInputStream());\n    } catch (Exception e) {\n        System.out.println(e.getMessage());\n        return e.getMessage();\n    }\n    try {\n        resultToDisplay = IOUtils.toString(in, "UTF-8");\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return resultToDisplay;\n}'
p2696
aS'String response = "";'
p2697
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n}'
p2698
aS'private EditText passwordEditText;'
p2699
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p2700
aS'System.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n    uee.printStackTrace();\n}\nreturn null;'
p2701
aS'BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p2702
aS'protected Boolean doInBackground(Void... params) {\n    boolean status = false;\n    String response = "";\n    Log.e(TAG, "2 - pre Request to response...");\n    try {\n        response = performPostCall(urlString, new HashMap<String, String>() {\n\n            private static final long serialVersionUID = 1L;\n\n            {\n                put("Accept", "application/json");\n                put("Content-Type", "application/json");\n            }\n        });\n        Log.e(TAG, "3 - give Response...");\n        Log.e(TAG, "4 " + response.toString());\n    } catch (Exception e) {\n        Log.e(TAG, "Error ...");\n    }\n    Log.e(TAG, "5 - after Response...");\n    if (!response.equalsIgnoreCase("")) {\n        try {\n            Log.e(TAG, "6 - response !empty...");\n            JSONObject jRoot = new JSONObject(response);\n            JSONObject d = jRoot.getJSONObject("d");\n            int ResultType = d.getInt("ResultType");\n            Log.e("ResultType", ResultType + "");\n            if (ResultType == 1) {\n                status = true;\n            }\n        } catch (JSONException e) {\n            Log.e(TAG, "Error " + e.getMessage());\n        } finally {\n        }\n    } else {\n        Log.e(TAG, "6 - response is empty...");\n        status = false;\n    }\n    return status;\n}\n@Override\nprotected void onPostExecute(Boolean result) {\n    Log.e(TAG, "7 - onPostExecute ...");\n    if (result) {\n        Log.e(TAG, "8 - Update UI ...");\n    } else {\n        Log.e(TAG, "8 - Finish ...");\n    }\n}\npublic String performPostCall(String requestURL, HashMap<String, String> postDataParams) {\n    URL url;\n    String response = "";\n    try {\n        url = new URL(requestURL);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n        conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n        conn.setRequestMethod("POST");\n        conn.setDoInput(true);\n        conn.setDoOutput(true);\n        conn.setRequestProperty("Content-Type", "application/json");\n        Log.e(TAG, "11 - url : " + requestURL);\n        JSONObject root = new JSONObject();\n        String token = Static.getPrefsToken(context);\n        root.put("securityInfo", Static.getSecurityInfo(context));\n        root.put("advertisementId", advertisementId);\n        Log.e(TAG, "12 - root : " + root.toString());\n        String str = root.toString();\n        byte[] outputBytes = str.getBytes("UTF-8");\n        OutputStream os = conn.getOutputStream();\n        os.write(outputBytes);\n        int responseCode = conn.getResponseCode();\n        Log.e(TAG, "13 - responseCode : " + responseCode);\n        if (responseCode == HttpsURLConnection.HTTP_OK) {\n            Log.e(TAG, "14 - HTTP_OK");\n            String line;\n            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            while ((line = br.readLine()) != null) {\n                response += line;\n            }\n        } else {\n            Log.e(TAG, "14 - False - HTTP_OK");\n            response = "";\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return response;\n}'
p2703
aS'nameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n    uee.printStackTrace();\n}\nreturn null;'
p2704
aS'if (result.equals("working")) {\n    Toast.makeText(getApplicationContext(), "HTTP POST is working...", Toast.LENGTH_LONG).show();\n}'
p2705
aS'BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p2706
aS'conn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();'
p2707
aS'HttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);'
p2708
aS'try {\n    resultToDisplay = IOUtils.toString(in, "UTF-8");\n} catch (IOException e) {\n    e.printStackTrace();\n}'
p2709
aS'conn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");'
p2710
aS'for (Map.Entry<String, String> entry : params.entrySet()) {\n    if (first)\n        first = false;\n    else\n        result.append("&");\n}'
p2711
aS'Log.e(TAG, "7 - onPostExecute ...");\nif (result) {\n    Log.e(TAG, "8 - Update UI ...");\n} else {\n}'
p2712
aS'conn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));'
p2713
aS'JSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);'
p2714
aS'String paramUsername = params[0];\nString paramPassword = params[1];\nSystem.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n    uee.printStackTrace();\n}'
p2715
aS'HttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);'
p2716
aS'List<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n    uee.printStackTrace();\n}'
p2717
aS'String paramUsername = params[0];\nString paramPassword = params[1];\nSystem.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();'
p2718
aS'Toast.makeText(getApplicationContext(), "Invalid POST req...", Toast.LENGTH_LONG).show();'
p2719
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();'
p2720
aS'writer.write(getPostDataString(postDataParams));'
p2721
aS'List<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();'
p2722
aS'try {\n    URL url = new URL(urlString);\n    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n    in = new BufferedInputStream(urlConnection.getInputStream());\n} catch (Exception e) {\n    System.out.println(e.getMessage());\n    return e.getMessage();\n}\ntry {\n    resultToDisplay = IOUtils.toString(in, "UTF-8");\n} catch (IOException e) {\n    e.printStackTrace();\n}'
p2723
aS'Log.e(TAG, "1 - RequestVoteTask is about to start...");'
p2724
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));'
p2725
aS'conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);'
p2726
aS'conn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p2727
aS'try {\n    url = new URL(requestURL);\n    HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n    conn.setReadTimeout(15000);\n    conn.setConnectTimeout(15000);\n    conn.setRequestMethod("GET");\n    conn.setDoInput(true);\n    conn.setDoOutput(true);\n    OutputStream os = conn.getOutputStream();\n    BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\n    writer.write(getPostDataString(postDataParams));\n    writer.flush();\n    writer.close();\n    os.close();\n    int responseCode = conn.getResponseCode();\n    if (responseCode == HttpsURLConnection.HTTP_OK) {\n        String line;\n        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        while ((line = br.readLine()) != null) {\n            response += line;\n        }\n    } else {\n        response = "";\n    }\n} catch (Exception e) {\n    e.printStackTrace();\n}'
p2728
aS'String response = "";\ntry {\n    url = new URL(requestURL);\n    HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n    conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n    conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n    conn.setRequestMethod("POST");\n    conn.setDoInput(true);\n    conn.setDoOutput(true);\n    conn.setRequestProperty("Content-Type", "application/json");\n    Log.e(TAG, "11 - url : " + requestURL);\n    JSONObject root = new JSONObject();\n    String token = Static.getPrefsToken(context);\n    root.put("securityInfo", Static.getSecurityInfo(context));\n    root.put("advertisementId", advertisementId);\n    Log.e(TAG, "12 - root : " + root.toString());\n    String str = root.toString();\n    byte[] outputBytes = str.getBytes("UTF-8");\n    OutputStream os = conn.getOutputStream();\n    os.write(outputBytes);\n    int responseCode = conn.getResponseCode();\n    Log.e(TAG, "13 - responseCode : " + responseCode);\n    if (responseCode == HttpsURLConnection.HTTP_OK) {\n        Log.e(TAG, "14 - HTTP_OK");\n        String line;\n        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        while ((line = br.readLine()) != null) {\n            response += line;\n        }\n    } else {\n        Log.e(TAG, "14 - False - HTTP_OK");\n        response = "";\n    }\n} catch (Exception e) {\n}'
p2729
aS'writer.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n}'
p2730
aS'String str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p2731
aS'if (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n}'
p2732
aS'StringBuilder result = new StringBuilder();\nboolean first = true;\nfor (Map.Entry<String, String> entry : params.entrySet()) {\n    if (first)\n        first = false;\n    else\n        result.append("&");\n    result.append(URLEncoder.encode(entry.getKey(), "UTF-8"));\n    result.append("=");\n    result.append(URLEncoder.encode(entry.getValue(), "UTF-8"));\n}\nreturn result.toString();'
p2733
aS'SendPostReqAsyncTask sendPostReqAsyncTask = new SendPostReqAsyncTask();\nsendPostReqAsyncTask.execute(givenUsername, givenPassword);'
p2734
aS'String paramPassword = params[1];\nSystem.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\nHttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);'
p2735
aS'conn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();'
p2736
aS'InputStream in = null;\ntry {\n    URL url = new URL(urlString);\n    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n    in = new BufferedInputStream(urlConnection.getInputStream());\n} catch (Exception e) {\n    System.out.println(e.getMessage());\n    return e.getMessage();\n}\ntry {\n    resultToDisplay = IOUtils.toString(in, "UTF-8");\n} catch (IOException e) {\n}'
p2737
aS'@Override\nprotected Boolean doInBackground(Void... params) {\n    boolean status = false;\n    String response = "";\n    Log.e(TAG, "2 - pre Request to response...");\n    try {\n        response = performPostCall(urlString, new HashMap<String, String>() {\n\n            private static final long serialVersionUID = 1L;\n\n            {\n                put("Accept", "application/json");\n                put("Content-Type", "application/json");\n            }\n        });\n        Log.e(TAG, "3 - give Response...");\n        Log.e(TAG, "4 " + response.toString());\n    } catch (Exception e) {\n        Log.e(TAG, "Error ...");\n    }\n    Log.e(TAG, "5 - after Response...");\n    if (!response.equalsIgnoreCase("")) {\n        try {\n            Log.e(TAG, "6 - response !empty...");\n            JSONObject jRoot = new JSONObject(response);\n            JSONObject d = jRoot.getJSONObject("d");\n            int ResultType = d.getInt("ResultType");\n            Log.e("ResultType", ResultType + "");\n            if (ResultType == 1) {\n                status = true;\n            }\n        } catch (JSONException e) {\n            Log.e(TAG, "Error " + e.getMessage());\n        } finally {\n        }\n    } else {\n        Log.e(TAG, "6 - response is empty...");\n        status = false;\n    }\n    return status;\n}\n@Override\nprotected void onPostExecute(Boolean result) {\n    Log.e(TAG, "7 - onPostExecute ...");\n    if (result) {\n        Log.e(TAG, "8 - Update UI ...");\n    } else {\n        Log.e(TAG, "8 - Finish ...");\n    }\n}'
p2738
aS'writer.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n}'
p2739
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    response = "";\n}'
p2740
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));'
p2741
aS'System.out.println("First Exception caz of HttpResponese :" + cpe);'
p2742
aS'@Override\nprotected void onPreExecute() {\n    super.onPreExecute();\n}\n@Override\nprotected String doInBackground(String... params) {\n    String urlString = params[0];\n    String resultToDisplay = "";\n    InputStream in = null;\n    try {\n        URL url = new URL(urlString);\n        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n        in = new BufferedInputStream(urlConnection.getInputStream());\n    } catch (Exception e) {\n        System.out.println(e.getMessage());\n        return e.getMessage();\n    }\n    try {\n        resultToDisplay = IOUtils.toString(in, "UTF-8");\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return resultToDisplay;\n}\n@Override\nprotected void onPostExecute(String result) {\n}'
p2743
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);'
p2744
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);'
p2745
aS'int responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p2746
aS'boolean status = false;\nString response = "";\nLog.e(TAG, "2 - pre Request to response...");\ntry {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}\nLog.e(TAG, "5 - after Response...");'
p2747
aS'Log.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();'
p2748
aS'int ResultType = d.getInt("ResultType");\nLog.e("ResultType", ResultType + "");\nif (ResultType == 1) {\n    status = true;\n}'
p2749
aS'os.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p2750
aS'UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\nhttpPost.setEntity(urlEncodedFormEntity);\ntry {\n    HttpResponse httpResponse = httpClient.execute(httpPost);\n    InputStream inputStream = httpResponse.getEntity().getContent();\n    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n    StringBuilder stringBuilder = new StringBuilder();\n    String bufferedStrChunk = null;\n    while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n        stringBuilder.append(bufferedStrChunk);\n    }\n    return stringBuilder.toString();\n} catch (ClientProtocolException cpe) {\n}'
p2751
aS'Log.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n    response = "";\n}'
p2752
aS'BufferedReader bufferedReader = new BufferedReader(inputStreamReader);'
p2753
aS'StringBuilder stringBuilder = new StringBuilder();\nString bufferedStrChunk = null;\nwhile ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n}'
p2754
aS'conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");'
p2755
aS'Log.e(TAG, "5 - after Response...");\nif (!response.equalsIgnoreCase("")) {\n    try {\n        Log.e(TAG, "6 - response !empty...");\n        JSONObject jRoot = new JSONObject(response);\n        JSONObject d = jRoot.getJSONObject("d");\n        int ResultType = d.getInt("ResultType");\n        Log.e("ResultType", ResultType + "");\n        if (ResultType == 1) {\n            status = true;\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, "Error " + e.getMessage());\n    } finally {\n    }\n} else {\n}'
p2756
aS'OutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n}'
p2757
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();'
p2758
aS'HttpResponse httpResponse = httpClient.execute(httpPost);\nInputStream inputStream = httpResponse.getEntity().getContent();\nInputStreamReader inputStreamReader = new InputStreamReader(inputStream);\nBufferedReader bufferedReader = new BufferedReader(inputStreamReader);\nStringBuilder stringBuilder = new StringBuilder();\nString bufferedStrChunk = null;\nwhile ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n    stringBuilder.append(bufferedStrChunk);\n}'
p2759
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();'
p2760
aS'this.advertisementId = advertisementId;'
p2761
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p2762
aS'private Context context;'
p2763
aS'InputStream in = null;\ntry {\n    URL url = new URL(urlString);\n    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n    in = new BufferedInputStream(urlConnection.getInputStream());\n} catch (Exception e) {\n}'
p2764
aS'conn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);'
p2765
aS'conn.setDoInput(true);\nconn.setDoOutput(true);'
p2766
aS'String response = "";\nLog.e(TAG, "2 - pre Request to response...");\ntry {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}\nLog.e(TAG, "5 - after Response...");\nif (!response.equalsIgnoreCase("")) {\n    try {\n        Log.e(TAG, "6 - response !empty...");\n        JSONObject jRoot = new JSONObject(response);\n        JSONObject d = jRoot.getJSONObject("d");\n        int ResultType = d.getInt("ResultType");\n        Log.e("ResultType", ResultType + "");\n        if (ResultType == 1) {\n            status = true;\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, "Error " + e.getMessage());\n    } finally {\n    }\n} else {\n    Log.e(TAG, "6 - response is empty...");\n    status = false;\n}'
p2767
aS'if (!response.equalsIgnoreCase("")) {\n    try {\n        Log.e(TAG, "6 - response !empty...");\n        JSONObject jRoot = new JSONObject(response);\n        JSONObject d = jRoot.getJSONObject("d");\n        int ResultType = d.getInt("ResultType");\n        Log.e("ResultType", ResultType + "");\n        if (ResultType == 1) {\n            status = true;\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, "Error " + e.getMessage());\n    } finally {\n    }\n}'
p2768
aS'response += line;'
p2769
aS'clearButton.setOnClickListener(this);'
p2770
aS'conn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n}'
p2771
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();'
p2772
aS'try {\n    HttpResponse httpResponse = httpClient.execute(httpPost);\n    InputStream inputStream = httpResponse.getEntity().getContent();\n    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n    StringBuilder stringBuilder = new StringBuilder();\n    String bufferedStrChunk = null;\n    while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n        stringBuilder.append(bufferedStrChunk);\n    }\n    return stringBuilder.toString();\n} catch (ClientProtocolException cpe) {\n    System.out.println("First Exception caz of HttpResponese :" + cpe);\n    cpe.printStackTrace();\n} catch (IOException ioe) {\n}'
p2773
aS'for (Map.Entry<String, String> entry : params.entrySet()) {\n    if (first)\n        first = false;\n    else\n        result.append("&");\n    result.append(URLEncoder.encode(entry.getKey(), "UTF-8"));\n}'
p2774
aS'HttpResponse httpResponse = httpClient.execute(httpPost);\nInputStream inputStream = httpResponse.getEntity().getContent();\nInputStreamReader inputStreamReader = new InputStreamReader(inputStream);\nBufferedReader bufferedReader = new BufferedReader(inputStreamReader);'
p2775
aS'if (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n}'
p2776
aS'protected Boolean doInBackground(Void... params) {\n    boolean status = false;\n    String response = "";\n    Log.e(TAG, "2 - pre Request to response...");\n    try {\n        response = performPostCall(urlString, new HashMap<String, String>() {\n\n            private static final long serialVersionUID = 1L;\n\n            {\n                put("Accept", "application/json");\n                put("Content-Type", "application/json");\n            }\n        });\n        Log.e(TAG, "3 - give Response...");\n        Log.e(TAG, "4 " + response.toString());\n    } catch (Exception e) {\n        Log.e(TAG, "Error ...");\n    }\n    Log.e(TAG, "5 - after Response...");\n    if (!response.equalsIgnoreCase("")) {\n        try {\n            Log.e(TAG, "6 - response !empty...");\n            JSONObject jRoot = new JSONObject(response);\n            JSONObject d = jRoot.getJSONObject("d");\n            int ResultType = d.getInt("ResultType");\n            Log.e("ResultType", ResultType + "");\n            if (ResultType == 1) {\n                status = true;\n            }\n        } catch (JSONException e) {\n            Log.e(TAG, "Error " + e.getMessage());\n        } finally {\n        }\n    } else {\n        Log.e(TAG, "6 - response is empty...");\n        status = false;\n    }\n    return status;\n}'
p2777
aS'conn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);'
p2778
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();'
p2779
aS'public void onClick(View v) {\n    if (v.getId() == R.id.login_clear_button) {\n        usernameEditText.setText("");\n        passwordEditText.setText("");\n        passwordEditText.setCursorVisible(false);\n        passwordEditText.setFocusable(false);\n        usernameEditText.setCursorVisible(true);\n        passwordEditText.setFocusable(true);\n    } else if (v.getId() == R.id.login_sendPostReq_button) {\n        String givenUsername = usernameEditText.getEditableText().toString();\n        String givenPassword = passwordEditText.getEditableText().toString();\n        System.out.println("Given username :" + givenUsername + " Given password :" + givenPassword);\n        sendPostRequest(givenUsername, givenPassword);\n    }\n}\nprivate void sendPostRequest(String givenUsername, String givenPassword) {\n    class SendPostReqAsyncTask extends AsyncTask<String, Void, String> {\n\n        @Override\n        protected String doInBackground(String... params) {\n            String paramUsername = params[0];\n            String paramPassword = params[1];\n            System.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\n            HttpClient httpClient = new DefaultHttpClient();\n            HttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\n            BasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\n            BasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\n            List<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\n            nameValuePairList.add(usernameBasicNameValuePair);\n            nameValuePairList.add(passwordBasicNameValuePAir);\n            try {\n                UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n                httpPost.setEntity(urlEncodedFormEntity);\n                try {\n                    HttpResponse httpResponse = httpClient.execute(httpPost);\n                    InputStream inputStream = httpResponse.getEntity().getContent();\n                    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n                    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n                    StringBuilder stringBuilder = new StringBuilder();\n                    String bufferedStrChunk = null;\n                    while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n                        stringBuilder.append(bufferedStrChunk);\n                    }\n                    return stringBuilder.toString();\n                } catch (ClientProtocolException cpe) {\n                    System.out.println("First Exception caz of HttpResponese :" + cpe);\n                    cpe.printStackTrace();\n                } catch (IOException ioe) {\n                    System.out.println("Second Exception caz of HttpResponse :" + ioe);\n                    ioe.printStackTrace();\n                }\n            } catch (UnsupportedEncodingException uee) {\n                System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n                uee.printStackTrace();\n            }\n            return null;\n        }\n\n        @Override\n        protected void onPostExecute(String result) {\n            super.onPostExecute(result);\n            if (result.equals("working")) {\n                Toast.makeText(getApplicationContext(), "HTTP POST is working...", Toast.LENGTH_LONG).show();\n            } else {\n                Toast.makeText(getApplicationContext(), "Invalid POST req...", Toast.LENGTH_LONG).show();\n            }\n        }\n    }\n    SendPostReqAsyncTask sendPostReqAsyncTask = new SendPostReqAsyncTask();\n    sendPostReqAsyncTask.execute(givenUsername, givenPassword);\n}'
p2780
aS'Log.e(TAG, "6 - response !empty...");'
p2781
aS'System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);'
p2782
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n}'
p2783
aS'conn.setReadTimeout(15000);\nconn.setConnectTimeout(15000);\nconn.setRequestMethod("GET");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));'
p2784
aS'HttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);'
p2785
aS'UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);'
p2786
aS'sendPostReqButton.setOnClickListener(this);\nclearButton = (Button) findViewById(R.id.login_clear_button);\nclearButton.setOnClickListener(this);'
p2787
aS'try {\n    HttpResponse httpResponse = httpClient.execute(httpPost);\n    InputStream inputStream = httpResponse.getEntity().getContent();\n    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n    StringBuilder stringBuilder = new StringBuilder();\n    String bufferedStrChunk = null;\n    while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n        stringBuilder.append(bufferedStrChunk);\n    }\n    return stringBuilder.toString();\n} catch (ClientProtocolException cpe) {\n    System.out.println("First Exception caz of HttpResponese :" + cpe);\n    cpe.printStackTrace();\n}'
p2788
aS'StringBuilder result = new StringBuilder();\nboolean first = true;\nfor (Map.Entry<String, String> entry : params.entrySet()) {\n    if (first)\n        first = false;\n    else\n        result.append("&");\n}'
p2789
aS'try {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}\nLog.e(TAG, "5 - after Response...");'
p2790
aS'sendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\nsendPostReqButton.setOnClickListener(this);\nclearButton = (Button) findViewById(R.id.login_clear_button);\nclearButton.setOnClickListener(this);'
p2791
aS'OutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    response = "";\n}'
p2792
aS'String urlString = "http://www.yoursite.com/";\nprivate final String TAG = "post json example";\nprivate Context context;\nprivate int advertisementId;\npublic Empty(Context contex, int advertisementId) {\n    this.context = contex;\n    this.advertisementId = advertisementId;\n}\n@Override\nprotected void onPreExecute() {\n    Log.e(TAG, "1 - RequestVoteTask is about to start...");\n}\n@Override\nprotected Boolean doInBackground(Void... params) {\n    boolean status = false;\n    String response = "";\n    Log.e(TAG, "2 - pre Request to response...");\n    try {\n        response = performPostCall(urlString, new HashMap<String, String>() {\n\n            private static final long serialVersionUID = 1L;\n\n            {\n                put("Accept", "application/json");\n                put("Content-Type", "application/json");\n            }\n        });\n        Log.e(TAG, "3 - give Response...");\n        Log.e(TAG, "4 " + response.toString());\n    } catch (Exception e) {\n        Log.e(TAG, "Error ...");\n    }\n    Log.e(TAG, "5 - after Response...");\n    if (!response.equalsIgnoreCase("")) {\n        try {\n            Log.e(TAG, "6 - response !empty...");\n            JSONObject jRoot = new JSONObject(response);\n            JSONObject d = jRoot.getJSONObject("d");\n            int ResultType = d.getInt("ResultType");\n            Log.e("ResultType", ResultType + "");\n            if (ResultType == 1) {\n                status = true;\n            }\n        } catch (JSONException e) {\n            Log.e(TAG, "Error " + e.getMessage());\n        } finally {\n        }\n    } else {\n        Log.e(TAG, "6 - response is empty...");\n        status = false;\n    }\n    return status;\n}'
p2793
aS'BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\nwriter.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();'
p2794
aS'writer.write(getPostDataString(postDataParams));\nwriter.flush();\nwriter.close();\nos.close();'
p2795
aS'boolean status = false;\nString response = "";\nLog.e(TAG, "2 - pre Request to response...");\ntry {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n}'
p2796
aS'StringBuilder result = new StringBuilder();\nboolean first = true;\nfor (Map.Entry<String, String> entry : params.entrySet()) {\n    if (first)\n        first = false;\n    else\n        result.append("&");\n    result.append(URLEncoder.encode(entry.getKey(), "UTF-8"));\n    result.append("=");\n    result.append(URLEncoder.encode(entry.getValue(), "UTF-8"));\n}'
p2797
aS'protected String doInBackground(String... params) {\n    String paramUsername = params[0];\n    String paramPassword = params[1];\n    System.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\n    HttpClient httpClient = new DefaultHttpClient();\n    HttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\n    BasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\n    BasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\n    List<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\n    nameValuePairList.add(usernameBasicNameValuePair);\n    nameValuePairList.add(passwordBasicNameValuePAir);\n    try {\n        UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n        httpPost.setEntity(urlEncodedFormEntity);\n        try {\n            HttpResponse httpResponse = httpClient.execute(httpPost);\n            InputStream inputStream = httpResponse.getEntity().getContent();\n            InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n            StringBuilder stringBuilder = new StringBuilder();\n            String bufferedStrChunk = null;\n            while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n                stringBuilder.append(bufferedStrChunk);\n            }\n            return stringBuilder.toString();\n        } catch (ClientProtocolException cpe) {\n            System.out.println("First Exception caz of HttpResponese :" + cpe);\n            cpe.printStackTrace();\n        } catch (IOException ioe) {\n            System.out.println("Second Exception caz of HttpResponse :" + ioe);\n            ioe.printStackTrace();\n        }\n    } catch (UnsupportedEncodingException uee) {\n        System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n        uee.printStackTrace();\n    }\n    return null;\n}\n@Override\nprotected void onPostExecute(String result) {\n    super.onPostExecute(result);\n    if (result.equals("working")) {\n        Toast.makeText(getApplicationContext(), "HTTP POST is working...", Toast.LENGTH_LONG).show();\n    } else {\n        Toast.makeText(getApplicationContext(), "Invalid POST req...", Toast.LENGTH_LONG).show();\n    }\n}'
p2798
aS'conn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);'
p2799
aS'URL url;\nString response = "";\ntry {\n    url = new URL(requestURL);\n    HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n    conn.setReadTimeout(15000);\n    conn.setConnectTimeout(15000);\n    conn.setRequestMethod("GET");\n    conn.setDoInput(true);\n    conn.setDoOutput(true);\n    OutputStream os = conn.getOutputStream();\n    BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));\n    writer.write(getPostDataString(postDataParams));\n    writer.flush();\n    writer.close();\n    os.close();\n    int responseCode = conn.getResponseCode();\n    if (responseCode == HttpsURLConnection.HTTP_OK) {\n        String line;\n        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        while ((line = br.readLine()) != null) {\n            response += line;\n        }\n    } else {\n        response = "";\n    }\n} catch (Exception e) {\n}'
p2800
aS'httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));'
p2801
aS'String token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());'
p2802
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);'
p2803
aS'passwordEditText.setCursorVisible(false);\npasswordEditText.setFocusable(false);'
p2804
aS'JSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);'
p2805
aS'url = new URL(requestURL);\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();'
p2806
aS'List<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n    uee.printStackTrace();\n}\nreturn null;'
p2807
aS'cpe.printStackTrace();'
p2808
aS'String str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);'
p2809
aS'boolean first = true;\nfor (Map.Entry<String, String> entry : params.entrySet()) {\n    if (first)\n        first = false;\n    else\n        result.append("&");\n    result.append(URLEncoder.encode(entry.getKey(), "UTF-8"));\n}'
p2810
aS'writer.flush();\nwriter.close();\nos.close();\nint responseCode = conn.getResponseCode();'
p2811
aS'HttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\nconn.setRequestMethod("POST");\nconn.setDoInput(true);\nconn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");\nLog.e(TAG, "11 - url : " + requestURL);\nJSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");'
p2812
aS'Log.e(TAG, "8 - Update UI ...");'
p2813
aS'try {\n    url = new URL(requestURL);\n    HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n    conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n    conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n    conn.setRequestMethod("POST");\n    conn.setDoInput(true);\n    conn.setDoOutput(true);\n    conn.setRequestProperty("Content-Type", "application/json");\n    Log.e(TAG, "11 - url : " + requestURL);\n    JSONObject root = new JSONObject();\n    String token = Static.getPrefsToken(context);\n    root.put("securityInfo", Static.getSecurityInfo(context));\n    root.put("advertisementId", advertisementId);\n    Log.e(TAG, "12 - root : " + root.toString());\n    String str = root.toString();\n    byte[] outputBytes = str.getBytes("UTF-8");\n    OutputStream os = conn.getOutputStream();\n    os.write(outputBytes);\n    int responseCode = conn.getResponseCode();\n    Log.e(TAG, "13 - responseCode : " + responseCode);\n    if (responseCode == HttpsURLConnection.HTTP_OK) {\n        Log.e(TAG, "14 - HTTP_OK");\n        String line;\n        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        while ((line = br.readLine()) != null) {\n            response += line;\n        }\n    } else {\n        Log.e(TAG, "14 - False - HTTP_OK");\n        response = "";\n    }\n} catch (Exception e) {\n}'
p2814
aS'HttpResponse httpResponse = httpClient.execute(httpPost);\nInputStream inputStream = httpResponse.getEntity().getContent();\nInputStreamReader inputStreamReader = new InputStreamReader(inputStream);\nBufferedReader bufferedReader = new BufferedReader(inputStreamReader);\nStringBuilder stringBuilder = new StringBuilder();'
p2815
aS'private EditText usernameEditText;\nprivate EditText passwordEditText;\nprivate Button sendPostReqButton;'
p2816
aS'URL url;\nString response = "";\ntry {\n    url = new URL(requestURL);\n    HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n    conn.setReadTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n    conn.setConnectTimeout(context.getResources().getInteger(R.integer.maximum_timeout_to_server));\n    conn.setRequestMethod("POST");\n    conn.setDoInput(true);\n    conn.setDoOutput(true);\n    conn.setRequestProperty("Content-Type", "application/json");\n    Log.e(TAG, "11 - url : " + requestURL);\n    JSONObject root = new JSONObject();\n    String token = Static.getPrefsToken(context);\n    root.put("securityInfo", Static.getSecurityInfo(context));\n    root.put("advertisementId", advertisementId);\n    Log.e(TAG, "12 - root : " + root.toString());\n    String str = root.toString();\n    byte[] outputBytes = str.getBytes("UTF-8");\n    OutputStream os = conn.getOutputStream();\n    os.write(outputBytes);\n    int responseCode = conn.getResponseCode();\n    Log.e(TAG, "13 - responseCode : " + responseCode);\n    if (responseCode == HttpsURLConnection.HTTP_OK) {\n        Log.e(TAG, "14 - HTTP_OK");\n        String line;\n        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        while ((line = br.readLine()) != null) {\n            response += line;\n        }\n    } else {\n        Log.e(TAG, "14 - False - HTTP_OK");\n        response = "";\n    }\n} catch (Exception e) {\n    e.printStackTrace();\n}'
p2817
aS'private final String TAG = "post json example";\nprivate Context context;\nprivate int advertisementId;\npublic Empty(Context contex, int advertisementId) {\n    this.context = contex;\n    this.advertisementId = advertisementId;\n}\n@Override\nprotected void onPreExecute() {\n    Log.e(TAG, "1 - RequestVoteTask is about to start...");\n}\n@Override\nprotected Boolean doInBackground(Void... params) {\n    boolean status = false;\n    String response = "";\n    Log.e(TAG, "2 - pre Request to response...");\n    try {\n        response = performPostCall(urlString, new HashMap<String, String>() {\n\n            private static final long serialVersionUID = 1L;\n\n            {\n                put("Accept", "application/json");\n                put("Content-Type", "application/json");\n            }\n        });\n        Log.e(TAG, "3 - give Response...");\n        Log.e(TAG, "4 " + response.toString());\n    } catch (Exception e) {\n        Log.e(TAG, "Error ...");\n    }\n    Log.e(TAG, "5 - after Response...");\n    if (!response.equalsIgnoreCase("")) {\n        try {\n            Log.e(TAG, "6 - response !empty...");\n            JSONObject jRoot = new JSONObject(response);\n            JSONObject d = jRoot.getJSONObject("d");\n            int ResultType = d.getInt("ResultType");\n            Log.e("ResultType", ResultType + "");\n            if (ResultType == 1) {\n                status = true;\n            }\n        } catch (JSONException e) {\n            Log.e(TAG, "Error " + e.getMessage());\n        } finally {\n        }\n    } else {\n        Log.e(TAG, "6 - response is empty...");\n        status = false;\n    }\n    return status;\n}'
p2818
aS'Log.e(TAG, "6 - response !empty...");\nJSONObject jRoot = new JSONObject(response);\nJSONObject d = jRoot.getJSONObject("d");\nint ResultType = d.getInt("ResultType");\nLog.e("ResultType", ResultType + "");\nif (ResultType == 1) {\n    status = true;\n}'
p2819
aS'InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\nBufferedReader bufferedReader = new BufferedReader(inputStreamReader);\nStringBuilder stringBuilder = new StringBuilder();'
p2820
aS'@Override\npublic void onClick(View v) {\n    if (v.getId() == R.id.login_clear_button) {\n        usernameEditText.setText("");\n        passwordEditText.setText("");\n        passwordEditText.setCursorVisible(false);\n        passwordEditText.setFocusable(false);\n        usernameEditText.setCursorVisible(true);\n        passwordEditText.setFocusable(true);\n    } else if (v.getId() == R.id.login_sendPostReq_button) {\n        String givenUsername = usernameEditText.getEditableText().toString();\n        String givenPassword = passwordEditText.getEditableText().toString();\n        System.out.println("Given username :" + givenUsername + " Given password :" + givenPassword);\n        sendPostRequest(givenUsername, givenPassword);\n    }\n}\nprivate void sendPostRequest(String givenUsername, String givenPassword) {\n    class SendPostReqAsyncTask extends AsyncTask<String, Void, String> {\n\n        @Override\n        protected String doInBackground(String... params) {\n            String paramUsername = params[0];\n            String paramPassword = params[1];\n            System.out.println("*** doInBackground ** paramUsername " + paramUsername + " paramPassword :" + paramPassword);\n            HttpClient httpClient = new DefaultHttpClient();\n            HttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\n            BasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\n            BasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\n            List<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\n            nameValuePairList.add(usernameBasicNameValuePair);\n            nameValuePairList.add(passwordBasicNameValuePAir);\n            try {\n                UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n                httpPost.setEntity(urlEncodedFormEntity);\n                try {\n                    HttpResponse httpResponse = httpClient.execute(httpPost);\n                    InputStream inputStream = httpResponse.getEntity().getContent();\n                    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n                    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n                    StringBuilder stringBuilder = new StringBuilder();\n                    String bufferedStrChunk = null;\n                    while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n                        stringBuilder.append(bufferedStrChunk);\n                    }\n                    return stringBuilder.toString();\n                } catch (ClientProtocolException cpe) {\n                    System.out.println("First Exception caz of HttpResponese :" + cpe);\n                    cpe.printStackTrace();\n                } catch (IOException ioe) {\n                    System.out.println("Second Exception caz of HttpResponse :" + ioe);\n                    ioe.printStackTrace();\n                }\n            } catch (UnsupportedEncodingException uee) {\n                System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n                uee.printStackTrace();\n            }\n            return null;\n        }\n\n        @Override\n        protected void onPostExecute(String result) {\n            super.onPostExecute(result);\n            if (result.equals("working")) {\n                Toast.makeText(getApplicationContext(), "HTTP POST is working...", Toast.LENGTH_LONG).show();\n            } else {\n                Toast.makeText(getApplicationContext(), "Invalid POST req...", Toast.LENGTH_LONG).show();\n            }\n        }\n    }\n    SendPostReqAsyncTask sendPostReqAsyncTask = new SendPostReqAsyncTask();\n    sendPostReqAsyncTask.execute(givenUsername, givenPassword);\n}'
p2821
aS'HttpClient httpClient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost("http://www.nirmana.lk/hec/android/postLogin.php");\nBasicNameValuePair usernameBasicNameValuePair = new BasicNameValuePair("paramUsername", paramUsername);\nBasicNameValuePair passwordBasicNameValuePAir = new BasicNameValuePair("paramPassword", paramPassword);\nList<NameValuePair> nameValuePairList = new ArrayList<NameValuePair>();\nnameValuePairList.add(usernameBasicNameValuePair);\nnameValuePairList.add(passwordBasicNameValuePAir);\ntry {\n    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairList);\n    httpPost.setEntity(urlEncodedFormEntity);\n    try {\n        HttpResponse httpResponse = httpClient.execute(httpPost);\n        InputStream inputStream = httpResponse.getEntity().getContent();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        StringBuilder stringBuilder = new StringBuilder();\n        String bufferedStrChunk = null;\n        while ((bufferedStrChunk = bufferedReader.readLine()) != null) {\n            stringBuilder.append(bufferedStrChunk);\n        }\n        return stringBuilder.toString();\n    } catch (ClientProtocolException cpe) {\n        System.out.println("First Exception caz of HttpResponese :" + cpe);\n        cpe.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println("Second Exception caz of HttpResponse :" + ioe);\n        ioe.printStackTrace();\n    }\n} catch (UnsupportedEncodingException uee) {\n    System.out.println("An Exception given because of UrlEncodedFormEntity argument :" + uee);\n    uee.printStackTrace();\n}'
p2822
aS'conn.setDoOutput(true);\nconn.setRequestProperty("Content-Type", "application/json");'
p2823
aS'String resultToDisplay = "";\nInputStream in = null;\ntry {\n    URL url = new URL(urlString);\n    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n    in = new BufferedInputStream(urlConnection.getInputStream());\n} catch (Exception e) {\n    System.out.println(e.getMessage());\n    return e.getMessage();\n}\ntry {\n    resultToDisplay = IOUtils.toString(in, "UTF-8");\n} catch (IOException e) {\n    e.printStackTrace();\n}\nreturn resultToDisplay;'
p2824
aS'Log.e(TAG, "12 - root : " + root.toString());'
p2825
aS'String response = "";\nLog.e(TAG, "2 - pre Request to response...");\ntry {\n    response = performPostCall(urlString, new HashMap<String, String>() {\n\n        private static final long serialVersionUID = 1L;\n\n        {\n            put("Accept", "application/json");\n            put("Content-Type", "application/json");\n        }\n    });\n    Log.e(TAG, "3 - give Response...");\n    Log.e(TAG, "4 " + response.toString());\n} catch (Exception e) {\n    Log.e(TAG, "Error ...");\n}\nLog.e(TAG, "5 - after Response...");\nif (!response.equalsIgnoreCase("")) {\n    try {\n        Log.e(TAG, "6 - response !empty...");\n        JSONObject jRoot = new JSONObject(response);\n        JSONObject d = jRoot.getJSONObject("d");\n        int ResultType = d.getInt("ResultType");\n        Log.e("ResultType", ResultType + "");\n        if (ResultType == 1) {\n            status = true;\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, "Error " + e.getMessage());\n    } finally {\n    }\n} else {\n    Log.e(TAG, "6 - response is empty...");\n}'
p2826
aS'JSONObject root = new JSONObject();\nString token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    while ((line = br.readLine()) != null) {\n        response += line;\n    }\n} else {\n    Log.e(TAG, "14 - False - HTTP_OK");\n}'
p2827
aS'List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\nnameValuePairs.add(new BasicNameValuePair("id", "12345"));'
p2828
aS'InputStream inputStream = httpResponse.getEntity().getContent();\nInputStreamReader inputStreamReader = new InputStreamReader(inputStream);\nBufferedReader bufferedReader = new BufferedReader(inputStreamReader);\nStringBuilder stringBuilder = new StringBuilder();\nString bufferedStrChunk = null;'
p2829
aS'String token = Static.getPrefsToken(context);\nroot.put("securityInfo", Static.getSecurityInfo(context));\nroot.put("advertisementId", advertisementId);\nLog.e(TAG, "12 - root : " + root.toString());\nString str = root.toString();\nbyte[] outputBytes = str.getBytes("UTF-8");\nOutputStream os = conn.getOutputStream();\nos.write(outputBytes);\nint responseCode = conn.getResponseCode();\nLog.e(TAG, "13 - responseCode : " + responseCode);\nif (responseCode == HttpsURLConnection.HTTP_OK) {\n    Log.e(TAG, "14 - HTTP_OK");\n    String line;\n    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n}'
p2830
aS'passwordEditText = (EditText) findViewById(R.id.login_password_editText);\nsendPostReqButton = (Button) findViewById(R.id.login_sendPostReq_button);\nsendPostReqButton.setOnClickListener(this);\nclearButton = (Button) findViewById(R.id.login_clear_button);\nclearButton.setOnClickListener(this);'
p2831
aS'conn.setDoInput(true);\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));'
p2832
aS'JSONObject jRoot = new JSONObject(response);'
p2833
atp2834
Rp2835
sI15940234
g1
((lp2836
S'SOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();'
p2837
aS'TransformerFactory transformerFactory = TransformerFactory.newInstance();\nTransformer transformer = transformerFactory.newTransformer();\nSource sourceContent = soapResponse.getSOAPPart().getContent();'
p2838
aS'soapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");'
p2839
aS'SOAPMessage soapResponse = soapConnection.call(createSOAPRequest(), url);\nprintSOAPResponse(soapResponse);'
p2840
aS'String url = "http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx";\nSOAPMessage soapResponse = soapConnection.call(createSOAPRequest(), url);'
p2841
aS'DefaultWebService defaultWebService = new DefaultWebService();\nString res = defaultWebService.getDefaultWebServiceHttpSoap11Endpoint().login("webservice", "dadsadasdasd");\nSystem.out.println(res);'
p2842
aS'String serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");'
p2843
aS'Source sourceContent = soapResponse.getSOAPPart().getContent();'
p2844
aS'SOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();'
p2845
aS'soapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();\nreturn soapMessage;'
p2846
aS'String serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();'
p2847
aS'MessageFactory messageFactory = MessageFactory.newInstance();\nSOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");'
p2848
aS'SOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");'
p2849
aS'soapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();'
p2850
aS'SOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();'
p2851
aS'SOAPMessage soapResponse = soapConnection.call(createSOAPRequest(), url);\nprintSOAPResponse(soapResponse);\nsoapConnection.close();'
p2852
aS'SOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();\nreturn soapMessage;'
p2853
aS'SOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();\nreturn soapMessage;'
p2854
aS'StreamResult result = new StreamResult(System.out);'
p2855
aS'SOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");'
p2856
aS'SOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();\nreturn soapMessage;'
p2857
aS'String url = "http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx";\nSOAPMessage soapResponse = soapConnection.call(createSOAPRequest(), url);\nprintSOAPResponse(soapResponse);'
p2858
aS'SOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");'
p2859
aS'SOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();'
p2860
aS'soapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);'
p2861
aS'SOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();'
p2862
aS'SOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");'
p2863
aS'TransformerFactory transformerFactory = TransformerFactory.newInstance();\nTransformer transformer = transformerFactory.newTransformer();\nSource sourceContent = soapResponse.getSOAPPart().getContent();\nSystem.out.print("\\nResponse SOAP Message = ");\nStreamResult result = new StreamResult(System.out);'
p2864
aS'soapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");'
p2865
aS'SOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();'
p2866
aS'MessageFactory messageFactory = MessageFactory.newInstance();\nSOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();'
p2867
aS'String res = defaultWebService.getDefaultWebServiceHttpSoap11Endpoint().login("webservice", "dadsadasdasd");'
p2868
aS'SOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();'
p2869
aS'SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();'
p2870
aS'SOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");'
p2871
aS'headers.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();'
p2872
aS'SOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();'
p2873
aS'public class SOAPClientSAAJ {\n\n    public static void main(String[] args) {\n        try {\n            SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();\n            SOAPConnection soapConnection = soapConnectionFactory.createConnection();\n            String url = "http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx";\n            SOAPMessage soapResponse = soapConnection.call(createSOAPRequest(), url);\n            printSOAPResponse(soapResponse);\n            soapConnection.close();\n        } catch (Exception e) {\n            System.err.println("Error occurred while sending SOAP Request to Server");\n            e.printStackTrace();\n        }\n    }\n\n    private static SOAPMessage createSOAPRequest() throws Exception {\n        MessageFactory messageFactory = MessageFactory.newInstance();\n        SOAPMessage soapMessage = messageFactory.createMessage();\n        SOAPPart soapPart = soapMessage.getSOAPPart();\n        String serverURI = "http://ws.cdyne.com/";\n        SOAPEnvelope envelope = soapPart.getEnvelope();\n        envelope.addNamespaceDeclaration("example", serverURI);\n        SOAPBody soapBody = envelope.getBody();\n        SOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\n        SOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\n        soapBodyElem1.addTextNode("mutantninja@gmail.com");\n        SOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\n        soapBodyElem2.addTextNode("123");\n        MimeHeaders headers = soapMessage.getMimeHeaders();\n        headers.addHeader("SOAPAction", serverURI + "VerifyEmail");\n        soapMessage.saveChanges();\n        System.out.print("Request SOAP Message = ");\n        soapMessage.writeTo(System.out);\n        System.out.println();\n        return soapMessage;\n    }\n\n    private static void printSOAPResponse(SOAPMessage soapResponse) throws Exception {\n        TransformerFactory transformerFactory = TransformerFactory.newInstance();\n        Transformer transformer = transformerFactory.newTransformer();\n        Source sourceContent = soapResponse.getSOAPPart().getContent();\n        System.out.print("\\nResponse SOAP Message = ");\n        StreamResult result = new StreamResult(System.out);\n        transformer.transform(sourceContent, result);\n    }\n}'
p2874
aS'SOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();'
p2875
aS'System.out.print("Request SOAP Message = ");'
p2876
aS'MessageFactory messageFactory = MessageFactory.newInstance();\nSOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();'
p2877
aS'import javax.xml.transform.stream.*;'
p2878
aS'SOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");'
p2879
aS'TransformerFactory transformerFactory = TransformerFactory.newInstance();'
p2880
aS'headers.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");'
p2881
aS'SOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");'
p2882
aS'System.out.print("\\nResponse SOAP Message = ");\nStreamResult result = new StreamResult(System.out);'
p2883
aS'import javax.xml.transform.stream.*;\n\npublic class SOAPClientSAAJ {\n\n    public static void main(String[] args) {\n        try {\n            SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();\n            SOAPConnection soapConnection = soapConnectionFactory.createConnection();\n            String url = "http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx";\n            SOAPMessage soapResponse = soapConnection.call(createSOAPRequest(), url);\n            printSOAPResponse(soapResponse);\n            soapConnection.close();\n        } catch (Exception e) {\n            System.err.println("Error occurred while sending SOAP Request to Server");\n            e.printStackTrace();\n        }\n    }\n\n    private static SOAPMessage createSOAPRequest() throws Exception {\n        MessageFactory messageFactory = MessageFactory.newInstance();\n        SOAPMessage soapMessage = messageFactory.createMessage();\n        SOAPPart soapPart = soapMessage.getSOAPPart();\n        String serverURI = "http://ws.cdyne.com/";\n        SOAPEnvelope envelope = soapPart.getEnvelope();\n        envelope.addNamespaceDeclaration("example", serverURI);\n        SOAPBody soapBody = envelope.getBody();\n        SOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\n        SOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\n        soapBodyElem1.addTextNode("mutantninja@gmail.com");\n        SOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\n        soapBodyElem2.addTextNode("123");\n        MimeHeaders headers = soapMessage.getMimeHeaders();\n        headers.addHeader("SOAPAction", serverURI + "VerifyEmail");\n        soapMessage.saveChanges();\n        System.out.print("Request SOAP Message = ");\n        soapMessage.writeTo(System.out);\n        System.out.println();\n        return soapMessage;\n    }\n\n    private static void printSOAPResponse(SOAPMessage soapResponse) throws Exception {\n        TransformerFactory transformerFactory = TransformerFactory.newInstance();\n        Transformer transformer = transformerFactory.newTransformer();\n        Source sourceContent = soapResponse.getSOAPPart().getContent();\n        System.out.print("\\nResponse SOAP Message = ");\n        StreamResult result = new StreamResult(System.out);\n        transformer.transform(sourceContent, result);\n    }\n}'
p2884
aS'return soapMessage;'
p2885
aS'soapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();'
p2886
aS'System.out.print("\\nResponse SOAP Message = ");'
p2887
aS'headers.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();'
p2888
aS'MessageFactory messageFactory = MessageFactory.newInstance();\nSOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();'
p2889
aS'private static SOAPMessage createSOAPRequest() throws Exception {\n    MessageFactory messageFactory = MessageFactory.newInstance();\n    SOAPMessage soapMessage = messageFactory.createMessage();\n    SOAPPart soapPart = soapMessage.getSOAPPart();\n    String serverURI = "http://ws.cdyne.com/";\n    SOAPEnvelope envelope = soapPart.getEnvelope();\n    envelope.addNamespaceDeclaration("example", serverURI);\n    SOAPBody soapBody = envelope.getBody();\n    SOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\n    SOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\n    soapBodyElem1.addTextNode("mutantninja@gmail.com");\n    SOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\n    soapBodyElem2.addTextNode("123");\n    MimeHeaders headers = soapMessage.getMimeHeaders();\n    headers.addHeader("SOAPAction", serverURI + "VerifyEmail");\n    soapMessage.saveChanges();\n    System.out.print("Request SOAP Message = ");\n    soapMessage.writeTo(System.out);\n    System.out.println();\n    return soapMessage;\n}\nprivate static void printSOAPResponse(SOAPMessage soapResponse) throws Exception {\n    TransformerFactory transformerFactory = TransformerFactory.newInstance();\n    Transformer transformer = transformerFactory.newTransformer();\n    Source sourceContent = soapResponse.getSOAPPart().getContent();\n    System.out.print("\\nResponse SOAP Message = ");\n    StreamResult result = new StreamResult(System.out);\n    transformer.transform(sourceContent, result);\n}'
p2890
aS'String serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");'
p2891
aS'SOAPEnvelope envelope = soapPart.getEnvelope();'
p2892
aS'soapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");'
p2893
aS'DefaultWebService defaultWebService = new DefaultWebService();'
p2894
aS'soapMessage.writeTo(System.out);\nSystem.out.println();'
p2895
aS'soapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();'
p2896
aS'envelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();'
p2897
aS'MessageFactory messageFactory = MessageFactory.newInstance();\nSOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);'
p2898
aS'SOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");'
p2899
aS'SOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";'
p2900
aS'SOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");'
p2901
aS'SOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");'
p2902
aS'SOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();'
p2903
aS'String serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();'
p2904
aS'SOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();'
p2905
aS'SOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");'
p2906
aS'SOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);'
p2907
aS'SOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");'
p2908
aS'SOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");'
p2909
aS'String serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");'
p2910
aS'SOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");'
p2911
aS'SOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);'
p2912
aS'SOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");'
p2913
aS'transformer.transform(sourceContent, result);'
p2914
aS'SOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");'
p2915
aS'String url = "http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx";'
p2916
aS'SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();\nSOAPConnection soapConnection = soapConnectionFactory.createConnection();\nString url = "http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx";\nSOAPMessage soapResponse = soapConnection.call(createSOAPRequest(), url);\nprintSOAPResponse(soapResponse);\nsoapConnection.close();'
p2917
aS'MessageFactory messageFactory = MessageFactory.newInstance();\nSOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();'
p2918
aS'MessageFactory messageFactory = MessageFactory.newInstance();\nSOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");'
p2919
aS'String serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();'
p2920
aS'SOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");'
p2921
aS'printSOAPResponse(soapResponse);\nsoapConnection.close();'
p2922
aS'SOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);'
p2923
aS'envelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");'
p2924
aS'SOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();\nreturn soapMessage;'
p2925
aS'String serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);'
p2926
aS'System.err.println("Error occurred while sending SOAP Request to Server");\ne.printStackTrace();'
p2927
aS'SOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");'
p2928
aS'Transformer transformer = transformerFactory.newTransformer();\nSource sourceContent = soapResponse.getSOAPPart().getContent();'
p2929
aS'soapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();'
p2930
aS'soapMessage.writeTo(System.out);\nSystem.out.println();\nreturn soapMessage;'
p2931
aS'MessageFactory messageFactory = MessageFactory.newInstance();'
p2932
aS'SOAPConnection soapConnection = soapConnectionFactory.createConnection();\nString url = "http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx";\nSOAPMessage soapResponse = soapConnection.call(createSOAPRequest(), url);\nprintSOAPResponse(soapResponse);\nsoapConnection.close();'
p2933
aS'envelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);'
p2934
aS'SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();\nSOAPConnection soapConnection = soapConnectionFactory.createConnection();\nString url = "http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx";\nSOAPMessage soapResponse = soapConnection.call(createSOAPRequest(), url);'
p2935
aS'String serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");'
p2936
aS'SOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");'
p2937
aS'public static void main(String[] args) {\n    try {\n        SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();\n        SOAPConnection soapConnection = soapConnectionFactory.createConnection();\n        String url = "http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx";\n        SOAPMessage soapResponse = soapConnection.call(createSOAPRequest(), url);\n        printSOAPResponse(soapResponse);\n        soapConnection.close();\n    } catch (Exception e) {\n        System.err.println("Error occurred while sending SOAP Request to Server");\n        e.printStackTrace();\n    }\n}\nprivate static SOAPMessage createSOAPRequest() throws Exception {\n    MessageFactory messageFactory = MessageFactory.newInstance();\n    SOAPMessage soapMessage = messageFactory.createMessage();\n    SOAPPart soapPart = soapMessage.getSOAPPart();\n    String serverURI = "http://ws.cdyne.com/";\n    SOAPEnvelope envelope = soapPart.getEnvelope();\n    envelope.addNamespaceDeclaration("example", serverURI);\n    SOAPBody soapBody = envelope.getBody();\n    SOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\n    SOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\n    soapBodyElem1.addTextNode("mutantninja@gmail.com");\n    SOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\n    soapBodyElem2.addTextNode("123");\n    MimeHeaders headers = soapMessage.getMimeHeaders();\n    headers.addHeader("SOAPAction", serverURI + "VerifyEmail");\n    soapMessage.saveChanges();\n    System.out.print("Request SOAP Message = ");\n    soapMessage.writeTo(System.out);\n    System.out.println();\n    return soapMessage;\n}'
p2938
aS'System.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);'
p2939
aS'System.out.println(res);'
p2940
aS'MimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();\nreturn soapMessage;'
p2941
aS'try {\n    SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();\n    SOAPConnection soapConnection = soapConnectionFactory.createConnection();\n    String url = "http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx";\n    SOAPMessage soapResponse = soapConnection.call(createSOAPRequest(), url);\n    printSOAPResponse(soapResponse);\n    soapConnection.close();\n} catch (Exception e) {\n    System.err.println("Error occurred while sending SOAP Request to Server");\n}'
p2942
aS'soapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();\nreturn soapMessage;'
p2943
aS'SOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");'
p2944
aS'SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();\nSOAPConnection soapConnection = soapConnectionFactory.createConnection();\nString url = "http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx";'
p2945
aS'SOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");'
p2946
aS'SOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");'
p2947
aS'SOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();'
p2948
aS'System.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();\nreturn soapMessage;'
p2949
aS'import javax.xml.soap.*;'
p2950
aS'TransformerFactory transformerFactory = TransformerFactory.newInstance();\nTransformer transformer = transformerFactory.newTransformer();'
p2951
aS'SOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");'
p2952
aS'soapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();'
p2953
aS'envelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");'
p2954
aS'envelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();'
p2955
aS'envelope.addNamespaceDeclaration("example", serverURI);'
p2956
aS'public static void main(String[] args) {\n    try {\n        SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();\n        SOAPConnection soapConnection = soapConnectionFactory.createConnection();\n        String url = "http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx";\n        SOAPMessage soapResponse = soapConnection.call(createSOAPRequest(), url);\n        printSOAPResponse(soapResponse);\n        soapConnection.close();\n    } catch (Exception e) {\n        System.err.println("Error occurred while sending SOAP Request to Server");\n        e.printStackTrace();\n    }\n}\nprivate static SOAPMessage createSOAPRequest() throws Exception {\n    MessageFactory messageFactory = MessageFactory.newInstance();\n    SOAPMessage soapMessage = messageFactory.createMessage();\n    SOAPPart soapPart = soapMessage.getSOAPPart();\n    String serverURI = "http://ws.cdyne.com/";\n    SOAPEnvelope envelope = soapPart.getEnvelope();\n    envelope.addNamespaceDeclaration("example", serverURI);\n    SOAPBody soapBody = envelope.getBody();\n    SOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\n    SOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\n    soapBodyElem1.addTextNode("mutantninja@gmail.com");\n    SOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\n    soapBodyElem2.addTextNode("123");\n    MimeHeaders headers = soapMessage.getMimeHeaders();\n    headers.addHeader("SOAPAction", serverURI + "VerifyEmail");\n    soapMessage.saveChanges();\n    System.out.print("Request SOAP Message = ");\n    soapMessage.writeTo(System.out);\n    System.out.println();\n    return soapMessage;\n}\nprivate static void printSOAPResponse(SOAPMessage soapResponse) throws Exception {\n    TransformerFactory transformerFactory = TransformerFactory.newInstance();\n    Transformer transformer = transformerFactory.newTransformer();\n    Source sourceContent = soapResponse.getSOAPPart().getContent();\n    System.out.print("\\nResponse SOAP Message = ");\n    StreamResult result = new StreamResult(System.out);\n    transformer.transform(sourceContent, result);\n}'
p2957
aS'SOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();\nreturn soapMessage;'
p2958
aS'MessageFactory messageFactory = MessageFactory.newInstance();\nSOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();'
p2959
aS'SOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");'
p2960
aS'e.printStackTrace();'
p2961
aS'envelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");'
p2962
aS'SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();\nSOAPConnection soapConnection = soapConnectionFactory.createConnection();\nString url = "http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx";\nSOAPMessage soapResponse = soapConnection.call(createSOAPRequest(), url);\nprintSOAPResponse(soapResponse);'
p2963
aS'MimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();'
p2964
aS'SOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();'
p2965
aS'public static void main(String[] args) {\n    try {\n        SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();\n        SOAPConnection soapConnection = soapConnectionFactory.createConnection();\n        String url = "http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx";\n        SOAPMessage soapResponse = soapConnection.call(createSOAPRequest(), url);\n        printSOAPResponse(soapResponse);\n        soapConnection.close();\n    } catch (Exception e) {\n        System.err.println("Error occurred while sending SOAP Request to Server");\n        e.printStackTrace();\n    }\n}'
p2966
aS'envelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");'
p2967
aS'SOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");'
p2968
aS'SOAPConnection soapConnection = soapConnectionFactory.createConnection();'
p2969
aS'System.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();'
p2970
aS'soapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();'
p2971
aS'SOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");'
p2972
aS'String url = "http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx";\nSOAPMessage soapResponse = soapConnection.call(createSOAPRequest(), url);\nprintSOAPResponse(soapResponse);\nsoapConnection.close();'
p2973
aS'SOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");'
p2974
aS'import javax.xml.soap.*;\nimport javax.xml.transform.*;\nimport javax.xml.transform.stream.*;'
p2975
aS'System.out.println();\nreturn soapMessage;'
p2976
aS'MimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");'
p2977
aS'SOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");'
p2978
aS'Source sourceContent = soapResponse.getSOAPPart().getContent();\nSystem.out.print("\\nResponse SOAP Message = ");\nStreamResult result = new StreamResult(System.out);'
p2979
aS'soapMessage.writeTo(System.out);'
p2980
aS'SOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();'
p2981
aS'SOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");'
p2982
aS'MessageFactory messageFactory = MessageFactory.newInstance();\nSOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");'
p2983
aS'soapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);'
p2984
aS'SOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();\nreturn soapMessage;'
p2985
aS'SOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");'
p2986
aS'String res = defaultWebService.getDefaultWebServiceHttpSoap11Endpoint().login("webservice", "dadsadasdasd");\nSystem.out.println(res);'
p2987
aS'SOAPConnection soapConnection = soapConnectionFactory.createConnection();\nString url = "http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx";\nSOAPMessage soapResponse = soapConnection.call(createSOAPRequest(), url);'
p2988
aS'SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();\nSOAPConnection soapConnection = soapConnectionFactory.createConnection();'
p2989
aS'TransformerFactory transformerFactory = TransformerFactory.newInstance();\nTransformer transformer = transformerFactory.newTransformer();\nSource sourceContent = soapResponse.getSOAPPart().getContent();\nSystem.out.print("\\nResponse SOAP Message = ");'
p2990
aS'envelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");'
p2991
aS'import javax.xml.soap.*;\nimport javax.xml.transform.*;\nimport javax.xml.transform.stream.*;\n\npublic class SOAPClientSAAJ {\n\n    public static void main(String[] args) {\n        try {\n            SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();\n            SOAPConnection soapConnection = soapConnectionFactory.createConnection();\n            String url = "http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx";\n            SOAPMessage soapResponse = soapConnection.call(createSOAPRequest(), url);\n            printSOAPResponse(soapResponse);\n            soapConnection.close();\n        } catch (Exception e) {\n            System.err.println("Error occurred while sending SOAP Request to Server");\n            e.printStackTrace();\n        }\n    }\n\n    private static SOAPMessage createSOAPRequest() throws Exception {\n        MessageFactory messageFactory = MessageFactory.newInstance();\n        SOAPMessage soapMessage = messageFactory.createMessage();\n        SOAPPart soapPart = soapMessage.getSOAPPart();\n        String serverURI = "http://ws.cdyne.com/";\n        SOAPEnvelope envelope = soapPart.getEnvelope();\n        envelope.addNamespaceDeclaration("example", serverURI);\n        SOAPBody soapBody = envelope.getBody();\n        SOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\n        SOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\n        soapBodyElem1.addTextNode("mutantninja@gmail.com");\n        SOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\n        soapBodyElem2.addTextNode("123");\n        MimeHeaders headers = soapMessage.getMimeHeaders();\n        headers.addHeader("SOAPAction", serverURI + "VerifyEmail");\n        soapMessage.saveChanges();\n        System.out.print("Request SOAP Message = ");\n        soapMessage.writeTo(System.out);\n        System.out.println();\n        return soapMessage;\n    }\n\n    private static void printSOAPResponse(SOAPMessage soapResponse) throws Exception {\n        TransformerFactory transformerFactory = TransformerFactory.newInstance();\n        Transformer transformer = transformerFactory.newTransformer();\n        Source sourceContent = soapResponse.getSOAPPart().getContent();\n        System.out.print("\\nResponse SOAP Message = ");\n        StreamResult result = new StreamResult(System.out);\n        transformer.transform(sourceContent, result);\n    }\n}'
p2992
aS'MessageFactory messageFactory = MessageFactory.newInstance();\nSOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";'
p2993
aS'SOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");'
p2994
aS'MessageFactory messageFactory = MessageFactory.newInstance();\nSOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();'
p2995
aS'envelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();'
p2996
aS'MessageFactory messageFactory = MessageFactory.newInstance();\nSOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");'
p2997
aS'try {\n    SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();\n    SOAPConnection soapConnection = soapConnectionFactory.createConnection();\n    String url = "http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx";\n    SOAPMessage soapResponse = soapConnection.call(createSOAPRequest(), url);\n    printSOAPResponse(soapResponse);\n    soapConnection.close();\n} catch (Exception e) {\n    System.err.println("Error occurred while sending SOAP Request to Server");\n    e.printStackTrace();\n}'
p2998
aS'SOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);'
p2999
aS'SOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();'
p3000
aS'SOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");'
p3001
aS'String serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();\nreturn soapMessage;'
p3002
aS'SOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");'
p3003
aS'SOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();'
p3004
aS'MimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);'
p3005
aS'SOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();\nreturn soapMessage;'
p3006
aS'soapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");'
p3007
aS'MessageFactory messageFactory = MessageFactory.newInstance();\nSOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");'
p3008
aS'envelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");'
p3009
aS'soapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();\nreturn soapMessage;'
p3010
aS'Transformer transformer = transformerFactory.newTransformer();\nSource sourceContent = soapResponse.getSOAPPart().getContent();\nSystem.out.print("\\nResponse SOAP Message = ");\nStreamResult result = new StreamResult(System.out);'
p3011
aS'SOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);'
p3012
aS'MessageFactory messageFactory = MessageFactory.newInstance();\nSOAPMessage soapMessage = messageFactory.createMessage();'
p3013
aS'soapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();'
p3014
aS'String serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");'
p3015
aS'SOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");'
p3016
aS'soapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");'
p3017
aS'StreamResult result = new StreamResult(System.out);\ntransformer.transform(sourceContent, result);'
p3018
aS'SOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();'
p3019
aS'SOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");'
p3020
aS'SOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();'
p3021
aS'SOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();'
p3022
aS'SOAPConnection soapConnection = soapConnectionFactory.createConnection();\nString url = "http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx";\nSOAPMessage soapResponse = soapConnection.call(createSOAPRequest(), url);\nprintSOAPResponse(soapResponse);'
p3023
aS'Transformer transformer = transformerFactory.newTransformer();'
p3024
aS'headers.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);'
p3025
aS'SOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();'
p3026
aS'SOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");'
p3027
aS'soapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");'
p3028
aS'SOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");'
p3029
aS'Transformer transformer = transformerFactory.newTransformer();\nSource sourceContent = soapResponse.getSOAPPart().getContent();\nSystem.out.print("\\nResponse SOAP Message = ");'
p3030
aS'SOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);'
p3031
aS'String serverURI = "http://ws.cdyne.com/";'
p3032
aS'import javax.xml.transform.*;\nimport javax.xml.transform.stream.*;\n\npublic class SOAPClientSAAJ {\n\n    public static void main(String[] args) {\n        try {\n            SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();\n            SOAPConnection soapConnection = soapConnectionFactory.createConnection();\n            String url = "http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx";\n            SOAPMessage soapResponse = soapConnection.call(createSOAPRequest(), url);\n            printSOAPResponse(soapResponse);\n            soapConnection.close();\n        } catch (Exception e) {\n            System.err.println("Error occurred while sending SOAP Request to Server");\n            e.printStackTrace();\n        }\n    }\n\n    private static SOAPMessage createSOAPRequest() throws Exception {\n        MessageFactory messageFactory = MessageFactory.newInstance();\n        SOAPMessage soapMessage = messageFactory.createMessage();\n        SOAPPart soapPart = soapMessage.getSOAPPart();\n        String serverURI = "http://ws.cdyne.com/";\n        SOAPEnvelope envelope = soapPart.getEnvelope();\n        envelope.addNamespaceDeclaration("example", serverURI);\n        SOAPBody soapBody = envelope.getBody();\n        SOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\n        SOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\n        soapBodyElem1.addTextNode("mutantninja@gmail.com");\n        SOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\n        soapBodyElem2.addTextNode("123");\n        MimeHeaders headers = soapMessage.getMimeHeaders();\n        headers.addHeader("SOAPAction", serverURI + "VerifyEmail");\n        soapMessage.saveChanges();\n        System.out.print("Request SOAP Message = ");\n        soapMessage.writeTo(System.out);\n        System.out.println();\n        return soapMessage;\n    }\n\n    private static void printSOAPResponse(SOAPMessage soapResponse) throws Exception {\n        TransformerFactory transformerFactory = TransformerFactory.newInstance();\n        Transformer transformer = transformerFactory.newTransformer();\n        Source sourceContent = soapResponse.getSOAPPart().getContent();\n        System.out.print("\\nResponse SOAP Message = ");\n        StreamResult result = new StreamResult(System.out);\n        transformer.transform(sourceContent, result);\n    }\n}'
p3033
aS'SOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");'
p3034
aS'SOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();'
p3035
aS'SOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();'
p3036
aS'SOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();'
p3037
aS'MessageFactory messageFactory = MessageFactory.newInstance();\nSOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);'
p3038
aS'Source sourceContent = soapResponse.getSOAPPart().getContent();\nSystem.out.print("\\nResponse SOAP Message = ");\nStreamResult result = new StreamResult(System.out);\ntransformer.transform(sourceContent, result);'
p3039
aS'String serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();'
p3040
aS'String serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();'
p3041
aS'headers.addHeader("SOAPAction", serverURI + "VerifyEmail");'
p3042
aS'SOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);'
p3043
aS'SOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");'
p3044
aS'envelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");'
p3045
aS'SOAPMessage soapMessage = messageFactory.createMessage();'
p3046
aS'MimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();'
p3047
aS'SOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();'
p3048
aS'SOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);'
p3049
aS'envelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();\nreturn soapMessage;'
p3050
aS'String serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");'
p3051
aS'Source sourceContent = soapResponse.getSOAPPart().getContent();\nSystem.out.print("\\nResponse SOAP Message = ");'
p3052
aS'try {\n    SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();\n    SOAPConnection soapConnection = soapConnectionFactory.createConnection();\n    String url = "http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx";\n    SOAPMessage soapResponse = soapConnection.call(createSOAPRequest(), url);\n    printSOAPResponse(soapResponse);\n    soapConnection.close();\n} catch (Exception e) {\n}'
p3053
aS'SOAPMessage soapResponse = soapConnection.call(createSOAPRequest(), url);'
p3054
aS'MessageFactory messageFactory = MessageFactory.newInstance();\nSOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();\nreturn soapMessage;'
p3055
aS'String serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);'
p3056
aS'SOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");'
p3057
aS'DefaultWebService defaultWebService = new DefaultWebService();\nString res = defaultWebService.getDefaultWebServiceHttpSoap11Endpoint().login("webservice", "dadsadasdasd");'
p3058
aS'soapBodyElem1.addTextNode("mutantninja@gmail.com");'
p3059
aS'SOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");'
p3060
aS'SOAPBody soapBody = envelope.getBody();'
p3061
aS'MimeHeaders headers = soapMessage.getMimeHeaders();'
p3062
aS'SOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);'
p3063
aS'soapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);'
p3064
aS'SOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");'
p3065
aS'MessageFactory messageFactory = MessageFactory.newInstance();\nSOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");'
p3066
aS'soapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");'
p3067
aS'private static SOAPMessage createSOAPRequest() throws Exception {\n    MessageFactory messageFactory = MessageFactory.newInstance();\n    SOAPMessage soapMessage = messageFactory.createMessage();\n    SOAPPart soapPart = soapMessage.getSOAPPart();\n    String serverURI = "http://ws.cdyne.com/";\n    SOAPEnvelope envelope = soapPart.getEnvelope();\n    envelope.addNamespaceDeclaration("example", serverURI);\n    SOAPBody soapBody = envelope.getBody();\n    SOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\n    SOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\n    soapBodyElem1.addTextNode("mutantninja@gmail.com");\n    SOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\n    soapBodyElem2.addTextNode("123");\n    MimeHeaders headers = soapMessage.getMimeHeaders();\n    headers.addHeader("SOAPAction", serverURI + "VerifyEmail");\n    soapMessage.saveChanges();\n    System.out.print("Request SOAP Message = ");\n    soapMessage.writeTo(System.out);\n    System.out.println();\n    return soapMessage;\n}'
p3068
aS'SOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();'
p3069
aS'SOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();'
p3070
aS'soapBodyElem2.addTextNode("123");'
p3071
aS'soapMessage.saveChanges();'
p3072
aS'System.out.print("\\nResponse SOAP Message = ");\nStreamResult result = new StreamResult(System.out);\ntransformer.transform(sourceContent, result);'
p3073
aS'SOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");'
p3074
aS'SOAPPart soapPart = soapMessage.getSOAPPart();'
p3075
aS'SOAPConnection soapConnection = soapConnectionFactory.createConnection();\nString url = "http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx";'
p3076
aS'envelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();'
p3077
aS'System.err.println("Error occurred while sending SOAP Request to Server");'
p3078
aS'soapConnection.close();'
p3079
aS'private static void printSOAPResponse(SOAPMessage soapResponse) throws Exception {\n    TransformerFactory transformerFactory = TransformerFactory.newInstance();\n    Transformer transformer = transformerFactory.newTransformer();\n    Source sourceContent = soapResponse.getSOAPPart().getContent();\n    System.out.print("\\nResponse SOAP Message = ");\n    StreamResult result = new StreamResult(System.out);\n    transformer.transform(sourceContent, result);\n}'
p3080
aS'SOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";'
p3081
aS'import javax.xml.transform.*;\nimport javax.xml.transform.stream.*;'
p3082
aS'TransformerFactory transformerFactory = TransformerFactory.newInstance();\nTransformer transformer = transformerFactory.newTransformer();\nSource sourceContent = soapResponse.getSOAPPart().getContent();\nSystem.out.print("\\nResponse SOAP Message = ");\nStreamResult result = new StreamResult(System.out);\ntransformer.transform(sourceContent, result);'
p3083
aS'SOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");'
p3084
aS'SOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");'
p3085
aS'SOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();'
p3086
aS'import javax.xml.transform.*;'
p3087
aS'import javax.xml.soap.*;\nimport javax.xml.transform.*;'
p3088
aS'String serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");'
p3089
aS'headers.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);\nSystem.out.println();\nreturn soapMessage;'
p3090
aS'SOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");\nSOAPElement soapBodyElem2 = soapBodyElem.addChildElement("LicenseKey", "example");\nsoapBodyElem2.addTextNode("123");\nMimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");\nsoapMessage.writeTo(System.out);'
p3091
aS'printSOAPResponse(soapResponse);'
p3092
aS'MimeHeaders headers = soapMessage.getMimeHeaders();\nheaders.addHeader("SOAPAction", serverURI + "VerifyEmail");\nsoapMessage.saveChanges();\nSystem.out.print("Request SOAP Message = ");'
p3093
aS'System.out.println();'
p3094
aS'MessageFactory messageFactory = MessageFactory.newInstance();\nSOAPMessage soapMessage = messageFactory.createMessage();\nSOAPPart soapPart = soapMessage.getSOAPPart();\nString serverURI = "http://ws.cdyne.com/";\nSOAPEnvelope envelope = soapPart.getEnvelope();\nenvelope.addNamespaceDeclaration("example", serverURI);\nSOAPBody soapBody = envelope.getBody();\nSOAPElement soapBodyElem = soapBody.addChildElement("VerifyEmail", "example");\nSOAPElement soapBodyElem1 = soapBodyElem.addChildElement("email", "example");\nsoapBodyElem1.addTextNode("mutantninja@gmail.com");'
p3095
aS'Transformer transformer = transformerFactory.newTransformer();\nSource sourceContent = soapResponse.getSOAPPart().getContent();\nSystem.out.print("\\nResponse SOAP Message = ");\nStreamResult result = new StreamResult(System.out);\ntransformer.transform(sourceContent, result);'
p3096
atp3097
Rp3098
sI7347856
g1
((lp3099
S'String replace = s1.replace("[", "");'
p3100
aS'List<String> myList = new ArrayList<String>(Arrays.asList(replace1.split(",")));'
p3101
aS'String replace = s1.replace("[", "");\nSystem.out.println(replace);\nString replace1 = replace.replace("]", "");\nSystem.out.println(replace1);\nList<String> myList = new ArrayList<String>(Arrays.asList(replace1.split(",")));\nSystem.out.println(myList.toString());'
p3102
aS'for (String s : strArr) {\n}'
p3103
aS'String replace1 = replace.replace("]", "");\nSystem.out.println(replace1);\nList<String> myList = new ArrayList<String>(Arrays.asList(replace1.split(",")));'
p3104
aS'ArrayList<Character> charList = new ArrayList<Character>();'
p3105
aS'System.out.println(replace);\nString replace1 = replace.replace("]", "");\nSystem.out.println(replace1);\nList<String> myList = new ArrayList<String>(Arrays.asList(replace1.split(",")));\nSystem.out.println(myList.toString());'
p3106
aS'String replace = s1.replace("[", "");\nSystem.out.println(replace);'
p3107
aS'String s1 = "[a,b,c,d]";\nString replace = s1.replace("[", "");'
p3108
aS'for (int i = 0; i < str.length(); i++) {\n    charList.add(str.charAt(i));\n}'
p3109
aS'System.out.println(replace);\nString replace1 = replace.replace("]", "");\nSystem.out.println(replace1);'
p3110
aS'String replace = s1.replace("[", "");\nSystem.out.println(replace);\nString replace1 = replace.replace("]", "");\nSystem.out.println(replace1);\nList<String> myList = new ArrayList<String>(Arrays.asList(replace1.split(",")));'
p3111
aS'List<String> myList = new ArrayList<String>(Arrays.asList(s.split(",")));'
p3112
aS'for (String s : strArr) {\n    stringList.add(s);\n}'
p3113
aS'ArrayList<Character> charList = new ArrayList<Character>();\nfor (int i = 0; i < str.length(); i++) {\n    charList.add(str.charAt(i));\n}\nreturn charList;'
p3114
aS'System.out.println(replace1);'
p3115
aS'for (int i = 0; i < str.length(); i++) {\n    charList.add(str.charAt(i));\n}\nreturn charList;'
p3116
aS'System.out.println(replace);\nString replace1 = replace.replace("]", "");'
p3117
aS'String s1 = "[a,b,c,d]";\nString replace = s1.replace("[", "");\nSystem.out.println(replace);\nString replace1 = replace.replace("]", "");\nSystem.out.println(replace1);'
p3118
aS'System.out.println(replace1);\nList<String> myList = new ArrayList<String>(Arrays.asList(replace1.split(",")));\nSystem.out.println(myList.toString());'
p3119
aS'String replace1 = replace.replace("]", "");'
p3120
aS'return charList;'
p3121
aS'String s = "lorem,ipsum,dolor,sit,amet";\nList<String> myList = new ArrayList<String>(Arrays.asList(s.split(",")));\nSystem.out.println(myList);'
p3122
aS'List<String> myList = new ArrayList<String>(Arrays.asList(s.split(",")));\nSystem.out.println(myList);'
p3123
aS'String s1 = "[a,b,c,d]";\nString replace = s1.replace("[", "");\nSystem.out.println(replace);'
p3124
aS'String s1 = "[a,b,c,d]";\nString replace = s1.replace("[", "");\nSystem.out.println(replace);\nString replace1 = replace.replace("]", "");\nSystem.out.println(replace1);\nList<String> myList = new ArrayList<String>(Arrays.asList(replace1.split(",")));\nSystem.out.println(myList.toString());'
p3125
aS'String replace1 = replace.replace("]", "");\nSystem.out.println(replace1);'
p3126
aS'for (int i = 0; i < str.length(); i++) {\n}'
p3127
aS'ArrayList<Character> charList = new ArrayList<Character>();\nfor (int i = 0; i < str.length(); i++) {\n    charList.add(str.charAt(i));\n}'
p3128
aS'charList.add(str.charAt(i));'
p3129
aS'public static ArrayList<String> convertStringArrayToArraylist(String[] strArr) {\n    ArrayList<String> stringList = new ArrayList<String>();\n    for (String s : strArr) {\n        stringList.add(s);\n    }\n    return stringList;\n}'
p3130
aS'System.out.println(replace1);\nList<String> myList = new ArrayList<String>(Arrays.asList(replace1.split(",")));'
p3131
aS'String replace = s1.replace("[", "");\nSystem.out.println(replace);\nString replace1 = replace.replace("]", "");'
p3132
aS'String s1 = "[a,b,c,d]";'
p3133
aS'return stringList;'
p3134
aS'System.out.println(myList.toString());'
p3135
aS'System.out.println(replace);\nString replace1 = replace.replace("]", "");\nSystem.out.println(replace1);\nList<String> myList = new ArrayList<String>(Arrays.asList(replace1.split(",")));'
p3136
aS'ArrayList<String> stringList = new ArrayList<String>();\nfor (String s : strArr) {\n    stringList.add(s);\n}\nreturn stringList;'
p3137
aS'ArrayList<String> stringList = new ArrayList<String>();'
p3138
aS'public ArrayList<Character> convertStringToArraylist(String str) {\n    ArrayList<Character> charList = new ArrayList<Character>();\n    for (int i = 0; i < str.length(); i++) {\n        charList.add(str.charAt(i));\n    }\n    return charList;\n}'
p3139
aS'String s = "lorem,ipsum,dolor,sit,amet";\nList<String> myList = new ArrayList<String>(Arrays.asList(s.split(",")));'
p3140
aS'String replace1 = replace.replace("]", "");\nSystem.out.println(replace1);\nList<String> myList = new ArrayList<String>(Arrays.asList(replace1.split(",")));\nSystem.out.println(myList.toString());'
p3141
aS'System.out.println(replace);'
p3142
aS'String s = "lorem,ipsum,dolor,sit,amet";'
p3143
aS'String s1 = "[a,b,c,d]";\nString replace = s1.replace("[", "");\nSystem.out.println(replace);\nString replace1 = replace.replace("]", "");'
p3144
aS'List<String> myList = new ArrayList<String>(Arrays.asList(replace1.split(",")));\nSystem.out.println(myList.toString());'
p3145
aS'System.out.println(myList);'
p3146
aS'ArrayList<String> stringList = new ArrayList<String>();\nfor (String s : strArr) {\n    stringList.add(s);\n}'
p3147
aS'ArrayList<String> stringList = new ArrayList<String>();\nfor (String s : strArr) {\n}'
p3148
aS'ArrayList<Character> charList = new ArrayList<Character>();\nfor (int i = 0; i < str.length(); i++) {\n}'
p3149
aS'stringList.add(s);'
p3150
aS'String replace = s1.replace("[", "");\nSystem.out.println(replace);\nString replace1 = replace.replace("]", "");\nSystem.out.println(replace1);'
p3151
aS'for (String s : strArr) {\n    stringList.add(s);\n}\nreturn stringList;'
p3152
aS'String s1 = "[a,b,c,d]";\nString replace = s1.replace("[", "");\nSystem.out.println(replace);\nString replace1 = replace.replace("]", "");\nSystem.out.println(replace1);\nList<String> myList = new ArrayList<String>(Arrays.asList(replace1.split(",")));'
p3153
atp3154
Rp3155
sI672916
g1
((lp3156
S'Iterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);'
p3157
aS'ImageReader reader = iter.next();\ntry {\n    ImageInputStream stream = new FileImageInputStream(new File(path));\n    reader.setInput(stream);\n    int width = reader.getWidth(reader.getMinIndex());\n    int height = reader.getHeight(reader.getMinIndex());\n    result = new Dimension(width, height);\n} catch (IOException e) {\n}'
p3158
aS'int pos = imgFile.getName().lastIndexOf(".");'
p3159
aS'int width = reader.getWidth(reader.getMinIndex());'
p3160
aS'if (path.lastIndexOf(\'.\') != -1) {\n    result = path.substring(path.lastIndexOf(\'.\'));\n    if (result.startsWith(".")) {\n        result = result.substring(1);\n    }\n}'
p3161
aS'ImageReader reader = iter.next();\ntry {\n    ImageInputStream stream = new FileImageInputStream(new File(path));\n    reader.setInput(stream);\n    int width = reader.getWidth(reader.getMinIndex());\n    int height = reader.getHeight(reader.getMinIndex());\n    result = new Dimension(width, height);\n} catch (IOException e) {\n    log(e.getMessage());\n}'
p3162
aS'int pos = imgFile.getName().lastIndexOf(".");\nif (pos == -1)\n    throw new IOException("No extension for file: " + imgFile.getAbsolutePath());\nString suffix = imgFile.getName().substring(pos + 1);'
p3163
aS'reader.setInput(stream);'
p3164
aS'Iterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nif (iter.hasNext()) {\n}'
p3165
aS'String suffix = imgFile.getName().substring(pos + 1);'
p3166
aS'ImageInputStream stream = new FileImageInputStream(imgFile);\nreader.setInput(stream);'
p3167
aS'try {\n    ImageInputStream stream = new FileImageInputStream(imgFile);\n    reader.setInput(stream);\n    int width = reader.getWidth(reader.getMinIndex());\n    int height = reader.getHeight(reader.getMinIndex());\n    return new Dimension(width, height);\n} catch (IOException e) {\n}'
p3168
aS'result = "";'
p3169
aS'String suffix = imgFile.getName().substring(pos + 1);\nIterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nwhile (iter.hasNext()) {\n}'
p3170
aS'if (path != null) {\n    result = "";\n    if (path.lastIndexOf(\'.\') != -1) {\n        result = path.substring(path.lastIndexOf(\'.\'));\n        if (result.startsWith(".")) {\n            result = result.substring(1);\n        }\n    }\n}'
p3171
aS'throw new IOException("No extension for file: " + imgFile.getAbsolutePath());\nString suffix = imgFile.getName().substring(pos + 1);\nIterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);'
p3172
aS'if (result.startsWith(".")) {\n    result = result.substring(1);\n}'
p3173
aS'if (pos == -1)\n    throw new IOException("No extension for file: " + imgFile.getAbsolutePath());\nString suffix = imgFile.getName().substring(pos + 1);\nIterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nwhile (iter.hasNext()) {\n    ImageReader reader = iter.next();\n    try {\n        ImageInputStream stream = new FileImageInputStream(imgFile);\n        reader.setInput(stream);\n        int width = reader.getWidth(reader.getMinIndex());\n        int height = reader.getHeight(reader.getMinIndex());\n        return new Dimension(width, height);\n    } catch (IOException e) {\n        log.warn("Error reading: " + imgFile.getAbsolutePath(), e);\n    } finally {\n        reader.dispose();\n    }\n}\nthrow new IOException("Not a known image file: " + imgFile.getAbsolutePath());'
p3174
aS'while (iter.hasNext()) {\n    ImageReader reader = iter.next();\n    try {\n        ImageInputStream stream = new FileImageInputStream(imgFile);\n        reader.setInput(stream);\n        int width = reader.getWidth(reader.getMinIndex());\n        int height = reader.getHeight(reader.getMinIndex());\n        return new Dimension(width, height);\n    } catch (IOException e) {\n        log.warn("Error reading: " + imgFile.getAbsolutePath(), e);\n    } finally {\n        reader.dispose();\n    }\n}'
p3175
aS'ImageInputStream stream = new FileImageInputStream(new File(path));'
p3176
aS'ImageReader reader = iter.next();\ntry {\n    ImageInputStream stream = new FileImageInputStream(new File(path));\n    reader.setInput(stream);\n    int width = reader.getWidth(reader.getMinIndex());\n    int height = reader.getHeight(reader.getMinIndex());\n    result = new Dimension(width, height);\n} catch (IOException e) {\n    log(e.getMessage());\n} finally {\n}'
p3177
aS'reader.setInput(stream);\nint width = reader.getWidth(reader.getMinIndex());\nint height = reader.getHeight(reader.getMinIndex());\nreturn new Dimension(width, height);'
p3178
aS'while (iter.hasNext()) {\n}'
p3179
aS'if (pos == -1)\n    throw new IOException("No extension for file: " + imgFile.getAbsolutePath());\nString suffix = imgFile.getName().substring(pos + 1);\nIterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nwhile (iter.hasNext()) {\n    ImageReader reader = iter.next();\n}'
p3180
aS'if (iter.hasNext()) {\n    ImageReader reader = iter.next();\n}'
p3181
aS'if (pos == -1)\n    throw new IOException("No extension for file: " + imgFile.getAbsolutePath());\nString suffix = imgFile.getName().substring(pos + 1);\nIterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nwhile (iter.hasNext()) {\n}'
p3182
aS'Iterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nif (iter.hasNext()) {\n    ImageReader reader = iter.next();\n    try {\n        ImageInputStream stream = new FileImageInputStream(new File(path));\n        reader.setInput(stream);\n        int width = reader.getWidth(reader.getMinIndex());\n        int height = reader.getHeight(reader.getMinIndex());\n        result = new Dimension(width, height);\n    } catch (IOException e) {\n        log(e.getMessage());\n    } finally {\n        reader.dispose();\n    }\n} else {\n}'
p3183
aS'Iterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nif (iter.hasNext()) {\n    ImageReader reader = iter.next();\n}'
p3184
aS'Dimension result = null;\nString suffix = this.getFileSuffix(path);'
p3185
aS'try {\n    ImageInputStream stream = new FileImageInputStream(new File(path));\n    reader.setInput(stream);\n    int width = reader.getWidth(reader.getMinIndex());\n    int height = reader.getHeight(reader.getMinIndex());\n    result = new Dimension(width, height);\n} catch (IOException e) {\n    log(e.getMessage());\n} finally {\n}'
p3186
aS'ImageInputStream stream = new FileImageInputStream(imgFile);\nreader.setInput(stream);\nint width = reader.getWidth(reader.getMinIndex());\nint height = reader.getHeight(reader.getMinIndex());\nreturn new Dimension(width, height);'
p3187
aS'if (iter.hasNext()) {\n    ImageReader reader = iter.next();\n    try {\n        ImageInputStream stream = new FileImageInputStream(new File(path));\n        reader.setInput(stream);\n        int width = reader.getWidth(reader.getMinIndex());\n        int height = reader.getHeight(reader.getMinIndex());\n        result = new Dimension(width, height);\n    } catch (IOException e) {\n        log(e.getMessage());\n    } finally {\n        reader.dispose();\n    }\n}'
p3188
aS'int pos = imgFile.getName().lastIndexOf(".");\nif (pos == -1)\n    throw new IOException("No extension for file: " + imgFile.getAbsolutePath());\nString suffix = imgFile.getName().substring(pos + 1);\nIterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nwhile (iter.hasNext()) {\n    ImageReader reader = iter.next();\n    try {\n        ImageInputStream stream = new FileImageInputStream(imgFile);\n        reader.setInput(stream);\n        int width = reader.getWidth(reader.getMinIndex());\n        int height = reader.getHeight(reader.getMinIndex());\n        return new Dimension(width, height);\n    } catch (IOException e) {\n        log.warn("Error reading: " + imgFile.getAbsolutePath(), e);\n    } finally {\n        reader.dispose();\n    }\n}'
p3189
aS'result = "";\nif (path.lastIndexOf(\'.\') != -1) {\n}'
p3190
aS'ImageReader reader = iter.next();\ntry {\n    ImageInputStream stream = new FileImageInputStream(new File(path));\n    reader.setInput(stream);\n    int width = reader.getWidth(reader.getMinIndex());\n    int height = reader.getHeight(reader.getMinIndex());\n    result = new Dimension(width, height);\n} catch (IOException e) {\n    log(e.getMessage());\n} finally {\n    reader.dispose();\n}'
p3191
aS'ImageReader reader = iter.next();\ntry {\n    ImageInputStream stream = new FileImageInputStream(imgFile);\n    reader.setInput(stream);\n    int width = reader.getWidth(reader.getMinIndex());\n    int height = reader.getHeight(reader.getMinIndex());\n    return new Dimension(width, height);\n} catch (IOException e) {\n}'
p3192
aS'String suffix = this.getFileSuffix(path);\nIterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nif (iter.hasNext()) {\n    ImageReader reader = iter.next();\n}'
p3193
aS'result = path.substring(path.lastIndexOf(\'.\'));\nif (result.startsWith(".")) {\n}'
p3194
aS'Dimension result = null;\nString suffix = this.getFileSuffix(path);\nIterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nif (iter.hasNext()) {\n    ImageReader reader = iter.next();\n    try {\n        ImageInputStream stream = new FileImageInputStream(new File(path));\n        reader.setInput(stream);\n        int width = reader.getWidth(reader.getMinIndex());\n        int height = reader.getHeight(reader.getMinIndex());\n        result = new Dimension(width, height);\n    } catch (IOException e) {\n        log(e.getMessage());\n    } finally {\n        reader.dispose();\n    }\n} else {\n}'
p3195
aS'result = "";\nif (path.lastIndexOf(\'.\') != -1) {\n    result = path.substring(path.lastIndexOf(\'.\'));\n}'
p3196
aS'log.warn("Error reading: " + imgFile.getAbsolutePath(), e);'
p3197
aS'String result = null;\nif (path != null) {\n    result = "";\n    if (path.lastIndexOf(\'.\') != -1) {\n        result = path.substring(path.lastIndexOf(\'.\'));\n        if (result.startsWith(".")) {\n            result = result.substring(1);\n        }\n    }\n}\nreturn result;'
p3198
aS'throw new IOException("No extension for file: " + imgFile.getAbsolutePath());'
p3199
aS'throw new IOException("No extension for file: " + imgFile.getAbsolutePath());\nString suffix = imgFile.getName().substring(pos + 1);'
p3200
aS'result = result.substring(1);'
p3201
aS'int height = reader.getHeight(reader.getMinIndex());\nreturn new Dimension(width, height);'
p3202
aS'throw new IOException("No extension for file: " + imgFile.getAbsolutePath());\nString suffix = imgFile.getName().substring(pos + 1);\nIterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nwhile (iter.hasNext()) {\n    ImageReader reader = iter.next();\n    try {\n        ImageInputStream stream = new FileImageInputStream(imgFile);\n        reader.setInput(stream);\n        int width = reader.getWidth(reader.getMinIndex());\n        int height = reader.getHeight(reader.getMinIndex());\n        return new Dimension(width, height);\n    } catch (IOException e) {\n        log.warn("Error reading: " + imgFile.getAbsolutePath(), e);\n    } finally {\n        reader.dispose();\n    }\n}\nthrow new IOException("Not a known image file: " + imgFile.getAbsolutePath());'
p3203
aS'ImageInputStream stream = new FileImageInputStream(new File(path));\nreader.setInput(stream);'
p3204
aS'throw new IOException("No extension for file: " + imgFile.getAbsolutePath());\nString suffix = imgFile.getName().substring(pos + 1);\nIterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nwhile (iter.hasNext()) {\n    ImageReader reader = iter.next();\n}'
p3205
aS'ImageReader reader = iter.next();'
p3206
aS'if (pos == -1) {\n}'
p3207
aS'public static Dimension getImageDimension(File imgFile) throws IOException {\n    int pos = imgFile.getName().lastIndexOf(".");\n    if (pos == -1)\n        throw new IOException("No extension for file: " + imgFile.getAbsolutePath());\n    String suffix = imgFile.getName().substring(pos + 1);\n    Iterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\n    while (iter.hasNext()) {\n        ImageReader reader = iter.next();\n        try {\n            ImageInputStream stream = new FileImageInputStream(imgFile);\n            reader.setInput(stream);\n            int width = reader.getWidth(reader.getMinIndex());\n            int height = reader.getHeight(reader.getMinIndex());\n            return new Dimension(width, height);\n        } catch (IOException e) {\n            log.warn("Error reading: " + imgFile.getAbsolutePath(), e);\n        } finally {\n            reader.dispose();\n        }\n    }\n    throw new IOException("Not a known image file: " + imgFile.getAbsolutePath());\n}'
p3208
aS'try {\n    ImageInputStream stream = new FileImageInputStream(new File(path));\n    reader.setInput(stream);\n    int width = reader.getWidth(reader.getMinIndex());\n    int height = reader.getHeight(reader.getMinIndex());\n    result = new Dimension(width, height);\n} catch (IOException e) {\n    log(e.getMessage());\n}'
p3209
aS'Dimension result = null;'
p3210
aS'int pos = imgFile.getName().lastIndexOf(".");\nif (pos == -1)\n    throw new IOException("No extension for file: " + imgFile.getAbsolutePath());\nString suffix = imgFile.getName().substring(pos + 1);\nIterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nwhile (iter.hasNext()) {\n}'
p3211
aS'ImageInputStream stream = new FileImageInputStream(new File(path));\nreader.setInput(stream);\nint width = reader.getWidth(reader.getMinIndex());\nint height = reader.getHeight(reader.getMinIndex());'
p3212
aS'int width = reader.getWidth(reader.getMinIndex());\nint height = reader.getHeight(reader.getMinIndex());\nreturn new Dimension(width, height);'
p3213
aS'ImageReader reader = iter.next();\ntry {\n    ImageInputStream stream = new FileImageInputStream(imgFile);\n    reader.setInput(stream);\n    int width = reader.getWidth(reader.getMinIndex());\n    int height = reader.getHeight(reader.getMinIndex());\n    return new Dimension(width, height);\n} catch (IOException e) {\n    log.warn("Error reading: " + imgFile.getAbsolutePath(), e);\n} finally {\n}'
p3214
aS'ImageInputStream stream = new FileImageInputStream(imgFile);'
p3215
aS'int height = reader.getHeight(reader.getMinIndex());'
p3216
aS'String suffix = this.getFileSuffix(path);\nIterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);'
p3217
aS'int height = reader.getHeight(reader.getMinIndex());\nresult = new Dimension(width, height);'
p3218
aS'try {\n    ImageInputStream stream = new FileImageInputStream(new File(path));\n    reader.setInput(stream);\n    int width = reader.getWidth(reader.getMinIndex());\n    int height = reader.getHeight(reader.getMinIndex());\n    result = new Dimension(width, height);\n} catch (IOException e) {\n    log(e.getMessage());\n} finally {\n    reader.dispose();\n}'
p3219
aS"if (path.lastIndexOf('.') != -1) {\n    result = path.substring(path.lastIndexOf('.'));\n}"
p3220
aS'String suffix = this.getFileSuffix(path);'
p3221
aS'throw new IOException("No extension for file: " + imgFile.getAbsolutePath());\nString suffix = imgFile.getName().substring(pos + 1);\nIterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nwhile (iter.hasNext()) {\n    ImageReader reader = iter.next();\n    try {\n        ImageInputStream stream = new FileImageInputStream(imgFile);\n        reader.setInput(stream);\n        int width = reader.getWidth(reader.getMinIndex());\n        int height = reader.getHeight(reader.getMinIndex());\n        return new Dimension(width, height);\n    } catch (IOException e) {\n        log.warn("Error reading: " + imgFile.getAbsolutePath(), e);\n    } finally {\n        reader.dispose();\n    }\n}'
p3222
aS'String result = null;\nif (path != null) {\n    result = "";\n    if (path.lastIndexOf(\'.\') != -1) {\n        result = path.substring(path.lastIndexOf(\'.\'));\n        if (result.startsWith(".")) {\n            result = result.substring(1);\n        }\n    }\n}'
p3223
aS'if (path != null) {\n}'
p3224
aS'Iterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nwhile (iter.hasNext()) {\n}'
p3225
aS'while (iter.hasNext()) {\n    ImageReader reader = iter.next();\n    try {\n        ImageInputStream stream = new FileImageInputStream(imgFile);\n        reader.setInput(stream);\n        int width = reader.getWidth(reader.getMinIndex());\n        int height = reader.getHeight(reader.getMinIndex());\n        return new Dimension(width, height);\n    } catch (IOException e) {\n        log.warn("Error reading: " + imgFile.getAbsolutePath(), e);\n    } finally {\n        reader.dispose();\n    }\n}\nthrow new IOException("Not a known image file: " + imgFile.getAbsolutePath());'
p3226
aS'String suffix = this.getFileSuffix(path);\nIterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nif (iter.hasNext()) {\n    ImageReader reader = iter.next();\n    try {\n        ImageInputStream stream = new FileImageInputStream(new File(path));\n        reader.setInput(stream);\n        int width = reader.getWidth(reader.getMinIndex());\n        int height = reader.getHeight(reader.getMinIndex());\n        result = new Dimension(width, height);\n    } catch (IOException e) {\n        log(e.getMessage());\n    } finally {\n        reader.dispose();\n    }\n} else {\n}'
p3227
aS'try {\n    ImageInputStream stream = new FileImageInputStream(imgFile);\n    reader.setInput(stream);\n    int width = reader.getWidth(reader.getMinIndex());\n    int height = reader.getHeight(reader.getMinIndex());\n    return new Dimension(width, height);\n} catch (IOException e) {\n    log.warn("Error reading: " + imgFile.getAbsolutePath(), e);\n}'
p3228
aS'return new Dimension(width, height);'
p3229
aS'int width = bimg.getWidth();'
p3230
aS'int width = bimg.getWidth();\nint height = bimg.getHeight();'
p3231
aS'if (iter.hasNext()) {\n    ImageReader reader = iter.next();\n    try {\n        ImageInputStream stream = new FileImageInputStream(new File(path));\n        reader.setInput(stream);\n        int width = reader.getWidth(reader.getMinIndex());\n        int height = reader.getHeight(reader.getMinIndex());\n        result = new Dimension(width, height);\n    } catch (IOException e) {\n        log(e.getMessage());\n    } finally {\n        reader.dispose();\n    }\n} else {\n}'
p3232
aS'ImageInputStream stream = new FileImageInputStream(new File(path));\nreader.setInput(stream);\nint width = reader.getWidth(reader.getMinIndex());'
p3233
aS'BufferedImage bimg = ImageIO.read(new File(filename));\nint width = bimg.getWidth();'
p3234
aS'String suffix = imgFile.getName().substring(pos + 1);\nIterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nwhile (iter.hasNext()) {\n    ImageReader reader = iter.next();\n    try {\n        ImageInputStream stream = new FileImageInputStream(imgFile);\n        reader.setInput(stream);\n        int width = reader.getWidth(reader.getMinIndex());\n        int height = reader.getHeight(reader.getMinIndex());\n        return new Dimension(width, height);\n    } catch (IOException e) {\n        log.warn("Error reading: " + imgFile.getAbsolutePath(), e);\n    } finally {\n        reader.dispose();\n    }\n}\nthrow new IOException("Not a known image file: " + imgFile.getAbsolutePath());'
p3235
aS'int pos = imgFile.getName().lastIndexOf(".");\nif (pos == -1)\n    throw new IOException("No extension for file: " + imgFile.getAbsolutePath());\nString suffix = imgFile.getName().substring(pos + 1);\nIterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);'
p3236
aS'int width = reader.getWidth(reader.getMinIndex());\nint height = reader.getHeight(reader.getMinIndex());'
p3237
aS'int pos = imgFile.getName().lastIndexOf(".");\nif (pos == -1)\n    throw new IOException("No extension for file: " + imgFile.getAbsolutePath());'
p3238
aS'reader.setInput(stream);\nint width = reader.getWidth(reader.getMinIndex());\nint height = reader.getHeight(reader.getMinIndex());\nresult = new Dimension(width, height);'
p3239
aS'Iterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nwhile (iter.hasNext()) {\n    ImageReader reader = iter.next();\n    try {\n        ImageInputStream stream = new FileImageInputStream(imgFile);\n        reader.setInput(stream);\n        int width = reader.getWidth(reader.getMinIndex());\n        int height = reader.getHeight(reader.getMinIndex());\n        return new Dimension(width, height);\n    } catch (IOException e) {\n        log.warn("Error reading: " + imgFile.getAbsolutePath(), e);\n    } finally {\n        reader.dispose();\n    }\n}'
p3240
aS"result = path.substring(path.lastIndexOf('.'));"
p3241
aS'int height = bimg.getHeight();'
p3242
aS'String result = null;'
p3243
aS'String suffix = imgFile.getName().substring(pos + 1);\nIterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nwhile (iter.hasNext()) {\n    ImageReader reader = iter.next();\n}'
p3244
aS'if (pos == -1)\n    throw new IOException("No extension for file: " + imgFile.getAbsolutePath());'
p3245
aS'BufferedImage bimg = ImageIO.read(new File(filename));\nint width = bimg.getWidth();\nint height = bimg.getHeight();'
p3246
aS'result = path.substring(path.lastIndexOf(\'.\'));\nif (result.startsWith(".")) {\n    result = result.substring(1);\n}'
p3247
aS'reader.dispose();'
p3248
aS'Dimension result = null;\nString suffix = this.getFileSuffix(path);\nIterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);'
p3249
aS'ImageReader reader = iter.next();\ntry {\n    ImageInputStream stream = new FileImageInputStream(imgFile);\n    reader.setInput(stream);\n    int width = reader.getWidth(reader.getMinIndex());\n    int height = reader.getHeight(reader.getMinIndex());\n    return new Dimension(width, height);\n} catch (IOException e) {\n    log.warn("Error reading: " + imgFile.getAbsolutePath(), e);\n}'
p3250
aS'private String getFileSuffix(final String path) {\n    String result = null;\n    if (path != null) {\n        result = "";\n        if (path.lastIndexOf(\'.\') != -1) {\n            result = path.substring(path.lastIndexOf(\'.\'));\n            if (result.startsWith(".")) {\n                result = result.substring(1);\n            }\n        }\n    }\n    return result;\n}'
p3251
aS'if (iter.hasNext()) {\n}'
p3252
aS'Dimension result = null;\nString suffix = this.getFileSuffix(path);\nIterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nif (iter.hasNext()) {\n}'
p3253
aS'Iterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nwhile (iter.hasNext()) {\n    ImageReader reader = iter.next();\n}'
p3254
aS'return result;'
p3255
aS'Iterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nwhile (iter.hasNext()) {\n    ImageReader reader = iter.next();\n    try {\n        ImageInputStream stream = new FileImageInputStream(imgFile);\n        reader.setInput(stream);\n        int width = reader.getWidth(reader.getMinIndex());\n        int height = reader.getHeight(reader.getMinIndex());\n        return new Dimension(width, height);\n    } catch (IOException e) {\n        log.warn("Error reading: " + imgFile.getAbsolutePath(), e);\n    } finally {\n        reader.dispose();\n    }\n}\nthrow new IOException("Not a known image file: " + imgFile.getAbsolutePath());'
p3256
aS'if (pos == -1)\n    throw new IOException("No extension for file: " + imgFile.getAbsolutePath());\nString suffix = imgFile.getName().substring(pos + 1);'
p3257
aS'BufferedImage bimg = ImageIO.read(new File(filename));'
p3258
aS'String result = null;\nif (path != null) {\n}'
p3259
aS'if (path != null) {\n    result = "";\n}'
p3260
aS'if (pos == -1)\n    throw new IOException("No extension for file: " + imgFile.getAbsolutePath());\nString suffix = imgFile.getName().substring(pos + 1);\nIterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);'
p3261
aS'ImageInputStream stream = new FileImageInputStream(new File(path));\nreader.setInput(stream);\nint width = reader.getWidth(reader.getMinIndex());\nint height = reader.getHeight(reader.getMinIndex());\nresult = new Dimension(width, height);'
p3262
aS'String suffix = imgFile.getName().substring(pos + 1);\nIterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);'
p3263
aS'if (pos == -1)\n    throw new IOException("No extension for file: " + imgFile.getAbsolutePath());\nString suffix = imgFile.getName().substring(pos + 1);\nIterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nwhile (iter.hasNext()) {\n    ImageReader reader = iter.next();\n    try {\n        ImageInputStream stream = new FileImageInputStream(imgFile);\n        reader.setInput(stream);\n        int width = reader.getWidth(reader.getMinIndex());\n        int height = reader.getHeight(reader.getMinIndex());\n        return new Dimension(width, height);\n    } catch (IOException e) {\n        log.warn("Error reading: " + imgFile.getAbsolutePath(), e);\n    } finally {\n        reader.dispose();\n    }\n}'
p3264
aS'try {\n    ImageInputStream stream = new FileImageInputStream(imgFile);\n    reader.setInput(stream);\n    int width = reader.getWidth(reader.getMinIndex());\n    int height = reader.getHeight(reader.getMinIndex());\n    return new Dimension(width, height);\n} catch (IOException e) {\n    log.warn("Error reading: " + imgFile.getAbsolutePath(), e);\n} finally {\n}'
p3265
aS'Iterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nif (iter.hasNext()) {\n    ImageReader reader = iter.next();\n    try {\n        ImageInputStream stream = new FileImageInputStream(new File(path));\n        reader.setInput(stream);\n        int width = reader.getWidth(reader.getMinIndex());\n        int height = reader.getHeight(reader.getMinIndex());\n        result = new Dimension(width, height);\n    } catch (IOException e) {\n        log(e.getMessage());\n    } finally {\n        reader.dispose();\n    }\n}'
p3266
aS'String suffix = this.getFileSuffix(path);\nIterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nif (iter.hasNext()) {\n}'
p3267
aS'int pos = imgFile.getName().lastIndexOf(".");\nif (pos == -1)\n    throw new IOException("No extension for file: " + imgFile.getAbsolutePath());\nString suffix = imgFile.getName().substring(pos + 1);\nIterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nwhile (iter.hasNext()) {\n    ImageReader reader = iter.next();\n}'
p3268
aS'log(e.getMessage());'
p3269
aS'String result = null;\nif (path != null) {\n    result = "";\n}'
p3270
aS'int pos = imgFile.getName().lastIndexOf(".");\nif (pos == -1)\n    throw new IOException("No extension for file: " + imgFile.getAbsolutePath());\nString suffix = imgFile.getName().substring(pos + 1);\nIterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nwhile (iter.hasNext()) {\n    ImageReader reader = iter.next();\n    try {\n        ImageInputStream stream = new FileImageInputStream(imgFile);\n        reader.setInput(stream);\n        int width = reader.getWidth(reader.getMinIndex());\n        int height = reader.getHeight(reader.getMinIndex());\n        return new Dimension(width, height);\n    } catch (IOException e) {\n        log.warn("Error reading: " + imgFile.getAbsolutePath(), e);\n    } finally {\n        reader.dispose();\n    }\n}\nthrow new IOException("Not a known image file: " + imgFile.getAbsolutePath());'
p3271
aS'String suffix = imgFile.getName().substring(pos + 1);\nIterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nwhile (iter.hasNext()) {\n    ImageReader reader = iter.next();\n    try {\n        ImageInputStream stream = new FileImageInputStream(imgFile);\n        reader.setInput(stream);\n        int width = reader.getWidth(reader.getMinIndex());\n        int height = reader.getHeight(reader.getMinIndex());\n        return new Dimension(width, height);\n    } catch (IOException e) {\n        log.warn("Error reading: " + imgFile.getAbsolutePath(), e);\n    } finally {\n        reader.dispose();\n    }\n}'
p3272
aS'String suffix = this.getFileSuffix(path);\nIterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nif (iter.hasNext()) {\n    ImageReader reader = iter.next();\n    try {\n        ImageInputStream stream = new FileImageInputStream(new File(path));\n        reader.setInput(stream);\n        int width = reader.getWidth(reader.getMinIndex());\n        int height = reader.getHeight(reader.getMinIndex());\n        result = new Dimension(width, height);\n    } catch (IOException e) {\n        log(e.getMessage());\n    } finally {\n        reader.dispose();\n    }\n}'
p3273
aS'if (path != null) {\n    result = "";\n    if (path.lastIndexOf(\'.\') != -1) {\n        result = path.substring(path.lastIndexOf(\'.\'));\n        if (result.startsWith(".")) {\n            result = result.substring(1);\n        }\n    }\n}\nreturn result;'
p3274
aS'int width = reader.getWidth(reader.getMinIndex());\nint height = reader.getHeight(reader.getMinIndex());\nresult = new Dimension(width, height);'
p3275
aS'throw new IOException("Not a known image file: " + imgFile.getAbsolutePath());'
p3276
aS'try {\n    ImageInputStream stream = new FileImageInputStream(new File(path));\n    reader.setInput(stream);\n    int width = reader.getWidth(reader.getMinIndex());\n    int height = reader.getHeight(reader.getMinIndex());\n    result = new Dimension(width, height);\n} catch (IOException e) {\n}'
p3277
aS'Dimension result = null;\nString suffix = this.getFileSuffix(path);\nIterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nif (iter.hasNext()) {\n    ImageReader reader = iter.next();\n    try {\n        ImageInputStream stream = new FileImageInputStream(new File(path));\n        reader.setInput(stream);\n        int width = reader.getWidth(reader.getMinIndex());\n        int height = reader.getHeight(reader.getMinIndex());\n        result = new Dimension(width, height);\n    } catch (IOException e) {\n        log(e.getMessage());\n    } finally {\n        reader.dispose();\n    }\n}'
p3278
aS'try {\n    ImageInputStream stream = new FileImageInputStream(imgFile);\n    reader.setInput(stream);\n    int width = reader.getWidth(reader.getMinIndex());\n    int height = reader.getHeight(reader.getMinIndex());\n    return new Dimension(width, height);\n} catch (IOException e) {\n    log.warn("Error reading: " + imgFile.getAbsolutePath(), e);\n} finally {\n    reader.dispose();\n}'
p3279
aS'if (result.startsWith(".")) {\n}'
p3280
aS"if (path.lastIndexOf('.') != -1) {\n}"
p3281
aS'ImageInputStream stream = new FileImageInputStream(imgFile);\nreader.setInput(stream);\nint width = reader.getWidth(reader.getMinIndex());\nint height = reader.getHeight(reader.getMinIndex());'
p3282
aS'reader.setInput(stream);\nint width = reader.getWidth(reader.getMinIndex());'
p3283
aS'result = "";\nif (path.lastIndexOf(\'.\') != -1) {\n    result = path.substring(path.lastIndexOf(\'.\'));\n    if (result.startsWith(".")) {\n        result = result.substring(1);\n    }\n}'
p3284
aS'Dimension result = null;\nString suffix = this.getFileSuffix(path);\nIterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nif (iter.hasNext()) {\n    ImageReader reader = iter.next();\n}'
p3285
aS'result = new Dimension(width, height);'
p3286
aS'throw new IOException("No extension for file: " + imgFile.getAbsolutePath());\nString suffix = imgFile.getName().substring(pos + 1);\nIterator<ImageReader> iter = ImageIO.getImageReadersBySuffix(suffix);\nwhile (iter.hasNext()) {\n}'
p3287
aS'while (iter.hasNext()) {\n    ImageReader reader = iter.next();\n}'
p3288
aS'ImageReader reader = iter.next();\ntry {\n    ImageInputStream stream = new FileImageInputStream(imgFile);\n    reader.setInput(stream);\n    int width = reader.getWidth(reader.getMinIndex());\n    int height = reader.getHeight(reader.getMinIndex());\n    return new Dimension(width, height);\n} catch (IOException e) {\n    log.warn("Error reading: " + imgFile.getAbsolutePath(), e);\n} finally {\n    reader.dispose();\n}'
p3289
aS'ImageInputStream stream = new FileImageInputStream(imgFile);\nreader.setInput(stream);\nint width = reader.getWidth(reader.getMinIndex());'
p3290
aS'reader.setInput(stream);\nint width = reader.getWidth(reader.getMinIndex());\nint height = reader.getHeight(reader.getMinIndex());'
p3291
atp3292
Rp3293
sI3806062
g1
((lp3294
S'try {\n    String[] noInStringArr = strLine.split(" ");\n} catch (NumberFormatException npe) {\n}'
p3295
aS'List<Integer> list = new ArrayList<Integer>();\nFile file = new File("file.txt");'
p3296
aS'try {\n    BufferedReader br = new BufferedReader(new FileReader("textfile.txt"));\n    String strLine;\n    while ((strLine = br.readLine()) != null) {\n        System.out.println(strLine);\n    }\n    in.close();\n} catch (Exception e) {\n    System.err.println("Error: " + e.getMessage());\n} finally {\n}'
p3297
aS'File file = new File("file.txt");\nBufferedReader reader = null;\ntry {\n    reader = new BufferedReader(new FileReader(file));\n    String text = null;\n    while ((text = reader.readLine()) != null) {\n        list.add(Integer.parseInt(text));\n    }\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n} finally {\n    try {\n        if (reader != null) {\n            reader.close();\n        }\n    } catch (IOException e) {\n    }\n}\nSystem.out.println(list);'
p3298
aS'System.out.println(list);'
p3299
aS'System.out.println(strLine);'
p3300
aS'while ((text = reader.readLine()) != null) {\n    list.add(Integer.parseInt(text));\n}'
p3301
aS'if (reader != null) {\n}'
p3302
aS'try {\n    reader = new BufferedReader(new FileReader(file));\n    String text = null;\n    while ((text = reader.readLine()) != null) {\n        list.add(Integer.parseInt(text));\n    }\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n} finally {\n    try {\n        if (reader != null) {\n            reader.close();\n        }\n    } catch (IOException e) {\n    }\n}\nSystem.out.println(list);'
p3303
aS'List<Integer> list = new ArrayList<Integer>();'
p3304
aS'String text = null;'
p3305
aS'List<Integer> list = new ArrayList<Integer>();\nFile file = new File("file.txt");\nBufferedReader reader = null;\ntry {\n    reader = new BufferedReader(new FileReader(file));\n    String text = null;\n    while ((text = reader.readLine()) != null) {\n        list.add(Integer.parseInt(text));\n    }\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n}'
p3306
aS'try {\n    reader = new BufferedReader(new FileReader(file));\n    String text = null;\n    while ((text = reader.readLine()) != null) {\n        list.add(Integer.parseInt(text));\n    }\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n} finally {\n}'
p3307
aS'BufferedReader reader = null;\ntry {\n    reader = new BufferedReader(new FileReader(file));\n    String text = null;\n    while ((text = reader.readLine()) != null) {\n        list.add(Integer.parseInt(text));\n    }\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n}'
p3308
aS'try {\n    reader = new BufferedReader(new FileReader(file));\n    String text = null;\n    while ((text = reader.readLine()) != null) {\n        list.add(Integer.parseInt(text));\n    }\n} catch (FileNotFoundException e) {\n}'
p3309
aS'try {\n    reader = new BufferedReader(new FileReader(file));\n    String text = null;\n    while ((text = reader.readLine()) != null) {\n        list.add(Integer.parseInt(text));\n    }\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n}'
p3310
aS'File file = new File("file.txt");\nBufferedReader reader = null;\ntry {\n    reader = new BufferedReader(new FileReader(file));\n    String text = null;\n    while ((text = reader.readLine()) != null) {\n        list.add(Integer.parseInt(text));\n    }\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n} finally {\n    try {\n        if (reader != null) {\n            reader.close();\n        }\n    } catch (IOException e) {\n    }\n}'
p3311
aS'e.printStackTrace();'
p3312
aS'if (scanner.hasNextInt()) {\n}'
p3313
aS'BufferedReader reader = null;\ntry {\n    reader = new BufferedReader(new FileReader(file));\n    String text = null;\n    while ((text = reader.readLine()) != null) {\n        list.add(Integer.parseInt(text));\n    }\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n} finally {\n    try {\n        if (reader != null) {\n            reader.close();\n        }\n    } catch (IOException e) {\n    }\n}'
p3314
aS'Scanner scanner = new Scanner(filePath);\nList<Integer> integers = new ArrayList<>();\nwhile (scanner.hasNext()) {\n    if (scanner.hasNextInt()) {\n        integers.add(scanner.nextInt());\n    } else {\n        scanner.next();\n    }\n}'
p3315
aS'try {\n    BufferedReader br = new BufferedReader(new FileReader("textfile.txt"));\n    String strLine;\n    while ((strLine = br.readLine()) != null) {\n        System.out.println(strLine);\n    }\n    in.close();\n} catch (Exception e) {\n    System.err.println("Error: " + e.getMessage());\n}'
p3316
aS'List<Integer> list = new ArrayList<Integer>();\nFile file = new File("file.txt");\nBufferedReader reader = null;'
p3317
aS'Path filePath = Paths.get("file.txt");\nScanner scanner = new Scanner(filePath);\nList<Integer> integers = new ArrayList<>();\nwhile (scanner.hasNext()) {\n}'
p3318
aS'List<Integer> integers = new ArrayList<>();\nwhile (scanner.hasNext()) {\n    if (scanner.hasNextInt()) {\n        integers.add(scanner.nextInt());\n    } else {\n        scanner.next();\n    }\n}'
p3319
aS'File file = new File("file.txt");\nBufferedReader reader = null;'
p3320
aS'File file = new File("file.txt");\nBufferedReader reader = null;\ntry {\n    reader = new BufferedReader(new FileReader(file));\n    String text = null;\n    while ((text = reader.readLine()) != null) {\n        list.add(Integer.parseInt(text));\n    }\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n}'
p3321
aS'File file = new File("file.txt");\nBufferedReader reader = null;\ntry {\n    reader = new BufferedReader(new FileReader(file));\n    String text = null;\n    while ((text = reader.readLine()) != null) {\n        list.add(Integer.parseInt(text));\n    }\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n} finally {\n}'
p3322
aS'File file = new File("file.txt");'
p3323
aS'File file = new File("file.txt");\nBufferedReader reader = null;\ntry {\n    reader = new BufferedReader(new FileReader(file));\n    String text = null;\n    while ((text = reader.readLine()) != null) {\n        list.add(Integer.parseInt(text));\n    }\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n}'
p3324
aS'while ((text = reader.readLine()) != null) {\n}'
p3325
aS'if (reader != null) {\n    reader.close();\n}'
p3326
aS'Path filePath = Paths.get("file.txt");\nScanner scanner = new Scanner(filePath);\nList<Integer> integers = new ArrayList<>();\nwhile (scanner.hasNext()) {\n    if (scanner.hasNextInt()) {\n        integers.add(scanner.nextInt());\n    } else {\n        scanner.next();\n    }\n}'
p3327
aS'List<Integer> integers = new ArrayList<>();'
p3328
aS'BufferedReader reader = null;\ntry {\n    reader = new BufferedReader(new FileReader(file));\n    String text = null;\n    while ((text = reader.readLine()) != null) {\n        list.add(Integer.parseInt(text));\n    }\n} catch (FileNotFoundException e) {\n}'
p3329
aS'while ((strLine = br.readLine()) != null) {\n    System.out.println(strLine);\n}\nin.close();'
p3330
aS'System.err.println("Error: " + e.getMessage());'
p3331
aS'try {\n    BufferedReader br = new BufferedReader(new FileReader("textfile.txt"));\n    String strLine;\n    while ((strLine = br.readLine()) != null) {\n        System.out.println(strLine);\n    }\n    in.close();\n} catch (Exception e) {\n    System.err.println("Error: " + e.getMessage());\n} finally {\n    in.close();\n}'
p3332
aS'integers.add(scanner.nextInt());'
p3333
aS'File file = new File("file.txt");\nBufferedReader reader = null;\ntry {\n    reader = new BufferedReader(new FileReader(file));\n    String text = null;\n    while ((text = reader.readLine()) != null) {\n        list.add(Integer.parseInt(text));\n    }\n} catch (FileNotFoundException e) {\n}'
p3334
aS'Path filePath = Paths.get("file.txt");'
p3335
aS'List<Integer> list = new ArrayList<Integer>();\nFile file = new File("file.txt");\nBufferedReader reader = null;\ntry {\n    reader = new BufferedReader(new FileReader(file));\n    String text = null;\n    while ((text = reader.readLine()) != null) {\n        list.add(Integer.parseInt(text));\n    }\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n} finally {\n}'
p3336
aS'String text = null;\nwhile ((text = reader.readLine()) != null) {\n    list.add(Integer.parseInt(text));\n}'
p3337
aS'BufferedReader reader = null;\ntry {\n    reader = new BufferedReader(new FileReader(file));\n    String text = null;\n    while ((text = reader.readLine()) != null) {\n        list.add(Integer.parseInt(text));\n    }\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n} finally {\n}'
p3338
aS'if (scanner.hasNextInt()) {\n    integers.add(scanner.nextInt());\n} else {\n}'
p3339
aS'if (scanner.hasNextInt()) {\n    integers.add(scanner.nextInt());\n}'
p3340
aS'while (scanner.hasNext()) {\n    if (scanner.hasNextInt()) {\n        integers.add(scanner.nextInt());\n    } else {\n        scanner.next();\n    }\n}'
p3341
aS'List<Integer> list = new ArrayList<Integer>();\nFile file = new File("file.txt");\nBufferedReader reader = null;\ntry {\n    reader = new BufferedReader(new FileReader(file));\n    String text = null;\n    while ((text = reader.readLine()) != null) {\n        list.add(Integer.parseInt(text));\n    }\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n} finally {\n    try {\n        if (reader != null) {\n            reader.close();\n        }\n    } catch (IOException e) {\n    }\n}'
p3342
aS'String[] noInStringArr = strLine.split(" ");'
p3343
aS'List<Integer> list = new ArrayList<Integer>();\nFile file = new File("file.txt");\nBufferedReader reader = null;\ntry {\n    reader = new BufferedReader(new FileReader(file));\n    String text = null;\n    while ((text = reader.readLine()) != null) {\n        list.add(Integer.parseInt(text));\n    }\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n}'
p3344
aS'try {\n    reader = new BufferedReader(new FileReader(file));\n    String text = null;\n    while ((text = reader.readLine()) != null) {\n        list.add(Integer.parseInt(text));\n    }\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n}'
p3345
aS'Path filePath = Paths.get("file.txt");\nScanner scanner = new Scanner(filePath);\nList<Integer> integers = new ArrayList<>();'
p3346
aS'BufferedReader br = new BufferedReader(new FileReader("textfile.txt"));\nString strLine;\nwhile ((strLine = br.readLine()) != null) {\n    System.out.println(strLine);\n}\nin.close();'
p3347
aS'Path filePath = Paths.get("file.txt");\nScanner scanner = new Scanner(filePath);'
p3348
aS'Scanner scanner = new Scanner(filePath);\nList<Integer> integers = new ArrayList<>();'
p3349
aS'List<Integer> list = new ArrayList<Integer>();\nFile file = new File("file.txt");\nBufferedReader reader = null;\ntry {\n    reader = new BufferedReader(new FileReader(file));\n    String text = null;\n    while ((text = reader.readLine()) != null) {\n        list.add(Integer.parseInt(text));\n    }\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n}'
p3350
aS'reader = new BufferedReader(new FileReader(file));\nString text = null;\nwhile ((text = reader.readLine()) != null) {\n    list.add(Integer.parseInt(text));\n}'
p3351
aS'int i = Integer.parseInt(strLine);'
p3352
aS'String strLine;'
p3353
aS'String text = null;\nwhile ((text = reader.readLine()) != null) {\n}'
p3354
aS'reader = new BufferedReader(new FileReader(file));'
p3355
aS'BufferedReader br = new BufferedReader(new FileReader("textfile.txt"));\nString strLine;\nwhile ((strLine = br.readLine()) != null) {\n    System.out.println(strLine);\n}'
p3356
aS'BufferedReader br = new BufferedReader(new FileReader("textfile.txt"));\nString strLine;'
p3357
aS'while (scanner.hasNext()) {\n}'
p3358
aS'list.add(Integer.parseInt(text));'
p3359
aS'reader = new BufferedReader(new FileReader(file));\nString text = null;\nwhile ((text = reader.readLine()) != null) {\n}'
p3360
aS'BufferedReader br = new BufferedReader(new FileReader("textfile.txt"));'
p3361
aS'scanner.next();'
p3362
aS'String strLine;\nwhile ((strLine = br.readLine()) != null) {\n}'
p3363
aS'Scanner scanner = new Scanner(filePath);'
p3364
aS'BufferedReader reader = null;'
p3365
aS'BufferedReader reader = null;\ntry {\n    reader = new BufferedReader(new FileReader(file));\n    String text = null;\n    while ((text = reader.readLine()) != null) {\n        list.add(Integer.parseInt(text));\n    }\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n} finally {\n    try {\n        if (reader != null) {\n            reader.close();\n        }\n    } catch (IOException e) {\n    }\n}\nSystem.out.println(list);'
p3366
aS'try {\n    BufferedReader br = new BufferedReader(new FileReader("textfile.txt"));\n    String strLine;\n    while ((strLine = br.readLine()) != null) {\n        System.out.println(strLine);\n    }\n    in.close();\n} catch (Exception e) {\n}'
p3367
aS'in.close();'
p3368
aS'try {\n    reader = new BufferedReader(new FileReader(file));\n    String text = null;\n    while ((text = reader.readLine()) != null) {\n        list.add(Integer.parseInt(text));\n    }\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n}'
p3369
aS'List<Integer> integers = new ArrayList<>();\nwhile (scanner.hasNext()) {\n}'
p3370
aS'BufferedReader reader = null;\ntry {\n    reader = new BufferedReader(new FileReader(file));\n    String text = null;\n    while ((text = reader.readLine()) != null) {\n        list.add(Integer.parseInt(text));\n    }\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n}'
p3371
aS'try {\n    int i = Integer.parseInt(strLine);\n} catch (NumberFormatException npe) {\n}'
p3372
aS'String strLine;\nwhile ((strLine = br.readLine()) != null) {\n    System.out.println(strLine);\n}'
p3373
aS'reader = new BufferedReader(new FileReader(file));\nString text = null;'
p3374
aS'List<Integer> list = new ArrayList<Integer>();\nFile file = new File("file.txt");\nBufferedReader reader = null;\ntry {\n    reader = new BufferedReader(new FileReader(file));\n    String text = null;\n    while ((text = reader.readLine()) != null) {\n        list.add(Integer.parseInt(text));\n    }\n} catch (FileNotFoundException e) {\n}'
p3375
aS'BufferedReader reader = null;\ntry {\n    reader = new BufferedReader(new FileReader(file));\n    String text = null;\n    while ((text = reader.readLine()) != null) {\n        list.add(Integer.parseInt(text));\n    }\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n}'
p3376
aS'reader.close();'
p3377
aS'try {\n    reader = new BufferedReader(new FileReader(file));\n    String text = null;\n    while ((text = reader.readLine()) != null) {\n        list.add(Integer.parseInt(text));\n    }\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n} finally {\n    try {\n        if (reader != null) {\n            reader.close();\n        }\n    } catch (IOException e) {\n    }\n}'
p3378
aS'if (scanner.hasNextInt()) {\n    integers.add(scanner.nextInt());\n} else {\n    scanner.next();\n}'
p3379
aS'Scanner scanner = new Scanner(filePath);\nList<Integer> integers = new ArrayList<>();\nwhile (scanner.hasNext()) {\n}'
p3380
aS'while ((strLine = br.readLine()) != null) {\n}'
p3381
aS'File file = new File("file.txt");\nBufferedReader reader = null;\ntry {\n    reader = new BufferedReader(new FileReader(file));\n    String text = null;\n    while ((text = reader.readLine()) != null) {\n        list.add(Integer.parseInt(text));\n    }\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n}'
p3382
aS'BufferedReader br = new BufferedReader(new FileReader("textfile.txt"));\nString strLine;\nwhile ((strLine = br.readLine()) != null) {\n}'
p3383
aS'List<Integer> list = new ArrayList<Integer>();\nFile file = new File("file.txt");\nBufferedReader reader = null;\ntry {\n    reader = new BufferedReader(new FileReader(file));\n    String text = null;\n    while ((text = reader.readLine()) != null) {\n        list.add(Integer.parseInt(text));\n    }\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n} finally {\n    try {\n        if (reader != null) {\n            reader.close();\n        }\n    } catch (IOException e) {\n    }\n}\nSystem.out.println(list);'
p3384
aS'try {\n    if (reader != null) {\n        reader.close();\n    }\n} catch (IOException e) {\n}'
p3385
aS'String strLine;\nwhile ((strLine = br.readLine()) != null) {\n    System.out.println(strLine);\n}\nin.close();'
p3386
atp3387
Rp3388
sI2137755
g1
((lp3389
S'for (int i = 0; i < validData.length / 2; i++) {\n    int temp = validData[i];\n    validData[i] = validData[validData.length - i - 1];\n    validData[validData.length - i - 1] = temp;\n}'
p3390
aS'for (int i = 0; i < validData.length / 2; i++) {\n    int temp = validData[i];\n    validData[i] = validData[validData.length - i - 1];\n}'
p3391
aS'List<Object> list = Arrays.asList(arr);\nCollections.reverse(list);'
p3392
aS'int temp = validData[i];\nvalidData[i] = validData[validData.length - i - 1];\nvalidData[validData.length - i - 1] = temp;'
p3393
aS'int temp = validData[i];'
p3394
aS'validData[i] = validData[validData.length - i - 1];'
p3395
aS'validData[validData.length - i - 1] = temp;'
p3396
aS'public static Object[] reverse(Object[] arr) {\n    List<Object> list = Arrays.asList(arr);\n    Collections.reverse(list);\n    return list.toArray();\n}'
p3397
aS'validData[i] = validData[validData.length - i - 1];\nvalidData[validData.length - i - 1] = temp;'
p3398
aS'public class ArrayHandle {\n\n    public static Object[] reverse(Object[] arr) {\n        List<Object> list = Arrays.asList(arr);\n        Collections.reverse(list);\n        return list.toArray();\n    }\n}'
p3399
aS'List<Object> list = Arrays.asList(arr);\nCollections.reverse(list);\nreturn list.toArray();'
p3400
aS'List<Object> list = Arrays.asList(arr);'
p3401
aS'int temp = validData[i];\nvalidData[i] = validData[validData.length - i - 1];'
p3402
aS'Collections.reverse(list);\nreturn list.toArray();'
p3403
aS'for (int i = 0; i < validData.length / 2; i++) {\n}'
p3404
aS'for (int i = 0; i < validData.length / 2; i++) {\n    int temp = validData[i];\n}'
p3405
aS'return list.toArray();'
p3406
aS'Collections.reverse(list);'
p3407
atp3408
Rp3409
sI1647260
g1
((lp3410
S'public int[] getItems() {\n    return items;\n}'
p3411
aS'class xClass {\n}'
p3412
aS'import java.util.List;\nimport java.util.ArrayList;\nimport java.util.Random;'
p3413
aS'import java.util.ArrayList;\nimport java.util.Random;\n\npublic class A {\n\n    public static void main(String[] args) {\n        List<xClass> list = new ArrayList<xClass>();\n        int elements = new Random().nextInt(100);\n        for (int i = 0; i < elements; i++) {\n            list.add(new xClass());\n        }\n        xClass[] array = list.toArray(new xClass[list.size()]);\n        System.out.println("size of array = " + array.length);\n    }\n}\n\nclass xClass {\n}'
p3414
aS'xClass[] array = list.toArray(new xClass[list.size()]);\nSystem.out.println("size of array = " + array.length);'
p3415
aS'int[] oldItems = new int[10];\nfor (int i = 0; i < 10; i++) {\n}'
p3416
aS'List<xClass> mysclass = new ArrayList<xClass>();'
p3417
aS'for (int i = 0; i < 10; i++) {\n    oldItems[i] = i + 10;\n}\nint[] newItems = new int[20];\nSystem.arraycopy(oldItems, 0, newItems, 0, 10);\noldItems = newItems;'
p3418
aS'List<xClass> list = new ArrayList<xClass>();\nint elements = new Random().nextInt(100);\nfor (int i = 0; i < elements; i++) {\n}'
p3419
aS'for (int i = 0; i < elements; i++) {\n    list.add(new xClass());\n}\nxClass[] array = list.toArray(new xClass[list.size()]);'
p3420
aS'import java.util.List;\nimport java.util.ArrayList;'
p3421
aS'System.arraycopy(oldItems, 0, newItems, 0, 10);\noldItems = newItems;'
p3422
aS'myclass.add(new xClass());\nmyclass.add(new xClass());'
p3423
aS'oldItems[i] = i + 10;'
p3424
aS'List<xClass> list = new ArrayList<xClass>();\nint elements = new Random().nextInt(100);\nfor (int i = 0; i < elements; i++) {\n    list.add(new xClass());\n}'
p3425
aS'return items;'
p3426
aS'List<xClass> list = new ArrayList<xClass>();\nint elements = new Random().nextInt(100);\nfor (int i = 0; i < elements; i++) {\n    list.add(new xClass());\n}\nxClass[] array = list.toArray(new xClass[list.size()]);\nSystem.out.println("size of array = " + array.length);'
p3427
aS'private int[] items;'
p3428
aS'xClass[] array = list.toArray(new xClass[list.size()]);'
p3429
aS'int elements = new Random().nextInt(100);\nfor (int i = 0; i < elements; i++) {\n    list.add(new xClass());\n}\nxClass[] array = list.toArray(new xClass[list.size()]);'
p3430
aS'int[] oldItems = new int[10];\nfor (int i = 0; i < 10; i++) {\n    oldItems[i] = i + 10;\n}\nint[] newItems = new int[20];\nSystem.arraycopy(oldItems, 0, newItems, 0, 10);'
p3431
aS'for (int i = 0; i < elements; i++) {\n    list.add(new xClass());\n}\nxClass[] array = list.toArray(new xClass[list.size()]);\nSystem.out.println("size of array = " + array.length);'
p3432
aS'for (int i = 0; i < 10; i++) {\n    oldItems[i] = i + 10;\n}'
p3433
aS'int elements = new Random().nextInt(100);\nfor (int i = 0; i < elements; i++) {\n}'
p3434
aS'oldItems = newItems;'
p3435
aS'import java.util.Random;'
p3436
aS'class Myclass {\n\n    private List<Integer> items;\n}'
p3437
aS'class Myclass {\n}'
p3438
aS'for (int i = 0; i < elements; i++) {\n    list.add(new xClass());\n}'
p3439
aS'int elements = new Random().nextInt(100);'
p3440
aS'import java.util.ArrayList;\nimport java.util.Random;\n\npublic class A {\n\n    public static void main(String[] args) {\n        List<xClass> list = new ArrayList<xClass>();\n        int elements = new Random().nextInt(100);\n        for (int i = 0; i < elements; i++) {\n            list.add(new xClass());\n        }\n        xClass[] array = list.toArray(new xClass[list.size()]);\n        System.out.println("size of array = " + array.length);\n    }\n}'
p3441
aS'for (int i = 0; i < elements; i++) {\n}'
p3442
aS'for (int i = 0; i < 10; i++) {\n    oldItems[i] = i + 10;\n}\nint[] newItems = new int[20];'
p3443
aS'public class A {\n\n    public static void main(String[] args) {\n        List<xClass> list = new ArrayList<xClass>();\n        int elements = new Random().nextInt(100);\n        for (int i = 0; i < elements; i++) {\n            list.add(new xClass());\n        }\n        xClass[] array = list.toArray(new xClass[list.size()]);\n        System.out.println("size of array = " + array.length);\n    }\n}\n\nclass xClass {\n}'
p3444
aS'private int[] items;\npublic int[] getItems() {\n    return items;\n}'
p3445
aS'T[] array = tmp.toArray(new T[tmp.size()]);'
p3446
aS'List<xClass> mysclass = new ArrayList<xClass>();\nmyclass.add(new xClass());'
p3447
aS'List<xClass> list = new ArrayList<xClass>();\nint elements = new Random().nextInt(100);\nfor (int i = 0; i < elements; i++) {\n    list.add(new xClass());\n}\nxClass[] array = list.toArray(new xClass[list.size()]);'
p3448
aS'List<xClass> list = new ArrayList<xClass>();\nint elements = new Random().nextInt(100);'
p3449
aS'import java.util.Random;\n\npublic class A {\n\n    public static void main(String[] args) {\n        List<xClass> list = new ArrayList<xClass>();\n        int elements = new Random().nextInt(100);\n        for (int i = 0; i < elements; i++) {\n            list.add(new xClass());\n        }\n        xClass[] array = list.toArray(new xClass[list.size()]);\n        System.out.println("size of array = " + array.length);\n    }\n}\n\nclass xClass {\n}'
p3450
aS'import java.util.ArrayList;\nimport java.util.Random;'
p3451
aS'public class A {\n\n    public static void main(String[] args) {\n        List<xClass> list = new ArrayList<xClass>();\n        int elements = new Random().nextInt(100);\n        for (int i = 0; i < elements; i++) {\n            list.add(new xClass());\n        }\n        xClass[] array = list.toArray(new xClass[list.size()]);\n        System.out.println("size of array = " + array.length);\n    }\n}'
p3452
aS'import java.util.Random;\n\npublic class A {\n\n    public static void main(String[] args) {\n        List<xClass> list = new ArrayList<xClass>();\n        int elements = new Random().nextInt(100);\n        for (int i = 0; i < elements; i++) {\n            list.add(new xClass());\n        }\n        xClass[] array = list.toArray(new xClass[list.size()]);\n        System.out.println("size of array = " + array.length);\n    }\n}'
p3453
aS'System.out.println("size of array = " + array.length);'
p3454
aS'int[] oldItems = new int[10];'
p3455
aS'public List<Integer> getItems() {\n    return Collections.unmodifiableList(items);\n}'
p3456
aS'System.arraycopy(oldItems, 0, newItems, 0, 10);'
p3457
aS'int elements = new Random().nextInt(100);\nfor (int i = 0; i < elements; i++) {\n    list.add(new xClass());\n}'
p3458
aS'ArrayList<T> tmp = new ArrayList<T>();'
p3459
aS'class Myclass {\n\n    private List<Integer> items;\n\n    public List<Integer> getItems() {\n        return Collections.unmodifiableList(items);\n    }\n}'
p3460
aS'list.add(new xClass());'
p3461
aS'private List<Integer> items;\npublic List<Integer> getItems() {\n    return Collections.unmodifiableList(items);\n}'
p3462
aS'int[] newItems = new int[20];\nSystem.arraycopy(oldItems, 0, newItems, 0, 10);\noldItems = newItems;'
p3463
aS'class Myclass {\n\n    private int[] items;\n\n    public int[] getItems() {\n        return items;\n    }\n}'
p3464
aS'import java.util.ArrayList;'
p3465
aS'for (int i = 0; i < 10; i++) {\n}'
p3466
aS'List<xClass> mysclass = new ArrayList<xClass>();\nmyclass.add(new xClass());\nmyclass.add(new xClass());'
p3467
aS'class Myclass {\n\n    private int[] items;\n}'
p3468
aS'int[] oldItems = new int[10];\nfor (int i = 0; i < 10; i++) {\n    oldItems[i] = i + 10;\n}'
p3469
aS'return Collections.unmodifiableList(items);'
p3470
aS'private List<Integer> items;'
p3471
aS'int[] newItems = new int[20];'
p3472
aS'int elements = new Random().nextInt(100);\nfor (int i = 0; i < elements; i++) {\n    list.add(new xClass());\n}\nxClass[] array = list.toArray(new xClass[list.size()]);\nSystem.out.println("size of array = " + array.length);'
p3473
aS'List<xClass> list = new ArrayList<xClass>();'
p3474
aS'myclass.add(new xClass());'
p3475
aS'for (int i = 0; i < 10; i++) {\n    oldItems[i] = i + 10;\n}\nint[] newItems = new int[20];\nSystem.arraycopy(oldItems, 0, newItems, 0, 10);'
p3476
aS'int[] oldItems = new int[10];\nfor (int i = 0; i < 10; i++) {\n    oldItems[i] = i + 10;\n}\nint[] newItems = new int[20];'
p3477
aS'public static void main(String[] args) {\n    List<xClass> list = new ArrayList<xClass>();\n    int elements = new Random().nextInt(100);\n    for (int i = 0; i < elements; i++) {\n        list.add(new xClass());\n    }\n    xClass[] array = list.toArray(new xClass[list.size()]);\n    System.out.println("size of array = " + array.length);\n}'
p3478
aS'import java.util.List;\nimport java.util.ArrayList;\nimport java.util.Random;\n\npublic class A {\n\n    public static void main(String[] args) {\n        List<xClass> list = new ArrayList<xClass>();\n        int elements = new Random().nextInt(100);\n        for (int i = 0; i < elements; i++) {\n            list.add(new xClass());\n        }\n        xClass[] array = list.toArray(new xClass[list.size()]);\n        System.out.println("size of array = " + array.length);\n    }\n}'
p3479
aS'int[] newItems = new int[20];\nSystem.arraycopy(oldItems, 0, newItems, 0, 10);'
p3480
aS'import java.util.List;'
p3481
aS'int[] oldItems = new int[10];\nfor (int i = 0; i < 10; i++) {\n    oldItems[i] = i + 10;\n}\nint[] newItems = new int[20];\nSystem.arraycopy(oldItems, 0, newItems, 0, 10);\noldItems = newItems;'
p3482
aS'import java.util.List;\nimport java.util.ArrayList;\nimport java.util.Random;\n\npublic class A {\n\n    public static void main(String[] args) {\n        List<xClass> list = new ArrayList<xClass>();\n        int elements = new Random().nextInt(100);\n        for (int i = 0; i < elements; i++) {\n            list.add(new xClass());\n        }\n        xClass[] array = list.toArray(new xClass[list.size()]);\n        System.out.println("size of array = " + array.length);\n    }\n}\n\nclass xClass {\n}'
p3483
atp3484
Rp3485
sI1962181
g1
((lp3486
S's = s.replace(",", "");'
p3487
aS'str = str.replaceAll("[,.]", "");'
p3488
aS'String str = "whatever";\nstr = str.replaceAll("[,.]", "");'
p3489
aS's = s.substring(0, s.length() - 1);'
p3490
aS'String str = "whatever";'
p3491
aS's = s.replace(".", "");'
p3492
atp3493
Rp3494
sI3914404
g1
((lp3495
S'TimeZone tz = TimeZone.getTimeZone("UTC");\nDateFormat df = new SimpleDateFormat("yyyy-MM-dd\'T\'HH:mm\'Z\'");'
p3496
aS'TimeZone tz = TimeZone.getTimeZone("UTC");'
p3497
aS'DateFormat df = new SimpleDateFormat("yyyy-MM-dd\'T\'HH:mm\'Z\'");\ndf.setTimeZone(tz);\nString nowAsISO = df.format(new Date());'
p3498
aS'df.setTimeZone(tz);\nString nowAsISO = df.format(new Date());'
p3499
aS'DateFormat df = new SimpleDateFormat("yyyy-MM-dd\'T\'HH:mm\'Z\'");'
p3500
aS'thisMoment = DateTimeFormatter.ofPattern("yyyy-MM-dd\'T\'HH:mmX").withZone(ZoneOffset.UTC).format(Instant.now());'
p3501
aS'String nowAsISO = df.format(new Date());'
p3502
aS'TimeZone tz = TimeZone.getTimeZone("UTC");\nDateFormat df = new SimpleDateFormat("yyyy-MM-dd\'T\'HH:mm\'Z\'");\ndf.setTimeZone(tz);\nString nowAsISO = df.format(new Date());'
p3503
aS'df.setTimeZone(tz);'
p3504
aS'thisMoment = String.format("%tFT%<tRZ", Calendar.getInstance(TimeZone.getTimeZone("Z")));'
p3505
aS'DateFormat df = new SimpleDateFormat("yyyy-MM-dd\'T\'HH:mm\'Z\'");\ndf.setTimeZone(tz);'
p3506
aS'TimeZone tz = TimeZone.getTimeZone("UTC");\nDateFormat df = new SimpleDateFormat("yyyy-MM-dd\'T\'HH:mm\'Z\'");\ndf.setTimeZone(tz);'
p3507
atp3508
Rp3509
sI16425127
g1
((lp3510
S'int compareTo = number2 > number11 ? 1 : (number2 < number11 ? -1 : 0);'
p3511
aS'System.out.println(string2.compareTo(string11));\nint number2 = Integer.valueOf(string1);'
p3512
aS'public static final int COMPARE_BY_NAME = 1;\nprivate int compare_mode = COMPARE_BY_NAME;'
p3513
aS'return o1.getId().compareTo(o2.getId());'
p3514
aS'switch(compare_mode) {\n    case COMPARE_BY_ID:\n        return o1.getId().compareTo(o2.getId());\n    default:\n}'
p3515
aS'String string1 = "1";\nString string2 = "2";\nString string11 = "11";\nSystem.out.println(string1.compareTo(string2));\nSystem.out.println(string2.compareTo(string11));\nint number2 = Integer.valueOf(string1);\nint number11 = Integer.valueOf(string11);\nint compareTo = number2 > number11 ? 1 : (number2 < number11 ? -1 : 0);'
p3516
aS'private int compare_mode = COMPARE_BY_NAME;\npublic RecipeComparator() {\n}\npublic RecipeComparator(int compare_mode) {\n    this.compare_mode = compare_mode;\n}\n@Override\npublic int compare(Recipe o1, Recipe o2) {\n    switch(compare_mode) {\n        case COMPARE_BY_ID:\n            return o1.getId().compareTo(o2.getId());\n        default:\n            return o1.getInputRecipeName().compareTo(o2.getInputRecipeName());\n    }\n}'
p3517
aS'public static final int COMPARE_BY_NAME = 1;'
p3518
aS'String string11 = "11";\nSystem.out.println(string1.compareTo(string2));\nSystem.out.println(string2.compareTo(string11));\nint number2 = Integer.valueOf(string1);'
p3519
aS'String string1 = "1";\nString string2 = "2";\nString string11 = "11";'
p3520
aS'String string11 = "11";\nSystem.out.println(string1.compareTo(string2));\nSystem.out.println(string2.compareTo(string11));\nint number2 = Integer.valueOf(string1);\nint number11 = Integer.valueOf(string11);\nint compareTo = number2 > number11 ? 1 : (number2 < number11 ? -1 : 0);\nSystem.out.println(compareTo);'
p3521
aS'String string1 = "1";\nString string2 = "2";\nString string11 = "11";\nSystem.out.println(string1.compareTo(string2));\nSystem.out.println(string2.compareTo(string11));\nint number2 = Integer.valueOf(string1);\nint number11 = Integer.valueOf(string11);'
p3522
aS'String string11 = "11";\nSystem.out.println(string1.compareTo(string2));\nSystem.out.println(string2.compareTo(string11));'
p3523
aS'System.out.println(string1.compareTo(string2));\nSystem.out.println(string2.compareTo(string11));'
p3524
aS'public static final int COMPARE_BY_ID = 0;\npublic static final int COMPARE_BY_NAME = 1;\nprivate int compare_mode = COMPARE_BY_NAME;'
p3525
aS'@Override\npublic int compare(Recipe o1, Recipe o2) {\n    switch(compare_mode) {\n        case COMPARE_BY_ID:\n            return o1.getId().compareTo(o2.getId());\n        default:\n            return o1.getInputRecipeName().compareTo(o2.getInputRecipeName());\n    }\n}'
p3526
aS'String string11 = "11";\nSystem.out.println(string1.compareTo(string2));\nSystem.out.println(string2.compareTo(string11));\nint number2 = Integer.valueOf(string1);\nint number11 = Integer.valueOf(string11);'
p3527
aS'String string11 = "11";\nSystem.out.println(string1.compareTo(string2));'
p3528
aS'String string2 = "2";\nString string11 = "11";\nSystem.out.println(string1.compareTo(string2));'
p3529
aS'public static final int COMPARE_BY_ID = 0;\npublic static final int COMPARE_BY_NAME = 1;\nprivate int compare_mode = COMPARE_BY_NAME;\npublic RecipeComparator() {\n}\npublic RecipeComparator(int compare_mode) {\n    this.compare_mode = compare_mode;\n}\n@Override\npublic int compare(Recipe o1, Recipe o2) {\n    switch(compare_mode) {\n        case COMPARE_BY_ID:\n            return o1.getId().compareTo(o2.getId());\n        default:\n            return o1.getInputRecipeName().compareTo(o2.getInputRecipeName());\n    }\n}'
p3530
aS'String string2 = "2";\nString string11 = "11";\nSystem.out.println(string1.compareTo(string2));\nSystem.out.println(string2.compareTo(string11));\nint number2 = Integer.valueOf(string1);\nint number11 = Integer.valueOf(string11);'
p3531
aS'String string1 = "1";'
p3532
aS'String string1 = "1";\nString string2 = "2";\nString string11 = "11";\nSystem.out.println(string1.compareTo(string2));\nSystem.out.println(string2.compareTo(string11));\nint number2 = Integer.valueOf(string1);'
p3533
aS'String string2 = "2";\nString string11 = "11";\nSystem.out.println(string1.compareTo(string2));\nSystem.out.println(string2.compareTo(string11));'
p3534
aS'public RecipeComparator() {\n}\npublic RecipeComparator(int compare_mode) {\n    this.compare_mode = compare_mode;\n}\n@Override\npublic int compare(Recipe o1, Recipe o2) {\n    switch(compare_mode) {\n        case COMPARE_BY_ID:\n            return o1.getId().compareTo(o2.getId());\n        default:\n            return o1.getInputRecipeName().compareTo(o2.getInputRecipeName());\n    }\n}'
p3535
aS'public static final int COMPARE_BY_ID = 0;\npublic static final int COMPARE_BY_NAME = 1;'
p3536
aS'String string1 = "1";\nString string2 = "2";\nString string11 = "11";\nSystem.out.println(string1.compareTo(string2));'
p3537
aS'public static final int COMPARE_BY_ID = 0;'
p3538
aS'String string1 = "1";\nString string2 = "2";\nString string11 = "11";\nSystem.out.println(string1.compareTo(string2));\nSystem.out.println(string2.compareTo(string11));'
p3539
aS'return o1.getInputRecipeName().compareTo(o2.getInputRecipeName());'
p3540
aS'System.out.println(string1.compareTo(string2));'
p3541
aS'String string1 = "1";\nString string2 = "2";'
p3542
aS'String string11 = "11";\nSystem.out.println(string1.compareTo(string2));\nSystem.out.println(string2.compareTo(string11));\nint number2 = Integer.valueOf(string1);\nint number11 = Integer.valueOf(string11);\nint compareTo = number2 > number11 ? 1 : (number2 < number11 ? -1 : 0);'
p3543
aS'System.out.println(string2.compareTo(string11));\nint number2 = Integer.valueOf(string1);\nint number11 = Integer.valueOf(string11);\nint compareTo = number2 > number11 ? 1 : (number2 < number11 ? -1 : 0);\nSystem.out.println(compareTo);'
p3544
aS'System.out.println(string2.compareTo(string11));\nint number2 = Integer.valueOf(string1);\nint number11 = Integer.valueOf(string11);\nint compareTo = number2 > number11 ? 1 : (number2 < number11 ? -1 : 0);'
p3545
aS'int number2 = Integer.valueOf(string1);\nint number11 = Integer.valueOf(string11);'
p3546
aS'public RecipeComparator() {\n}\npublic RecipeComparator(int compare_mode) {\n    this.compare_mode = compare_mode;\n}'
p3547
aS'public static final int COMPARE_BY_NAME = 1;\nprivate int compare_mode = COMPARE_BY_NAME;\npublic RecipeComparator() {\n}'
p3548
aS'String string2 = "2";\nString string11 = "11";\nSystem.out.println(string1.compareTo(string2));\nSystem.out.println(string2.compareTo(string11));\nint number2 = Integer.valueOf(string1);'
p3549
aS'System.out.println(string2.compareTo(string11));\nint number2 = Integer.valueOf(string1);\nint number11 = Integer.valueOf(string11);'
p3550
aS'String string2 = "2";'
p3551
aS'@Override\npublic int compare(Recipe o1, Recipe o2) {\n    return o1.getID().compareTo(o2.getID());\n}'
p3552
aS'public static void main(String[] args) {\n    String string1 = "1";\n    String string2 = "2";\n    String string11 = "11";\n    System.out.println(string1.compareTo(string2));\n    System.out.println(string2.compareTo(string11));\n    int number2 = Integer.valueOf(string1);\n    int number11 = Integer.valueOf(string11);\n    int compareTo = number2 > number11 ? 1 : (number2 < number11 ? -1 : 0);\n    System.out.println(compareTo);\n}'
p3553
aS'return o1.getID().compareTo(o2.getID());'
p3554
aS'String string2 = "2";\nString string11 = "11";\nSystem.out.println(string1.compareTo(string2));\nSystem.out.println(string2.compareTo(string11));\nint number2 = Integer.valueOf(string1);\nint number11 = Integer.valueOf(string11);\nint compareTo = number2 > number11 ? 1 : (number2 < number11 ? -1 : 0);'
p3555
aS'int number2 = Integer.valueOf(string1);\nint number11 = Integer.valueOf(string11);\nint compareTo = number2 > number11 ? 1 : (number2 < number11 ? -1 : 0);'
p3556
aS'public int compare(Recipe o1, Recipe o2) {\n    return o1.getID().compareTo(o2.getID());\n}'
p3557
aS'int compareTo = number2 > number11 ? 1 : (number2 < number11 ? -1 : 0);\nSystem.out.println(compareTo);'
p3558
aS'private int compare_mode = COMPARE_BY_NAME;\npublic RecipeComparator() {\n}'
p3559
aS'System.out.println(string1.compareTo(string2));\nSystem.out.println(string2.compareTo(string11));\nint number2 = Integer.valueOf(string1);\nint number11 = Integer.valueOf(string11);\nint compareTo = number2 > number11 ? 1 : (number2 < number11 ? -1 : 0);\nSystem.out.println(compareTo);'
p3560
aS'class RecipeCompare implements Comparator<Recipe> {\n\n    @Override\n    public int compare(Recipe o1, Recipe o2) {\n        return o1.getID().compareTo(o2.getID());\n    }\n}'
p3561
aS'String string2 = "2";\nString string11 = "11";'
p3562
aS'public static final int COMPARE_BY_ID = 0;\npublic static final int COMPARE_BY_NAME = 1;\nprivate int compare_mode = COMPARE_BY_NAME;\npublic RecipeComparator() {\n}'
p3563
aS'this.compare_mode = compare_mode;'
p3564
aS'System.out.println(string1.compareTo(string2));\nSystem.out.println(string2.compareTo(string11));\nint number2 = Integer.valueOf(string1);'
p3565
aS'public static final int COMPARE_BY_ID = 0;\npublic static final int COMPARE_BY_NAME = 1;\nprivate int compare_mode = COMPARE_BY_NAME;\npublic RecipeComparator() {\n}\npublic RecipeComparator(int compare_mode) {\n    this.compare_mode = compare_mode;\n}'
p3566
aS'System.out.println(string1.compareTo(string2));\nSystem.out.println(string2.compareTo(string11));\nint number2 = Integer.valueOf(string1);\nint number11 = Integer.valueOf(string11);\nint compareTo = number2 > number11 ? 1 : (number2 < number11 ? -1 : 0);'
p3567
aS'private int compare_mode = COMPARE_BY_NAME;'
p3568
aS'int number2 = Integer.valueOf(string1);'
p3569
aS'String string2 = "2";\nString string11 = "11";\nSystem.out.println(string1.compareTo(string2));\nSystem.out.println(string2.compareTo(string11));\nint number2 = Integer.valueOf(string1);\nint number11 = Integer.valueOf(string11);\nint compareTo = number2 > number11 ? 1 : (number2 < number11 ? -1 : 0);\nSystem.out.println(compareTo);'
p3570
aS'public int compare(Recipe o1, Recipe o2) {\n    switch(compare_mode) {\n        case COMPARE_BY_ID:\n            return o1.getId().compareTo(o2.getId());\n        default:\n            return o1.getInputRecipeName().compareTo(o2.getInputRecipeName());\n    }\n}'
p3571
aS'public RecipeComparator() {\n}'
p3572
aS'switch(compare_mode) {\n    case COMPARE_BY_ID:\n}'
p3573
aS'int number2 = Integer.valueOf(string1);\nint number11 = Integer.valueOf(string11);\nint compareTo = number2 > number11 ? 1 : (number2 < number11 ? -1 : 0);\nSystem.out.println(compareTo);'
p3574
aS'Collections.sort(recipes, new RecipeCompare());'
p3575
aS'String string1 = "1";\nString string2 = "2";\nString string11 = "11";\nSystem.out.println(string1.compareTo(string2));\nSystem.out.println(string2.compareTo(string11));\nint number2 = Integer.valueOf(string1);\nint number11 = Integer.valueOf(string11);\nint compareTo = number2 > number11 ? 1 : (number2 < number11 ? -1 : 0);\nSystem.out.println(compareTo);'
p3576
aS'class RecipeCompare implements Comparator<Recipe> {\n}'
p3577
aS'public RecipeComparator(int compare_mode) {\n    this.compare_mode = compare_mode;\n}\n@Override\npublic int compare(Recipe o1, Recipe o2) {\n    switch(compare_mode) {\n        case COMPARE_BY_ID:\n            return o1.getId().compareTo(o2.getId());\n        default:\n            return o1.getInputRecipeName().compareTo(o2.getInputRecipeName());\n    }\n}'
p3578
aS'int number11 = Integer.valueOf(string11);\nint compareTo = number2 > number11 ? 1 : (number2 < number11 ? -1 : 0);'
p3579
aS'String string11 = "11";'
p3580
aS'System.out.println(compareTo);'
p3581
aS'switch(compare_mode) {\n}'
p3582
aS'switch(compare_mode) {\n    case COMPARE_BY_ID:\n        return o1.getId().compareTo(o2.getId());\n}'
p3583
aS'public static final int COMPARE_BY_NAME = 1;\nprivate int compare_mode = COMPARE_BY_NAME;\npublic RecipeComparator() {\n}\npublic RecipeComparator(int compare_mode) {\n    this.compare_mode = compare_mode;\n}\n@Override\npublic int compare(Recipe o1, Recipe o2) {\n    switch(compare_mode) {\n        case COMPARE_BY_ID:\n            return o1.getId().compareTo(o2.getId());\n        default:\n            return o1.getInputRecipeName().compareTo(o2.getInputRecipeName());\n    }\n}'
p3584
aS'private int compare_mode = COMPARE_BY_NAME;\npublic RecipeComparator() {\n}\npublic RecipeComparator(int compare_mode) {\n    this.compare_mode = compare_mode;\n}'
p3585
aS'int number11 = Integer.valueOf(string11);'
p3586
aS'public RecipeComparator(int compare_mode) {\n    this.compare_mode = compare_mode;\n}'
p3587
aS'int number11 = Integer.valueOf(string11);\nint compareTo = number2 > number11 ? 1 : (number2 < number11 ? -1 : 0);\nSystem.out.println(compareTo);'
p3588
aS'public static final int COMPARE_BY_NAME = 1;\nprivate int compare_mode = COMPARE_BY_NAME;\npublic RecipeComparator() {\n}\npublic RecipeComparator(int compare_mode) {\n    this.compare_mode = compare_mode;\n}'
p3589
aS'System.out.println(string1.compareTo(string2));\nSystem.out.println(string2.compareTo(string11));\nint number2 = Integer.valueOf(string1);\nint number11 = Integer.valueOf(string11);'
p3590
aS'System.out.println(string2.compareTo(string11));'
p3591
aS'switch(compare_mode) {\n    case COMPARE_BY_ID:\n        return o1.getId().compareTo(o2.getId());\n    default:\n        return o1.getInputRecipeName().compareTo(o2.getInputRecipeName());\n}'
p3592
atp3593
Rp3594
sI7693994
g1
((lp3595
tp3596
Rp3597
sI1942644
g1
((lp3598
S'Class<?> clazz = (Class<?>) pType.getActualTypeArguments()[0];\nSystem.out.println(clazz);'
p3599
aS'ParameterizedType stringListType = (ParameterizedType) stringListField.getGenericType();'
p3600
aS'package test;'
p3601
aS'import java.lang.reflect.Field;\nimport java.lang.reflect.ParameterizedType;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Test {\n\n    List<String> stringList = new ArrayList<String>();\n\n    List<Integer> integerList = new ArrayList<Integer>();\n\n    public static void main(String... args) throws Exception {\n        Field stringListField = Test.class.getDeclaredField("stringList");\n        ParameterizedType stringListType = (ParameterizedType) stringListField.getGenericType();\n        Class<?> stringListClass = (Class<?>) stringListType.getActualTypeArguments()[0];\n        System.out.println(stringListClass);\n        Field integerListField = Test.class.getDeclaredField("integerList");\n        ParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType();\n        Class<?> integerListClass = (Class<?>) integerListType.getActualTypeArguments()[0];\n        System.out.println(integerListClass);\n    }\n}'
p3602
aS'ParameterizedType stringListType = (ParameterizedType) stringListField.getGenericType();\nClass<?> stringListClass = (Class<?>) stringListType.getActualTypeArguments()[0];'
p3603
aS'List<Integer> integerList = new ArrayList<Integer>();\npublic static void main(String... args) throws Exception {\n    Field stringListField = Test.class.getDeclaredField("stringList");\n    ParameterizedType stringListType = (ParameterizedType) stringListField.getGenericType();\n    Class<?> stringListClass = (Class<?>) stringListType.getActualTypeArguments()[0];\n    System.out.println(stringListClass);\n    Field integerListField = Test.class.getDeclaredField("integerList");\n    ParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType();\n    Class<?> integerListClass = (Class<?>) integerListType.getActualTypeArguments()[0];\n    System.out.println(integerListClass);\n}'
p3604
aS'List<String> stringList = new ArrayList<String>();\nList<Integer> integerList = new ArrayList<Integer>();'
p3605
aS'ParameterizedType pType = (ParameterizedType) types[0];'
p3606
aS'import java.util.ArrayList;\nimport java.util.List;\n\npublic class Test {\n\n    List<String> stringList = new ArrayList<String>();\n\n    List<Integer> integerList = new ArrayList<Integer>();\n\n    public static void main(String... args) throws Exception {\n        Field stringListField = Test.class.getDeclaredField("stringList");\n        ParameterizedType stringListType = (ParameterizedType) stringListField.getGenericType();\n        Class<?> stringListClass = (Class<?>) stringListType.getActualTypeArguments()[0];\n        System.out.println(stringListClass);\n        Field integerListField = Test.class.getDeclaredField("integerList");\n        ParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType();\n        Class<?> integerListClass = (Class<?>) integerListType.getActualTypeArguments()[0];\n        System.out.println(integerListClass);\n    }\n}'
p3607
aS'import java.lang.reflect.Field;'
p3608
aS'ParameterizedType stringListType = (ParameterizedType) stringListField.getGenericType();\nClass<?> stringListClass = (Class<?>) stringListType.getActualTypeArguments()[0];\nSystem.out.println(stringListClass);\nField integerListField = Test.class.getDeclaredField("integerList");\nParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType();'
p3609
aS'import java.lang.reflect.ParameterizedType;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Test {\n\n    List<String> stringList = new ArrayList<String>();\n\n    List<Integer> integerList = new ArrayList<Integer>();\n\n    public static void main(String... args) throws Exception {\n        Field stringListField = Test.class.getDeclaredField("stringList");\n        ParameterizedType stringListType = (ParameterizedType) stringListField.getGenericType();\n        Class<?> stringListClass = (Class<?>) stringListType.getActualTypeArguments()[0];\n        System.out.println(stringListClass);\n        Field integerListField = Test.class.getDeclaredField("integerList");\n        ParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType();\n        Class<?> integerListClass = (Class<?>) integerListType.getActualTypeArguments()[0];\n        System.out.println(integerListClass);\n    }\n}'
p3610
aS'Field stringListField = Test.class.getDeclaredField("stringList");\nParameterizedType stringListType = (ParameterizedType) stringListField.getGenericType();\nClass<?> stringListClass = (Class<?>) stringListType.getActualTypeArguments()[0];\nSystem.out.println(stringListClass);'
p3611
aS'package test;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.ParameterizedType;\nimport java.util.ArrayList;'
p3612
aS'Type[] types = method.getGenericParameterTypes();\nParameterizedType pType = (ParameterizedType) types[0];'
p3613
aS'import java.lang.reflect.ParameterizedType;'
p3614
aS'Field stringListField = Test.class.getDeclaredField("stringList");\nParameterizedType stringListType = (ParameterizedType) stringListField.getGenericType();'
p3615
aS'ParameterizedType pType = (ParameterizedType) types[0];\nClass<?> clazz = (Class<?>) pType.getActualTypeArguments()[0];\nSystem.out.println(clazz);'
p3616
aS'package test;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.ParameterizedType;\nimport java.util.ArrayList;\nimport java.util.List;'
p3617
aS'System.out.println(stringListClass);\nField integerListField = Test.class.getDeclaredField("integerList");\nParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType();'
p3618
aS'Field stringListField = Test.class.getDeclaredField("stringList");\nParameterizedType stringListType = (ParameterizedType) stringListField.getGenericType();\nClass<?> stringListClass = (Class<?>) stringListType.getActualTypeArguments()[0];\nSystem.out.println(stringListClass);\nField integerListField = Test.class.getDeclaredField("integerList");\nParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType();\nClass<?> integerListClass = (Class<?>) integerListType.getActualTypeArguments()[0];\nSystem.out.println(integerListClass);'
p3619
aS'Field stringListField = Test.class.getDeclaredField("stringList");'
p3620
aS'Field integerListField = Test.class.getDeclaredField("integerList");\nParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType();\nClass<?> integerListClass = (Class<?>) integerListType.getActualTypeArguments()[0];\nSystem.out.println(integerListClass);'
p3621
aS'Class<?> stringListClass = (Class<?>) stringListType.getActualTypeArguments()[0];\nSystem.out.println(stringListClass);\nField integerListField = Test.class.getDeclaredField("integerList");\nParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType();\nClass<?> integerListClass = (Class<?>) integerListType.getActualTypeArguments()[0];'
p3622
aS'Type[] types = method.getGenericParameterTypes();'
p3623
aS'import java.util.ArrayList;\nimport java.util.List;'
p3624
aS'System.out.println(integerListClass);'
p3625
aS'Class<?> clazz = (Class<?>) pType.getActualTypeArguments()[0];'
p3626
aS'Field integerListField = Test.class.getDeclaredField("integerList");\nParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType();\nClass<?> integerListClass = (Class<?>) integerListType.getActualTypeArguments()[0];'
p3627
aS'System.out.println(clazz);'
p3628
aS'System.out.println(stringListClass);\nField integerListField = Test.class.getDeclaredField("integerList");\nParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType();\nClass<?> integerListClass = (Class<?>) integerListType.getActualTypeArguments()[0];\nSystem.out.println(integerListClass);'
p3629
aS'import java.lang.reflect.ParameterizedType;\nimport java.util.ArrayList;'
p3630
aS'import java.lang.reflect.ParameterizedType;\nimport java.util.ArrayList;\nimport java.util.List;'
p3631
aS'Class<?> integerListClass = (Class<?>) integerListType.getActualTypeArguments()[0];\nSystem.out.println(integerListClass);'
p3632
aS'Class<?> stringListClass = (Class<?>) stringListType.getActualTypeArguments()[0];\nSystem.out.println(stringListClass);\nField integerListField = Test.class.getDeclaredField("integerList");\nParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType();\nClass<?> integerListClass = (Class<?>) integerListType.getActualTypeArguments()[0];\nSystem.out.println(integerListClass);'
p3633
aS'Class<?> stringListClass = (Class<?>) stringListType.getActualTypeArguments()[0];\nSystem.out.println(stringListClass);\nField integerListField = Test.class.getDeclaredField("integerList");'
p3634
aS'package test;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.ParameterizedType;'
p3635
aS'import java.lang.reflect.Field;\nimport java.lang.reflect.ParameterizedType;\nimport java.util.ArrayList;\nimport java.util.List;'
p3636
aS'Class<?> stringListClass = (Class<?>) stringListType.getActualTypeArguments()[0];\nSystem.out.println(stringListClass);'
p3637
aS'import java.util.ArrayList;'
p3638
aS'ParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType();\nClass<?> integerListClass = (Class<?>) integerListType.getActualTypeArguments()[0];\nSystem.out.println(integerListClass);'
p3639
aS'Field integerListField = Test.class.getDeclaredField("integerList");\nParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType();'
p3640
aS'System.out.println(stringListClass);\nField integerListField = Test.class.getDeclaredField("integerList");\nParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType();\nClass<?> integerListClass = (Class<?>) integerListType.getActualTypeArguments()[0];'
p3641
aS'import java.util.List;\n\npublic class Test {\n\n    List<String> stringList = new ArrayList<String>();\n\n    List<Integer> integerList = new ArrayList<Integer>();\n\n    public static void main(String... args) throws Exception {\n        Field stringListField = Test.class.getDeclaredField("stringList");\n        ParameterizedType stringListType = (ParameterizedType) stringListField.getGenericType();\n        Class<?> stringListClass = (Class<?>) stringListType.getActualTypeArguments()[0];\n        System.out.println(stringListClass);\n        Field integerListField = Test.class.getDeclaredField("integerList");\n        ParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType();\n        Class<?> integerListClass = (Class<?>) integerListType.getActualTypeArguments()[0];\n        System.out.println(integerListClass);\n    }\n}'
p3642
aS'ParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType();\nClass<?> integerListClass = (Class<?>) integerListType.getActualTypeArguments()[0];'
p3643
aS'List<Integer> integerList = new ArrayList<Integer>();'
p3644
aS'Field stringListField = Test.class.getDeclaredField("stringList");\nParameterizedType stringListType = (ParameterizedType) stringListField.getGenericType();\nClass<?> stringListClass = (Class<?>) stringListType.getActualTypeArguments()[0];\nSystem.out.println(stringListClass);\nField integerListField = Test.class.getDeclaredField("integerList");\nParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType();\nClass<?> integerListClass = (Class<?>) integerListType.getActualTypeArguments()[0];'
p3645
aS'Type[] types = method.getGenericParameterTypes();\nParameterizedType pType = (ParameterizedType) types[0];\nClass<?> clazz = (Class<?>) pType.getActualTypeArguments()[0];'
p3646
aS'ParameterizedType stringListType = (ParameterizedType) stringListField.getGenericType();\nClass<?> stringListClass = (Class<?>) stringListType.getActualTypeArguments()[0];\nSystem.out.println(stringListClass);\nField integerListField = Test.class.getDeclaredField("integerList");\nParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType();\nClass<?> integerListClass = (Class<?>) integerListType.getActualTypeArguments()[0];\nSystem.out.println(integerListClass);'
p3647
aS'Type[] types = method.getGenericParameterTypes();\nParameterizedType pType = (ParameterizedType) types[0];\nClass<?> clazz = (Class<?>) pType.getActualTypeArguments()[0];\nSystem.out.println(clazz);'
p3648
aS'ParameterizedType stringListType = (ParameterizedType) stringListField.getGenericType();\nClass<?> stringListClass = (Class<?>) stringListType.getActualTypeArguments()[0];\nSystem.out.println(stringListClass);\nField integerListField = Test.class.getDeclaredField("integerList");'
p3649
aS'ParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType();'
p3650
aS'Class<?> stringListClass = (Class<?>) stringListType.getActualTypeArguments()[0];'
p3651
aS'ParameterizedType stringListType = (ParameterizedType) stringListField.getGenericType();\nClass<?> stringListClass = (Class<?>) stringListType.getActualTypeArguments()[0];\nSystem.out.println(stringListClass);\nField integerListField = Test.class.getDeclaredField("integerList");\nParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType();\nClass<?> integerListClass = (Class<?>) integerListType.getActualTypeArguments()[0];'
p3652
aS'public static void main(String... args) throws Exception {\n    Field stringListField = Test.class.getDeclaredField("stringList");\n    ParameterizedType stringListType = (ParameterizedType) stringListField.getGenericType();\n    Class<?> stringListClass = (Class<?>) stringListType.getActualTypeArguments()[0];\n    System.out.println(stringListClass);\n    Field integerListField = Test.class.getDeclaredField("integerList");\n    ParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType();\n    Class<?> integerListClass = (Class<?>) integerListType.getActualTypeArguments()[0];\n    System.out.println(integerListClass);\n}'
p3653
aS'Field stringListField = Test.class.getDeclaredField("stringList");\nParameterizedType stringListType = (ParameterizedType) stringListField.getGenericType();\nClass<?> stringListClass = (Class<?>) stringListType.getActualTypeArguments()[0];\nSystem.out.println(stringListClass);\nField integerListField = Test.class.getDeclaredField("integerList");'
p3654
aS'import java.lang.reflect.Field;\nimport java.lang.reflect.ParameterizedType;\nimport java.util.ArrayList;'
p3655
aS'package test;\n\nimport java.lang.reflect.Field;'
p3656
aS'List<String> stringList = new ArrayList<String>();\nList<Integer> integerList = new ArrayList<Integer>();\npublic static void main(String... args) throws Exception {\n    Field stringListField = Test.class.getDeclaredField("stringList");\n    ParameterizedType stringListType = (ParameterizedType) stringListField.getGenericType();\n    Class<?> stringListClass = (Class<?>) stringListType.getActualTypeArguments()[0];\n    System.out.println(stringListClass);\n    Field integerListField = Test.class.getDeclaredField("integerList");\n    ParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType();\n    Class<?> integerListClass = (Class<?>) integerListType.getActualTypeArguments()[0];\n    System.out.println(integerListClass);\n}'
p3657
aS'import java.lang.reflect.Field;\nimport java.lang.reflect.ParameterizedType;'
p3658
aS'Class<?> stringListClass = (Class<?>) stringListType.getActualTypeArguments()[0];\nSystem.out.println(stringListClass);\nField integerListField = Test.class.getDeclaredField("integerList");\nParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType();'
p3659
aS'Field integerListField = Test.class.getDeclaredField("integerList");'
p3660
aS'List<String> stringList = new ArrayList<String>();'
p3661
aS'public class Test {\n\n    List<String> stringList = new ArrayList<String>();\n\n    List<Integer> integerList = new ArrayList<Integer>();\n\n    public static void main(String... args) throws Exception {\n        Field stringListField = Test.class.getDeclaredField("stringList");\n        ParameterizedType stringListType = (ParameterizedType) stringListField.getGenericType();\n        Class<?> stringListClass = (Class<?>) stringListType.getActualTypeArguments()[0];\n        System.out.println(stringListClass);\n        Field integerListField = Test.class.getDeclaredField("integerList");\n        ParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType();\n        Class<?> integerListClass = (Class<?>) integerListType.getActualTypeArguments()[0];\n        System.out.println(integerListClass);\n    }\n}'
p3662
aS'System.out.println(stringListClass);\nField integerListField = Test.class.getDeclaredField("integerList");'
p3663
aS'Class<?> integerListClass = (Class<?>) integerListType.getActualTypeArguments()[0];'
p3664
aS'import java.util.List;'
p3665
aS'Field stringListField = Test.class.getDeclaredField("stringList");\nParameterizedType stringListType = (ParameterizedType) stringListField.getGenericType();\nClass<?> stringListClass = (Class<?>) stringListType.getActualTypeArguments()[0];'
p3666
aS'ParameterizedType pType = (ParameterizedType) types[0];\nClass<?> clazz = (Class<?>) pType.getActualTypeArguments()[0];'
p3667
aS'System.out.println(stringListClass);'
p3668
aS'package test;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.ParameterizedType;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Test {\n\n    List<String> stringList = new ArrayList<String>();\n\n    List<Integer> integerList = new ArrayList<Integer>();\n\n    public static void main(String... args) throws Exception {\n        Field stringListField = Test.class.getDeclaredField("stringList");\n        ParameterizedType stringListType = (ParameterizedType) stringListField.getGenericType();\n        Class<?> stringListClass = (Class<?>) stringListType.getActualTypeArguments()[0];\n        System.out.println(stringListClass);\n        Field integerListField = Test.class.getDeclaredField("integerList");\n        ParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType();\n        Class<?> integerListClass = (Class<?>) integerListType.getActualTypeArguments()[0];\n        System.out.println(integerListClass);\n    }\n}'
p3669
aS'ParameterizedType stringListType = (ParameterizedType) stringListField.getGenericType();\nClass<?> stringListClass = (Class<?>) stringListType.getActualTypeArguments()[0];\nSystem.out.println(stringListClass);'
p3670
aS'Field stringListField = Test.class.getDeclaredField("stringList");\nParameterizedType stringListType = (ParameterizedType) stringListField.getGenericType();\nClass<?> stringListClass = (Class<?>) stringListType.getActualTypeArguments()[0];\nSystem.out.println(stringListClass);\nField integerListField = Test.class.getDeclaredField("integerList");\nParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType();'
p3671
atp3672
Rp3673
sI5927109
g1
((lp3674
S'DateTime a = o1.getDateTime();\nDateTime b = o2.getDateTime();\nif (a.lt(b))\n    return -1;\nelse if (a.lteq(b)) {\n}'
p3675
aS'DateTime a = o1.getDateTime();'
p3676
aS'Collections.sort(myList, new Comparator<MyObject>() {\n\n    public int compare(MyObject o1, MyObject o2) {\n        return o1.getDateTime().compareTo(o2.getDateTime());\n    }\n});'
p3677
aS'public int compareTo(MyObject o) {\n    if (getDateTime() == null || o.getDateTime() == null)\n        return 0;\n    return getDateTime().compareTo(o.getDateTime());\n}'
p3678
aS'public Date getDateTime() {\n    return dateTime;\n}\npublic void setDateTime(Date datetime) {\n    this.dateTime = datetime;\n}\n@Override\npublic int compareTo(MyObject o) {\n    return getDateTime().compareTo(o.getDateTime());\n}'
p3679
aS'if (a.lt(b))\n    return -1;\nelse if (a.lteq(b))\n    return 0;\nelse\n    ;'
p3680
aS'public static class MyObject implements Comparable<MyObject> {\n\n    private Date dateTime;\n\n    public Date getDateTime() {\n        return dateTime;\n    }\n\n    public void setDateTime(Date datetime) {\n        this.dateTime = datetime;\n    }\n\n    @Override\n    public int compareTo(MyObject o) {\n        return getDateTime().compareTo(o.getDateTime());\n    }\n}'
p3681
aS'if (getDateTime() == null || o.getDateTime() == null)\n    return 0;\nreturn getDateTime().compareTo(o.getDateTime());'
p3682
aS'Collections.sort(myList);'
p3683
aS'DateTime b = o2.getDateTime();\nif (a.lt(b))\n    return -1;\nelse if (a.lteq(b))\n    return 0;'
p3684
aS'public Date getDateTime() {\n    return dateTime;\n}\npublic void setDateTime(Date datetime) {\n    this.dateTime = datetime;\n}'
p3685
aS'DateTime b = o2.getDateTime();\nif (a.lt(b))\n    return -1;'
p3686
aS'public void setDateTime(Date datetime) {\n    this.dateTime = datetime;\n}\n@Override\npublic int compareTo(MyObject o) {\n    if (getDateTime() == null || o.getDateTime() == null)\n        return 0;\n    return getDateTime().compareTo(o.getDateTime());\n}'
p3687
aS'return o1.getDateTime().compareTo(o2.getDateTime());'
p3688
aS'return dateTime;'
p3689
aS'if (a.lt(b))\n    return -1;\nelse if (a.lteq(b))\n    return 0;'
p3690
aS'if (a.lt(b))\n    return -1;\nelse if (a.lteq(b)) {\n}'
p3691
aS'if (a.lt(b))\n    return -1;\nelse if (a.lteq(b))\n    return 0;\nelse\n    return 1;'
p3692
aS'public void setDateTime(Date datetime) {\n    this.dateTime = datetime;\n}\n@Override\npublic int compareTo(MyObject o) {\n    return getDateTime().compareTo(o.getDateTime());\n}'
p3693
aS'public int compare(MyObject o1, MyObject o2) {\n    return o1.getDateTime().lt(o2.getDateTime()) ? -1 : 1;\n}'
p3694
aS'private Date dateTime;\npublic Date getDateTime() {\n    return dateTime;\n}\npublic void setDateTime(Date datetime) {\n    this.dateTime = datetime;\n}\n@Override\npublic int compareTo(MyObject o) {\n    if (getDateTime() == null || o.getDateTime() == null)\n        return 0;\n    return getDateTime().compareTo(o.getDateTime());\n}'
p3695
aS'if (o1.getDateTime() == null || o2.getDateTime() == null)\n    return 0;'
p3696
aS'return 0;'
p3697
aS'return -1;'
p3698
aS'DateTime b = o2.getDateTime();\nif (a.lt(b))\n    return -1;\nelse if (a.lteq(b)) {\n}'
p3699
aS'public int compare(MyObject o1, MyObject o2) {\n    if (o1.getDateTime() == null || o2.getDateTime() == null)\n        return 0;\n    return o1.getDateTime().compareTo(o2.getDateTime());\n}'
p3700
aS'private Date dateTime;\npublic Date getDateTime() {\n    return dateTime;\n}\npublic void setDateTime(Date datetime) {\n    this.dateTime = datetime;\n}'
p3701
aS'public void setDateTime(Date datetime) {\n    this.dateTime = datetime;\n}'
p3702
aS'if (o1.getDateTime() == null || o2.getDateTime() == null) {\n}'
p3703
aS'public Date getDateTime() {\n    return dateTime;\n}'
p3704
aS'DateTime a = o1.getDateTime();\nDateTime b = o2.getDateTime();\nif (a.lt(b))\n    return -1;\nelse if (a.lteq(b))\n    return 0;'
p3705
aS'if (getDateTime() == null || o.getDateTime() == null)\n    return 0;'
p3706
aS'Collections.sort(myList, new Comparator<MyObject>() {\n\n    public int compare(MyObject o1, MyObject o2) {\n        if (o1.getDateTime() == null || o2.getDateTime() == null)\n            return 0;\n        return o1.getDateTime().compareTo(o2.getDateTime());\n    }\n});'
p3707
aS'public int compareTo(MyObject o) {\n    return getDateTime().compareTo(o.getDateTime());\n}'
p3708
aS'public static class MyObject implements Comparable<MyObject> {\n\n    private Date dateTime;\n\n    public Date getDateTime() {\n        return dateTime;\n    }\n\n    public void setDateTime(Date datetime) {\n        this.dateTime = datetime;\n    }\n\n    @Override\n    public int compareTo(MyObject o) {\n        if (getDateTime() == null || o.getDateTime() == null)\n            return 0;\n        return getDateTime().compareTo(o.getDateTime());\n    }\n}'
p3709
aS'Collections.sort(myList, new Comparator<MyObject>() {\n\n    public int compare(MyObject o1, MyObject o2) {\n        return o1.getDateTime().lt(o2.getDateTime()) ? -1 : 1;\n    }\n});'
p3710
aS'public int compare(MyObject o1, MyObject o2) {\n    DateTime a = o1.getDateTime();\n    DateTime b = o2.getDateTime();\n    if (a.lt(b))\n        return -1;\n    else if (a.lteq(b))\n        return 0;\n    else\n        return 1;\n}'
p3711
aS'return o1.getDateTime().lt(o2.getDateTime()) ? -1 : 1;'
p3712
aS'DateTime b = o2.getDateTime();\nif (a.lt(b))\n    return -1;\nelse if (a.lteq(b))\n    return 0;\nelse\n    return 1;'
p3713
aS'private Date dateTime;\npublic Date getDateTime() {\n    return dateTime;\n}'
p3714
aS'return 0;\nreturn getDateTime().compareTo(o.getDateTime());'
p3715
aS'@Override\npublic int compareTo(MyObject o) {\n    if (getDateTime() == null || o.getDateTime() == null)\n        return 0;\n    return getDateTime().compareTo(o.getDateTime());\n}'
p3716
aS'DateTime b = o2.getDateTime();'
p3717
aS'DateTime a = o1.getDateTime();\nDateTime b = o2.getDateTime();'
p3718
aS'public Date getDateTime() {\n    return dateTime;\n}\npublic void setDateTime(Date datetime) {\n    this.dateTime = datetime;\n}\n@Override\npublic int compareTo(MyObject o) {\n    if (getDateTime() == null || o.getDateTime() == null)\n        return 0;\n    return getDateTime().compareTo(o.getDateTime());\n}'
p3719
aS'return 1;'
p3720
aS'if (a.lt(b))\n    return -1;'
p3721
aS'public int compare(MyObject o1, MyObject o2) {\n    return o1.getDateTime().compareTo(o2.getDateTime());\n}'
p3722
aS'@Override\npublic int compareTo(MyObject o) {\n    return getDateTime().compareTo(o.getDateTime());\n}'
p3723
aS'return getDateTime().compareTo(o.getDateTime());'
p3724
aS'return 0;\nreturn o1.getDateTime().compareTo(o2.getDateTime());'
p3725
aS'private Date dateTime;\npublic Date getDateTime() {\n    return dateTime;\n}\npublic void setDateTime(Date datetime) {\n    this.dateTime = datetime;\n}\n@Override\npublic int compareTo(MyObject o) {\n    return getDateTime().compareTo(o.getDateTime());\n}'
p3726
aS'this.dateTime = datetime;'
p3727
aS'if (getDateTime() == null || o.getDateTime() == null) {\n}'
p3728
aS'private Date dateTime;'
p3729
aS'DateTime a = o1.getDateTime();\nDateTime b = o2.getDateTime();\nif (a.lt(b))\n    return -1;\nelse if (a.lteq(b))\n    return 0;\nelse\n    return 1;'
p3730
aS'DateTime a = o1.getDateTime();\nDateTime b = o2.getDateTime();\nif (a.lt(b))\n    return -1;'
p3731
aS'if (a.lt(b))\n    ;'
p3732
aS'if (o1.getDateTime() == null || o2.getDateTime() == null)\n    return 0;\nreturn o1.getDateTime().compareTo(o2.getDateTime());'
p3733
atp3734
Rp3735
sI4377842
g1
((lp3736
S'int x = 1111111111;\nint y = 10000;\nfloat f = (float) x / y;\ndouble d = (double) x / y;\nSystem.out.println("f= " + f);\nSystem.out.println("d= " + d);'
p3737
aS'int y = 10000;\nfloat f = (float) x / y;\ndouble d = (double) x / y;'
p3738
aS'float z = (float) x / y;'
p3739
aS'System.out.println("f= " + f);\nSystem.out.println("d= " + d);'
p3740
aS'int x = 1111111111;\nint y = 10000;\nfloat f = (float) x / y;\ndouble d = (double) x / y;\nSystem.out.println("f= " + f);'
p3741
aS'float z = x / (float) y;'
p3742
aS'double d = (double) x / y;\nSystem.out.println("f= " + f);'
p3743
aS'float f = (float) x / y;\ndouble d = (double) x / y;\nSystem.out.println("f= " + f);\nSystem.out.println("d= " + d);'
p3744
aS'int y = 10000;'
p3745
aS'int x = 1111111111;\nint y = 10000;\nfloat f = (float) x / y;'
p3746
aS'float z = x * 1.0 / y;'
p3747
aS'float f = (float) x / y;\ndouble d = (double) x / y;\nSystem.out.println("f= " + f);'
p3748
aS'int x = 1111111111;\nint y = 10000;'
p3749
aS'double d = (double) x / y;\nSystem.out.println("f= " + f);\nSystem.out.println("d= " + d);'
p3750
aS'System.out.println("f= " + f);'
p3751
aS'float z = (float) x / (float) y;'
p3752
aS'd = 111111.1111;'
p3753
aS'int y = 10000;\nfloat f = (float) x / y;\ndouble d = (double) x / y;\nSystem.out.println("f= " + f);'
p3754
aS'int x = 1111111111;\nint y = 10000;\nfloat f = (float) x / y;\ndouble d = (double) x / y;'
p3755
aS'int y = 10000;\nfloat f = (float) x / y;\ndouble d = (double) x / y;\nSystem.out.println("f= " + f);\nSystem.out.println("d= " + d);'
p3756
aS'double d = (double) x / y;'
p3757
aS'float f = (float) x / y;\ndouble d = (double) x / y;'
p3758
aS'f = 111111.12;'
p3759
aS'System.out.println("d= " + d);'
p3760
aS'int y = 10000;\nfloat f = (float) x / y;'
p3761
aS'int x = 1111111111;'
p3762
aS'float f = (float) x / y;'
p3763
atp3764
Rp3765
sI2564298
g1
((lp3766
S'String[] errorSoon = new String[2];\nerrorSoon[0] = "foo";'
p3767
aS'errorSoon[0] = "foo";\nerrorSoon[1] = "bar";'
p3768
aS'errorSoon[0] = "foo";'
p3769
aS'errorSoon[1] = "World";'
p3770
aS'String[] errorSoon;'
p3771
aS'String[] args = new String[] { "firstarg", "secondarg", "thirdarg" };'
p3772
aS'String[] errorSoon = new String[2];\nerrorSoon[0] = "Hello";\nerrorSoon[1] = "World";'
p3773
aS'String[] errorSoon = { "Hello", "World" };'
p3774
aS'String[] errorSoon = new String[2];\nerrorSoon[0] = "Hello";'
p3775
aS'String[] errorSoon = new String[2];\nerrorSoon[0] = "foo";\nerrorSoon[1] = "bar";'
p3776
aS'String[] errorSoon = new String[100];'
p3777
aS'errorSoon[1] = "bar";'
p3778
aS'String[] errorSoon = { "foo", "bar" };'
p3779
aS'errorSoon[0] = "Hello";\nerrorSoon[1] = "World";'
p3780
aS'String[] errorSoon;\nString[] errorSoon = new String[100];'
p3781
aS'errorSoon[0] = "Hello";'
p3782
aS'String[] errorSoon = new String[2];'
p3783
atp3784
Rp3785
sI4240080
g1
((lp3786
S'int lastIndex = s.length() - 1;\nString last = s.substring(lastIndex);\nString rest = s.substring(0, lastIndex);\nres = merge(permutation(rest), last);'
p3787
aS'String last = s.substring(lastIndex);'
p3788
aS'System.out.println(prefix);'
p3789
aS'private static void permutation(String prefix, String str) {\n    int n = str.length();\n    if (n == 0)\n        System.out.println(prefix);\n    else {\n        for (int i = 0; i < n; i++) permutation(prefix + str.charAt(i), str.substring(0, i) + str.substring(i + 1, n));\n    }\n}'
p3790
aS'ArrayList<String> res = new ArrayList<String>();\nif (s.length() == 1) {\n    res.add(s);\n} else if (s.length() > 1) {\n    int lastIndex = s.length() - 1;\n    String last = s.substring(lastIndex);\n}'
p3791
aS'int n = str.length();'
p3792
aS'int n = str.length();\nif (n == 0)\n    System.out.println(prefix);\nelse {\n    for (int i = 0; i < n; i++) permutation(prefix + str.charAt(i), str.substring(0, i) + str.substring(i + 1, n));\n}'
p3793
aS'int n = str.length();\nif (n == 0)\n    System.out.println(prefix);\nelse {\n}'
p3794
aS'if (n == 0)\n    System.out.println(prefix);\nelse {\n    for (int i = 0; i < n; i++) permutation(prefix + str.charAt(i), str.substring(0, i) + str.substring(i + 1, n));\n}'
p3795
aS'for (String s : list) {\n}'
p3796
aS'return res;'
p3797
aS'ArrayList<String> res = new ArrayList<String>();\nif (s.length() == 1) {\n    res.add(s);\n} else if (s.length() > 1) {\n    int lastIndex = s.length() - 1;\n    String last = s.substring(lastIndex);\n    String rest = s.substring(0, lastIndex);\n    res = merge(permutation(rest), last);\n}\nreturn res;'
p3798
aS'if (s.length() == 1) {\n    res.add(s);\n} else if (s.length() > 1) {\n    int lastIndex = s.length() - 1;\n    String last = s.substring(lastIndex);\n}'
p3799
aS'public static ArrayList<String> permutation(String s) {\n    ArrayList<String> res = new ArrayList<String>();\n    if (s.length() == 1) {\n        res.add(s);\n    } else if (s.length() > 1) {\n        int lastIndex = s.length() - 1;\n        String last = s.substring(lastIndex);\n        String rest = s.substring(0, lastIndex);\n        res = merge(permutation(rest), last);\n    }\n    return res;\n}'
p3800
aS'ArrayList<String> res = new ArrayList<String>();\nfor (String s : list) {\n    for (int i = 0; i <= s.length(); ++i) {\n        String ps = new StringBuffer(s).insert(i, c).toString();\n        res.add(ps);\n    }\n}\nreturn res;'
p3801
aS'if (s.length() == 1) {\n    res.add(s);\n} else if (s.length() > 1) {\n    int lastIndex = s.length() - 1;\n}'
p3802
aS'public static void permutation(String str) {\n    permutation("", str);\n}\nprivate static void permutation(String prefix, String str) {\n    int n = str.length();\n    if (n == 0)\n        System.out.println(prefix);\n    else {\n        for (int i = 0; i < n; i++) permutation(prefix + str.charAt(i), str.substring(0, i) + str.substring(i + 1, n));\n    }\n}'
p3803
aS'public static ArrayList<String> permutation(String s) {\n    ArrayList<String> res = new ArrayList<String>();\n    if (s.length() == 1) {\n        res.add(s);\n    } else if (s.length() > 1) {\n        int lastIndex = s.length() - 1;\n        String last = s.substring(lastIndex);\n        String rest = s.substring(0, lastIndex);\n        res = merge(permutation(rest), last);\n    }\n    return res;\n}\npublic static ArrayList<String> merge(ArrayList<String> list, String c) {\n    ArrayList<String> res = new ArrayList<String>();\n    for (String s : list) {\n        for (int i = 0; i <= s.length(); ++i) {\n            String ps = new StringBuffer(s).insert(i, c).toString();\n            res.add(ps);\n        }\n    }\n    return res;\n}'
p3804
aS'String rest = s.substring(0, lastIndex);\nres = merge(permutation(rest), last);'
p3805
aS'ArrayList<String> res = new ArrayList<String>();\nif (s.length() == 1) {\n}'
p3806
aS'for (int i = 0; i <= s.length(); ++i) {\n    String ps = new StringBuffer(s).insert(i, c).toString();\n}'
p3807
aS'ArrayList<String> res = new ArrayList<String>();\nif (s.length() == 1) {\n    res.add(s);\n} else if (s.length() > 1) {\n    int lastIndex = s.length() - 1;\n    String last = s.substring(lastIndex);\n    String rest = s.substring(0, lastIndex);\n}'
p3808
aS'String rest = s.substring(0, lastIndex);'
p3809
aS'for (int i = 0; i <= s.length(); ++i) {\n}'
p3810
aS'if (s.length() == 1) {\n    res.add(s);\n} else if (s.length() > 1) {\n}'
p3811
aS'if (s.length() == 1) {\n    res.add(s);\n} else if (s.length() > 1) {\n    int lastIndex = s.length() - 1;\n    String last = s.substring(lastIndex);\n    String rest = s.substring(0, lastIndex);\n    res = merge(permutation(rest), last);\n}\nreturn res;'
p3812
aS'String last = s.substring(lastIndex);\nString rest = s.substring(0, lastIndex);'
p3813
aS'int lastIndex = s.length() - 1;'
p3814
aS'res.add(ps);'
p3815
aS'for (int i = 0; i < n; i++) permutation(prefix + str.charAt(i), str.substring(0, i) + str.substring(i + 1, n));'
p3816
aS'ArrayList<String> res = new ArrayList<String>();'
p3817
aS'if (n == 0)\n    System.out.println(prefix);'
p3818
aS'public static ArrayList<String> merge(ArrayList<String> list, String c) {\n    ArrayList<String> res = new ArrayList<String>();\n    for (String s : list) {\n        for (int i = 0; i <= s.length(); ++i) {\n            String ps = new StringBuffer(s).insert(i, c).toString();\n            res.add(ps);\n        }\n    }\n    return res;\n}'
p3819
aS'for (int i = 0; i <= s.length(); ++i) {\n    String ps = new StringBuffer(s).insert(i, c).toString();\n    res.add(ps);\n}'
p3820
aS'int n = str.length();\nif (n == 0)\n    System.out.println(prefix);'
p3821
aS'if (s.length() == 1) {\n    res.add(s);\n}'
p3822
aS'if (n == 0) {\n}'
p3823
aS'String ps = new StringBuffer(s).insert(i, c).toString();\nres.add(ps);'
p3824
aS'for (String s : list) {\n    for (int i = 0; i <= s.length(); ++i) {\n        String ps = new StringBuffer(s).insert(i, c).toString();\n        res.add(ps);\n    }\n}\nreturn res;'
p3825
aS'ArrayList<String> res = new ArrayList<String>();\nif (s.length() == 1) {\n    res.add(s);\n} else if (s.length() > 1) {\n    int lastIndex = s.length() - 1;\n    String last = s.substring(lastIndex);\n    String rest = s.substring(0, lastIndex);\n    res = merge(permutation(rest), last);\n}'
p3826
aS'res = merge(permutation(rest), last);'
p3827
aS'int lastIndex = s.length() - 1;\nString last = s.substring(lastIndex);'
p3828
aS'ArrayList<String> res = new ArrayList<String>();\nif (s.length() == 1) {\n    res.add(s);\n} else if (s.length() > 1) {\n    int lastIndex = s.length() - 1;\n}'
p3829
aS'public static void permutation(String str) {\n    permutation("", str);\n}'
p3830
aS'ArrayList<String> res = new ArrayList<String>();\nif (s.length() == 1) {\n    res.add(s);\n}'
p3831
aS'for (String s : list) {\n    for (int i = 0; i <= s.length(); ++i) {\n        String ps = new StringBuffer(s).insert(i, c).toString();\n        res.add(ps);\n    }\n}'
p3832
aS'res.add(s);'
p3833
aS'if (s.length() == 1) {\n}'
p3834
aS'ArrayList<String> res = new ArrayList<String>();\nif (s.length() == 1) {\n    res.add(s);\n} else if (s.length() > 1) {\n}'
p3835
aS'if (n == 0)\n    System.out.println(prefix);\nelse {\n}'
p3836
aS'if (s.length() == 1) {\n    res.add(s);\n} else if (s.length() > 1) {\n    int lastIndex = s.length() - 1;\n    String last = s.substring(lastIndex);\n    String rest = s.substring(0, lastIndex);\n}'
p3837
aS'ArrayList<String> res = new ArrayList<String>();\nfor (String s : list) {\n    for (int i = 0; i <= s.length(); ++i) {\n        String ps = new StringBuffer(s).insert(i, c).toString();\n        res.add(ps);\n    }\n}'
p3838
aS'ArrayList<String> res = new ArrayList<String>();\nfor (String s : list) {\n}'
p3839
aS'permutation("", str);'
p3840
aS'String ps = new StringBuffer(s).insert(i, c).toString();'
p3841
aS'String last = s.substring(lastIndex);\nString rest = s.substring(0, lastIndex);\nres = merge(permutation(rest), last);'
p3842
aS'int lastIndex = s.length() - 1;\nString last = s.substring(lastIndex);\nString rest = s.substring(0, lastIndex);'
p3843
aS'if (s.length() == 1) {\n    res.add(s);\n} else if (s.length() > 1) {\n    int lastIndex = s.length() - 1;\n    String last = s.substring(lastIndex);\n    String rest = s.substring(0, lastIndex);\n    res = merge(permutation(rest), last);\n}'
p3844
atp3845
Rp3846
sI14145235
g1
((lp3847
S'do {\n    number = Integer.parseInt(JOptionPane.showInputDialog("Enter a number (-1 to stop)"));\n    if (number != -1)\n        numbers.add(number);\n} while (number != -1);'
p3848
aS'number = Integer.parseInt(JOptionPane.showInputDialog("Enter a number (-1 to stop)"));'
p3849
aS'numbers.add(number);'
p3850
aS'if (number != -1) {\n}'
p3851
aS'number = Integer.parseInt(JOptionPane.showInputDialog("Enter a number (-1 to stop)"));\nif (number != -1)\n    numbers.add(number);'
p3852
aS'if (number != -1)\n    numbers.add(number);'
p3853
atp3854
Rp3855
sI11409621
g1
((lp3856
S'for (int i = 1; i < 10; i += 2) {\n    for (int j = 0; j < i; j++) {\n        System.out.print("*");\n    }\n    System.out.println("");\n}'
p3857
aS'public void printTriangleLine(int rowNumber) {\n}'
p3858
aS'for (int k = 0; k < (4 - i / 2); k++) {\n    System.out.print(" ");\n}'
p3859
aS'System.out.println();\nprintTriangleLine(2);'
p3860
aS'public void printTriangleLine(int rowNumber) {\n    printSequence(" ", 5 - rowNumber);\n    printSequence("*", 2 * rowNumber + 1);\n    System.out.println();\n}'
p3861
aS'for (int i = 1; i < 10; i += 2) {\n}'
p3862
aS'for (int k = 0; k < (4 - i / 2); k++) {\n    System.out.print(" ");\n}\nfor (int j = 0; j < i; j++) {\n    System.out.print("*");\n}'
p3863
aS'printSequence(" ", 5 - rowNumber);\nprintSequence("*", 2 * rowNumber + 1);\nSystem.out.println();'
p3864
aS'for (int i = 0; i < repeats; i++) {\n    System.out.print(s);\n}'
p3865
aS'for (int j = 0; j < i; j++) {\n    System.out.print("*");\n}\nSystem.out.println("");'
p3866
aS'for (int i = 1; i < 10; i += 2) {\n    for (int j = 0; j < i; j++) {\n        System.out.print("*");\n    }\n}'
p3867
aS'printSequence(" ", 5 - rowNumber);'
p3868
aS'printSequence("a", 3);\nSystem.out.println();\nprintTriangleLine(2);'
p3869
aS'for (int j = 0; j < i; j++) {\n    System.out.print("*");\n}'
p3870
aS'printSequence("a", 3);'
p3871
aS'printTriangleLine(i);'
p3872
aS'for (int i = 0; i < repeats; i++) {\n}'
p3873
aS'for (int i = 0; i < 5; i++) {\n}'
p3874
aS'assertEquals("     *", TriangleDrawer.triangleLine(0));'
p3875
aS'assertEquals("   *****", TriangleDrawer.triangleLine(2));'
p3876
aS'printSequence("a", 3);\nSystem.out.println();'
p3877
aS'for (int k = 0; k < (4 - i / 2); k++) {\n}'
p3878
aS'public static void main(String[] args) {\n    printSequence("a", 3);\n    System.out.println();\n    printTriangleLine(2);\n}'
p3879
aS'public void drawTriangle() {\n    for (int i = 0; i < 5; i++) {\n        printTriangleLine(i);\n    }\n}'
p3880
aS'for (int i = 0; i < 5; i++) System.out.println("    *********".substring(i, 5 + 2 * i));'
p3881
aS'System.out.print("*");'
p3882
aS'System.out.print(s);'
p3883
aS'printTriangleLine(2);'
p3884
aS'printSequence(" ", 5 - rowNumber);\nprintSequence("*", 2 * rowNumber + 1);'
p3885
aS'for (int i = 1; i < 10; i += 2) {\n    for (int k = 0; k < (4 - i / 2); k++) {\n        System.out.print(" ");\n    }\n    for (int j = 0; j < i; j++) {\n        System.out.print("*");\n    }\n}'
p3886
aS'for (int i = 1; i < 10; i += 2) {\n    for (int k = 0; k < (4 - i / 2); k++) {\n        System.out.print(" ");\n    }\n}'
p3887
aS'for (int k = 0; k < (4 - i / 2); k++) {\n    System.out.print(" ");\n}\nfor (int j = 0; j < i; j++) {\n    System.out.print("*");\n}\nSystem.out.println("");'
p3888
aS'for (int i = 0; i < 5; i++) {\n    printTriangleLine(i);\n}'
p3889
aS'System.out.println("");'
p3890
aS'for (int k = 0; k < (4 - i / 2); k++) {\n    System.out.print(" ");\n}\nfor (int j = 0; j < i; j++) {\n}'
p3891
aS'System.out.println();'
p3892
aS'for (int j = 0; j < i; j++) {\n}'
p3893
aS'printSequence("*", 2 * rowNumber + 1);\nSystem.out.println();'
p3894
aS'System.out.print(" ");'
p3895
aS'public void printSequence(String s, int repeats) {\n    for (int i = 0; i < repeats; i++) {\n        System.out.print(s);\n    }\n}'
p3896
aS'for (int i = 1; i < 10; i += 2) {\n    for (int k = 0; k < (4 - i / 2); k++) {\n        System.out.print(" ");\n    }\n    for (int j = 0; j < i; j++) {\n        System.out.print("*");\n    }\n    System.out.println("");\n}'
p3897
aS'printSequence("*", 2 * rowNumber + 1);'
p3898
atp3899
Rp3900
sI3395286
g1
((lp3901
S'for (String serverId : serverIds) {\n    sb.append(prefix);\n    prefix = ",";\n}'
p3902
aS'String prefix = "";\nfor (String serverId : serverIds) {\n    sb.append(prefix);\n    prefix = ",";\n}'
p3903
aS'sb.append(prefix);'
p3904
aS'sb.setLength(sb.length() - 1);'
p3905
aS'prefix = ",";'
p3906
aS'if (sb.length() > 0) {\n    sb.setLength(sb.length() - 1);\n}'
p3907
aS'for (String serverId : serverIds) {\n    sb.append(prefix);\n}'
p3908
aS'sb.deleteCharAt(sb.length() - 1);'
p3909
aS'String prefix = "";\nfor (String serverId : serverIds) {\n}'
p3910
aS'for (String serverId : serverIds) {\n}'
p3911
aS'String prefix = "";\nfor (String serverId : serverIds) {\n    sb.append(prefix);\n}'
p3912
aS'sb.append(prefix);\nprefix = ",";'
p3913
aS'String prefix = "";\nfor (String serverId : serverIds) {\n    sb.append(prefix);\n    prefix = ",";\n    sb.append(serverId);\n}'
p3914
aS'prefix = ",";\nsb.append(serverId);'
p3915
aS'String prefix = "";'
p3916
aS'sb.append(prefix);\nprefix = ",";\nsb.append(serverId);'
p3917
aS'sb.setLength(Math.max(sb.length() - 1, 0));'
p3918
aS'for (String serverId : serverIds) {\n    sb.append(prefix);\n    prefix = ",";\n    sb.append(serverId);\n}'
p3919
aS'sb.append(serverId);'
p3920
aS'if (sb.length() > 0) {\n}'
p3921
atp3922
Rp3923
sI2843366
g1
((lp3924
S'String[] arr = { "1", "2", "3" };\nSystem.out.println(Arrays.toString(arr));\narr = append(arr, "4");\nSystem.out.println(Arrays.toString(arr));'
p3925
aS'List<String> where = new ArrayList<String>();\nwhere.add(ContactsContract.Contacts.HAS_PHONE_NUMBER + "=1");\nwhere.add(ContactsContract.Contacts.IN_VISIBLE_GROUP + "=1");'
p3926
aS'String[] arr = { "1", "2", "3" };'
p3927
aS'list.add("3");'
p3928
aS'return arr;'
p3929
aS'String[] arr = { "1", "2", "3" };\nSystem.out.println(Arrays.toString(arr));\narr = append(arr, "4");'
p3930
aS'where.toArray(simpleArray);'
p3931
aS'String[] simpleArray = new String[where.size()];'
p3932
aS'System.out.println(list);'
p3933
aS'import java.util.*;'
p3934
aS'List<String> list = new ArrayList<String>();\nlist.add("1");\nlist.add("2");'
p3935
aS'static <T> T[] append(T[] arr, T element) {\n    final int N = arr.length;\n    arr = Arrays.copyOf(arr, N + 1);\n    arr[N] = element;\n    return arr;\n}\nString[] arr = { "1", "2", "3" };'
p3936
aS'arr = Arrays.copyOf(arr, N + 1);\narr[N] = element;\nreturn arr;'
p3937
aS'System.out.println(Arrays.toString(arr));\narr = append(arr, "4");\nSystem.out.println(Arrays.toString(arr));'
p3938
aS'where.add(ContactsContract.Contacts.HAS_PHONE_NUMBER + "=1");\nwhere.add(ContactsContract.Contacts.IN_VISIBLE_GROUP + "=1");'
p3939
aS'String[] where = new String[] { ContactsContract.Contacts.HAS_PHONE_NUMBER + "=1", ContactsContract.Contacts.IN_VISIBLE_GROUP + "=1" };'
p3940
aS'list.add("1");'
p3941
aS'list.add("2");\nlist.add("3");\nSystem.out.println(list);'
p3942
aS'arr = Arrays.copyOf(arr, N + 1);\narr[N] = element;'
p3943
aS'List<String> list = new ArrayList<String>();\nlist.add("1");'
p3944
aS'list.add("1");\nlist.add("2");\nlist.add("3");'
p3945
aS'arr[N] = element;\nreturn arr;'
p3946
aS'static <T> T[] append(T[] arr, T element) {\n    final int N = arr.length;\n    arr = Arrays.copyOf(arr, N + 1);\n    arr[N] = element;\n    return arr;\n}'
p3947
aS'List<String> where = new ArrayList<String>();\nwhere.add(ContactsContract.Contacts.HAS_PHONE_NUMBER + "=1");'
p3948
aS'List<String> list = new ArrayList<String>();\nlist.add("1");\nlist.add("2");\nlist.add("3");'
p3949
aS'final int N = arr.length;'
p3950
aS'String[] arr = { "1", "2", "3" };\nSystem.out.println(Arrays.toString(arr));'
p3951
aS'where.get(1);'
p3952
aS'System.out.println(Arrays.toString(arr));\narr = append(arr, "4");'
p3953
aS'List<String> list = new ArrayList<String>();'
p3954
aS'list.add("3");\nSystem.out.println(list);'
p3955
aS'String[] simpleArray = new String[where.size()];\nwhere.toArray(simpleArray);'
p3956
aS'final int N = arr.length;\narr = Arrays.copyOf(arr, N + 1);\narr[N] = element;'
p3957
aS'list.add("2");'
p3958
aS'List<String> list = new ArrayList<String>();\nlist.add("1");\nlist.add("2");\nlist.add("3");\nSystem.out.println(list);'
p3959
aS'list.add("1");\nlist.add("2");\nlist.add("3");\nSystem.out.println(list);'
p3960
aS'arr = append(arr, "4");\nSystem.out.println(Arrays.toString(arr));'
p3961
aS'for (String oneItem : where) {\n}'
p3962
aS'final int N = arr.length;\narr = Arrays.copyOf(arr, N + 1);\narr[N] = element;\nreturn arr;'
p3963
aS'where.add(ContactsContract.Contacts.HAS_PHONE_NUMBER + "=1");'
p3964
aS'List<String> where = new ArrayList<String>();'
p3965
aS'where.add(ContactsContract.Contacts.IN_VISIBLE_GROUP + "=1");'
p3966
aS'list.add("2");\nlist.add("3");'
p3967
aS'arr = append(arr, "4");'
p3968
aS'System.out.println(Arrays.toString(arr));'
p3969
aS'list.add("1");\nlist.add("2");'
p3970
aS'arr[N] = element;'
p3971
aS'arr = Arrays.copyOf(arr, N + 1);'
p3972
aS'final int N = arr.length;\narr = Arrays.copyOf(arr, N + 1);'
p3973
atp3974
Rp3975
sI17940200
g1
((lp3976
S'DateTime startTime, endTime;\nPeriod p = new Period(startTime, endTime);\nlong hours = p.getHours();\nlong minutes = p.getMinutes();'
p3977
aS'long diffInMinutes = TimeUnit.MILLISECONDS.toMinutes(duration);\nlong diffInHours = TimeUnit.MILLISECONDS.toHours(duration);'
p3978
aS'long diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n}'
p3979
aS'DateTime startTime, endTime;\nPeriod p = new Period(startTime, endTime);\nlong hours = p.getHours();'
p3980
aS'Interval interval = new Interval(oldTime, new Instant());'
p3981
aS'if (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n}'
p3982
aS'long minutes = dur.toMinutes();'
p3983
aS'long diff = dt2.getTime() - dt1.getTime();\nlong diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n}'
p3984
aS'Instant start, end;\nDuration dur = Duration.between(start, stop);'
p3985
aS'long diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n} else if ((diffHours == 24) && (diffMinutes >= 1)) {\n    System.err.println("minutes");\n    return false;\n}\nreturn true;'
p3986
aS'if (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n} else if ((diffHours == 24) && (diffMinutes >= 1)) {\n    System.err.println("minutes");\n}'
p3987
aS'long diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);'
p3988
aS'long diff = dt2.getTime() - dt1.getTime();\nlong diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n}'
p3989
aS'{\n    Date dt2 = new DateAndTime().getCurrentDateTime();\n    long diff = dt2.getTime() - dt1.getTime();\n    long diffSeconds = diff / 1000 % 60;\n    long diffMinutes = diff / (60 * 1000) % 60;\n    long diffHours = diff / (60 * 60 * 1000);\n    int diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\n    if (diffInDays > 1) {\n        System.err.println("Difference in number of days (2) : " + diffInDays);\n        return false;\n    } else if (diffHours > 24) {\n        System.err.println(">24");\n        return false;\n    } else if ((diffHours == 24) && (diffMinutes >= 1)) {\n        System.err.println("minutes");\n        return false;\n    }\n}'
p3990
aS'long diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n}'
p3991
aS'Date dt2 = new DateAndTime().getCurrentDateTime();\nlong diff = dt2.getTime() - dt1.getTime();\nlong diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n}'
p3992
aS'{\n    Date dt2 = new DateAndTime().getCurrentDateTime();\n    long diff = dt2.getTime() - dt1.getTime();\n    long diffSeconds = diff / 1000 % 60;\n}'
p3993
aS'long diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n}'
p3994
aS'{\n    Date dt2 = new DateAndTime().getCurrentDateTime();\n    long diff = dt2.getTime() - dt1.getTime();\n    long diffSeconds = diff / 1000 % 60;\n    long diffMinutes = diff / (60 * 1000) % 60;\n    long diffHours = diff / (60 * 60 * 1000);\n    int diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\n    if (diffInDays > 1) {\n        System.err.println("Difference in number of days (2) : " + diffInDays);\n        return false;\n    } else if (diffHours > 24) {\n        System.err.println(">24");\n        return false;\n    } else if ((diffHours == 24) && (diffMinutes >= 1)) {\n        System.err.println("minutes");\n        return false;\n    }\n    return true;\n}'
p3995
aS'long minutes = p.getMinutes();'
p3996
aS'long diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n}'
p3997
aS'long diff = dt2.getTime() - dt1.getTime();\nlong diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));'
p3998
aS'long diff = dt2.getTime() - dt1.getTime();\nlong diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n} else if ((diffHours == 24) && (diffMinutes >= 1)) {\n    System.err.println("minutes");\n    return false;\n}'
p3999
aS'return false;'
p4000
aS'long diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n} else if ((diffHours == 24) && (diffMinutes >= 1)) {\n    System.err.println("minutes");\n}'
p4001
aS'long diffInHours = TimeUnit.MILLISECONDS.toHours(duration);'
p4002
aS'long diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n}'
p4003
aS'long diffSeconds = diff / 1000 % 60;'
p4004
aS'long diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;'
p4005
aS'long diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n} else if ((diffHours == 24) && (diffMinutes >= 1)) {\n}'
p4006
aS'System.err.println(">24");\nreturn false;'
p4007
aS'Date dt2 = new DateAndTime().getCurrentDateTime();\nlong diff = dt2.getTime() - dt1.getTime();\nlong diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;'
p4008
aS'long diff = dt2.getTime() - dt1.getTime();'
p4009
aS'if (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n}'
p4010
aS'long diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));'
p4011
aS'System.err.println(">24");'
p4012
aS'long diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n}'
p4013
aS'Date dt2 = new DateAndTime().getCurrentDateTime();\nlong diff = dt2.getTime() - dt1.getTime();\nlong diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n} else if ((diffHours == 24) && (diffMinutes >= 1)) {\n    System.err.println("minutes");\n    return false;\n}'
p4014
aS'Date dt2 = new DateAndTime().getCurrentDateTime();\nlong diff = dt2.getTime() - dt1.getTime();\nlong diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n} else if ((diffHours == 24) && (diffMinutes >= 1)) {\n    System.err.println("minutes");\n    return false;\n}\nreturn true;'
p4015
aS'if (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n}'
p4016
aS'long diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));'
p4017
aS'long hours = p.getHours();'
p4018
aS'long diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));'
p4019
aS'long diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n}'
p4020
aS'long diff = dt2.getTime() - dt1.getTime();\nlong diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n}'
p4021
aS'int diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));'
p4022
aS'long diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n}'
p4023
aS'long diff = dt2.getTime() - dt1.getTime();\nlong diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n} else if ((diffHours == 24) && (diffMinutes >= 1)) {\n    System.err.println("minutes");\n}'
p4024
aS'long diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n} else if ((diffHours == 24) && (diffMinutes >= 1)) {\n    System.err.println("minutes");\n}'
p4025
aS'DateTime startTime, endTime;'
p4026
aS'Date dt2 = new DateAndTime().getCurrentDateTime();\nlong diff = dt2.getTime() - dt1.getTime();\nlong diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n}'
p4027
aS'Date dt2 = new DateAndTime().getCurrentDateTime();\nlong diff = dt2.getTime() - dt1.getTime();\nlong diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);'
p4028
aS'long diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);'
p4029
aS'Duration dur = Duration.between(start, stop);\nlong hours = dur.toHours();'
p4030
aS'Period p = new Period(startTime, endTime);\nlong hours = p.getHours();\nlong minutes = p.getMinutes();'
p4031
aS'long diff = dt2.getTime() - dt1.getTime();\nlong diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n}'
p4032
aS'Date dt2 = new DateAndTime().getCurrentDateTime();\nlong diff = dt2.getTime() - dt1.getTime();\nlong diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n}'
p4033
aS'Date dt2 = new DateAndTime().getCurrentDateTime();\nlong diff = dt2.getTime() - dt1.getTime();\nlong diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));'
p4034
aS'long diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n}'
p4035
aS'long diffHours = diff / (60 * 60 * 1000);'
p4036
aS'int diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n} else if ((diffHours == 24) && (diffMinutes >= 1)) {\n    System.err.println("minutes");\n    return false;\n}\nreturn true;'
p4037
aS'long diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n} else if ((diffHours == 24) && (diffMinutes >= 1)) {\n}'
p4038
aS'if (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n} else if ((diffHours == 24) && (diffMinutes >= 1)) {\n    System.err.println("minutes");\n    return false;\n}\nreturn true;'
p4039
aS'int diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n}'
p4040
aS'long diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n}'
p4041
aS'Duration dur = Duration.between(start, stop);'
p4042
aS'long hours = dur.toHours();\nlong minutes = dur.toMinutes();'
p4043
aS'long diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n}'
p4044
aS'Date dt2 = new DateAndTime().getCurrentDateTime();\nlong diff = dt2.getTime() - dt1.getTime();\nlong diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n}'
p4045
aS'Instant start, end;\nDuration dur = Duration.between(start, stop);\nlong hours = dur.toHours();\nlong minutes = dur.toMinutes();'
p4046
aS'int diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n}'
p4047
aS'long duration = endDate.getTime() - startDate.getTime();'
p4048
aS'long diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n} else if ((diffHours == 24) && (diffMinutes >= 1)) {\n    System.err.println("minutes");\n    return false;\n}\nreturn true;'
p4049
aS'long diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n}'
p4050
aS'Date dt2 = new DateAndTime().getCurrentDateTime();\nlong diff = dt2.getTime() - dt1.getTime();\nlong diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n}'
p4051
aS'long diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n} else if ((diffHours == 24) && (diffMinutes >= 1)) {\n    System.err.println("minutes");\n    return false;\n}'
p4052
aS'long diffInSeconds = TimeUnit.MILLISECONDS.toSeconds(duration);'
p4053
aS'int diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n}'
p4054
aS'long diff = dt2.getTime() - dt1.getTime();\nlong diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);'
p4055
aS'Date dt2 = new DateAndTime().getCurrentDateTime();\nlong diff = dt2.getTime() - dt1.getTime();\nlong diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n} else if ((diffHours == 24) && (diffMinutes >= 1)) {\n    System.err.println("minutes");\n}'
p4056
aS'{\n}'
p4057
aS'long hours = dur.toHours();'
p4058
aS'long diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n} else if ((diffHours == 24) && (diffMinutes >= 1)) {\n    System.err.println("minutes");\n    return false;\n}'
p4059
aS'{\n    Date dt2 = new DateAndTime().getCurrentDateTime();\n}'
p4060
aS'int diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n}'
p4061
aS'long diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n}'
p4062
aS'System.err.println("minutes");\nreturn false;'
p4063
aS'int diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n} else if ((diffHours == 24) && (diffMinutes >= 1)) {\n    System.err.println("minutes");\n    return false;\n}'
p4064
aS'System.err.println("Difference in number of days (2) : " + diffInDays);\nreturn false;'
p4065
aS'long duration = endDate.getTime() - startDate.getTime();\nlong diffInSeconds = TimeUnit.MILLISECONDS.toSeconds(duration);\nlong diffInMinutes = TimeUnit.MILLISECONDS.toMinutes(duration);\nlong diffInHours = TimeUnit.MILLISECONDS.toHours(duration);'
p4066
aS'long diffMinutes = diff / (60 * 1000) % 60;'
p4067
aS'Date dt2 = new DateAndTime().getCurrentDateTime();\nlong diff = dt2.getTime() - dt1.getTime();\nlong diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n} else if ((diffHours == 24) && (diffMinutes >= 1)) {\n}'
p4068
aS'Date dt2 = new DateAndTime().getCurrentDateTime();\nlong diff = dt2.getTime() - dt1.getTime();\nlong diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n}'
p4069
aS'if (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n} else if ((diffHours == 24) && (diffMinutes >= 1)) {\n}'
p4070
aS'int diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n} else if ((diffHours == 24) && (diffMinutes >= 1)) {\n    System.err.println("minutes");\n}'
p4071
aS'long diffInSeconds = TimeUnit.MILLISECONDS.toSeconds(duration);\nlong diffInMinutes = TimeUnit.MILLISECONDS.toMinutes(duration);'
p4072
aS'long diff = dt2.getTime() - dt1.getTime();\nlong diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n}'
p4073
aS'int diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n} else if ((diffHours == 24) && (diffMinutes >= 1)) {\n}'
p4074
aS'{\n    Date dt2 = new DateAndTime().getCurrentDateTime();\n    long diff = dt2.getTime() - dt1.getTime();\n    long diffSeconds = diff / 1000 % 60;\n    long diffMinutes = diff / (60 * 1000) % 60;\n    long diffHours = diff / (60 * 60 * 1000);\n    int diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\n}'
p4075
aS'if (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n} else if ((diffHours == 24) && (diffMinutes >= 1)) {\n    System.err.println("minutes");\n    return false;\n}'
p4076
aS'Period p = new Period(startTime, endTime);\nlong hours = p.getHours();'
p4077
aS'System.err.println("minutes");'
p4078
aS'if (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n}'
p4079
aS'long diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n} else if ((diffHours == 24) && (diffMinutes >= 1)) {\n    System.err.println("minutes");\n}'
p4080
aS'System.err.println("Difference in number of days (2) : " + diffInDays);'
p4081
aS'long diffInMinutes = TimeUnit.MILLISECONDS.toMinutes(duration);'
p4082
aS'long diff = dt2.getTime() - dt1.getTime();\nlong diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;'
p4083
aS'long duration = endDate.getTime() - startDate.getTime();\nlong diffInSeconds = TimeUnit.MILLISECONDS.toSeconds(duration);\nlong diffInMinutes = TimeUnit.MILLISECONDS.toMinutes(duration);'
p4084
aS'int diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n}'
p4085
aS'long hours = p.getHours();\nlong minutes = p.getMinutes();'
p4086
aS'long diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n} else if ((diffHours == 24) && (diffMinutes >= 1)) {\n    System.err.println("minutes");\n    return false;\n}'
p4087
aS'Instant start, end;\nDuration dur = Duration.between(start, stop);\nlong hours = dur.toHours();'
p4088
aS'Duration dur = Duration.between(start, stop);\nlong hours = dur.toHours();\nlong minutes = dur.toMinutes();'
p4089
aS'long diff = dt2.getTime() - dt1.getTime();\nlong diffSeconds = diff / 1000 % 60;'
p4090
aS'long duration = endDate.getTime() - startDate.getTime();\nlong diffInSeconds = TimeUnit.MILLISECONDS.toSeconds(duration);'
p4091
aS'DateTime startTime, endTime;\nPeriod p = new Period(startTime, endTime);'
p4092
aS'if (diffInDays > 1) {\n}'
p4093
aS'{\n    Date dt2 = new DateAndTime().getCurrentDateTime();\n    long diff = dt2.getTime() - dt1.getTime();\n}'
p4094
aS'if (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n}'
p4095
aS'long diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n}'
p4096
aS'long diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n}'
p4097
aS'Date dt2 = new DateAndTime().getCurrentDateTime();\nlong diff = dt2.getTime() - dt1.getTime();'
p4098
aS'long diff = dt2.getTime() - dt1.getTime();\nlong diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n} else if ((diffHours == 24) && (diffMinutes >= 1)) {\n    System.err.println("minutes");\n    return false;\n}\nreturn true;'
p4099
aS'long diff = dt2.getTime() - dt1.getTime();\nlong diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n}'
p4100
aS'return true;'
p4101
aS'Date dt2 = new DateAndTime().getCurrentDateTime();'
p4102
aS'Instant start, end;'
p4103
aS'{\n    Date dt2 = new DateAndTime().getCurrentDateTime();\n    long diff = dt2.getTime() - dt1.getTime();\n    long diffSeconds = diff / 1000 % 60;\n    long diffMinutes = diff / (60 * 1000) % 60;\n    long diffHours = diff / (60 * 60 * 1000);\n}'
p4104
aS'Date dt2 = new DateAndTime().getCurrentDateTime();\nlong diff = dt2.getTime() - dt1.getTime();\nlong diffSeconds = diff / 1000 % 60;'
p4105
aS'long diff = dt2.getTime() - dt1.getTime();\nlong diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n} else if ((diffHours == 24) && (diffMinutes >= 1)) {\n}'
p4106
aS'Period p = new Period(startTime, endTime);'
p4107
aS'long diffInSeconds = TimeUnit.MILLISECONDS.toSeconds(duration);\nlong diffInMinutes = TimeUnit.MILLISECONDS.toMinutes(duration);\nlong diffInHours = TimeUnit.MILLISECONDS.toHours(duration);'
p4108
aS'long diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n}'
p4109
aS'long diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n} else if ((diffHours == 24) && (diffMinutes >= 1)) {\n}'
p4110
aS'long diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n    System.err.println(">24");\n    return false;\n} else if ((diffHours == 24) && (diffMinutes >= 1)) {\n    System.err.println("minutes");\n    return false;\n}\nreturn true;'
p4111
aS'{\n    Date dt2 = new DateAndTime().getCurrentDateTime();\n    long diff = dt2.getTime() - dt1.getTime();\n    long diffSeconds = diff / 1000 % 60;\n    long diffMinutes = diff / (60 * 1000) % 60;\n}'
p4112
aS'long diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n    return false;\n} else if (diffHours > 24) {\n}'
p4113
aS'long diffSeconds = diff / 1000 % 60;\nlong diffMinutes = diff / (60 * 1000) % 60;\nlong diffHours = diff / (60 * 60 * 1000);\nint diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n}'
p4114
aS'int diffInDays = (int) ((dt2.getTime() - dt1.getTime()) / (1000 * 60 * 60 * 24));\nif (diffInDays > 1) {\n    System.err.println("Difference in number of days (2) : " + diffInDays);\n}'
p4115
atp4116
Rp4117
sI248562
g1
((lp4118
S'public class SecurityContextHolderFacade implements SecurityContextFacade {\n\n    public SecurityContext getContext() {\n        return SecurityContextHolder.getContext();\n    }\n\n    public void setContext(SecurityContext securityContext) {\n        SecurityContextHolder.setContext(securityContext);\n    }\n}'
p4119
aS'private SecurityContextFacade mockSecurityContextFacade;'
p4120
aS'public void testDoSomething() {\n    controller.doSomething();\n    verify(mockSecurityContextFacade).getContext();\n}'
p4121
aS'public class FooController {\n\n    private final SecurityContextFacade securityContextFacade;\n\n    public FooController(SecurityContextFacade securityContextFacade) {\n        this.securityContextFacade = securityContextFacade;\n    }\n\n    public void doSomething() {\n        SecurityContext context = securityContextFacade.getContext();\n    }\n}'
p4122
aS'SecurityContext getContext();\nvoid setContext(SecurityContext securityContext);'
p4123
aS'public void setUp() throws Exception {\n    mockSecurityContextFacade = mock(SecurityContextFacade.class);\n    mockSecurityContext = mock(SecurityContext.class);\n    stub(mockSecurityContextFacade.getContext()).toReturn(mockSecurityContext);\n    controller = new FooController(mockSecurityContextFacade);\n}\n@Test\npublic void testDoSomething() {\n    controller.doSomething();\n    verify(mockSecurityContextFacade).getContext();\n}'
p4124
aS'public ModelAndView showResults(final HttpServletRequest request, Principal principal) {\n    final String currentUser = principal.getName();\n}'
p4125
aS'public interface SecurityContextFacade {\n\n    SecurityContext getContext();\n\n    void setContext(SecurityContext securityContext);\n}'
p4126
aS'stub(mockSecurityContextFacade.getContext()).toReturn(mockSecurityContext);'
p4127
aS'controller.doSomething();\nverify(mockSecurityContextFacade).getContext();'
p4128
aS'private final SecurityContextFacade securityContextFacade;\npublic FooController(SecurityContextFacade securityContextFacade) {\n    this.securityContextFacade = securityContextFacade;\n}\npublic void doSomething() {\n    SecurityContext context = securityContextFacade.getContext();\n}'
p4129
aS'@Before\npublic void setUp() throws Exception {\n    mockSecurityContextFacade = mock(SecurityContextFacade.class);\n    mockSecurityContext = mock(SecurityContext.class);\n    stub(mockSecurityContextFacade.getContext()).toReturn(mockSecurityContext);\n    controller = new FooController(mockSecurityContextFacade);\n}\n@Test\npublic void testDoSomething() {\n    controller.doSomething();\n    verify(mockSecurityContextFacade).getContext();\n}'
p4130
aS'private SecurityContext mockSecurityContext;\n@Before\npublic void setUp() throws Exception {\n    mockSecurityContextFacade = mock(SecurityContextFacade.class);\n    mockSecurityContext = mock(SecurityContext.class);\n    stub(mockSecurityContextFacade.getContext()).toReturn(mockSecurityContext);\n    controller = new FooController(mockSecurityContextFacade);\n}'
p4131
aS'controller.doSomething();'
p4132
aS'verify(mockSecurityContextFacade).getContext();'
p4133
aS'mockSecurityContextFacade = mock(SecurityContextFacade.class);'
p4134
aS'private SecurityContext mockSecurityContext;'
p4135
aS'mockSecurityContextFacade = mock(SecurityContextFacade.class);\nmockSecurityContext = mock(SecurityContext.class);'
p4136
aS'controller = new FooController(mockSecurityContextFacade);'
p4137
aS'private SecurityContext mockSecurityContext;\n@Before\npublic void setUp() throws Exception {\n    mockSecurityContextFacade = mock(SecurityContextFacade.class);\n    mockSecurityContext = mock(SecurityContext.class);\n    stub(mockSecurityContextFacade.getContext()).toReturn(mockSecurityContext);\n    controller = new FooController(mockSecurityContextFacade);\n}\n@Test\npublic void testDoSomething() {\n    controller.doSomething();\n    verify(mockSecurityContextFacade).getContext();\n}'
p4138
aS'private SecurityContextFacade mockSecurityContextFacade;\nprivate SecurityContext mockSecurityContext;\n@Before\npublic void setUp() throws Exception {\n    mockSecurityContextFacade = mock(SecurityContextFacade.class);\n    mockSecurityContext = mock(SecurityContext.class);\n    stub(mockSecurityContextFacade.getContext()).toReturn(mockSecurityContext);\n    controller = new FooController(mockSecurityContextFacade);\n}'
p4139
aS'final String currentUser = principal.getName();'
p4140
aS'public FooController(SecurityContextFacade securityContextFacade) {\n    this.securityContextFacade = securityContextFacade;\n}\npublic void doSomething() {\n    SecurityContext context = securityContextFacade.getContext();\n}'
p4141
aS'public SecurityContext getContext() {\n    return SecurityContextHolder.getContext();\n}'
p4142
aS'private FooController controller;\nprivate SecurityContextFacade mockSecurityContextFacade;\nprivate SecurityContext mockSecurityContext;\n@Before\npublic void setUp() throws Exception {\n    mockSecurityContextFacade = mock(SecurityContextFacade.class);\n    mockSecurityContext = mock(SecurityContext.class);\n    stub(mockSecurityContextFacade.getContext()).toReturn(mockSecurityContext);\n    controller = new FooController(mockSecurityContextFacade);\n}\n@Test\npublic void testDoSomething() {\n    controller.doSomething();\n    verify(mockSecurityContextFacade).getContext();\n}'
p4143
aS'mockSecurityContextFacade = mock(SecurityContextFacade.class);\nmockSecurityContext = mock(SecurityContext.class);\nstub(mockSecurityContextFacade.getContext()).toReturn(mockSecurityContext);\ncontroller = new FooController(mockSecurityContextFacade);'
p4144
aS'private FooController controller;\nprivate SecurityContextFacade mockSecurityContextFacade;'
p4145
aS'stub(mockSecurityContextFacade.getContext()).toReturn(mockSecurityContext);\ncontroller = new FooController(mockSecurityContextFacade);'
p4146
aS'public void setUp() throws Exception {\n    mockSecurityContextFacade = mock(SecurityContextFacade.class);\n    mockSecurityContext = mock(SecurityContext.class);\n    stub(mockSecurityContextFacade.getContext()).toReturn(mockSecurityContext);\n    controller = new FooController(mockSecurityContextFacade);\n}'
p4147
aS'SecurityContext context = securityContextFacade.getContext();'
p4148
aS'public void setContext(SecurityContext securityContext) {\n    SecurityContextHolder.setContext(securityContext);\n}'
p4149
aS'public FooController(SecurityContextFacade securityContextFacade) {\n    this.securityContextFacade = securityContextFacade;\n}'
p4150
aS'private FooController controller;\nprivate SecurityContextFacade mockSecurityContextFacade;\nprivate SecurityContext mockSecurityContext;'
p4151
aS'@Test\npublic void testDoSomething() {\n    controller.doSomething();\n    verify(mockSecurityContextFacade).getContext();\n}'
p4152
aS'public class FooControllerTest {\n\n    private FooController controller;\n\n    private SecurityContextFacade mockSecurityContextFacade;\n\n    private SecurityContext mockSecurityContext;\n\n    @Before\n    public void setUp() throws Exception {\n        mockSecurityContextFacade = mock(SecurityContextFacade.class);\n        mockSecurityContext = mock(SecurityContext.class);\n        stub(mockSecurityContextFacade.getContext()).toReturn(mockSecurityContext);\n        controller = new FooController(mockSecurityContextFacade);\n    }\n\n    @Test\n    public void testDoSomething() {\n        controller.doSomething();\n        verify(mockSecurityContextFacade).getContext();\n    }\n}'
p4153
aS'SecurityContextHolder.setContext(securityContext);'
p4154
aS'SecurityContext getContext();'
p4155
aS'mockSecurityContext = mock(SecurityContext.class);\nstub(mockSecurityContextFacade.getContext()).toReturn(mockSecurityContext);\ncontroller = new FooController(mockSecurityContextFacade);'
p4156
aS'this.securityContextFacade = securityContextFacade;'
p4157
aS'public SecurityContext getContext() {\n    return SecurityContextHolder.getContext();\n}\npublic void setContext(SecurityContext securityContext) {\n    SecurityContextHolder.setContext(securityContext);\n}'
p4158
aS'void setContext(SecurityContext securityContext);'
p4159
aS'private SecurityContextFacade mockSecurityContextFacade;\nprivate SecurityContext mockSecurityContext;'
p4160
aS'@Before\npublic void setUp() throws Exception {\n    mockSecurityContextFacade = mock(SecurityContextFacade.class);\n    mockSecurityContext = mock(SecurityContext.class);\n    stub(mockSecurityContextFacade.getContext()).toReturn(mockSecurityContext);\n    controller = new FooController(mockSecurityContextFacade);\n}'
p4161
aS'@RequestMapping(method = RequestMethod.GET)\npublic ModelAndView showResults(final HttpServletRequest request, Principal principal) {\n    final String currentUser = principal.getName();\n}'
p4162
aS'private SecurityContextFacade mockSecurityContextFacade;\nprivate SecurityContext mockSecurityContext;\n@Before\npublic void setUp() throws Exception {\n    mockSecurityContextFacade = mock(SecurityContextFacade.class);\n    mockSecurityContext = mock(SecurityContext.class);\n    stub(mockSecurityContextFacade.getContext()).toReturn(mockSecurityContext);\n    controller = new FooController(mockSecurityContextFacade);\n}\n@Test\npublic void testDoSomething() {\n    controller.doSomething();\n    verify(mockSecurityContextFacade).getContext();\n}'
p4163
aS'mockSecurityContext = mock(SecurityContext.class);'
p4164
aS'private final SecurityContextFacade securityContextFacade;\npublic FooController(SecurityContextFacade securityContextFacade) {\n    this.securityContextFacade = securityContextFacade;\n}'
p4165
aS'mockSecurityContextFacade = mock(SecurityContextFacade.class);\nmockSecurityContext = mock(SecurityContext.class);\nstub(mockSecurityContextFacade.getContext()).toReturn(mockSecurityContext);'
p4166
aS'private FooController controller;\nprivate SecurityContextFacade mockSecurityContextFacade;\nprivate SecurityContext mockSecurityContext;\n@Before\npublic void setUp() throws Exception {\n    mockSecurityContextFacade = mock(SecurityContextFacade.class);\n    mockSecurityContext = mock(SecurityContext.class);\n    stub(mockSecurityContextFacade.getContext()).toReturn(mockSecurityContext);\n    controller = new FooController(mockSecurityContextFacade);\n}'
p4167
aS'private FooController controller;'
p4168
aS'public void doSomething() {\n    SecurityContext context = securityContextFacade.getContext();\n}'
p4169
aS'private final SecurityContextFacade securityContextFacade;'
p4170
aS'return SecurityContextHolder.getContext();'
p4171
aS'mockSecurityContext = mock(SecurityContext.class);\nstub(mockSecurityContextFacade.getContext()).toReturn(mockSecurityContext);'
p4172
atp4173
Rp4174
sI3605237
g1
((lp4175
S'public static <K, V extends Comparable<? super V>> Comparator<K> mapValueComparator(final Map<K, V> map) {\n    return new Comparator<K>() {\n\n        public int compare(K key1, K key2) {\n            return map.get(key1).compareTo(map.get(key2));\n        }\n    };\n}\npublic static <K, V> Comparator<K> mapValueComparator(final Map<K, V> map, final Comparator<V> comparator) {\n    return new Comparator<K>() {\n\n        public int compare(K key1, K key2) {\n            return comparator.compare(map.get(key1), map.get(key2));\n        }\n    };\n}'
p4176
aS'while (i.hasNext()) {\n    String key = i.next().getKey();\n}'
p4177
aS'Collections.sort(keys, someComparator);\nfor (String key : keys) {\n    System.out.println(key + ": " + map.get(key));\n}'
p4178
aS'public static <K, V> Comparator<K> mapValueComparator(final Map<K, V> map, final Comparator<V> comparator) {\n    return new Comparator<K>() {\n\n        public int compare(K key1, K key2) {\n            return comparator.compare(map.get(key1), map.get(key2));\n        }\n    };\n}'
p4179
aS'Collections.sort(keys, someComparator);\nfor (String key : keys) {\n}'
p4180
aS'String key = i.next().getKey();'
p4181
aS'for (Map.Entry entry : reversedMap.entrySet()) {\n}'
p4182
aS'List<String> keys = new ArrayList<String>(map.keySet());\nCollections.sort(keys, someComparator);\nfor (String key : keys) {\n}'
p4183
aS'while (i.hasNext()) {\n}'
p4184
aS'return new Comparator<K>() {\n\n    public int compare(K key1, K key2) {\n        return map.get(key1).compareTo(map.get(key2));\n    }\n};'
p4185
aS'List<String> keys = new ArrayList<String>(map.keySet());'
p4186
aS'public static <K, V extends Comparable<? super V>> Comparator<K> mapValueComparator(final Map<K, V> map) {\n    return new Comparator<K>() {\n\n        public int compare(K key1, K key2) {\n            return map.get(key1).compareTo(map.get(key2));\n        }\n    };\n}'
p4187
aS'Map<String, String> reversedMap = new TreeMap<String, String>(codes);'
p4188
aS'System.out.println(key + ": " + map.get(key));'
p4189
aS'Collections.sort(keys, someComparator);'
p4190
aS'while (i.hasNext()) {\n    String key = i.next().getKey();\n    System.out.println(key + ", " + codes.get(key));\n}'
p4191
aS'Iterator<Map.Entry<String, String>> i = codes.entrySet().iterator();\nwhile (i.hasNext()) {\n    String key = i.next().getKey();\n}'
p4192
aS'String key = i.next().getKey();\nSystem.out.println(key + ", " + codes.get(key));'
p4193
aS'List<String> keys = new ArrayList<String>(map.keySet());\nCollections.sort(keys, someComparator);'
p4194
aS'Map<String, String> map = getMyMap();'
p4195
aS'Iterator<Map.Entry<String, String>> i = codes.entrySet().iterator();'
p4196
aS'Map<String, String> reversedMap = new TreeMap<String, String>(codes);\nfor (Map.Entry entry : reversedMap.entrySet()) {\n    System.out.println(entry.getKey() + ", " + entry.getValue());\n}'
p4197
aS'public int compare(K key1, K key2) {\n    return map.get(key1).compareTo(map.get(key2));\n}'
p4198
aS'Iterator<Map.Entry<String, String>> i = codes.entrySet().iterator();\nwhile (i.hasNext()) {\n    String key = i.next().getKey();\n    System.out.println(key + ", " + codes.get(key));\n}'
p4199
aS'Iterator<Map.Entry<String, String>> i = codes.entrySet().iterator();\nwhile (i.hasNext()) {\n}'
p4200
aS'Map<String, String> map = getMyMap();\nList<String> keys = new ArrayList<String>(map.keySet());\nCollections.sort(keys, someComparator);'
p4201
aS'Map<String, String> map = getMyMap();\nList<String> keys = new ArrayList<String>(map.keySet());\nCollections.sort(keys, someComparator);\nfor (String key : keys) {\n}'
p4202
aS'System.out.println(entry.getKey() + ", " + entry.getValue());'
p4203
aS'return new Comparator<K>() {\n\n    public int compare(K key1, K key2) {\n        return comparator.compare(map.get(key1), map.get(key2));\n    }\n};'
p4204
aS'return map.get(key1).compareTo(map.get(key2));'
p4205
aS'System.out.println(key + ", " + codes.get(key));'
p4206
aS'Map<String, String> map = getMyMap();\nList<String> keys = new ArrayList<String>(map.keySet());\nCollections.sort(keys, someComparator);\nfor (String key : keys) {\n    System.out.println(key + ": " + map.get(key));\n}'
p4207
aS'Map<String, String> reversedMap = new TreeMap<String, String>(codes);\nfor (Map.Entry entry : reversedMap.entrySet()) {\n}'
p4208
aS'return comparator.compare(map.get(key1), map.get(key2));'
p4209
aS'for (String key : keys) {\n}'
p4210
aS'public int compare(K key1, K key2) {\n    return comparator.compare(map.get(key1), map.get(key2));\n}'
p4211
aS'Map<String, String> map = getMyMap();\nList<String> keys = new ArrayList<String>(map.keySet());'
p4212
aS'List<String> keys = new ArrayList<String>(map.keySet());\nCollections.sort(keys, someComparator);\nfor (String key : keys) {\n    System.out.println(key + ": " + map.get(key));\n}'
p4213
atp4214
Rp4215
sI454908
g1
((lp4216
S'String[] lines = string.split("\\\\r?\\\\n");'
p4217
aS'String.split("[\\\\r\\\\n]+");'
p4218
atp4219
Rp4220
sI18915075
g1
((lp4221
S'Date date = formatter.parse(str_date);'
p4222
aS'SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss.SSS");\nDate parsedDate = dateFormat.parse(yourString);\nTimestamp timestamp = new java.sql.Timestamp(parsedDate.getTime());'
p4223
aS'import java.text.DateFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;'
p4224
aS'import java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;'
p4225
aS'Date date = formatter.parse(str_date);\njava.sql.Timestamp timeStampDate = new Timestamp(date.getTime());\nreturn timeStampDate;'
p4226
aS'java.sql.Timestamp timeStampDate = new Timestamp(date.getTime());\nreturn timeStampDate;'
p4227
aS'import java.text.DateFormat;\nimport java.text.ParseException;'
p4228
aS'try {\n    DateFormat formatter;\n    formatter = new SimpleDateFormat("dd/MM/yyyy");\n    Date date = formatter.parse(str_date);\n    java.sql.Timestamp timeStampDate = new Timestamp(date.getTime());\n    return timeStampDate;\n} catch (ParseException e) {\n    System.out.println("Exception :" + e);\n}'
p4229
aS'import java.text.SimpleDateFormat;\nimport java.util.Date;\n\npublic class Util {\n\n    public static Timestamp convertStringToTimestamp(String str_date) {\n        try {\n            DateFormat formatter;\n            formatter = new SimpleDateFormat("dd/MM/yyyy");\n            Date date = formatter.parse(str_date);\n            java.sql.Timestamp timeStampDate = new Timestamp(date.getTime());\n            return timeStampDate;\n        } catch (ParseException e) {\n            System.out.println("Exception :" + e);\n            return null;\n        }\n    }\n}'
p4230
aS'Timestamp timestamp = new Timestamp(date.getTime());\nTimestamp myTimeStamp = timestamp;'
p4231
aS'Date date = new Date();\nTimestamp timestamp = new Timestamp(date.getTime());\nTimestamp myTimeStamp = timestamp;'
p4232
aS'import java.util.Date;\n\npublic class Util {\n\n    public static Timestamp convertStringToTimestamp(String str_date) {\n        try {\n            DateFormat formatter;\n            formatter = new SimpleDateFormat("dd/MM/yyyy");\n            Date date = formatter.parse(str_date);\n            java.sql.Timestamp timeStampDate = new Timestamp(date.getTime());\n            return timeStampDate;\n        } catch (ParseException e) {\n            System.out.println("Exception :" + e);\n            return null;\n        }\n    }\n}'
p4233
aS'public static Timestamp convertStringToTimestamp(String str_date) {\n    try {\n        DateFormat formatter;\n        formatter = new SimpleDateFormat("dd/MM/yyyy");\n        Date date = formatter.parse(str_date);\n        java.sql.Timestamp timeStampDate = new Timestamp(date.getTime());\n        return timeStampDate;\n    } catch (ParseException e) {\n        System.out.println("Exception :" + e);\n        return null;\n    }\n}'
p4234
aS'formatter = new SimpleDateFormat("dd/MM/yyyy");\nDate date = formatter.parse(str_date);\njava.sql.Timestamp timeStampDate = new Timestamp(date.getTime());\nreturn timeStampDate;'
p4235
aS'import java.sql.Timestamp;\nimport java.text.DateFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;'
p4236
aS'Date parsedDate = dateFormat.parse(yourString);'
p4237
aS'DateFormat formatter;\nformatter = new SimpleDateFormat("dd/MM/yyyy");\nDate date = formatter.parse(str_date);\njava.sql.Timestamp timeStampDate = new Timestamp(date.getTime());\nreturn timeStampDate;'
p4238
aS'import java.text.ParseException;'
p4239
aS'DateFormat formatter;\nformatter = new SimpleDateFormat("dd/MM/yyyy");'
p4240
aS'DateFormat formatter;\nformatter = new SimpleDateFormat("dd/MM/yyyy");\nDate date = formatter.parse(str_date);\njava.sql.Timestamp timeStampDate = new Timestamp(date.getTime());'
p4241
aS'Date date = new Date();\nTimestamp timestamp = new Timestamp(date.getTime());'
p4242
aS'try {\n    DateFormat formatter;\n    formatter = new SimpleDateFormat("dd/MM/yyyy");\n    Date date = formatter.parse(str_date);\n    java.sql.Timestamp timeStampDate = new Timestamp(date.getTime());\n    return timeStampDate;\n} catch (ParseException e) {\n    System.out.println("Exception :" + e);\n    return null;\n}'
p4243
aS'return timeStampDate;'
p4244
aS'import java.text.DateFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;'
p4245
aS'import java.sql.Timestamp;\nimport java.text.DateFormat;\nimport java.text.ParseException;'
p4246
aS'import java.sql.Timestamp;\nimport java.text.DateFormat;'
p4247
aS'import java.util.Date;'
p4248
aS'formatter = new SimpleDateFormat("dd/MM/yyyy");\nDate date = formatter.parse(str_date);\njava.sql.Timestamp timeStampDate = new Timestamp(date.getTime());'
p4249
aS'Timestamp timestamp = new java.sql.Timestamp(parsedDate.getTime());'
p4250
aS'import java.text.SimpleDateFormat;\nimport java.util.Date;'
p4251
aS'Timestamp myTimeStamp = timestamp;'
p4252
aS'DateFormat formatter;\nformatter = new SimpleDateFormat("dd/MM/yyyy");\nDate date = formatter.parse(str_date);'
p4253
aS'import java.sql.Timestamp;'
p4254
aS'Date date = new Date();'
p4255
aS'formatter = new SimpleDateFormat("dd/MM/yyyy");'
p4256
aS'System.out.println("Exception :" + e);\nreturn null;'
p4257
aS'import java.text.ParseException;\nimport java.text.SimpleDateFormat;'
p4258
aS'DateFormat formatter;'
p4259
aS'public class Util {\n\n    public static Timestamp convertStringToTimestamp(String str_date) {\n        try {\n            DateFormat formatter;\n            formatter = new SimpleDateFormat("dd/MM/yyyy");\n            Date date = formatter.parse(str_date);\n            java.sql.Timestamp timeStampDate = new Timestamp(date.getTime());\n            return timeStampDate;\n        } catch (ParseException e) {\n            System.out.println("Exception :" + e);\n            return null;\n        }\n    }\n}'
p4260
aS'System.out.println("Exception :" + e);'
p4261
aS'formatter = new SimpleDateFormat("dd/MM/yyyy");\nDate date = formatter.parse(str_date);'
p4262
aS'import java.text.SimpleDateFormat;'
p4263
aS'Date date = formatter.parse(str_date);\njava.sql.Timestamp timeStampDate = new Timestamp(date.getTime());'
p4264
aS'SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss.SSS");'
p4265
aS'try {\n    DateFormat formatter;\n    formatter = new SimpleDateFormat("dd/MM/yyyy");\n    Date date = formatter.parse(str_date);\n    java.sql.Timestamp timeStampDate = new Timestamp(date.getTime());\n    return timeStampDate;\n} catch (ParseException e) {\n}'
p4266
aS'java.sql.Timestamp timeStampDate = new Timestamp(date.getTime());'
p4267
aS'SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss.SSS");\nDate parsedDate = dateFormat.parse(yourString);'
p4268
aS'import java.sql.Timestamp;\nimport java.text.DateFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;'
p4269
aS'import java.text.DateFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\npublic class Util {\n\n    public static Timestamp convertStringToTimestamp(String str_date) {\n        try {\n            DateFormat formatter;\n            formatter = new SimpleDateFormat("dd/MM/yyyy");\n            Date date = formatter.parse(str_date);\n            java.sql.Timestamp timeStampDate = new Timestamp(date.getTime());\n            return timeStampDate;\n        } catch (ParseException e) {\n            System.out.println("Exception :" + e);\n            return null;\n        }\n    }\n}'
p4270
aS'Date parsedDate = dateFormat.parse(yourString);\nTimestamp timestamp = new java.sql.Timestamp(parsedDate.getTime());'
p4271
aS'return null;'
p4272
aS'import java.sql.Timestamp;\nimport java.text.DateFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\npublic class Util {\n\n    public static Timestamp convertStringToTimestamp(String str_date) {\n        try {\n            DateFormat formatter;\n            formatter = new SimpleDateFormat("dd/MM/yyyy");\n            Date date = formatter.parse(str_date);\n            java.sql.Timestamp timeStampDate = new Timestamp(date.getTime());\n            return timeStampDate;\n        } catch (ParseException e) {\n            System.out.println("Exception :" + e);\n            return null;\n        }\n    }\n}'
p4273
aS'import java.text.DateFormat;'
p4274
aS'try {\n    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss.SSS");\n    Date parsedDate = dateFormat.parse(yourString);\n    Timestamp timestamp = new java.sql.Timestamp(parsedDate.getTime());\n} catch (Exception e) {\n}'
p4275
aS'import java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\npublic class Util {\n\n    public static Timestamp convertStringToTimestamp(String str_date) {\n        try {\n            DateFormat formatter;\n            formatter = new SimpleDateFormat("dd/MM/yyyy");\n            Date date = formatter.parse(str_date);\n            java.sql.Timestamp timeStampDate = new Timestamp(date.getTime());\n            return timeStampDate;\n        } catch (ParseException e) {\n            System.out.println("Exception :" + e);\n            return null;\n        }\n    }\n}'
p4276
aS'Timestamp timestamp = new Timestamp(date.getTime());'
p4277
atp4278
Rp4279
sI4266756
g1
((lp4280
S'byte b = (byte) 200;\nSystem.out.println(b);'
p4281
aS'byte b = (byte) 200;'
p4282
aS'System.out.println(unsignedByte);'
p4283
aS'System.out.println(b);\nSystem.out.println(b & 0xFF);'
p4284
aS'int i = 200;\nbyte b = (byte) 200;'
p4285
aS'int i = 200;\nbyte b = (byte) 200;\nSystem.out.println(b);\nSystem.out.println(b & 0xFF);'
p4286
aS'int i = 200;'
p4287
aS'byte b = (byte) 200;\nSystem.out.println(b);\nSystem.out.println(b & 0xFF);'
p4288
aS'System.out.println(b);'
p4289
aS'void printUnsignedByte(byte b) {\n    int unsignedByte = b & 0xFF;\n    System.out.println(unsignedByte);\n}'
p4290
aS'System.out.println(b & 0xFF);'
p4291
aS'public static int unsignedToBytes(byte b) {\n    return b & 0xFF;\n}\npublic static void main(String[] args) {\n    System.out.println(unsignedToBytes((byte) -12));\n}'
p4292
aS'int unsignedByte = b & 0xFF;'
p4293
aS'int unsignedByte = b & 0xFF;\nSystem.out.println(unsignedByte);'
p4294
aS'return b & 0xFF;'
p4295
aS'public static int unsignedToBytes(byte b) {\n    return b & 0xFF;\n}'
p4296
aS'System.out.println(unsignedToBytes((byte) -12));'
p4297
aS'int i = 200;\nbyte b = (byte) 200;\nSystem.out.println(b);'
p4298
aS'public static void main(String[] args) {\n    System.out.println(unsignedToBytes((byte) -12));\n}'
p4299
atp4300
Rp4301
sI88838
g1
((lp4302
S'byte[] b = { (byte) 99, (byte) 97, (byte) 116 };'
p4303
aS'import java.nio.charset.Charset;'
p4304
aS'private final Charset UTF8_CHARSET = Charset.forName("UTF-8");\nString decodeUTF8(byte[] bytes) {\n    return new String(bytes, UTF8_CHARSET);\n}\nbyte[] encodeUTF8(String string) {\n    return string.getBytes(UTF8_CHARSET);\n}'
p4305
aS'String decodeUTF8(byte[] bytes) {\n    return new String(bytes, UTF8_CHARSET);\n}\nbyte[] encodeUTF8(String string) {\n    return string.getBytes(UTF8_CHARSET);\n}'
p4306
aS'private final Charset UTF8_CHARSET = Charset.forName("UTF-8");\nString decodeUTF8(byte[] bytes) {\n    return new String(bytes, UTF8_CHARSET);\n}'
p4307
aS'String decodeUTF8(byte[] bytes) {\n    return new String(bytes, UTF8_CHARSET);\n}'
p4308
aS'String s = new String(b, "US-ASCII");'
p4309
aS'private final Charset UTF8_CHARSET = Charset.forName("UTF-8");'
p4310
aS'String s = "some text here";'
p4311
aS'String s = "some text here";\nbyte[] b = s.getBytes("UTF-8");'
p4312
aS'return new String(bytes, UTF8_CHARSET);'
p4313
aS'byte[] b = s.getBytes("UTF-8");'
p4314
aS'byte[] b = { (byte) 99, (byte) 97, (byte) 116 };\nString s = new String(b, "US-ASCII");'
p4315
aS'byte[] encodeUTF8(String string) {\n    return string.getBytes(UTF8_CHARSET);\n}'
p4316
aS'return string.getBytes(UTF8_CHARSET);'
p4317
atp4318
Rp4319
sI7438612
g1
((lp4320
S'System.out.println("After removing s1==" + removeLastChar(s1) + "==");\nSystem.out.println("After removing s2==" + removeLastChar(s2) + "==");'
p4321
aS"if (str != null && str.length() > 0 && str.charAt(str.length() - 1) == 'x') {\n    str = str.substring(0, str.length() - 1);\n}"
p4322
aS'return str.substring(0, str.length() - 1);'
p4323
aS'str = str.substring(0, str.length() - 1);'
p4324
aS'String s1 = "Remove Last CharacterY";\nString s2 = "Remove Last Character2";\nSystem.out.println("After removing s1==" + removeLastChar(s1) + "==");\nSystem.out.println("After removing s2==" + removeLastChar(s2) + "==");'
p4325
aS'import java.util.*;'
p4326
aS'System.out.println("After removing s1==" + removeLastChar(s1) + "==");'
p4327
aS'import java.util.*;\nimport java.lang.*;'
p4328
aS'String s1 = "Remove Last CharacterY";\nString s2 = "Remove Last Character2";\nSystem.out.println("After removing s1==" + removeLastChar(s1) + "==");'
p4329
aS'public static void main(String[] args) throws java.lang.Exception {\n    String s1 = "Remove Last CharacterY";\n    String s2 = "Remove Last Character2";\n    System.out.println("After removing s1==" + removeLastChar(s1) + "==");\n    System.out.println("After removing s2==" + removeLastChar(s2) + "==");\n}'
p4330
aS'import java.lang.*;\n\npublic class Main {\n\n    public static void main(String[] args) throws java.lang.Exception {\n        String s1 = "Remove Last CharacterY";\n        String s2 = "Remove Last Character2";\n        System.out.println("After removing s1==" + removeLastChar(s1) + "==");\n        System.out.println("After removing s2==" + removeLastChar(s2) + "==");\n    }\n\n    private static String removeLastChar(String str) {\n        return str.substring(0, str.length() - 1);\n    }\n}'
p4331
aS'System.out.println("After removing s2==" + removeLastChar(s2) + "==");'
p4332
aS"if (str != null && str.length() > 0 && str.charAt(str.length() - 1) == 'x') {\n}"
p4333
aS'import java.lang.*;'
p4334
aS'String s1 = "Remove Last CharacterY";'
p4335
aS'public static void main(String[] args) throws java.lang.Exception {\n    String s1 = "Remove Last CharacterY";\n    String s2 = "Remove Last Character2";\n    System.out.println("After removing s1==" + removeLastChar(s1) + "==");\n    System.out.println("After removing s2==" + removeLastChar(s2) + "==");\n}\nprivate static String removeLastChar(String str) {\n    return str.substring(0, str.length() - 1);\n}'
p4336
aS"public String method(String str) {\n    if (str != null && str.length() > 0 && str.charAt(str.length() - 1) == 'x') {\n        str = str.substring(0, str.length() - 1);\n    }\n    return str;\n}"
p4337
aS"if (str != null && str.length() > 0 && str.charAt(str.length() - 1) == 'x') {\n    str = str.substring(0, str.length() - 1);\n}\nreturn str;"
p4338
aS'String s1 = "Remove Last CharacterY";\nString s2 = "Remove Last Character2";'
p4339
aS'import java.util.*;\nimport java.lang.*;\n\npublic class Main {\n\n    public static void main(String[] args) throws java.lang.Exception {\n        String s1 = "Remove Last CharacterY";\n        String s2 = "Remove Last Character2";\n        System.out.println("After removing s1==" + removeLastChar(s1) + "==");\n        System.out.println("After removing s2==" + removeLastChar(s2) + "==");\n    }\n\n    private static String removeLastChar(String str) {\n        return str.substring(0, str.length() - 1);\n    }\n}'
p4340
aS'String s2 = "Remove Last Character2";\nSystem.out.println("After removing s1==" + removeLastChar(s1) + "==");'
p4341
aS'"aaabcd".replaceFirst(".$", "");'
p4342
aS'private static String removeLastChar(String str) {\n    return str.substring(0, str.length() - 1);\n}'
p4343
aS'String s2 = "Remove Last Character2";'
p4344
aS'return str;'
p4345
aS'public class Main {\n\n    public static void main(String[] args) throws java.lang.Exception {\n        String s1 = "Remove Last CharacterY";\n        String s2 = "Remove Last Character2";\n        System.out.println("After removing s1==" + removeLastChar(s1) + "==");\n        System.out.println("After removing s2==" + removeLastChar(s2) + "==");\n    }\n\n    private static String removeLastChar(String str) {\n        return str.substring(0, str.length() - 1);\n    }\n}'
p4346
aS'String s2 = "Remove Last Character2";\nSystem.out.println("After removing s1==" + removeLastChar(s1) + "==");\nSystem.out.println("After removing s2==" + removeLastChar(s2) + "==");'
p4347
atp4348
Rp4349
sI2839321
g1
((lp4350
S'import java.sql.SQLException;\nimport java.util.Properties;'
p4351
aS'properties = new Properties();'
p4352
aS'public Connection connect() {\n    if (connection == null) {\n        try {\n            Class.forName(DATABASE_DRIVER);\n            connection = DriverManager.getConnection(DATABASE_URL, getProperties());\n        } catch (ClassNotFoundException | SQLException e) {\n            e.printStackTrace();\n        }\n    }\n    return connection;\n}\npublic void disconnect() {\n    if (connection != null) {\n        try {\n            connection.close();\n            connection = null;\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}'
p4353
aS'private Properties properties;\nprivate Properties getProperties() {\n    if (properties == null) {\n        properties = new Properties();\n        properties.setProperty("user", USERNAME);\n        properties.setProperty("password", PASSWORD);\n        properties.setProperty("MaxPooledStatements", MAX_POOL);\n    }\n    return properties;\n}'
p4354
aS'private static final String DATABASE_DRIVER = "com.mysql.jdbc.Driver";\nprivate static final String DATABASE_URL = "jdbc:mysql://localhost:3306/database_name";'
p4355
aS'private static final String PASSWORD = "";'
p4356
aS'Class.forName(DATABASE_DRIVER);'
p4357
aS'System.out.println("Database connected!");'
p4358
aS'try {\n    connection.close();\n    connection = null;\n} catch (SQLException e) {\n}'
p4359
aS'if (properties == null) {\n    properties = new Properties();\n    properties.setProperty("user", USERNAME);\n    properties.setProperty("password", PASSWORD);\n    properties.setProperty("MaxPooledStatements", MAX_POOL);\n}'
p4360
aS'String url = "jdbc:mysql://localhost:3306/javabase";\nString username = "java";'
p4361
aS'String password = "password";\nSystem.out.println("Connecting database...");\ntry (Connection connection = DriverManager.getConnection(url, username, password)) {\n    System.out.println("Database connected!");\n}'
p4362
aS'DataSource dataSource = (DataSource) context.lookup("java:comp/env/jdbc/myDB");'
p4363
aS'import java.util.Properties;'
p4364
aS'stmt.close();\nconn.close();'
p4365
aS'private static final String MAX_POOL = "250";\nprivate Connection connection;'
p4366
aS'Context context = new InitialContext();\nDataSource dataSource = (DataSource) context.lookup("java:comp/env/jdbc/myDB");'
p4367
aS'String username = "java";\nString password = "password";\nSystem.out.println("Connecting database...");\ntry (Connection connection = DriverManager.getConnection(url, username, password)) {\n    System.out.println("Database connected!");\n} catch (SQLException e) {\n    throw new IllegalStateException("Cannot connect the database!", e);\n}'
p4368
aS'if (properties == null) {\n    properties = new Properties();\n}'
p4369
aS'private static final String DATABASE_DRIVER = "com.mysql.jdbc.Driver";\nprivate static final String DATABASE_URL = "jdbc:mysql://localhost:3306/database_name";\nprivate static final String USERNAME = "root";\nprivate static final String PASSWORD = "";\nprivate static final String MAX_POOL = "250";\nprivate Connection connection;\nprivate Properties properties;'
p4370
aS'private static final String DATABASE_URL = "jdbc:mysql://localhost:3306/database_name";\nprivate static final String USERNAME = "root";\nprivate static final String PASSWORD = "";'
p4371
aS'try (Connection connection = DriverManager.getConnection(url, username, password)) {\n}'
p4372
aS'dataSource.setUser("scott");'
p4373
aS'connection = null;'
p4374
aS'System.out.println("Connecting database...");\ntry (Connection connection = DriverManager.getConnection(url, username, password)) {\n    System.out.println("Database connected!");\n} catch (SQLException e) {\n}'
p4375
aS'try {\n    Class.forName("com.mysql.jdbc.Driver");\n    System.out.println("Driver loaded!");\n} catch (ClassNotFoundException e) {\n}'
p4376
aS'Statement stmt = conn.createStatement();'
p4377
aS'properties = new Properties();\nproperties.setProperty("user", USERNAME);\nproperties.setProperty("password", PASSWORD);'
p4378
aS'private static final String DATABASE_DRIVER = "com.mysql.jdbc.Driver";\nprivate static final String DATABASE_URL = "jdbc:mysql://localhost:3306/database_name";\nprivate static final String USERNAME = "root";\nprivate static final String PASSWORD = "";\nprivate static final String MAX_POOL = "250";\nprivate Connection connection;\nprivate Properties properties;\nprivate Properties getProperties() {\n    if (properties == null) {\n        properties = new Properties();\n        properties.setProperty("user", USERNAME);\n        properties.setProperty("password", PASSWORD);\n        properties.setProperty("MaxPooledStatements", MAX_POOL);\n    }\n    return properties;\n}\npublic Connection connect() {\n    if (connection == null) {\n        try {\n            Class.forName(DATABASE_DRIVER);\n            connection = DriverManager.getConnection(DATABASE_URL, getProperties());\n        } catch (ClassNotFoundException | SQLException e) {\n            e.printStackTrace();\n        }\n    }\n    return connection;\n}'
p4379
aS'private static final String MAX_POOL = "250";\nprivate Connection connection;\nprivate Properties properties;\nprivate Properties getProperties() {\n    if (properties == null) {\n        properties = new Properties();\n        properties.setProperty("user", USERNAME);\n        properties.setProperty("password", PASSWORD);\n        properties.setProperty("MaxPooledStatements", MAX_POOL);\n    }\n    return properties;\n}'
p4380
aS'PreparedStatement statement = mysqlConnect.connect().prepareStatement(sql);'
p4381
aS'private Properties getProperties() {\n    if (properties == null) {\n        properties = new Properties();\n        properties.setProperty("user", USERNAME);\n        properties.setProperty("password", PASSWORD);\n        properties.setProperty("MaxPooledStatements", MAX_POOL);\n    }\n    return properties;\n}\npublic Connection connect() {\n    if (connection == null) {\n        try {\n            Class.forName(DATABASE_DRIVER);\n            connection = DriverManager.getConnection(DATABASE_URL, getProperties());\n        } catch (ClassNotFoundException | SQLException e) {\n            e.printStackTrace();\n        }\n    }\n    return connection;\n}\npublic void disconnect() {\n    if (connection != null) {\n        try {\n            connection.close();\n            connection = null;\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}'
p4382
aS'connection.close();\nconnection = null;'
p4383
aS'private static final String DATABASE_DRIVER = "com.mysql.jdbc.Driver";\nprivate static final String DATABASE_URL = "jdbc:mysql://localhost:3306/database_name";\nprivate static final String USERNAME = "root";\nprivate static final String PASSWORD = "";\nprivate static final String MAX_POOL = "250";\nprivate Connection connection;\nprivate Properties properties;\nprivate Properties getProperties() {\n    if (properties == null) {\n        properties = new Properties();\n        properties.setProperty("user", USERNAME);\n        properties.setProperty("password", PASSWORD);\n        properties.setProperty("MaxPooledStatements", MAX_POOL);\n    }\n    return properties;\n}'
p4384
aS'if (connection == null) {\n}'
p4385
aS'private static final String PASSWORD = "";\nprivate static final String MAX_POOL = "250";\nprivate Connection connection;'
p4386
aS'private static final String PASSWORD = "";\nprivate static final String MAX_POOL = "250";'
p4387
aS'private static final String DATABASE_DRIVER = "com.mysql.jdbc.Driver";\nprivate static final String DATABASE_URL = "jdbc:mysql://localhost:3306/database_name";\nprivate static final String USERNAME = "root";'
p4388
aS'private static final String PASSWORD = "";\nprivate static final String MAX_POOL = "250";\nprivate Connection connection;\nprivate Properties properties;\nprivate Properties getProperties() {\n    if (properties == null) {\n        properties = new Properties();\n        properties.setProperty("user", USERNAME);\n        properties.setProperty("password", PASSWORD);\n        properties.setProperty("MaxPooledStatements", MAX_POOL);\n    }\n    return properties;\n}\npublic Connection connect() {\n    if (connection == null) {\n        try {\n            Class.forName(DATABASE_DRIVER);\n            connection = DriverManager.getConnection(DATABASE_URL, getProperties());\n        } catch (ClassNotFoundException | SQLException e) {\n            e.printStackTrace();\n        }\n    }\n    return connection;\n}'
p4389
aS'String url = "jdbc:mysql://localhost:3306/javabase";\nString username = "java";\nString password = "password";\nSystem.out.println("Connecting database...");\ntry (Connection connection = DriverManager.getConnection(url, username, password)) {\n    System.out.println("Database connected!");\n} catch (SQLException e) {\n    throw new IllegalStateException("Cannot connect the database!", e);\n}'
p4390
aS'String url = "jdbc:mysql://localhost:3306/javabase";\nString username = "java";\nString password = "password";\nSystem.out.println("Connecting database...");\ntry (Connection connection = DriverManager.getConnection(url, username, password)) {\n}'
p4391
aS'import java.sql.SQLException;'
p4392
aS'dataSource.setPassword("tiger");\ndataSource.setServerName("myDBHost.example.org");'
p4393
aS'System.out.println("Connecting database...");\ntry (Connection connection = DriverManager.getConnection(url, username, password)) {\n}'
p4394
aS'dataSource.setPassword("tiger");'
p4395
aS'properties.setProperty("MaxPooledStatements", MAX_POOL);'
p4396
aS'dataSource.setServerName("myDBHost.example.org");'
p4397
aS'private Properties properties;'
p4398
aS'private static final String MAX_POOL = "250";'
p4399
aS'private static final String DATABASE_URL = "jdbc:mysql://localhost:3306/database_name";\nprivate static final String USERNAME = "root";'
p4400
aS'private Properties getProperties() {\n    if (properties == null) {\n        properties = new Properties();\n        properties.setProperty("user", USERNAME);\n        properties.setProperty("password", PASSWORD);\n        properties.setProperty("MaxPooledStatements", MAX_POOL);\n    }\n    return properties;\n}\npublic Connection connect() {\n    if (connection == null) {\n        try {\n            Class.forName(DATABASE_DRIVER);\n            connection = DriverManager.getConnection(DATABASE_URL, getProperties());\n        } catch (ClassNotFoundException | SQLException e) {\n            e.printStackTrace();\n        }\n    }\n    return connection;\n}'
p4401
aS'import java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.Properties;\n\npublic class MysqlConnect {\n\n    private static final String DATABASE_DRIVER = "com.mysql.jdbc.Driver";\n\n    private static final String DATABASE_URL = "jdbc:mysql://localhost:3306/database_name";\n\n    private static final String USERNAME = "root";\n\n    private static final String PASSWORD = "";\n\n    private static final String MAX_POOL = "250";\n\n    private Connection connection;\n\n    private Properties properties;\n\n    private Properties getProperties() {\n        if (properties == null) {\n            properties = new Properties();\n            properties.setProperty("user", USERNAME);\n            properties.setProperty("password", PASSWORD);\n            properties.setProperty("MaxPooledStatements", MAX_POOL);\n        }\n        return properties;\n    }\n\n    public Connection connect() {\n        if (connection == null) {\n            try {\n                Class.forName(DATABASE_DRIVER);\n                connection = DriverManager.getConnection(DATABASE_URL, getProperties());\n            } catch (ClassNotFoundException | SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        return connection;\n    }\n\n    public void disconnect() {\n        if (connection != null) {\n            try {\n                connection.close();\n                connection = null;\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}'
p4402
aS'import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.Properties;\n\npublic class MysqlConnect {\n\n    private static final String DATABASE_DRIVER = "com.mysql.jdbc.Driver";\n\n    private static final String DATABASE_URL = "jdbc:mysql://localhost:3306/database_name";\n\n    private static final String USERNAME = "root";\n\n    private static final String PASSWORD = "";\n\n    private static final String MAX_POOL = "250";\n\n    private Connection connection;\n\n    private Properties properties;\n\n    private Properties getProperties() {\n        if (properties == null) {\n            properties = new Properties();\n            properties.setProperty("user", USERNAME);\n            properties.setProperty("password", PASSWORD);\n            properties.setProperty("MaxPooledStatements", MAX_POOL);\n        }\n        return properties;\n    }\n\n    public Connection connect() {\n        if (connection == null) {\n            try {\n                Class.forName(DATABASE_DRIVER);\n                connection = DriverManager.getConnection(DATABASE_URL, getProperties());\n            } catch (ClassNotFoundException | SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        return connection;\n    }\n\n    public void disconnect() {\n        if (connection != null) {\n            try {\n                connection.close();\n                connection = null;\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}'
p4403
aS'String password = "password";\nSystem.out.println("Connecting database...");'
p4404
aS'private static final String USERNAME = "root";\nprivate static final String PASSWORD = "";\nprivate static final String MAX_POOL = "250";\nprivate Connection connection;\nprivate Properties properties;\nprivate Properties getProperties() {\n    if (properties == null) {\n        properties = new Properties();\n        properties.setProperty("user", USERNAME);\n        properties.setProperty("password", PASSWORD);\n        properties.setProperty("MaxPooledStatements", MAX_POOL);\n    }\n    return properties;\n}'
p4405
aS'properties.setProperty("user", USERNAME);'
p4406
aS'private static final String DATABASE_DRIVER = "com.mysql.jdbc.Driver";\nprivate static final String DATABASE_URL = "jdbc:mysql://localhost:3306/database_name";\nprivate static final String USERNAME = "root";\nprivate static final String PASSWORD = "";\nprivate static final String MAX_POOL = "250";'
p4407
aS'ResultSet rs = stmt.executeQuery("SELECT ID FROM USERS");'
p4408
aS'throw new IllegalStateException("Cannot find the driver in the classpath!", e);'
p4409
aS'private static final String DATABASE_URL = "jdbc:mysql://localhost:3306/database_name";\nprivate static final String USERNAME = "root";\nprivate static final String PASSWORD = "";\nprivate static final String MAX_POOL = "250";\nprivate Connection connection;\nprivate Properties properties;'
p4410
aS'dataSource.setUser("scott");\ndataSource.setPassword("tiger");\ndataSource.setServerName("myDBHost.example.org");'
p4411
aS'dataSource.setUser("scott");\ndataSource.setPassword("tiger");'
p4412
aS'if (properties == null) {\n    properties = new Properties();\n    properties.setProperty("user", USERNAME);\n    properties.setProperty("password", PASSWORD);\n}'
p4413
aS'String url = "jdbc:mysql://localhost:3306/javabase";\nString username = "java";\nString password = "password";'
p4414
aS'rs.close();\nstmt.close();'
p4415
aS'String password = "password";\nSystem.out.println("Connecting database...");\ntry (Connection connection = DriverManager.getConnection(url, username, password)) {\n    System.out.println("Database connected!");\n} catch (SQLException e) {\n    throw new IllegalStateException("Cannot connect the database!", e);\n}'
p4416
aS'properties.setProperty("password", PASSWORD);'
p4417
aS'MysqlDataSource dataSource = new MysqlDataSource();\ndataSource.setUser("scott");\ndataSource.setPassword("tiger");\ndataSource.setServerName("myDBHost.example.org");'
p4418
aS'System.out.println("Connecting database...");'
p4419
aS'rs.close();\nstmt.close();\nconn.close();'
p4420
aS'try {\n    connection.close();\n    connection = null;\n} catch (SQLException e) {\n    e.printStackTrace();\n}'
p4421
aS'Class.forName(DATABASE_DRIVER);\nconnection = DriverManager.getConnection(DATABASE_URL, getProperties());'
p4422
aS'if (properties == null) {\n}'
p4423
aS'private Properties properties;\nprivate Properties getProperties() {\n    if (properties == null) {\n        properties = new Properties();\n        properties.setProperty("user", USERNAME);\n        properties.setProperty("password", PASSWORD);\n        properties.setProperty("MaxPooledStatements", MAX_POOL);\n    }\n    return properties;\n}\npublic Connection connect() {\n    if (connection == null) {\n        try {\n            Class.forName(DATABASE_DRIVER);\n            connection = DriverManager.getConnection(DATABASE_URL, getProperties());\n        } catch (ClassNotFoundException | SQLException e) {\n            e.printStackTrace();\n        }\n    }\n    return connection;\n}'
p4424
aS'String password = "password";\nSystem.out.println("Connecting database...");\ntry (Connection connection = DriverManager.getConnection(url, username, password)) {\n}'
p4425
aS'private static final String MAX_POOL = "250";\nprivate Connection connection;\nprivate Properties properties;\nprivate Properties getProperties() {\n    if (properties == null) {\n        properties = new Properties();\n        properties.setProperty("user", USERNAME);\n        properties.setProperty("password", PASSWORD);\n        properties.setProperty("MaxPooledStatements", MAX_POOL);\n    }\n    return properties;\n}\npublic Connection connect() {\n    if (connection == null) {\n        try {\n            Class.forName(DATABASE_DRIVER);\n            connection = DriverManager.getConnection(DATABASE_URL, getProperties());\n        } catch (ClassNotFoundException | SQLException e) {\n            e.printStackTrace();\n        }\n    }\n    return connection;\n}'
p4426
aS'private static final String DATABASE_URL = "jdbc:mysql://localhost:3306/database_name";\nprivate static final String USERNAME = "root";\nprivate static final String PASSWORD = "";\nprivate static final String MAX_POOL = "250";\nprivate Connection connection;\nprivate Properties properties;\nprivate Properties getProperties() {\n    if (properties == null) {\n        properties = new Properties();\n        properties.setProperty("user", USERNAME);\n        properties.setProperty("password", PASSWORD);\n        properties.setProperty("MaxPooledStatements", MAX_POOL);\n    }\n    return properties;\n}\npublic Connection connect() {\n    if (connection == null) {\n        try {\n            Class.forName(DATABASE_DRIVER);\n            connection = DriverManager.getConnection(DATABASE_URL, getProperties());\n        } catch (ClassNotFoundException | SQLException e) {\n            e.printStackTrace();\n        }\n    }\n    return connection;\n}'
p4427
aS'Context context = new InitialContext();'
p4428
aS'private static final String USERNAME = "root";\nprivate static final String PASSWORD = "";\nprivate static final String MAX_POOL = "250";\nprivate Connection connection;\nprivate Properties properties;\nprivate Properties getProperties() {\n    if (properties == null) {\n        properties = new Properties();\n        properties.setProperty("user", USERNAME);\n        properties.setProperty("password", PASSWORD);\n        properties.setProperty("MaxPooledStatements", MAX_POOL);\n    }\n    return properties;\n}\npublic Connection connect() {\n    if (connection == null) {\n        try {\n            Class.forName(DATABASE_DRIVER);\n            connection = DriverManager.getConnection(DATABASE_URL, getProperties());\n        } catch (ClassNotFoundException | SQLException e) {\n            e.printStackTrace();\n        }\n    }\n    return connection;\n}'
p4429
aS'private static final String USERNAME = "root";\nprivate static final String PASSWORD = "";\nprivate static final String MAX_POOL = "250";\nprivate Connection connection;\nprivate Properties properties;'
p4430
aS'System.out.println("Connecting database...");\ntry (Connection connection = DriverManager.getConnection(url, username, password)) {\n    System.out.println("Database connected!");\n} catch (SQLException e) {\n    throw new IllegalStateException("Cannot connect the database!", e);\n}'
p4431
aS'rs.close();'
p4432
aS'private static final String USERNAME = "root";'
p4433
aS'try (Connection connection = DriverManager.getConnection(url, username, password)) {\n    System.out.println("Database connected!");\n}'
p4434
aS'mysqlConnect.disconnect();'
p4435
aS'import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;'
p4436
aS'try {\n    Class.forName(DATABASE_DRIVER);\n    connection = DriverManager.getConnection(DATABASE_URL, getProperties());\n} catch (ClassNotFoundException | SQLException e) {\n    e.printStackTrace();\n}'
p4437
aS'private static final String DATABASE_DRIVER = "com.mysql.jdbc.Driver";\nprivate static final String DATABASE_URL = "jdbc:mysql://localhost:3306/database_name";\nprivate static final String USERNAME = "root";\nprivate static final String PASSWORD = "";\nprivate static final String MAX_POOL = "250";\nprivate Connection connection;\nprivate Properties properties;\nprivate Properties getProperties() {\n    if (properties == null) {\n        properties = new Properties();\n        properties.setProperty("user", USERNAME);\n        properties.setProperty("password", PASSWORD);\n        properties.setProperty("MaxPooledStatements", MAX_POOL);\n    }\n    return properties;\n}\npublic Connection connect() {\n    if (connection == null) {\n        try {\n            Class.forName(DATABASE_DRIVER);\n            connection = DriverManager.getConnection(DATABASE_URL, getProperties());\n        } catch (ClassNotFoundException | SQLException e) {\n            e.printStackTrace();\n        }\n    }\n    return connection;\n}\npublic void disconnect() {\n    if (connection != null) {\n        try {\n            connection.close();\n            connection = null;\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}'
p4438
aS'if (connection == null) {\n    try {\n        Class.forName(DATABASE_DRIVER);\n        connection = DriverManager.getConnection(DATABASE_URL, getProperties());\n    } catch (ClassNotFoundException | SQLException e) {\n        e.printStackTrace();\n    }\n}\nreturn connection;'
p4439
aS'String url = "jdbc:mysql://localhost:3306/javabase";\nString username = "java";\nString password = "password";\nSystem.out.println("Connecting database...");\ntry (Connection connection = DriverManager.getConnection(url, username, password)) {\n    System.out.println("Database connected!");\n}'
p4440
aS'private static final String DATABASE_DRIVER = "com.mysql.jdbc.Driver";'
p4441
aS'private Properties getProperties() {\n    if (properties == null) {\n        properties = new Properties();\n        properties.setProperty("user", USERNAME);\n        properties.setProperty("password", PASSWORD);\n        properties.setProperty("MaxPooledStatements", MAX_POOL);\n    }\n    return properties;\n}'
p4442
aS'if (connection != null) {\n}'
p4443
aS'throw new IllegalStateException("Cannot connect the database!", e);'
p4444
aS'e.printStackTrace();'
p4445
aS'properties = new Properties();\nproperties.setProperty("user", USERNAME);'
p4446
aS'String url = "jdbc:mysql://localhost:3306/javabase";'
p4447
aS'private Properties properties;\nprivate Properties getProperties() {\n    if (properties == null) {\n        properties = new Properties();\n        properties.setProperty("user", USERNAME);\n        properties.setProperty("password", PASSWORD);\n        properties.setProperty("MaxPooledStatements", MAX_POOL);\n    }\n    return properties;\n}\npublic Connection connect() {\n    if (connection == null) {\n        try {\n            Class.forName(DATABASE_DRIVER);\n            connection = DriverManager.getConnection(DATABASE_URL, getProperties());\n        } catch (ClassNotFoundException | SQLException e) {\n            e.printStackTrace();\n        }\n    }\n    return connection;\n}\npublic void disconnect() {\n    if (connection != null) {\n        try {\n            connection.close();\n            connection = null;\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}'
p4448
aS'Class.forName("com.mysql.jdbc.Driver");'
p4449
aS'private static final String USERNAME = "root";\nprivate static final String PASSWORD = "";\nprivate static final String MAX_POOL = "250";\nprivate Connection connection;\nprivate Properties properties;\nprivate Properties getProperties() {\n    if (properties == null) {\n        properties = new Properties();\n        properties.setProperty("user", USERNAME);\n        properties.setProperty("password", PASSWORD);\n        properties.setProperty("MaxPooledStatements", MAX_POOL);\n    }\n    return properties;\n}\npublic Connection connect() {\n    if (connection == null) {\n        try {\n            Class.forName(DATABASE_DRIVER);\n            connection = DriverManager.getConnection(DATABASE_URL, getProperties());\n        } catch (ClassNotFoundException | SQLException e) {\n            e.printStackTrace();\n        }\n    }\n    return connection;\n}\npublic void disconnect() {\n    if (connection != null) {\n        try {\n            connection.close();\n            connection = null;\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}'
p4450
aS'System.out.println("Connecting database...");\ntry (Connection connection = DriverManager.getConnection(url, username, password)) {\n    System.out.println("Database connected!");\n}'
p4451
aS'private Connection connection;\nprivate Properties properties;'
p4452
aS'private static final String DATABASE_DRIVER = "com.mysql.jdbc.Driver";\nprivate static final String DATABASE_URL = "jdbc:mysql://localhost:3306/database_name";\nprivate static final String USERNAME = "root";\nprivate static final String PASSWORD = "";'
p4453
aS'try (Connection connection = DriverManager.getConnection(url, username, password)) {\n    System.out.println("Database connected!");\n} catch (SQLException e) {\n}'
p4454
aS'conn.close();'
p4455
aS'properties.setProperty("user", USERNAME);\nproperties.setProperty("password", PASSWORD);'
p4456
aS'String url = "jdbc:mysql://localhost:3306/javabase";\nString username = "java";\nString password = "password";\nSystem.out.println("Connecting database...");\ntry (Connection connection = DriverManager.getConnection(url, username, password)) {\n    System.out.println("Database connected!");\n} catch (SQLException e) {\n}'
p4457
aS'private Connection connection;\nprivate Properties properties;\nprivate Properties getProperties() {\n    if (properties == null) {\n        properties = new Properties();\n        properties.setProperty("user", USERNAME);\n        properties.setProperty("password", PASSWORD);\n        properties.setProperty("MaxPooledStatements", MAX_POOL);\n    }\n    return properties;\n}\npublic Connection connect() {\n    if (connection == null) {\n        try {\n            Class.forName(DATABASE_DRIVER);\n            connection = DriverManager.getConnection(DATABASE_URL, getProperties());\n        } catch (ClassNotFoundException | SQLException e) {\n            e.printStackTrace();\n        }\n    }\n    return connection;\n}'
p4458
aS'MysqlDataSource dataSource = new MysqlDataSource();\ndataSource.setUser("scott");'
p4459
aS'stmt.close();'
p4460
aS'import java.util.Properties;\n\npublic class MysqlConnect {\n\n    private static final String DATABASE_DRIVER = "com.mysql.jdbc.Driver";\n\n    private static final String DATABASE_URL = "jdbc:mysql://localhost:3306/database_name";\n\n    private static final String USERNAME = "root";\n\n    private static final String PASSWORD = "";\n\n    private static final String MAX_POOL = "250";\n\n    private Connection connection;\n\n    private Properties properties;\n\n    private Properties getProperties() {\n        if (properties == null) {\n            properties = new Properties();\n            properties.setProperty("user", USERNAME);\n            properties.setProperty("password", PASSWORD);\n            properties.setProperty("MaxPooledStatements", MAX_POOL);\n        }\n        return properties;\n    }\n\n    public Connection connect() {\n        if (connection == null) {\n            try {\n                Class.forName(DATABASE_DRIVER);\n                connection = DriverManager.getConnection(DATABASE_URL, getProperties());\n            } catch (ClassNotFoundException | SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        return connection;\n    }\n\n    public void disconnect() {\n        if (connection != null) {\n            try {\n                connection.close();\n                connection = null;\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}'
p4461
aS'System.out.println("Loading driver...");'
p4462
aS'String url = "jdbc:mysql://localhost:3306/javabase";\nString username = "java";\nString password = "password";\nSystem.out.println("Connecting database...");'
p4463
aS'private static final String DATABASE_URL = "jdbc:mysql://localhost:3306/database_name";'
p4464
aS'MysqlDataSource dataSource = new MysqlDataSource();'
p4465
aS'private static final String DATABASE_URL = "jdbc:mysql://localhost:3306/database_name";\nprivate static final String USERNAME = "root";\nprivate static final String PASSWORD = "";\nprivate static final String MAX_POOL = "250";\nprivate Connection connection;'
p4466
aS'public void disconnect() {\n    if (connection != null) {\n        try {\n            connection.close();\n            connection = null;\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}'
p4467
aS'private static final String USERNAME = "root";\nprivate static final String PASSWORD = "";'
p4468
aS'try {\n    Class.forName("com.mysql.jdbc.Driver");\n    System.out.println("Driver loaded!");\n} catch (ClassNotFoundException e) {\n    throw new IllegalStateException("Cannot find the driver in the classpath!", e);\n}'
p4469
aS'private static final String DATABASE_URL = "jdbc:mysql://localhost:3306/database_name";\nprivate static final String USERNAME = "root";\nprivate static final String PASSWORD = "";\nprivate static final String MAX_POOL = "250";'
p4470
aS'String username = "java";\nString password = "password";\nSystem.out.println("Connecting database...");\ntry (Connection connection = DriverManager.getConnection(url, username, password)) {\n    System.out.println("Database connected!");\n}'
p4471
aS'private Connection connection;\nprivate Properties properties;\nprivate Properties getProperties() {\n    if (properties == null) {\n        properties = new Properties();\n        properties.setProperty("user", USERNAME);\n        properties.setProperty("password", PASSWORD);\n        properties.setProperty("MaxPooledStatements", MAX_POOL);\n    }\n    return properties;\n}\npublic Connection connect() {\n    if (connection == null) {\n        try {\n            Class.forName(DATABASE_DRIVER);\n            connection = DriverManager.getConnection(DATABASE_URL, getProperties());\n        } catch (ClassNotFoundException | SQLException e) {\n            e.printStackTrace();\n        }\n    }\n    return connection;\n}\npublic void disconnect() {\n    if (connection != null) {\n        try {\n            connection.close();\n            connection = null;\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}'
p4472
aS'import java.sql.DriverManager;'
p4473
aS'return connection;'
p4474
aS'private static final String DATABASE_DRIVER = "com.mysql.jdbc.Driver";\nprivate static final String DATABASE_URL = "jdbc:mysql://localhost:3306/database_name";\nprivate static final String USERNAME = "root";\nprivate static final String PASSWORD = "";\nprivate static final String MAX_POOL = "250";\nprivate Connection connection;'
p4475
aS'System.out.println("Loading driver...");\ntry {\n    Class.forName("com.mysql.jdbc.Driver");\n    System.out.println("Driver loaded!");\n} catch (ClassNotFoundException e) {\n    throw new IllegalStateException("Cannot find the driver in the classpath!", e);\n}'
p4476
aS'return properties;'
p4477
aS'if (connection != null) {\n    try {\n        connection.close();\n        connection = null;\n    } catch (SQLException e) {\n        e.printStackTrace();\n    }\n}'
p4478
aS'String username = "java";\nString password = "password";'
p4479
aS'try (Connection connection = DriverManager.getConnection(url, username, password)) {\n    System.out.println("Database connected!");\n} catch (SQLException e) {\n    throw new IllegalStateException("Cannot connect the database!", e);\n}'
p4480
aS'private static final String PASSWORD = "";\nprivate static final String MAX_POOL = "250";\nprivate Connection connection;\nprivate Properties properties;\nprivate Properties getProperties() {\n    if (properties == null) {\n        properties = new Properties();\n        properties.setProperty("user", USERNAME);\n        properties.setProperty("password", PASSWORD);\n        properties.setProperty("MaxPooledStatements", MAX_POOL);\n    }\n    return properties;\n}'
p4481
aS'public class MysqlConnect {\n\n    private static final String DATABASE_DRIVER = "com.mysql.jdbc.Driver";\n\n    private static final String DATABASE_URL = "jdbc:mysql://localhost:3306/database_name";\n\n    private static final String USERNAME = "root";\n\n    private static final String PASSWORD = "";\n\n    private static final String MAX_POOL = "250";\n\n    private Connection connection;\n\n    private Properties properties;\n\n    private Properties getProperties() {\n        if (properties == null) {\n            properties = new Properties();\n            properties.setProperty("user", USERNAME);\n            properties.setProperty("password", PASSWORD);\n            properties.setProperty("MaxPooledStatements", MAX_POOL);\n        }\n        return properties;\n    }\n\n    public Connection connect() {\n        if (connection == null) {\n            try {\n                Class.forName(DATABASE_DRIVER);\n                connection = DriverManager.getConnection(DATABASE_URL, getProperties());\n            } catch (ClassNotFoundException | SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        return connection;\n    }\n\n    public void disconnect() {\n        if (connection != null) {\n            try {\n                connection.close();\n                connection = null;\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}'
p4482
aS'String username = "java";\nString password = "password";\nSystem.out.println("Connecting database...");\ntry (Connection connection = DriverManager.getConnection(url, username, password)) {\n    System.out.println("Database connected!");\n} catch (SQLException e) {\n}'
p4483
aS'import java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.Properties;'
p4484
aS'properties.setProperty("user", USERNAME);\nproperties.setProperty("password", PASSWORD);\nproperties.setProperty("MaxPooledStatements", MAX_POOL);'
p4485
aS'try {\n    Class.forName(DATABASE_DRIVER);\n    connection = DriverManager.getConnection(DATABASE_URL, getProperties());\n} catch (ClassNotFoundException | SQLException e) {\n}'
p4486
aS'import java.sql.Connection;'
p4487
aS'private static final String USERNAME = "root";\nprivate static final String PASSWORD = "";\nprivate static final String MAX_POOL = "250";\nprivate Connection connection;'
p4488
aS'properties = new Properties();\nproperties.setProperty("user", USERNAME);\nproperties.setProperty("password", PASSWORD);\nproperties.setProperty("MaxPooledStatements", MAX_POOL);'
p4489
aS'private static final String PASSWORD = "";\nprivate static final String MAX_POOL = "250";\nprivate Connection connection;\nprivate Properties properties;'
p4490
aS'private static final String USERNAME = "root";\nprivate static final String PASSWORD = "";\nprivate static final String MAX_POOL = "250";'
p4491
aS'connection.close();'
p4492
aS'System.out.println("Driver loaded!");'
p4493
aS'properties.setProperty("password", PASSWORD);\nproperties.setProperty("MaxPooledStatements", MAX_POOL);'
p4494
aS'if (properties == null) {\n    properties = new Properties();\n    properties.setProperty("user", USERNAME);\n}'
p4495
aS'private static final String DATABASE_URL = "jdbc:mysql://localhost:3306/database_name";\nprivate static final String USERNAME = "root";\nprivate static final String PASSWORD = "";\nprivate static final String MAX_POOL = "250";\nprivate Connection connection;\nprivate Properties properties;\nprivate Properties getProperties() {\n    if (properties == null) {\n        properties = new Properties();\n        properties.setProperty("user", USERNAME);\n        properties.setProperty("password", PASSWORD);\n        properties.setProperty("MaxPooledStatements", MAX_POOL);\n    }\n    return properties;\n}'
p4496
aS'String username = "java";\nString password = "password";\nSystem.out.println("Connecting database...");\ntry (Connection connection = DriverManager.getConnection(url, username, password)) {\n}'
p4497
aS'import java.sql.SQLException;\nimport java.util.Properties;\n\npublic class MysqlConnect {\n\n    private static final String DATABASE_DRIVER = "com.mysql.jdbc.Driver";\n\n    private static final String DATABASE_URL = "jdbc:mysql://localhost:3306/database_name";\n\n    private static final String USERNAME = "root";\n\n    private static final String PASSWORD = "";\n\n    private static final String MAX_POOL = "250";\n\n    private Connection connection;\n\n    private Properties properties;\n\n    private Properties getProperties() {\n        if (properties == null) {\n            properties = new Properties();\n            properties.setProperty("user", USERNAME);\n            properties.setProperty("password", PASSWORD);\n            properties.setProperty("MaxPooledStatements", MAX_POOL);\n        }\n        return properties;\n    }\n\n    public Connection connect() {\n        if (connection == null) {\n            try {\n                Class.forName(DATABASE_DRIVER);\n                connection = DriverManager.getConnection(DATABASE_URL, getProperties());\n            } catch (ClassNotFoundException | SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        return connection;\n    }\n\n    public void disconnect() {\n        if (connection != null) {\n            try {\n                connection.close();\n                connection = null;\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}'
p4498
aS'Connection conn = dataSource.getConnection();\nStatement stmt = conn.createStatement();'
p4499
aS'String username = "java";\nString password = "password";\nSystem.out.println("Connecting database...");'
p4500
aS'import java.sql.Connection;\nimport java.sql.DriverManager;'
p4501
aS'String sql = "SELECT * FROM `stackoverflow`";'
p4502
aS'String username = "java";'
p4503
aS'Class.forName("com.mysql.jdbc.Driver");\nSystem.out.println("Driver loaded!");'
p4504
aS'Statement stmt = conn.createStatement();\nResultSet rs = stmt.executeQuery("SELECT ID FROM USERS");'
p4505
aS'Connection conn = dataSource.getConnection();'
p4506
aS'import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.Properties;'
p4507
aS'private Connection connection;\nprivate Properties properties;\nprivate Properties getProperties() {\n    if (properties == null) {\n        properties = new Properties();\n        properties.setProperty("user", USERNAME);\n        properties.setProperty("password", PASSWORD);\n        properties.setProperty("MaxPooledStatements", MAX_POOL);\n    }\n    return properties;\n}'
p4508
aS'String password = "password";'
p4509
aS'private static final String MAX_POOL = "250";\nprivate Connection connection;\nprivate Properties properties;'
p4510
aS'private static final String MAX_POOL = "250";\nprivate Connection connection;\nprivate Properties properties;\nprivate Properties getProperties() {\n    if (properties == null) {\n        properties = new Properties();\n        properties.setProperty("user", USERNAME);\n        properties.setProperty("password", PASSWORD);\n        properties.setProperty("MaxPooledStatements", MAX_POOL);\n    }\n    return properties;\n}\npublic Connection connect() {\n    if (connection == null) {\n        try {\n            Class.forName(DATABASE_DRIVER);\n            connection = DriverManager.getConnection(DATABASE_URL, getProperties());\n        } catch (ClassNotFoundException | SQLException e) {\n            e.printStackTrace();\n        }\n    }\n    return connection;\n}\npublic void disconnect() {\n    if (connection != null) {\n        try {\n            connection.close();\n            connection = null;\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}'
p4511
aS'MysqlDataSource dataSource = new MysqlDataSource();\ndataSource.setUser("scott");\ndataSource.setPassword("tiger");'
p4512
aS'String password = "password";\nSystem.out.println("Connecting database...");\ntry (Connection connection = DriverManager.getConnection(url, username, password)) {\n    System.out.println("Database connected!");\n} catch (SQLException e) {\n}'
p4513
aS'private Connection connection;'
p4514
aS'connection = DriverManager.getConnection(DATABASE_URL, getProperties());'
p4515
aS'private static final String PASSWORD = "";\nprivate static final String MAX_POOL = "250";\nprivate Connection connection;\nprivate Properties properties;\nprivate Properties getProperties() {\n    if (properties == null) {\n        properties = new Properties();\n        properties.setProperty("user", USERNAME);\n        properties.setProperty("password", PASSWORD);\n        properties.setProperty("MaxPooledStatements", MAX_POOL);\n    }\n    return properties;\n}\npublic Connection connect() {\n    if (connection == null) {\n        try {\n            Class.forName(DATABASE_DRIVER);\n            connection = DriverManager.getConnection(DATABASE_URL, getProperties());\n        } catch (ClassNotFoundException | SQLException e) {\n            e.printStackTrace();\n        }\n    }\n    return connection;\n}\npublic void disconnect() {\n    if (connection != null) {\n        try {\n            connection.close();\n            connection = null;\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}'
p4516
aS'MysqlConnect mysqlConnect = new MysqlConnect();'
p4517
aS'System.out.println("Loading driver...");\ntry {\n    Class.forName("com.mysql.jdbc.Driver");\n    System.out.println("Driver loaded!");\n} catch (ClassNotFoundException e) {\n}'
p4518
aS'if (properties == null) {\n    properties = new Properties();\n    properties.setProperty("user", USERNAME);\n    properties.setProperty("password", PASSWORD);\n    properties.setProperty("MaxPooledStatements", MAX_POOL);\n}\nreturn properties;'
p4519
aS'private static final String DATABASE_URL = "jdbc:mysql://localhost:3306/database_name";\nprivate static final String USERNAME = "root";\nprivate static final String PASSWORD = "";\nprivate static final String MAX_POOL = "250";\nprivate Connection connection;\nprivate Properties properties;\nprivate Properties getProperties() {\n    if (properties == null) {\n        properties = new Properties();\n        properties.setProperty("user", USERNAME);\n        properties.setProperty("password", PASSWORD);\n        properties.setProperty("MaxPooledStatements", MAX_POOL);\n    }\n    return properties;\n}\npublic Connection connect() {\n    if (connection == null) {\n        try {\n            Class.forName(DATABASE_DRIVER);\n            connection = DriverManager.getConnection(DATABASE_URL, getProperties());\n        } catch (ClassNotFoundException | SQLException e) {\n            e.printStackTrace();\n        }\n    }\n    return connection;\n}\npublic void disconnect() {\n    if (connection != null) {\n        try {\n            connection.close();\n            connection = null;\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}'
p4520
aS'import java.sql.DriverManager;\nimport java.sql.SQLException;'
p4521
aS'if (connection == null) {\n    try {\n        Class.forName(DATABASE_DRIVER);\n        connection = DriverManager.getConnection(DATABASE_URL, getProperties());\n    } catch (ClassNotFoundException | SQLException e) {\n        e.printStackTrace();\n    }\n}'
p4522
aS'Connection conn = dataSource.getConnection();\nStatement stmt = conn.createStatement();\nResultSet rs = stmt.executeQuery("SELECT ID FROM USERS");'
p4523
aS'public Connection connect() {\n    if (connection == null) {\n        try {\n            Class.forName(DATABASE_DRIVER);\n            connection = DriverManager.getConnection(DATABASE_URL, getProperties());\n        } catch (ClassNotFoundException | SQLException e) {\n            e.printStackTrace();\n        }\n    }\n    return connection;\n}'
p4524
atp4525
Rp4526
sI8444710
g1
((lp4527
S'protected static String removeJunk(String string) {\n    int i, len = string.length();\n    StringBuffer dest = new StringBuffer(len);\n    char c;\n    for (i = (len - 1); i >= 0; i--) {\n        c = string.charAt(i);\n        if (Character.isLetterOrDigit(c)) {\n            dest.append(c);\n        }\n    }\n    return dest.toString();\n}'
p4528
aS'System.out.println();\nif (isPalindrome(string)) {\n}'
p4529
aS'c = string.charAt(i);\nif (Character.isLetterOrDigit(c)) {\n    dest.append(c);\n}'
p4530
aS'String string = "Madam, I\'m Adam.";'
p4531
aS'String string = "Madam, I\'m Adam.";\nSystem.out.println();\nSystem.out.println("Testing whether the following " + "string is a palindrome:");\nSystem.out.println("    " + string);\nSystem.out.println();\nif (isPalindrome(string)) {\n    System.out.println("It IS a palindrome!");\n} else {\n    System.out.println("It is NOT a palindrome!");\n}'
p4532
aS'System.out.println("    " + string);\nSystem.out.println();\nif (isPalindrome(string)) {\n    System.out.println("It IS a palindrome!");\n} else {\n    System.out.println("It is NOT a palindrome!");\n}'
p4533
aS'System.out.println("    " + string);\nSystem.out.println();\nif (isPalindrome(string)) {\n    System.out.println("It IS a palindrome!");\n} else {\n    System.out.println("It is NOT a palindrome!");\n}\nSystem.out.println();'
p4534
aS'int n = s.length();\nfor (int i = 0; i < (n / 2); ++i) {\n    if (s.charAt(i) != s.charAt(n - i - 1)) {\n        return false;\n    }\n}\nreturn true;'
p4535
aS'public static void main(String[] args) {\n    String string = "Madam, I\'m Adam.";\n    System.out.println();\n    System.out.println("Testing whether the following " + "string is a palindrome:");\n    System.out.println("    " + string);\n    System.out.println();\n    if (isPalindrome(string)) {\n        System.out.println("It IS a palindrome!");\n    } else {\n        System.out.println("It is NOT a palindrome!");\n    }\n    System.out.println();\n}'
p4536
aS'System.out.println("Testing whether the following " + "string is a palindrome:");\nSystem.out.println("    " + string);'
p4537
aS'System.out.println();\nSystem.out.println("Testing whether the following " + "string is a palindrome:");\nSystem.out.println("    " + string);\nSystem.out.println();'
p4538
aS'System.out.println();\nif (isPalindrome(string)) {\n    System.out.println("It IS a palindrome!");\n}'
p4539
aS'System.out.println("Testing whether the following " + "string is a palindrome:");\nSystem.out.println("    " + string);\nSystem.out.println();\nif (isPalindrome(string)) {\n    System.out.println("It IS a palindrome!");\n}'
p4540
aS'public static boolean isPalindrome(String stringToTest) {\n    String workingCopy = removeJunk(stringToTest);\n    String reversedCopy = reverse(workingCopy);\n    return reversedCopy.equalsIgnoreCase(workingCopy);\n}\nprotected static String removeJunk(String string) {\n    int i, len = string.length();\n    StringBuffer dest = new StringBuffer(len);\n    char c;\n    for (i = (len - 1); i >= 0; i--) {\n        c = string.charAt(i);\n        if (Character.isLetterOrDigit(c)) {\n            dest.append(c);\n        }\n    }\n    return dest.toString();\n}\nprotected static String reverse(String string) {\n    StringBuffer sb = new StringBuffer(string);\n    return sb.reverse().toString();\n}\npublic static void main(String[] args) {\n    String string = "Madam, I\'m Adam.";\n    System.out.println();\n    System.out.println("Testing whether the following " + "string is a palindrome:");\n    System.out.println("    " + string);\n    System.out.println();\n    if (isPalindrome(string)) {\n        System.out.println("It IS a palindrome!");\n    } else {\n        System.out.println("It is NOT a palindrome!");\n    }\n    System.out.println();\n}'
p4541
aS'if (s.charAt(i) != s.charAt(n - i - 1)) {\n}'
p4542
aS'StringBuffer dest = new StringBuffer(len);\nchar c;\nfor (i = (len - 1); i >= 0; i--) {\n    c = string.charAt(i);\n}'
p4543
aS'System.out.println("    " + string);\nSystem.out.println();'
p4544
aS'System.out.println("It IS a palindrome!");'
p4545
aS'public static boolean isPalindrome(String stringToTest) {\n    String workingCopy = removeJunk(stringToTest);\n    String reversedCopy = reverse(workingCopy);\n    return reversedCopy.equalsIgnoreCase(workingCopy);\n}\nprotected static String removeJunk(String string) {\n    int i, len = string.length();\n    StringBuffer dest = new StringBuffer(len);\n    char c;\n    for (i = (len - 1); i >= 0; i--) {\n        c = string.charAt(i);\n        if (Character.isLetterOrDigit(c)) {\n            dest.append(c);\n        }\n    }\n    return dest.toString();\n}'
p4546
aS'int i, len = string.length();\nStringBuffer dest = new StringBuffer(len);'
p4547
aS'if (isPalindrome(string)) {\n    System.out.println("It IS a palindrome!");\n} else {\n}'
p4548
aS'c = string.charAt(i);'
p4549
aS'if (Character.isLetterOrDigit(c)) {\n}'
p4550
aS'System.out.println();\nSystem.out.println("Testing whether the following " + "string is a palindrome:");\nSystem.out.println("    " + string);'
p4551
aS'char c;\nfor (i = (len - 1); i >= 0; i--) {\n    c = string.charAt(i);\n    if (Character.isLetterOrDigit(c)) {\n        dest.append(c);\n    }\n}'
p4552
aS'System.out.println();\nif (isPalindrome(string)) {\n    System.out.println("It IS a palindrome!");\n} else {\n}'
p4553
aS'String workingCopy = removeJunk(stringToTest);'
p4554
aS'int i, len = string.length();\nStringBuffer dest = new StringBuffer(len);\nchar c;\nfor (i = (len - 1); i >= 0; i--) {\n    c = string.charAt(i);\n    if (Character.isLetterOrDigit(c)) {\n        dest.append(c);\n    }\n}\nreturn dest.toString();'
p4555
aS'public static boolean isPalindrome(String stringToTest) {\n    String workingCopy = removeJunk(stringToTest);\n    String reversedCopy = reverse(workingCopy);\n    return reversedCopy.equalsIgnoreCase(workingCopy);\n}\nprotected static String removeJunk(String string) {\n    int i, len = string.length();\n    StringBuffer dest = new StringBuffer(len);\n    char c;\n    for (i = (len - 1); i >= 0; i--) {\n        c = string.charAt(i);\n        if (Character.isLetterOrDigit(c)) {\n            dest.append(c);\n        }\n    }\n    return dest.toString();\n}\nprotected static String reverse(String string) {\n    StringBuffer sb = new StringBuffer(string);\n    return sb.reverse().toString();\n}'
p4556
aS'StringBuffer sb = new StringBuffer(string);'
p4557
aS'public class Palindrome {\n\n    public static boolean isPalindrome(String stringToTest) {\n        String workingCopy = removeJunk(stringToTest);\n        String reversedCopy = reverse(workingCopy);\n        return reversedCopy.equalsIgnoreCase(workingCopy);\n    }\n\n    protected static String removeJunk(String string) {\n        int i, len = string.length();\n        StringBuffer dest = new StringBuffer(len);\n        char c;\n        for (i = (len - 1); i >= 0; i--) {\n            c = string.charAt(i);\n            if (Character.isLetterOrDigit(c)) {\n                dest.append(c);\n            }\n        }\n        return dest.toString();\n    }\n\n    protected static String reverse(String string) {\n        StringBuffer sb = new StringBuffer(string);\n        return sb.reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        String string = "Madam, I\'m Adam.";\n        System.out.println();\n        System.out.println("Testing whether the following " + "string is a palindrome:");\n        System.out.println("    " + string);\n        System.out.println();\n        if (isPalindrome(string)) {\n            System.out.println("It IS a palindrome!");\n        } else {\n            System.out.println("It is NOT a palindrome!");\n        }\n        System.out.println();\n    }\n}'
p4558
aS'if (s.charAt(i) != s.charAt(n - i - 1)) {\n    return false;\n}'
p4559
aS'if (Character.isLetterOrDigit(c)) {\n    dest.append(c);\n}'
p4560
aS'return dest.toString();'
p4561
aS'System.out.println();\nSystem.out.println("Testing whether the following " + "string is a palindrome:");'
p4562
aS'System.out.println("    " + string);\nSystem.out.println();\nif (isPalindrome(string)) {\n    System.out.println("It IS a palindrome!");\n}'
p4563
aS'int n = s.length();\nfor (int i = 0; i < (n / 2); ++i) {\n    if (s.charAt(i) != s.charAt(n - i - 1)) {\n        return false;\n    }\n}'
p4564
aS'protected static String reverse(String string) {\n    StringBuffer sb = new StringBuffer(string);\n    return sb.reverse().toString();\n}'
p4565
aS'if (isPalindrome(string)) {\n}'
p4566
aS'StringBuffer dest = new StringBuffer(len);\nchar c;\nfor (i = (len - 1); i >= 0; i--) {\n}'
p4567
aS'int i, len = string.length();'
p4568
aS'if (isPalindrome(string)) {\n    System.out.println("It IS a palindrome!");\n} else {\n    System.out.println("It is NOT a palindrome!");\n}\nSystem.out.println();'
p4569
aS'System.out.println();\nSystem.out.println("Testing whether the following " + "string is a palindrome:");\nSystem.out.println("    " + string);\nSystem.out.println();\nif (isPalindrome(string)) {\n    System.out.println("It IS a palindrome!");\n} else {\n    System.out.println("It is NOT a palindrome!");\n}'
p4570
aS'String string = "Madam, I\'m Adam.";\nSystem.out.println();'
p4571
aS'StringBuffer sb = new StringBuffer(string);\nreturn sb.reverse().toString();'
p4572
aS'return true;'
p4573
aS'String string = "Madam, I\'m Adam.";\nSystem.out.println();\nSystem.out.println("Testing whether the following " + "string is a palindrome:");\nSystem.out.println("    " + string);\nSystem.out.println();'
p4574
aS'String string = "Madam, I\'m Adam.";\nSystem.out.println();\nSystem.out.println("Testing whether the following " + "string is a palindrome:");\nSystem.out.println("    " + string);'
p4575
aS'System.out.println();\nSystem.out.println("Testing whether the following " + "string is a palindrome:");\nSystem.out.println("    " + string);\nSystem.out.println();\nif (isPalindrome(string)) {\n    System.out.println("It IS a palindrome!");\n}'
p4576
aS'System.out.println();\nif (isPalindrome(string)) {\n    System.out.println("It IS a palindrome!");\n} else {\n    System.out.println("It is NOT a palindrome!");\n}\nSystem.out.println();'
p4577
aS'for (i = (len - 1); i >= 0; i--) {\n    c = string.charAt(i);\n    if (Character.isLetterOrDigit(c)) {\n        dest.append(c);\n    }\n}'
p4578
aS'String string = "Madam, I\'m Adam.";\nSystem.out.println();\nSystem.out.println("Testing whether the following " + "string is a palindrome:");\nSystem.out.println("    " + string);\nSystem.out.println();\nif (isPalindrome(string)) {\n}'
p4579
aS'return reversedCopy.equalsIgnoreCase(workingCopy);'
p4580
aS'String string = "Madam, I\'m Adam.";\nSystem.out.println();\nSystem.out.println("Testing whether the following " + "string is a palindrome:");'
p4581
aS'for (int i = 0; i < (n / 2); ++i) {\n    if (s.charAt(i) != s.charAt(n - i - 1)) {\n        return false;\n    }\n}\nreturn true;'
p4582
aS'String reversedCopy = reverse(workingCopy);'
p4583
aS'char c;\nfor (i = (len - 1); i >= 0; i--) {\n    c = string.charAt(i);\n    if (Character.isLetterOrDigit(c)) {\n        dest.append(c);\n    }\n}\nreturn dest.toString();'
p4584
aS'c = string.charAt(i);\nif (Character.isLetterOrDigit(c)) {\n}'
p4585
aS'System.out.println("    " + string);\nSystem.out.println();\nif (isPalindrome(string)) {\n    System.out.println("It IS a palindrome!");\n} else {\n}'
p4586
aS'if (isPalindrome(string)) {\n    System.out.println("It IS a palindrome!");\n} else {\n    System.out.println("It is NOT a palindrome!");\n}'
p4587
aS'int n = s.length();\nfor (int i = 0; i < (n / 2); ++i) {\n}'
p4588
aS'StringBuffer dest = new StringBuffer(len);\nchar c;'
p4589
aS'return false;'
p4590
aS'String string = "Madam, I\'m Adam.";\nSystem.out.println();\nSystem.out.println("Testing whether the following " + "string is a palindrome:");\nSystem.out.println("    " + string);\nSystem.out.println();\nif (isPalindrome(string)) {\n    System.out.println("It IS a palindrome!");\n} else {\n}'
p4591
aS'System.out.println("    " + string);\nSystem.out.println();\nif (isPalindrome(string)) {\n}'
p4592
aS'System.out.println("It is NOT a palindrome!");'
p4593
aS'char c;\nfor (i = (len - 1); i >= 0; i--) {\n}'
p4594
aS'System.out.println();\nSystem.out.println("Testing whether the following " + "string is a palindrome:");\nSystem.out.println("    " + string);\nSystem.out.println();\nif (isPalindrome(string)) {\n    System.out.println("It IS a palindrome!");\n} else {\n}'
p4595
aS'System.out.println("Testing whether the following " + "string is a palindrome:");\nSystem.out.println("    " + string);\nSystem.out.println();\nif (isPalindrome(string)) {\n    System.out.println("It IS a palindrome!");\n} else {\n    System.out.println("It is NOT a palindrome!");\n}\nSystem.out.println();'
p4596
aS'return sb.reverse().toString();'
p4597
aS'StringBuffer dest = new StringBuffer(len);'
p4598
aS'String string = "Madam, I\'m Adam.";\nSystem.out.println();\nSystem.out.println("Testing whether the following " + "string is a palindrome:");\nSystem.out.println("    " + string);\nSystem.out.println();\nif (isPalindrome(string)) {\n    System.out.println("It IS a palindrome!");\n} else {\n    System.out.println("It is NOT a palindrome!");\n}\nSystem.out.println();'
p4599
aS'StringBuffer dest = new StringBuffer(len);\nchar c;\nfor (i = (len - 1); i >= 0; i--) {\n    c = string.charAt(i);\n    if (Character.isLetterOrDigit(c)) {\n        dest.append(c);\n    }\n}\nreturn dest.toString();'
p4600
aS'protected static String removeJunk(String string) {\n    int i, len = string.length();\n    StringBuffer dest = new StringBuffer(len);\n    char c;\n    for (i = (len - 1); i >= 0; i--) {\n        c = string.charAt(i);\n        if (Character.isLetterOrDigit(c)) {\n            dest.append(c);\n        }\n    }\n    return dest.toString();\n}\nprotected static String reverse(String string) {\n    StringBuffer sb = new StringBuffer(string);\n    return sb.reverse().toString();\n}\npublic static void main(String[] args) {\n    String string = "Madam, I\'m Adam.";\n    System.out.println();\n    System.out.println("Testing whether the following " + "string is a palindrome:");\n    System.out.println("    " + string);\n    System.out.println();\n    if (isPalindrome(string)) {\n        System.out.println("It IS a palindrome!");\n    } else {\n        System.out.println("It is NOT a palindrome!");\n    }\n    System.out.println();\n}'
p4601
aS'boolean isPalindrome(String s) {\n    int n = s.length();\n    for (int i = 0; i < (n / 2); ++i) {\n        if (s.charAt(i) != s.charAt(n - i - 1)) {\n            return false;\n        }\n    }\n    return true;\n}'
p4602
aS'if (s.equals(new StringBuilder(s).reverse().toString()))\n    ;'
p4603
aS'protected static String reverse(String string) {\n    StringBuffer sb = new StringBuffer(string);\n    return sb.reverse().toString();\n}\npublic static void main(String[] args) {\n    String string = "Madam, I\'m Adam.";\n    System.out.println();\n    System.out.println("Testing whether the following " + "string is a palindrome:");\n    System.out.println("    " + string);\n    System.out.println();\n    if (isPalindrome(string)) {\n        System.out.println("It IS a palindrome!");\n    } else {\n        System.out.println("It is NOT a palindrome!");\n    }\n    System.out.println();\n}'
p4604
aS'String string = "Madam, I\'m Adam.";\nSystem.out.println();\nSystem.out.println("Testing whether the following " + "string is a palindrome:");\nSystem.out.println("    " + string);\nSystem.out.println();\nif (isPalindrome(string)) {\n    System.out.println("It IS a palindrome!");\n}'
p4605
aS'String workingCopy = removeJunk(stringToTest);\nString reversedCopy = reverse(workingCopy);\nreturn reversedCopy.equalsIgnoreCase(workingCopy);'
p4606
aS'for (i = (len - 1); i >= 0; i--) {\n}'
p4607
aS'StringBuffer dest = new StringBuffer(len);\nchar c;\nfor (i = (len - 1); i >= 0; i--) {\n    c = string.charAt(i);\n    if (Character.isLetterOrDigit(c)) {\n        dest.append(c);\n    }\n}'
p4608
aS'int i, len = string.length();\nStringBuffer dest = new StringBuffer(len);\nchar c;'
p4609
aS'public static boolean isPalindrome(String stringToTest) {\n    String workingCopy = removeJunk(stringToTest);\n    String reversedCopy = reverse(workingCopy);\n    return reversedCopy.equalsIgnoreCase(workingCopy);\n}'
p4610
aS'for (int i = 0; i < (n / 2); ++i) {\n    if (s.charAt(i) != s.charAt(n - i - 1)) {\n        return false;\n    }\n}'
p4611
aS'System.out.println("    " + string);'
p4612
aS'int i, len = string.length();\nStringBuffer dest = new StringBuffer(len);\nchar c;\nfor (i = (len - 1); i >= 0; i--) {\n}'
p4613
aS'System.out.println("Testing whether the following " + "string is a palindrome:");\nSystem.out.println("    " + string);\nSystem.out.println();\nif (isPalindrome(string)) {\n    System.out.println("It IS a palindrome!");\n} else {\n    System.out.println("It is NOT a palindrome!");\n}'
p4614
aS'System.out.println();\nSystem.out.println("Testing whether the following " + "string is a palindrome:");\nSystem.out.println("    " + string);\nSystem.out.println();\nif (isPalindrome(string)) {\n    System.out.println("It IS a palindrome!");\n} else {\n    System.out.println("It is NOT a palindrome!");\n}\nSystem.out.println();'
p4615
aS'char c;'
p4616
aS'char c;\nfor (i = (len - 1); i >= 0; i--) {\n    c = string.charAt(i);\n}'
p4617
aS'System.out.println("Testing whether the following " + "string is a palindrome:");'
p4618
aS'for (int i = 0; i < (n / 2); ++i) {\n}'
p4619
aS'System.out.println();\nif (isPalindrome(string)) {\n    System.out.println("It IS a palindrome!");\n} else {\n    System.out.println("It is NOT a palindrome!");\n}'
p4620
aS'protected static String removeJunk(String string) {\n    int i, len = string.length();\n    StringBuffer dest = new StringBuffer(len);\n    char c;\n    for (i = (len - 1); i >= 0; i--) {\n        c = string.charAt(i);\n        if (Character.isLetterOrDigit(c)) {\n            dest.append(c);\n        }\n    }\n    return dest.toString();\n}\nprotected static String reverse(String string) {\n    StringBuffer sb = new StringBuffer(string);\n    return sb.reverse().toString();\n}'
p4621
aS'dest.append(c);'
p4622
aS'System.out.println("Testing whether the following " + "string is a palindrome:");\nSystem.out.println("    " + string);\nSystem.out.println();'
p4623
aS'int i, len = string.length();\nStringBuffer dest = new StringBuffer(len);\nchar c;\nfor (i = (len - 1); i >= 0; i--) {\n    c = string.charAt(i);\n    if (Character.isLetterOrDigit(c)) {\n        dest.append(c);\n    }\n}'
p4624
aS'int n = s.length();'
p4625
aS'int i, len = string.length();\nStringBuffer dest = new StringBuffer(len);\nchar c;\nfor (i = (len - 1); i >= 0; i--) {\n    c = string.charAt(i);\n}'
p4626
aS'System.out.println();\nSystem.out.println("Testing whether the following " + "string is a palindrome:");\nSystem.out.println("    " + string);\nSystem.out.println();\nif (isPalindrome(string)) {\n}'
p4627
aS'for (i = (len - 1); i >= 0; i--) {\n    c = string.charAt(i);\n    if (Character.isLetterOrDigit(c)) {\n        dest.append(c);\n    }\n}\nreturn dest.toString();'
p4628
aS'String workingCopy = removeJunk(stringToTest);\nString reversedCopy = reverse(workingCopy);'
p4629
aS'System.out.println("Testing whether the following " + "string is a palindrome:");\nSystem.out.println("    " + string);\nSystem.out.println();\nif (isPalindrome(string)) {\n}'
p4630
aS'System.out.println();'
p4631
aS'String reversedCopy = reverse(workingCopy);\nreturn reversedCopy.equalsIgnoreCase(workingCopy);'
p4632
aS'for (i = (len - 1); i >= 0; i--) {\n    c = string.charAt(i);\n}'
p4633
aS'System.out.println("Testing whether the following " + "string is a palindrome:");\nSystem.out.println("    " + string);\nSystem.out.println();\nif (isPalindrome(string)) {\n    System.out.println("It IS a palindrome!");\n} else {\n}'
p4634
atp4635
Rp4636
sI513832
g1
((lp4637
S'String a = "test";'
p4638
aS'String nullString1 = null;'
p4639
aS'String nullString1 = null;\nString nullString2 = null;'
p4640
aS'String nullString2 = null;'
p4641
aS'fooString1.equals(fooString2);'
p4642
aS'String a = "test";\nString b = new String("test");'
p4643
aS'Objects.equals(null, "test");'
p4644
aS'String fooString1 = new String("foo");'
p4645
aS'nullString1.equals(nullString2);'
p4646
aS'String b = new String("test");'
p4647
aS'String fooString1 = new String("foo");\nString fooString2 = new String("foo");'
p4648
aS'String fooString2 = new String("foo");'
p4649
aS'String a = "Test";\nString b = "Test";'
p4650
aS'String b = "Test";'
p4651
aS'new String("test").equals("test");'
p4652
aS'String a = "Test";'
p4653
atp4654
Rp4655
sI332079
g1
((lp4656
S"String hex = Integer.toHexString(0xFF & bytes[i]);\nif (hex.length() == 1) {\n    hexString.append('0');\n}"
p4657
aS'hexString.append(hex);'
p4658
aS'for (int i = 0; i < bytes.length; i++) {\n}'
p4659
aS"if (hex.length() == 1) {\n    hexString.append('0');\n}\nhexString.append(hex);"
p4660
aS"public static String toHexString(byte[] bytes) {\n    StringBuilder hexString = new StringBuilder();\n    for (int i = 0; i < bytes.length; i++) {\n        String hex = Integer.toHexString(0xFF & bytes[i]);\n        if (hex.length() == 1) {\n            hexString.append('0');\n        }\n        hexString.append(hex);\n    }\n    return hexString.toString();\n}"
p4661
aS"hexString.append('0');"
p4662
aS"for (int i = 0; i < bytes.length; i++) {\n    String hex = Integer.toHexString(0xFF & bytes[i]);\n    if (hex.length() == 1) {\n        hexString.append('0');\n    }\n    hexString.append(hex);\n}"
p4663
aS'String hex = Integer.toHexString(0xFF & bytes[i]);\nif (hex.length() == 1) {\n}'
p4664
aS"for (int i = 0; i < bytes.length; i++) {\n    String hex = Integer.toHexString(0xFF & bytes[i]);\n    if (hex.length() == 1) {\n        hexString.append('0');\n    }\n}"
p4665
aS'StringBuilder hexString = new StringBuilder();\nfor (int i = 0; i < bytes.length; i++) {\n    String hex = Integer.toHexString(0xFF & bytes[i]);\n}'
p4666
aS'String hexString = new String(Hex.encodeHex(messageDigest));'
p4667
aS"String hex = Integer.toHexString(0xFF & bytes[i]);\nif (hex.length() == 1) {\n    hexString.append('0');\n}\nhexString.append(hex);"
p4668
aS"StringBuilder hexString = new StringBuilder();\nfor (int i = 0; i < bytes.length; i++) {\n    String hex = Integer.toHexString(0xFF & bytes[i]);\n    if (hex.length() == 1) {\n        hexString.append('0');\n    }\n    hexString.append(hex);\n}"
p4669
aS"StringBuilder hexString = new StringBuilder();\nfor (int i = 0; i < bytes.length; i++) {\n    String hex = Integer.toHexString(0xFF & bytes[i]);\n    if (hex.length() == 1) {\n        hexString.append('0');\n    }\n}"
p4670
aS'public static String toHex(byte[] bytes) {\n    BigInteger bi = new BigInteger(1, bytes);\n    return String.format("%0" + (bytes.length << 1) + "X", bi);\n}'
p4671
aS"if (hex.length() == 1) {\n    hexString.append('0');\n}"
p4672
aS"StringBuilder hexString = new StringBuilder();\nfor (int i = 0; i < bytes.length; i++) {\n    String hex = Integer.toHexString(0xFF & bytes[i]);\n    if (hex.length() == 1) {\n        hexString.append('0');\n    }\n    hexString.append(hex);\n}\nreturn hexString.toString();"
p4673
aS'return hexString.toString();'
p4674
aS'for (int i = 0; i < bytes.length; i++) {\n    String hex = Integer.toHexString(0xFF & bytes[i]);\n}'
p4675
aS'if (hex.length() == 1) {\n}'
p4676
aS'StringBuilder hexString = new StringBuilder();'
p4677
aS'StringBuilder hexString = new StringBuilder();\nfor (int i = 0; i < bytes.length; i++) {\n}'
p4678
aS'BigInteger bi = new BigInteger(1, bytes);\nreturn String.format("%0" + (bytes.length << 1) + "X", bi);'
p4679
aS"for (int i = 0; i < bytes.length; i++) {\n    String hex = Integer.toHexString(0xFF & bytes[i]);\n    if (hex.length() == 1) {\n        hexString.append('0');\n    }\n    hexString.append(hex);\n}\nreturn hexString.toString();"
p4680
aS'return String.format("%0" + (bytes.length << 1) + "X", bi);'
p4681
aS'String hex = Integer.toHexString(0xFF & bytes[i]);'
p4682
aS'BigInteger bi = new BigInteger(1, bytes);'
p4683
atp4684
Rp4685
sI5993779
g1
((lp4686
S'String[] tokens = pdfName.split("-|\\\\.");'
p4687
aS'String[] tokens = pdfName.split("\\\\W");'
p4688
atp4689
Rp4690
sI2966334
g1
((lp4691
S'JLabel title = new JLabel("I love stackoverflow!", JLabel.CENTER);'
p4692
aS'frame.add(new JLabel("<html>Text color: <font color=\'red\'>red</font></html>"));'
p4693
aS'JLabel title = new JLabel("I love stackoverflow!", JLabel.CENTER);\ntitle.setForeground(Color.white);'
p4694
aS'JLabel label = new JLabel("Text Color: Red");\nlabel.setForeground(Color.red);'
p4695
aS'JLabel label = new JLabel("Text Color: Red");'
p4696
aS'title.setForeground(Color.white);'
p4697
aS'label.setForeground(Color.red);'
p4698
atp4699
Rp4700
sI4040001
g1
((lp4701
S'if (max < numbersNeeded) {\n    throw new IllegalArgumentException("Can\'t ask for more numbers than are available");\n}\nRandom rng = new Random();\nSet<Integer> generated = new LinkedHashSet<Integer>();\nwhile (generated.size() < numbersNeeded) {\n    Integer next = rng.nextInt(max) + 1;\n}'
p4702
aS'ArrayList<Integer> list = new ArrayList<Integer>(size);\nfor (int i = 1; i <= size; i++) {\n    list.add(i);\n}'
p4703
aS'if (max < numbersNeeded) {\n    throw new IllegalArgumentException("Can\'t ask for more numbers than are available");\n}'
p4704
aS'Set<Integer> generated = new LinkedHashSet<Integer>();'
p4705
aS'Random rand = new Random();'
p4706
aS'Random rng = new Random();\nSet<Integer> generated = new LinkedHashSet<Integer>();\nwhile (generated.size() < numbersNeeded) {\n}'
p4707
aS'while (list.size() > 0) {\n}'
p4708
aS'while (list.size() > 0) {\n    int index = rand.nextInt(list.size());\n}'
p4709
aS'if (max < numbersNeeded) {\n    throw new IllegalArgumentException("Can\'t ask for more numbers than are available");\n}\nRandom rng = new Random();\nSet<Integer> generated = new LinkedHashSet<Integer>();'
p4710
aS'int size = 20;'
p4711
aS'ArrayList<Integer> numbers = new ArrayList<Integer>();\nRandom randomGenerator = new Random();\nwhile (numbers.size() < 4) {\n    int random = randomGenerator.nextInt(4);\n    if (!numbers.contains(random)) {\n        numbers.add(random);\n    }\n}'
p4712
aS'int random = randomGenerator.nextInt(4);\nif (!numbers.contains(random)) {\n    numbers.add(random);\n}'
p4713
aS'import java.util.ArrayList;\nimport java.util.Random;'
p4714
aS'ArrayList<Integer> list = new ArrayList<Integer>(size);\nfor (int i = 1; i <= size; i++) {\n    list.add(i);\n}\nRandom rand = new Random();\nwhile (list.size() > 0) {\n}'
p4715
aS'Random rng = new Random();\nSet<Integer> generated = new LinkedHashSet<Integer>();\nwhile (generated.size() < numbersNeeded) {\n    Integer next = rng.nextInt(max) + 1;\n    generated.add(next);\n}'
p4716
aS'for (int i = 1; i <= size; i++) {\n    list.add(i);\n}\nRandom rand = new Random();'
p4717
aS'ArrayList<Integer> numbers = new ArrayList<Integer>();\nRandom randomGenerator = new Random();'
p4718
aS'Random rng = new Random();\nSet<Integer> generated = new LinkedHashSet<Integer>();'
p4719
aS'ArrayList<Integer> numbers = new ArrayList<Integer>();'
p4720
aS'Random randomGenerator = new Random();\nwhile (numbers.size() < 4) {\n    int random = randomGenerator.nextInt(4);\n}'
p4721
aS'for (int i = 1; i <= size; i++) {\n}'
p4722
aS'Random rand = new Random();\nwhile (list.size() > 0) {\n    int index = rand.nextInt(list.size());\n}'
p4723
aS'Set<Integer> generated = new LinkedHashSet<Integer>();\nwhile (generated.size() < numbersNeeded) {\n}'
p4724
aS'import java.util.ArrayList;'
p4725
aS'public class Test {\n\n    public static void main(String[] args) {\n        int size = 20;\n        ArrayList<Integer> list = new ArrayList<Integer>(size);\n        for (int i = 1; i <= size; i++) {\n            list.add(i);\n        }\n        Random rand = new Random();\n        while (list.size() > 0) {\n            int index = rand.nextInt(list.size());\n            System.out.println("Selected: " + list.remove(index));\n        }\n    }\n}'
p4726
aS'int size = 20;\nArrayList<Integer> list = new ArrayList<Integer>(size);\nfor (int i = 1; i <= size; i++) {\n}'
p4727
aS'ArrayList<Integer> list = new ArrayList<Integer>(size);\nfor (int i = 1; i <= size; i++) {\n    list.add(i);\n}\nRandom rand = new Random();\nwhile (list.size() > 0) {\n    int index = rand.nextInt(list.size());\n}'
p4728
aS'System.out.println("Selected: " + list.remove(index));'
p4729
aS'if (!numbers.contains(random)) {\n}'
p4730
aS'int random = randomGenerator.nextInt(4);\nif (!numbers.contains(random)) {\n}'
p4731
aS'for (int i = 1; i <= size; i++) {\n    list.add(i);\n}\nRandom rand = new Random();\nwhile (list.size() > 0) {\n}'
p4732
aS'int random = randomGenerator.nextInt(4);'
p4733
aS'throw new IllegalArgumentException("Can\'t ask for more numbers than are available");'
p4734
aS'ArrayList<Integer> numbers = new ArrayList<Integer>();\nRandom randomGenerator = new Random();\nwhile (numbers.size() < 4) {\n}'
p4735
aS'Random rng = new Random();\nSet<Integer> generated = new LinkedHashSet<Integer>();\nwhile (generated.size() < numbersNeeded) {\n    Integer next = rng.nextInt(max) + 1;\n}'
p4736
aS'Random rng = new Random();'
p4737
aS'Random randomGenerator = new Random();\nwhile (numbers.size() < 4) {\n    int random = randomGenerator.nextInt(4);\n    if (!numbers.contains(random)) {\n        numbers.add(random);\n    }\n}'
p4738
aS'Set<Integer> generated = new LinkedHashSet<Integer>();\nwhile (generated.size() < numbersNeeded) {\n    Integer next = rng.nextInt(max) + 1;\n    generated.add(next);\n}'
p4739
aS'int size = 20;\nArrayList<Integer> list = new ArrayList<Integer>(size);\nfor (int i = 1; i <= size; i++) {\n    list.add(i);\n}'
p4740
aS'ArrayList<Integer> numbers = new ArrayList<Integer>();\nRandom randomGenerator = new Random();\nwhile (numbers.size() < 4) {\n    int random = randomGenerator.nextInt(4);\n}'
p4741
aS'Integer next = rng.nextInt(max) + 1;'
p4742
aS'int index = rand.nextInt(list.size());'
p4743
aS'ArrayList<Integer> list = new ArrayList<Integer>(size);'
p4744
aS'ArrayList<Integer> list = new ArrayList<Integer>(size);\nfor (int i = 1; i <= size; i++) {\n    list.add(i);\n}\nRandom rand = new Random();'
p4745
aS'if (max < numbersNeeded) {\n    throw new IllegalArgumentException("Can\'t ask for more numbers than are available");\n}\nRandom rng = new Random();'
p4746
aS'while (list.size() > 0) {\n    int index = rand.nextInt(list.size());\n    System.out.println("Selected: " + list.remove(index));\n}'
p4747
aS'for (int i = 1; i <= size; i++) {\n    list.add(i);\n}\nRandom rand = new Random();\nwhile (list.size() > 0) {\n    int index = rand.nextInt(list.size());\n}'
p4748
aS'int size = 20;\nArrayList<Integer> list = new ArrayList<Integer>(size);\nfor (int i = 1; i <= size; i++) {\n    list.add(i);\n}\nRandom rand = new Random();\nwhile (list.size() > 0) {\n    int index = rand.nextInt(list.size());\n    System.out.println("Selected: " + list.remove(index));\n}'
p4749
aS'Random rand = new Random();\nwhile (list.size() > 0) {\n    int index = rand.nextInt(list.size());\n    System.out.println("Selected: " + list.remove(index));\n}'
p4750
aS'Random randomGenerator = new Random();'
p4751
aS'if (max < numbersNeeded) {\n    throw new IllegalArgumentException("Can\'t ask for more numbers than are available");\n}\nRandom rng = new Random();\nSet<Integer> generated = new LinkedHashSet<Integer>();\nwhile (generated.size() < numbersNeeded) {\n    Integer next = rng.nextInt(max) + 1;\n    generated.add(next);\n}'
p4752
aS'int size = 20;\nArrayList<Integer> list = new ArrayList<Integer>(size);\nfor (int i = 1; i <= size; i++) {\n    list.add(i);\n}\nRandom rand = new Random();\nwhile (list.size() > 0) {\n}'
p4753
aS'int size = 20;\nArrayList<Integer> list = new ArrayList<Integer>(size);\nfor (int i = 1; i <= size; i++) {\n    list.add(i);\n}\nRandom rand = new Random();\nwhile (list.size() > 0) {\n    int index = rand.nextInt(list.size());\n}'
p4754
aS'int index = rand.nextInt(list.size());\nSystem.out.println("Selected: " + list.remove(index));'
p4755
aS'if (max < numbersNeeded) {\n    throw new IllegalArgumentException("Can\'t ask for more numbers than are available");\n}\nRandom rng = new Random();\nSet<Integer> generated = new LinkedHashSet<Integer>();\nwhile (generated.size() < numbersNeeded) {\n}'
p4756
aS'public static void main(String[] args) {\n    int size = 20;\n    ArrayList<Integer> list = new ArrayList<Integer>(size);\n    for (int i = 1; i <= size; i++) {\n        list.add(i);\n    }\n    Random rand = new Random();\n    while (list.size() > 0) {\n        int index = rand.nextInt(list.size());\n        System.out.println("Selected: " + list.remove(index));\n    }\n}'
p4757
aS'for (int i = 1; i <= size; i++) {\n    list.add(i);\n}\nRandom rand = new Random();\nwhile (list.size() > 0) {\n    int index = rand.nextInt(list.size());\n    System.out.println("Selected: " + list.remove(index));\n}'
p4758
aS'while (numbers.size() < 4) {\n}'
p4759
aS'for (int i = 1; i <= size; i++) {\n    list.add(i);\n}'
p4760
aS'while (numbers.size() < 4) {\n    int random = randomGenerator.nextInt(4);\n    if (!numbers.contains(random)) {\n        numbers.add(random);\n    }\n}'
p4761
aS'Set<Integer> generated = new LinkedHashSet<Integer>();\nwhile (generated.size() < numbersNeeded) {\n    Integer next = rng.nextInt(max) + 1;\n}'
p4762
aS'ArrayList<Integer> list = new ArrayList<Integer>(size);\nfor (int i = 1; i <= size; i++) {\n}'
p4763
aS'Random rand = new Random();\nwhile (list.size() > 0) {\n}'
p4764
aS'Random randomGenerator = new Random();\nwhile (numbers.size() < 4) {\n}'
p4765
aS'int size = 20;\nArrayList<Integer> list = new ArrayList<Integer>(size);'
p4766
aS'import java.util.Random;'
p4767
aS'while (generated.size() < numbersNeeded) {\n}'
p4768
aS'import java.util.Random;\n\npublic class Test {\n\n    public static void main(String[] args) {\n        int size = 20;\n        ArrayList<Integer> list = new ArrayList<Integer>(size);\n        for (int i = 1; i <= size; i++) {\n            list.add(i);\n        }\n        Random rand = new Random();\n        while (list.size() > 0) {\n            int index = rand.nextInt(list.size());\n            System.out.println("Selected: " + list.remove(index));\n        }\n    }\n}'
p4769
aS'generated.add(next);'
p4770
aS'list.add(i);'
p4771
aS'if (max < numbersNeeded) {\n}'
p4772
aS'numbers.add(random);'
p4773
aS'import java.util.ArrayList;\nimport java.util.Random;\n\npublic class Test {\n\n    public static void main(String[] args) {\n        int size = 20;\n        ArrayList<Integer> list = new ArrayList<Integer>(size);\n        for (int i = 1; i <= size; i++) {\n            list.add(i);\n        }\n        Random rand = new Random();\n        while (list.size() > 0) {\n            int index = rand.nextInt(list.size());\n            System.out.println("Selected: " + list.remove(index));\n        }\n    }\n}'
p4774
aS'ArrayList<Integer> list = new ArrayList<Integer>(size);\nfor (int i = 1; i <= size; i++) {\n    list.add(i);\n}\nRandom rand = new Random();\nwhile (list.size() > 0) {\n    int index = rand.nextInt(list.size());\n    System.out.println("Selected: " + list.remove(index));\n}'
p4775
aS'int size = 20;\nArrayList<Integer> list = new ArrayList<Integer>(size);\nfor (int i = 1; i <= size; i++) {\n    list.add(i);\n}\nRandom rand = new Random();'
p4776
aS'while (numbers.size() < 4) {\n    int random = randomGenerator.nextInt(4);\n}'
p4777
aS'while (generated.size() < numbersNeeded) {\n    Integer next = rng.nextInt(max) + 1;\n}'
p4778
aS'if (!numbers.contains(random)) {\n    numbers.add(random);\n}'
p4779
aS'while (generated.size() < numbersNeeded) {\n    Integer next = rng.nextInt(max) + 1;\n    generated.add(next);\n}'
p4780
aS'Integer next = rng.nextInt(max) + 1;\ngenerated.add(next);'
p4781
atp4782
Rp4783
sI109383
g1
((lp4784
S'HashMap<String, Double> map = new HashMap<String, Double>();\nValueComparator bvc = new ValueComparator(map);\nTreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);\nmap.put("A", 99.5);\nmap.put("B", 67.4);\nmap.put("C", 67.4);'
p4785
aS'for (int i = 0; i < 1000; ++i) {\n    testMap.put("SomeString" + random.nextInt(), random.nextInt());\n}'
p4786
aS'TreeMap<String, Integer> map = new ValueComparableMap<String, Integer>(Ordering.natural());\nmap.put("a", 5);\nmap.put("b", 1);\nmap.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);\nassertEquals(5, map.size());\nassertEquals(2, (int) map.get("e"));'
p4787
aS'Assert.assertEquals(1000, testMap.size());\nInteger previous = null;\nfor (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n}'
p4788
aS'class ValueComparator implements Comparator<String> {\n\n    Map<String, Double> base;\n\n    public ValueComparator(Map<String, Double> base) {\n        this.base = base;\n    }\n\n    public int compare(String a, String b) {\n        if (base.get(a) >= base.get(b)) {\n            return -1;\n        } else {\n            return 1;\n        }\n    }\n}'
p4789
aS'TreeMap<String, Integer> map = new ValueComparableMap<String, Integer>(Ordering.natural());\nmap.put("a", 5);\nmap.put("b", 1);\nmap.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());'
p4790
aS'@Test\npublic void testSortByValue() {\n    Random random = new Random(System.currentTimeMillis());\n    Map<String, Integer> testMap = new HashMap<String, Integer>(1000);\n    for (int i = 0; i < 1000; ++i) {\n        testMap.put("SomeString" + random.nextInt(), random.nextInt());\n    }\n    testMap = MapUtil.sortByValue(testMap);\n    Assert.assertEquals(1000, testMap.size());\n    Integer previous = null;\n    for (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n        Assert.assertNotNull(entry.getValue());\n        if (previous != null) {\n            Assert.assertTrue(entry.getValue() >= previous);\n        }\n        previous = entry.getValue();\n    }\n}'
p4791
aS'if (previous != null) {\n    Assert.assertTrue(entry.getValue() >= previous);\n}\nprevious = entry.getValue();'
p4792
aS'valueComparator = Ordering.natural().onResultOf(Functions.forMap(map));'
p4793
aS'HashMap<String, Double> map = new HashMap<String, Double>();\nValueComparator bvc = new ValueComparator(map);\nTreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);\nmap.put("A", 99.5);'
p4794
aS'assertEquals(2, (int) map.get("e"));'
p4795
aS'import java.util.Map;\nimport java.util.TreeMap;'
p4796
aS'import java.util.Map;\nimport java.util.TreeMap;\nimport com.google.common.base.Functions;'
p4797
aS'testMap = MapUtil.sortByValue(testMap);\nAssert.assertEquals(1000, testMap.size());\nInteger previous = null;\nfor (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n    Assert.assertNotNull(entry.getValue());\n}'
p4798
aS'import com.google.common.base.Functions;\nimport com.google.common.collect.Ordering;\n\nclass ValueComparableMap<K extends Comparable<K>, V> extends TreeMap<K, V> {\n\n    private final Map<K, V> valueMap;\n\n    ValueComparableMap(final Ordering<? super V> partialValueOrdering) {\n        this(partialValueOrdering, new HashMap<K, V>());\n    }\n\n    private ValueComparableMap(Ordering<? super V> partialValueOrdering, HashMap<K, V> valueMap) {\n        super(partialValueOrdering.onResultOf(Functions.forMap(valueMap)).compound(Ordering.natural()));\n        this.valueMap = valueMap;\n    }\n\n    public V put(K k, V v) {\n        if (valueMap.containsKey(k)) {\n            remove(k);\n        }\n        valueMap.put(k, v);\n        return super.put(k, v);\n    }\n\n    public static void main(String[] args) {\n        TreeMap<String, Integer> map = new ValueComparableMap<String, Integer>(Ordering.natural());\n        map.put("a", 5);\n        map.put("b", 1);\n        map.put("c", 3);\n        assertEquals("b", map.firstKey());\n        assertEquals("a", map.lastKey());\n        map.put("d", 0);\n        assertEquals("d", map.firstKey());\n        map.put("d", 2);\n        assertEquals("b", map.firstKey());\n        map.put("e", 2);\n        assertEquals(5, map.size());\n        assertEquals(2, (int) map.get("e"));\n        assertEquals(2, (int) map.get("d"));\n    }\n}'
p4799
aS'Random random = new Random(System.currentTimeMillis());\nMap<String, Integer> testMap = new HashMap<String, Integer>(1000);\nfor (int i = 0; i < 1000; ++i) {\n    testMap.put("SomeString" + random.nextInt(), random.nextInt());\n}\ntestMap = MapUtil.sortByValue(testMap);\nAssert.assertEquals(1000, testMap.size());\nInteger previous = null;\nfor (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n    Assert.assertNotNull(entry.getValue());\n    if (previous != null) {\n        Assert.assertTrue(entry.getValue() >= previous);\n    }\n    previous = entry.getValue();\n}'
p4800
aS'assertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());'
p4801
aS'map.put("a", 5);\nmap.put("b", 1);\nmap.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());'
p4802
aS'assertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);\nassertEquals(5, map.size());\nassertEquals(2, (int) map.get("e"));\nassertEquals(2, (int) map.get("d"));'
p4803
aS'Map<K, V> result = new LinkedHashMap<>();'
p4804
aS'Random random = new Random(System.currentTimeMillis());\nMap<String, Integer> testMap = new HashMap<String, Integer>(1000);\nfor (int i = 0; i < 1000; ++i) {\n    testMap.put("SomeString" + random.nextInt(), random.nextInt());\n}'
p4805
aS'map.put("a", 5);\nmap.put("b", 1);\nmap.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);\nassertEquals(5, map.size());\nassertEquals(2, (int) map.get("e"));\nassertEquals(2, (int) map.get("d"));'
p4806
aS'return super.put(k, v);'
p4807
aS'assertEquals("a", map.lastKey());'
p4808
aS'public V put(K k, V v) {\n    if (valueMap.containsKey(k)) {\n        remove(k);\n    }\n    valueMap.put(k, v);\n    return super.put(k, v);\n}'
p4809
aS'Assert.assertEquals(1000, testMap.size());'
p4810
aS'import static org.junit.Assert.assertEquals;\nimport java.util.HashMap;'
p4811
aS'public static void main(String[] args) {\n    HashMap<String, Double> map = new HashMap<String, Double>();\n    ValueComparator bvc = new ValueComparator(map);\n    TreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);\n    map.put("A", 99.5);\n    map.put("B", 67.4);\n    map.put("C", 67.4);\n    map.put("D", 67.3);\n    System.out.println("unsorted map: " + map);\n    sorted_map.putAll(map);\n    System.out.println("results: " + sorted_map);\n}'
p4812
aS'map.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);\nassertEquals(5, map.size());'
p4813
aS'if (base.get(a) >= base.get(b)) {\n    return -1;\n} else {\n    return 1;\n}'
p4814
aS'TreeMap<String, Integer> map = new ValueComparableMap<String, Integer>(Ordering.natural());\nmap.put("a", 5);'
p4815
aS'for (int i = 0; i < 1000; ++i) {\n    testMap.put("SomeString" + random.nextInt(), random.nextInt());\n}\ntestMap = MapUtil.sortByValue(testMap);\nAssert.assertEquals(1000, testMap.size());\nInteger previous = null;\nfor (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n    Assert.assertNotNull(entry.getValue());\n    if (previous != null) {\n        Assert.assertTrue(entry.getValue() >= previous);\n    }\n}'
p4816
aS'Map<String, Double> base;\npublic ValueComparator(Map<String, Double> base) {\n    this.base = base;\n}'
p4817
aS'Integer previous = null;\nfor (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n}'
p4818
aS'map.put("a", 5);\nmap.put("b", 1);\nmap.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());'
p4819
aS'Assert.assertEquals(1000, testMap.size());\nInteger previous = null;'
p4820
aS'assertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());'
p4821
aS'Assert.assertEquals(1000, testMap.size());\nInteger previous = null;\nfor (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n    Assert.assertNotNull(entry.getValue());\n    if (previous != null) {\n        Assert.assertTrue(entry.getValue() >= previous);\n    }\n    previous = entry.getValue();\n}'
p4822
aS'if (base.get(a) >= base.get(b)) {\n}'
p4823
aS'ValueComparableMap(final Ordering<? super V> partialValueOrdering) {\n    this(partialValueOrdering, new HashMap<K, V>());\n}\nprivate ValueComparableMap(Ordering<? super V> partialValueOrdering, HashMap<K, V> valueMap) {\n    super(partialValueOrdering.onResultOf(Functions.forMap(valueMap)).compound(Ordering.natural()));\n    this.valueMap = valueMap;\n}'
p4824
aS'map.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);\nassertEquals(5, map.size());\nassertEquals(2, (int) map.get("e"));\nassertEquals(2, (int) map.get("d"));'
p4825
aS'map.put("A", 99.5);\nmap.put("B", 67.4);\nmap.put("C", 67.4);\nmap.put("D", 67.3);\nSystem.out.println("unsorted map: " + map);\nsorted_map.putAll(map);'
p4826
aS'Assert.assertNotNull(entry.getValue());\nif (previous != null) {\n    Assert.assertTrue(entry.getValue() >= previous);\n}'
p4827
aS'Map<String, Integer> testMap = new HashMap<String, Integer>(1000);\nfor (int i = 0; i < 1000; ++i) {\n    testMap.put("SomeString" + random.nextInt(), random.nextInt());\n}'
p4828
aS'assertEquals(2, (int) map.get("d"));'
p4829
aS'map.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);'
p4830
aS'HashMap<String, Double> map = new HashMap<String, Double>();\nValueComparator bvc = new ValueComparator(map);\nTreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);\nmap.put("A", 99.5);\nmap.put("B", 67.4);\nmap.put("C", 67.4);\nmap.put("D", 67.3);\nSystem.out.println("unsorted map: " + map);'
p4831
aS'TreeMap<String, Integer> map = new ValueComparableMap<String, Integer>(Ordering.natural());\nmap.put("a", 5);\nmap.put("b", 1);\nmap.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);\nassertEquals(5, map.size());'
p4832
aS'map.put("D", 67.3);\nSystem.out.println("unsorted map: " + map);\nsorted_map.putAll(map);\nSystem.out.println("results: " + sorted_map);'
p4833
aS'import java.util.TreeMap;\nimport com.google.common.base.Functions;\nimport com.google.common.collect.Ordering;'
p4834
aS'ValueComparator bvc = new ValueComparator(map);\nTreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);\nmap.put("A", 99.5);\nmap.put("B", 67.4);\nmap.put("C", 67.4);\nmap.put("D", 67.3);'
p4835
aS'map.put("C", 67.4);\nmap.put("D", 67.3);\nSystem.out.println("unsorted map: " + map);\nsorted_map.putAll(map);'
p4836
aS'import java.util.TreeMap;'
p4837
aS'map.put("b", 1);\nmap.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());'
p4838
aS'for (int i = 0; i < 1000; ++i) {\n    testMap.put("SomeString" + random.nextInt(), random.nextInt());\n}\ntestMap = MapUtil.sortByValue(testMap);\nAssert.assertEquals(1000, testMap.size());\nInteger previous = null;'
p4839
aS'List<Map.Entry<K, V>> list = new LinkedList<>(map.entrySet());\nCollections.sort(list, new Comparator<Map.Entry<K, V>>() {\n\n    @Override\n    public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {\n        return (o1.getValue()).compareTo(o2.getValue());\n    }\n});\nMap<K, V> result = new LinkedHashMap<>();'
p4840
aS'map.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());'
p4841
aS'map.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);'
p4842
aS'map.put("d", 0);\nassertEquals("d", map.firstKey());'
p4843
aS'map.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());'
p4844
aS'testMap = MapUtil.sortByValue(testMap);\nAssert.assertEquals(1000, testMap.size());\nInteger previous = null;\nfor (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n    Assert.assertNotNull(entry.getValue());\n    if (previous != null) {\n        Assert.assertTrue(entry.getValue() >= previous);\n    }\n    previous = entry.getValue();\n}'
p4845
aS'map.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());'
p4846
aS'HashMap<String, Double> map = new HashMap<String, Double>();\nValueComparator bvc = new ValueComparator(map);\nTreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);'
p4847
aS'map.put("C", 67.4);\nmap.put("D", 67.3);'
p4848
aS'import java.util.Map;\nimport java.util.TreeMap;\nimport com.google.common.base.Functions;\nimport com.google.common.collect.Ordering;'
p4849
aS'Random random = new Random(System.currentTimeMillis());\nMap<String, Integer> testMap = new HashMap<String, Integer>(1000);\nfor (int i = 0; i < 1000; ++i) {\n    testMap.put("SomeString" + random.nextInt(), random.nextInt());\n}\ntestMap = MapUtil.sortByValue(testMap);\nAssert.assertEquals(1000, testMap.size());\nInteger previous = null;\nfor (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n    Assert.assertNotNull(entry.getValue());\n    if (previous != null) {\n        Assert.assertTrue(entry.getValue() >= previous);\n    }\n}'
p4850
aS'Map<K, V> result = new LinkedHashMap<>();\nfor (Map.Entry<K, V> entry : list) {\n}'
p4851
aS'import static org.junit.Assert.assertEquals;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.TreeMap;\nimport com.google.common.base.Functions;'
p4852
aS'map.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);\nassertEquals(5, map.size());\nassertEquals(2, (int) map.get("e"));'
p4853
aS'List<Map.Entry<K, V>> list = new LinkedList<>(map.entrySet());\nCollections.sort(list, new Comparator<Map.Entry<K, V>>() {\n\n    @Override\n    public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {\n        return (o1.getValue()).compareTo(o2.getValue());\n    }\n});\nMap<K, V> result = new LinkedHashMap<>();\nfor (Map.Entry<K, V> entry : list) {\n}'
p4854
aS'assertEquals("b", map.firstKey());\nmap.put("e", 2);\nassertEquals(5, map.size());\nassertEquals(2, (int) map.get("e"));'
p4855
aS'return result;'
p4856
aS'assertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);\nassertEquals(5, map.size());'
p4857
aS'assertEquals("d", map.firstKey());\nmap.put("d", 2);'
p4858
aS'Integer previous = null;\nfor (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n    Assert.assertNotNull(entry.getValue());\n    if (previous != null) {\n        Assert.assertTrue(entry.getValue() >= previous);\n    }\n}'
p4859
aS'map.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);'
p4860
aS'TreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);\nmap.put("A", 99.5);\nmap.put("B", 67.4);'
p4861
aS'import java.util.TreeMap;\nimport com.google.common.base.Functions;\nimport com.google.common.collect.Ordering;\n\nclass ValueComparableMap<K extends Comparable<K>, V> extends TreeMap<K, V> {\n\n    private final Map<K, V> valueMap;\n\n    ValueComparableMap(final Ordering<? super V> partialValueOrdering) {\n        this(partialValueOrdering, new HashMap<K, V>());\n    }\n\n    private ValueComparableMap(Ordering<? super V> partialValueOrdering, HashMap<K, V> valueMap) {\n        super(partialValueOrdering.onResultOf(Functions.forMap(valueMap)).compound(Ordering.natural()));\n        this.valueMap = valueMap;\n    }\n\n    public V put(K k, V v) {\n        if (valueMap.containsKey(k)) {\n            remove(k);\n        }\n        valueMap.put(k, v);\n        return super.put(k, v);\n    }\n\n    public static void main(String[] args) {\n        TreeMap<String, Integer> map = new ValueComparableMap<String, Integer>(Ordering.natural());\n        map.put("a", 5);\n        map.put("b", 1);\n        map.put("c", 3);\n        assertEquals("b", map.firstKey());\n        assertEquals("a", map.lastKey());\n        map.put("d", 0);\n        assertEquals("d", map.firstKey());\n        map.put("d", 2);\n        assertEquals("b", map.firstKey());\n        map.put("e", 2);\n        assertEquals(5, map.size());\n        assertEquals(2, (int) map.get("e"));\n        assertEquals(2, (int) map.get("d"));\n    }\n}'
p4862
aS'return map.entrySet().stream().sorted(Map.Entry.comparingByValue()).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));'
p4863
aS'List<Map.Entry<K, V>> list = new LinkedList<>(map.entrySet());\nCollections.sort(list, new Comparator<Map.Entry<K, V>>() {\n\n    @Override\n    public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {\n        return (o1.getValue()).compareTo(o2.getValue());\n    }\n});\nMap<K, V> result = new LinkedHashMap<>();\nfor (Map.Entry<K, V> entry : list) {\n    result.put(entry.getKey(), entry.getValue());\n}'
p4864
aS'Map<String, Double> base;'
p4865
aS'Map<String, Double> base;\npublic ValueComparator(Map<String, Double> base) {\n    this.base = base;\n}\npublic int compare(String a, String b) {\n    if (base.get(a) >= base.get(b)) {\n        return -1;\n    } else {\n        return 1;\n    }\n}'
p4866
aS'if (previous != null) {\n}'
p4867
aS'map.put("a", 5);\nmap.put("b", 1);\nmap.put("c", 3);\nassertEquals("b", map.firstKey());'
p4868
aS'remove(k);'
p4869
aS'map.put("D", 67.3);\nSystem.out.println("unsorted map: " + map);'
p4870
aS'map.put("D", 67.3);'
p4871
aS'TreeMap<String, Integer> map = new ValueComparableMap<String, Integer>(Ordering.natural());'
p4872
aS'ValueComparator bvc = new ValueComparator(map);\nTreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);\nmap.put("A", 99.5);\nmap.put("B", 67.4);\nmap.put("C", 67.4);\nmap.put("D", 67.3);\nSystem.out.println("unsorted map: " + map);\nsorted_map.putAll(map);\nSystem.out.println("results: " + sorted_map);'
p4873
aS'private final Map<K, V> valueMap;\nValueComparableMap(final Ordering<? super V> partialValueOrdering) {\n    this(partialValueOrdering, new HashMap<K, V>());\n}\nprivate ValueComparableMap(Ordering<? super V> partialValueOrdering, HashMap<K, V> valueMap) {\n    super(partialValueOrdering.onResultOf(Functions.forMap(valueMap)).compound(Ordering.natural()));\n    this.valueMap = valueMap;\n}'
p4874
aS'map.put("b", 1);\nmap.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);'
p4875
aS'for (int i = 0; i < 1000; ++i) {\n    testMap.put("SomeString" + random.nextInt(), random.nextInt());\n}\ntestMap = MapUtil.sortByValue(testMap);\nAssert.assertEquals(1000, testMap.size());\nInteger previous = null;\nfor (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n    Assert.assertNotNull(entry.getValue());\n    if (previous != null) {\n        Assert.assertTrue(entry.getValue() >= previous);\n    }\n    previous = entry.getValue();\n}'
p4876
aS'import java.util.HashMap;\nimport java.util.Map;\nimport java.util.TreeMap;\nimport com.google.common.base.Functions;\nimport com.google.common.collect.Ordering;\n\nclass ValueComparableMap<K extends Comparable<K>, V> extends TreeMap<K, V> {\n\n    private final Map<K, V> valueMap;\n\n    ValueComparableMap(final Ordering<? super V> partialValueOrdering) {\n        this(partialValueOrdering, new HashMap<K, V>());\n    }\n\n    private ValueComparableMap(Ordering<? super V> partialValueOrdering, HashMap<K, V> valueMap) {\n        super(partialValueOrdering.onResultOf(Functions.forMap(valueMap)).compound(Ordering.natural()));\n        this.valueMap = valueMap;\n    }\n\n    public V put(K k, V v) {\n        if (valueMap.containsKey(k)) {\n            remove(k);\n        }\n        valueMap.put(k, v);\n        return super.put(k, v);\n    }\n\n    public static void main(String[] args) {\n        TreeMap<String, Integer> map = new ValueComparableMap<String, Integer>(Ordering.natural());\n        map.put("a", 5);\n        map.put("b", 1);\n        map.put("c", 3);\n        assertEquals("b", map.firstKey());\n        assertEquals("a", map.lastKey());\n        map.put("d", 0);\n        assertEquals("d", map.firstKey());\n        map.put("d", 2);\n        assertEquals("b", map.firstKey());\n        map.put("e", 2);\n        assertEquals(5, map.size());\n        assertEquals(2, (int) map.get("e"));\n        assertEquals(2, (int) map.get("d"));\n    }\n}'
p4877
aS'assertEquals(5, map.size());\nassertEquals(2, (int) map.get("e"));\nassertEquals(2, (int) map.get("d"));'
p4878
aS'map.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);\nassertEquals(5, map.size());'
p4879
aS'map.put("b", 1);\nmap.put("c", 3);\nassertEquals("b", map.firstKey());'
p4880
aS'Map<String, Integer> testMap = new HashMap<String, Integer>(1000);\nfor (int i = 0; i < 1000; ++i) {\n    testMap.put("SomeString" + random.nextInt(), random.nextInt());\n}\ntestMap = MapUtil.sortByValue(testMap);'
p4881
aS'class ValueComparableMap<K extends Comparable<K>, V> extends TreeMap<K, V> {\n}'
p4882
aS'List<Map.Entry<K, V>> list = new LinkedList<>(map.entrySet());'
p4883
aS'map.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);\nassertEquals(5, map.size());\nassertEquals(2, (int) map.get("e"));\nassertEquals(2, (int) map.get("d"));'
p4884
aS'result.put(entry.getKey(), entry.getValue());'
p4885
aS'Map<String, Integer> testMap = new HashMap<String, Integer>(1000);\nfor (int i = 0; i < 1000; ++i) {\n    testMap.put("SomeString" + random.nextInt(), random.nextInt());\n}\ntestMap = MapUtil.sortByValue(testMap);\nAssert.assertEquals(1000, testMap.size());\nInteger previous = null;'
p4886
aS'Assert.assertTrue(entry.getValue() >= previous);'
p4887
aS'valueComparator = Ordering.from(comparator).onResultOf(Functions.forMap(map));'
p4888
aS'if (previous != null) {\n    Assert.assertTrue(entry.getValue() >= previous);\n}'
p4889
aS'assertEquals("d", map.firstKey());'
p4890
aS'new ValueComparableMap(Ordering.natural());'
p4891
aS'public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {\n    return (o1.getValue()).compareTo(o2.getValue());\n}'
p4892
aS'return -1;'
p4893
aS'TreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);\nmap.put("A", 99.5);\nmap.put("B", 67.4);\nmap.put("C", 67.4);'
p4894
aS'public class Testing {\n\n    public static void main(String[] args) {\n        HashMap<String, Double> map = new HashMap<String, Double>();\n        ValueComparator bvc = new ValueComparator(map);\n        TreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);\n        map.put("A", 99.5);\n        map.put("B", 67.4);\n        map.put("C", 67.4);\n        map.put("D", 67.3);\n        System.out.println("unsorted map: " + map);\n        sorted_map.putAll(map);\n        System.out.println("results: " + sorted_map);\n    }\n}\n\nclass ValueComparator implements Comparator<String> {\n\n    Map<String, Double> base;\n\n    public ValueComparator(Map<String, Double> base) {\n        this.base = base;\n    }\n\n    public int compare(String a, String b) {\n        if (base.get(a) >= base.get(b)) {\n            return -1;\n        } else {\n            return 1;\n        }\n    }\n}'
p4895
aS'import org.junit.*;\n\npublic class MapUtilTest {\n\n    @Test\n    public void testSortByValue() {\n        Random random = new Random(System.currentTimeMillis());\n        Map<String, Integer> testMap = new HashMap<String, Integer>(1000);\n        for (int i = 0; i < 1000; ++i) {\n            testMap.put("SomeString" + random.nextInt(), random.nextInt());\n        }\n        testMap = MapUtil.sortByValue(testMap);\n        Assert.assertEquals(1000, testMap.size());\n        Integer previous = null;\n        for (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n            Assert.assertNotNull(entry.getValue());\n            if (previous != null) {\n                Assert.assertTrue(entry.getValue() >= previous);\n            }\n            previous = entry.getValue();\n        }\n    }\n}'
p4896
aS'ValueComparableMap(final Ordering<? super V> partialValueOrdering) {\n    this(partialValueOrdering, new HashMap<K, V>());\n}'
p4897
aS'List<Map.Entry<K, V>> list = new LinkedList<Map.Entry<K, V>>(map.entrySet());\nCollections.sort(list, new Comparator<Map.Entry<K, V>>() {\n\n    public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {\n        return (o1.getValue()).compareTo(o2.getValue());\n    }\n});\nMap<K, V> result = new LinkedHashMap<K, V>();\nfor (Map.Entry<K, V> entry : list) {\n    result.put(entry.getKey(), entry.getValue());\n}\nreturn result;'
p4898
aS'testMap = MapUtil.sortByValue(testMap);\nAssert.assertEquals(1000, testMap.size());'
p4899
aS'import java.util.HashMap;\nimport java.util.Map;\nimport java.util.TreeMap;\nimport com.google.common.base.Functions;'
p4900
aS'import java.util.HashMap;\nimport java.util.Map;'
p4901
aS'Map<K, V> result = new LinkedHashMap<>();\nfor (Map.Entry<K, V> entry : list) {\n    result.put(entry.getKey(), entry.getValue());\n}'
p4902
aS'map.put("A", 99.5);\nmap.put("B", 67.4);\nmap.put("C", 67.4);'
p4903
aS'TreeMap<String, Integer> map = new ValueComparableMap<String, Integer>(Ordering.natural());\nmap.put("a", 5);\nmap.put("b", 1);\nmap.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);'
p4904
aS'testMap = MapUtil.sortByValue(testMap);'
p4905
aS'ValueComparator bvc = new ValueComparator(map);\nTreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);\nmap.put("A", 99.5);'
p4906
aS'map.put("b", 1);\nmap.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);'
p4907
aS'map.put("a", 5);'
p4908
aS'public ValueComparator(Map<String, Double> base) {\n    this.base = base;\n}'
p4909
aS'map.put("d", 2);'
p4910
aS'import java.util.Map;'
p4911
aS'import java.util.*;\nimport org.junit.*;\n\npublic class MapUtilTest {\n\n    @Test\n    public void testSortByValue() {\n        Random random = new Random(System.currentTimeMillis());\n        Map<String, Integer> testMap = new HashMap<String, Integer>(1000);\n        for (int i = 0; i < 1000; ++i) {\n            testMap.put("SomeString" + random.nextInt(), random.nextInt());\n        }\n        testMap = MapUtil.sortByValue(testMap);\n        Assert.assertEquals(1000, testMap.size());\n        Integer previous = null;\n        for (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n            Assert.assertNotNull(entry.getValue());\n            if (previous != null) {\n                Assert.assertTrue(entry.getValue() >= previous);\n            }\n            previous = entry.getValue();\n        }\n    }\n}'
p4912
aS'new ValueComparableMap(Ordering.natural());\nnew ValueComparableMap(Ordering.from(comparator));'
p4913
aS'TreeMap<String, Integer> map = new ValueComparableMap<String, Integer>(Ordering.natural());\nmap.put("a", 5);\nmap.put("b", 1);\nmap.put("c", 3);'
p4914
aS'map.put("b", 1);\nmap.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);'
p4915
aS'HashMap<String, Double> map = new HashMap<String, Double>();\nValueComparator bvc = new ValueComparator(map);\nTreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);\nmap.put("A", 99.5);\nmap.put("B", 67.4);\nmap.put("C", 67.4);\nmap.put("D", 67.3);\nSystem.out.println("unsorted map: " + map);\nsorted_map.putAll(map);'
p4916
aS'private ValueComparableMap(Ordering<? super V> partialValueOrdering, HashMap<K, V> valueMap) {\n    super(partialValueOrdering.onResultOf(Functions.forMap(valueMap)).compound(Ordering.natural()));\n    this.valueMap = valueMap;\n}\npublic V put(K k, V v) {\n    if (valueMap.containsKey(k)) {\n        remove(k);\n    }\n    valueMap.put(k, v);\n    return super.put(k, v);\n}\npublic static void main(String[] args) {\n    TreeMap<String, Integer> map = new ValueComparableMap<String, Integer>(Ordering.natural());\n    map.put("a", 5);\n    map.put("b", 1);\n    map.put("c", 3);\n    assertEquals("b", map.firstKey());\n    assertEquals("a", map.lastKey());\n    map.put("d", 0);\n    assertEquals("d", map.firstKey());\n    map.put("d", 2);\n    assertEquals("b", map.firstKey());\n    map.put("e", 2);\n    assertEquals(5, map.size());\n    assertEquals(2, (int) map.get("e"));\n    assertEquals(2, (int) map.get("d"));\n}'
p4917
aS'public class MapUtil {\n\n    public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) {\n        List<Map.Entry<K, V>> list = new LinkedList<Map.Entry<K, V>>(map.entrySet());\n        Collections.sort(list, new Comparator<Map.Entry<K, V>>() {\n\n            public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {\n                return (o1.getValue()).compareTo(o2.getValue());\n            }\n        });\n        Map<K, V> result = new LinkedHashMap<K, V>();\n        for (Map.Entry<K, V> entry : list) {\n            result.put(entry.getKey(), entry.getValue());\n        }\n        return result;\n    }\n}'
p4918
aS'public class MapUtilTest {\n\n    @Test\n    public void testSortByValue() {\n        Random random = new Random(System.currentTimeMillis());\n        Map<String, Integer> testMap = new HashMap<String, Integer>(1000);\n        for (int i = 0; i < 1000; ++i) {\n            testMap.put("SomeString" + random.nextInt(), random.nextInt());\n        }\n        testMap = MapUtil.sortByValue(testMap);\n        Assert.assertEquals(1000, testMap.size());\n        Integer previous = null;\n        for (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n            Assert.assertNotNull(entry.getValue());\n            if (previous != null) {\n                Assert.assertTrue(entry.getValue() >= previous);\n            }\n            previous = entry.getValue();\n        }\n    }\n}'
p4919
aS'import static org.junit.Assert.assertEquals;\nimport java.util.HashMap;\nimport java.util.Map;'
p4920
aS'return 1;'
p4921
aS'class ValueComparator implements Comparator<String> {\n}'
p4922
aS'TreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);\nmap.put("A", 99.5);\nmap.put("B", 67.4);\nmap.put("C", 67.4);\nmap.put("D", 67.3);'
p4923
aS'List<Map.Entry<K, V>> list = new LinkedList<Map.Entry<K, V>>(map.entrySet());'
p4924
aS'TreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);\nmap.put("A", 99.5);\nmap.put("B", 67.4);\nmap.put("C", 67.4);\nmap.put("D", 67.3);\nSystem.out.println("unsorted map: " + map);'
p4925
aS'for (int i = 0; i < 1000; ++i) {\n    testMap.put("SomeString" + random.nextInt(), random.nextInt());\n}\ntestMap = MapUtil.sortByValue(testMap);'
p4926
aS'Map<K, V> result = new LinkedHashMap<K, V>();\nfor (Map.Entry<K, V> entry : list) {\n}'
p4927
aS'assertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);\nassertEquals(5, map.size());'
p4928
aS'if (valueMap.containsKey(k)) {\n    remove(k);\n}\nvalueMap.put(k, v);\nreturn super.put(k, v);'
p4929
aS'@Override\npublic int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {\n    return (o1.getValue()).compareTo(o2.getValue());\n}'
p4930
aS'assertEquals("b", map.firstKey());'
p4931
aS'private ValueComparableMap(Ordering<? super V> partialValueOrdering, HashMap<K, V> valueMap) {\n    super(partialValueOrdering.onResultOf(Functions.forMap(valueMap)).compound(Ordering.natural()));\n    this.valueMap = valueMap;\n}'
p4932
aS'valueMap.put(k, v);'
p4933
aS'import static org.junit.Assert.assertEquals;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.TreeMap;\nimport com.google.common.base.Functions;\nimport com.google.common.collect.Ordering;'
p4934
aS'assertEquals(5, map.size());\nassertEquals(2, (int) map.get("e"));'
p4935
aS'map.put("e", 2);\nassertEquals(5, map.size());'
p4936
aS'Map<String, Integer> testMap = new HashMap<String, Integer>(1000);\nfor (int i = 0; i < 1000; ++i) {\n    testMap.put("SomeString" + random.nextInt(), random.nextInt());\n}\ntestMap = MapUtil.sortByValue(testMap);\nAssert.assertEquals(1000, testMap.size());'
p4937
aS'testMap.put("SomeString" + random.nextInt(), random.nextInt());'
p4938
aS'if (valueMap.containsKey(k)) {\n    remove(k);\n}\nvalueMap.put(k, v);'
p4939
aS'map.put("A", 99.5);\nmap.put("B", 67.4);\nmap.put("C", 67.4);\nmap.put("D", 67.3);\nSystem.out.println("unsorted map: " + map);\nsorted_map.putAll(map);\nSystem.out.println("results: " + sorted_map);'
p4940
aS'assertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);\nassertEquals(5, map.size());'
p4941
aS'TreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);\nmap.put("A", 99.5);'
p4942
aS'map.put("a", 5);\nmap.put("b", 1);'
p4943
aS'Map<String, Integer> testMap = new HashMap<String, Integer>(1000);\nfor (int i = 0; i < 1000; ++i) {\n    testMap.put("SomeString" + random.nextInt(), random.nextInt());\n}\ntestMap = MapUtil.sortByValue(testMap);\nAssert.assertEquals(1000, testMap.size());\nInteger previous = null;\nfor (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n    Assert.assertNotNull(entry.getValue());\n}'
p4944
aS'ValueComparableMap(final Ordering<? super V> partialValueOrdering) {\n    this(partialValueOrdering, new HashMap<K, V>());\n}\nprivate ValueComparableMap(Ordering<? super V> partialValueOrdering, HashMap<K, V> valueMap) {\n    super(partialValueOrdering.onResultOf(Functions.forMap(valueMap)).compound(Ordering.natural()));\n    this.valueMap = valueMap;\n}\npublic V put(K k, V v) {\n    if (valueMap.containsKey(k)) {\n        remove(k);\n    }\n    valueMap.put(k, v);\n    return super.put(k, v);\n}\npublic static void main(String[] args) {\n    TreeMap<String, Integer> map = new ValueComparableMap<String, Integer>(Ordering.natural());\n    map.put("a", 5);\n    map.put("b", 1);\n    map.put("c", 3);\n    assertEquals("b", map.firstKey());\n    assertEquals("a", map.lastKey());\n    map.put("d", 0);\n    assertEquals("d", map.firstKey());\n    map.put("d", 2);\n    assertEquals("b", map.firstKey());\n    map.put("e", 2);\n    assertEquals(5, map.size());\n    assertEquals(2, (int) map.get("e"));\n    assertEquals(2, (int) map.get("d"));\n}'
p4945
aS'class ValueComparableMap<K extends Comparable<K>, V> extends TreeMap<K, V> {\n\n    private final Map<K, V> valueMap;\n\n    ValueComparableMap(final Ordering<? super V> partialValueOrdering) {\n        this(partialValueOrdering, new HashMap<K, V>());\n    }\n\n    private ValueComparableMap(Ordering<? super V> partialValueOrdering, HashMap<K, V> valueMap) {\n        super(partialValueOrdering.onResultOf(Functions.forMap(valueMap)).compound(Ordering.natural()));\n        this.valueMap = valueMap;\n    }\n\n    public V put(K k, V v) {\n        if (valueMap.containsKey(k)) {\n            remove(k);\n        }\n        valueMap.put(k, v);\n        return super.put(k, v);\n    }\n\n    public static void main(String[] args) {\n        TreeMap<String, Integer> map = new ValueComparableMap<String, Integer>(Ordering.natural());\n        map.put("a", 5);\n        map.put("b", 1);\n        map.put("c", 3);\n        assertEquals("b", map.firstKey());\n        assertEquals("a", map.lastKey());\n        map.put("d", 0);\n        assertEquals("d", map.firstKey());\n        map.put("d", 2);\n        assertEquals("b", map.firstKey());\n        map.put("e", 2);\n        assertEquals(5, map.size());\n        assertEquals(2, (int) map.get("e"));\n        assertEquals(2, (int) map.get("d"));\n    }\n}'
p4946
aS'map.put("e", 2);\nassertEquals(5, map.size());\nassertEquals(2, (int) map.get("e"));'
p4947
aS'map.put("C", 67.4);\nmap.put("D", 67.3);\nSystem.out.println("unsorted map: " + map);\nsorted_map.putAll(map);\nSystem.out.println("results: " + sorted_map);'
p4948
aS'Integer previous = null;'
p4949
aS'assertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());'
p4950
aS'public ValueComparator(Map<String, Double> base) {\n    this.base = base;\n}\npublic int compare(String a, String b) {\n    if (base.get(a) >= base.get(b)) {\n        return -1;\n    } else {\n        return 1;\n    }\n}'
p4951
aS'Collections.sort(list, new Comparator<Map.Entry<K, V>>() {\n\n    @Override\n    public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {\n        return (o1.getValue()).compareTo(o2.getValue());\n    }\n});\nMap<K, V> result = new LinkedHashMap<>();\nfor (Map.Entry<K, V> entry : list) {\n    result.put(entry.getKey(), entry.getValue());\n}\nreturn result;'
p4952
aS'previous = entry.getValue();'
p4953
aS'Map<String, Integer> testMap = new HashMap<String, Integer>(1000);'
p4954
aS'import java.util.*;\nimport org.junit.*;'
p4955
aS'assertEquals(5, map.size());'
p4956
aS'assertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());'
p4957
aS'map.put("a", 5);\nmap.put("b", 1);\nmap.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);\nassertEquals(5, map.size());'
p4958
aS'Random random = new Random(System.currentTimeMillis());\nMap<String, Integer> testMap = new HashMap<String, Integer>(1000);\nfor (int i = 0; i < 1000; ++i) {\n    testMap.put("SomeString" + random.nextInt(), random.nextInt());\n}\ntestMap = MapUtil.sortByValue(testMap);\nAssert.assertEquals(1000, testMap.size());\nInteger previous = null;\nfor (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n}'
p4959
aS'assertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);'
p4960
aS'valueMap.put(k, v);\nreturn super.put(k, v);'
p4961
aS'public static void main(String[] args) {\n    TreeMap<String, Integer> map = new ValueComparableMap<String, Integer>(Ordering.natural());\n    map.put("a", 5);\n    map.put("b", 1);\n    map.put("c", 3);\n    assertEquals("b", map.firstKey());\n    assertEquals("a", map.lastKey());\n    map.put("d", 0);\n    assertEquals("d", map.firstKey());\n    map.put("d", 2);\n    assertEquals("b", map.firstKey());\n    map.put("e", 2);\n    assertEquals(5, map.size());\n    assertEquals(2, (int) map.get("e"));\n    assertEquals(2, (int) map.get("d"));\n}'
p4962
aS'assertEquals(2, (int) map.get("e"));\nassertEquals(2, (int) map.get("d"));'
p4963
aS'import com.google.common.collect.Ordering;'
p4964
aS'Collections.sort(list, new Comparator<Map.Entry<K, V>>() {\n\n    public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {\n        return (o1.getValue()).compareTo(o2.getValue());\n    }\n});'
p4965
aS'assertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);\nassertEquals(5, map.size());\nassertEquals(2, (int) map.get("e"));'
p4966
aS'Collections.sort(list, new Comparator<Map.Entry<K, V>>() {\n\n    public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {\n        return (o1.getValue()).compareTo(o2.getValue());\n    }\n});\nMap<K, V> result = new LinkedHashMap<K, V>();'
p4967
aS'ValueComparator bvc = new ValueComparator(map);\nTreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);\nmap.put("A", 99.5);\nmap.put("B", 67.4);'
p4968
aS'for (int i = 0; i < 1000; ++i) {\n    testMap.put("SomeString" + random.nextInt(), random.nextInt());\n}\ntestMap = MapUtil.sortByValue(testMap);\nAssert.assertEquals(1000, testMap.size());\nInteger previous = null;\nfor (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n    Assert.assertNotNull(entry.getValue());\n}'
p4969
aS'map.put("B", 67.4);\nmap.put("C", 67.4);\nmap.put("D", 67.3);'
p4970
aS'private final Map<K, V> valueMap;\nValueComparableMap(final Ordering<? super V> partialValueOrdering) {\n    this(partialValueOrdering, new HashMap<K, V>());\n}\nprivate ValueComparableMap(Ordering<? super V> partialValueOrdering, HashMap<K, V> valueMap) {\n    super(partialValueOrdering.onResultOf(Functions.forMap(valueMap)).compound(Ordering.natural()));\n    this.valueMap = valueMap;\n}\npublic V put(K k, V v) {\n    if (valueMap.containsKey(k)) {\n        remove(k);\n    }\n    valueMap.put(k, v);\n    return super.put(k, v);\n}\npublic static void main(String[] args) {\n    TreeMap<String, Integer> map = new ValueComparableMap<String, Integer>(Ordering.natural());\n    map.put("a", 5);\n    map.put("b", 1);\n    map.put("c", 3);\n    assertEquals("b", map.firstKey());\n    assertEquals("a", map.lastKey());\n    map.put("d", 0);\n    assertEquals("d", map.firstKey());\n    map.put("d", 2);\n    assertEquals("b", map.firstKey());\n    map.put("e", 2);\n    assertEquals(5, map.size());\n    assertEquals(2, (int) map.get("e"));\n    assertEquals(2, (int) map.get("d"));\n}'
p4971
aS'import java.util.*;'
p4972
aS'map.put("b", 1);\nmap.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);\nassertEquals(5, map.size());'
p4973
aS'map.put("C", 67.4);'
p4974
aS'private final Map<K, V> valueMap;\nValueComparableMap(final Ordering<? super V> partialValueOrdering) {\n    this(partialValueOrdering, new HashMap<K, V>());\n}\nprivate ValueComparableMap(Ordering<? super V> partialValueOrdering, HashMap<K, V> valueMap) {\n    super(partialValueOrdering.onResultOf(Functions.forMap(valueMap)).compound(Ordering.natural()));\n    this.valueMap = valueMap;\n}\npublic V put(K k, V v) {\n    if (valueMap.containsKey(k)) {\n        remove(k);\n    }\n    valueMap.put(k, v);\n    return super.put(k, v);\n}'
p4975
aS'public void testSortByValue() {\n    Random random = new Random(System.currentTimeMillis());\n    Map<String, Integer> testMap = new HashMap<String, Integer>(1000);\n    for (int i = 0; i < 1000; ++i) {\n        testMap.put("SomeString" + random.nextInt(), random.nextInt());\n    }\n    testMap = MapUtil.sortByValue(testMap);\n    Assert.assertEquals(1000, testMap.size());\n    Integer previous = null;\n    for (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n        Assert.assertNotNull(entry.getValue());\n        if (previous != null) {\n            Assert.assertTrue(entry.getValue() >= previous);\n        }\n        previous = entry.getValue();\n    }\n}'
p4976
aS'map.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);\nassertEquals(5, map.size());\nassertEquals(2, (int) map.get("e"));'
p4977
aS'Map<String, Integer> testMap = new HashMap<String, Integer>(1000);\nfor (int i = 0; i < 1000; ++i) {\n}'
p4978
aS'TreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);\nmap.put("A", 99.5);\nmap.put("B", 67.4);\nmap.put("C", 67.4);\nmap.put("D", 67.3);\nSystem.out.println("unsorted map: " + map);\nsorted_map.putAll(map);'
p4979
aS'for (Map.Entry<K, V> entry : list) {\n}'
p4980
aS'assertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());'
p4981
aS'import java.util.*;\n\npublic class MapUtil {\n\n    public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) {\n        List<Map.Entry<K, V>> list = new LinkedList<Map.Entry<K, V>>(map.entrySet());\n        Collections.sort(list, new Comparator<Map.Entry<K, V>>() {\n\n            public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {\n                return (o1.getValue()).compareTo(o2.getValue());\n            }\n        });\n        Map<K, V> result = new LinkedHashMap<K, V>();\n        for (Map.Entry<K, V> entry : list) {\n            result.put(entry.getKey(), entry.getValue());\n        }\n        return result;\n    }\n}'
p4982
aS'import com.google.common.base.Functions;'
p4983
aS'map.put("b", 1);\nmap.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);\nassertEquals(5, map.size());\nassertEquals(2, (int) map.get("e"));'
p4984
aS'assertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);'
p4985
aS'TreeMap<String, Integer> map = new ValueComparableMap<String, Integer>(Ordering.natural());\nmap.put("a", 5);\nmap.put("b", 1);\nmap.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());'
p4986
aS'HashMap<String, Double> map = new HashMap<String, Double>();\nValueComparator bvc = new ValueComparator(map);\nTreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);\nmap.put("A", 99.5);\nmap.put("B", 67.4);\nmap.put("C", 67.4);\nmap.put("D", 67.3);'
p4987
aS'map.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);\nassertEquals(5, map.size());\nassertEquals(2, (int) map.get("e"));'
p4988
aS'Random random = new Random(System.currentTimeMillis());\nMap<String, Integer> testMap = new HashMap<String, Integer>(1000);'
p4989
aS'if (valueMap.containsKey(k)) {\n    remove(k);\n}'
p4990
aS'map.put("c", 3);\nassertEquals("b", map.firstKey());'
p4991
aS'map.put("B", 67.4);\nmap.put("C", 67.4);\nmap.put("D", 67.3);\nSystem.out.println("unsorted map: " + map);\nsorted_map.putAll(map);'
p4992
aS'assertEquals("a", map.lastKey());\nmap.put("d", 0);'
p4993
aS'Map<K, V> result = new LinkedHashMap<>();\nfor (Map.Entry<K, V> entry : list) {\n    result.put(entry.getKey(), entry.getValue());\n}\nreturn result;'
p4994
aS'assertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);\nassertEquals(5, map.size());\nassertEquals(2, (int) map.get("e"));\nassertEquals(2, (int) map.get("d"));'
p4995
aS'Random random = new Random(System.currentTimeMillis());\nMap<String, Integer> testMap = new HashMap<String, Integer>(1000);\nfor (int i = 0; i < 1000; ++i) {\n}'
p4996
aS'Integer previous = null;\nfor (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n    Assert.assertNotNull(entry.getValue());\n    if (previous != null) {\n        Assert.assertTrue(entry.getValue() >= previous);\n    }\n    previous = entry.getValue();\n}'
p4997
aS'ValueComparator bvc = new ValueComparator(map);'
p4998
aS'new ValueComparableMap(Ordering.from(comparator));'
p4999
aS'assertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);\nassertEquals(5, map.size());\nassertEquals(2, (int) map.get("e"));\nassertEquals(2, (int) map.get("d"));'
p5000
aS'map.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);\nassertEquals(5, map.size());\nassertEquals(2, (int) map.get("e"));\nassertEquals(2, (int) map.get("d"));'
p5001
aS'map.put("B", 67.4);\nmap.put("C", 67.4);\nmap.put("D", 67.3);\nSystem.out.println("unsorted map: " + map);\nsorted_map.putAll(map);\nSystem.out.println("results: " + sorted_map);'
p5002
aS'Collections.sort(list, new Comparator<Map.Entry<K, V>>() {\n\n    @Override\n    public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {\n        return (o1.getValue()).compareTo(o2.getValue());\n    }\n});\nMap<K, V> result = new LinkedHashMap<>();'
p5003
aS'map.put("B", 67.4);\nmap.put("C", 67.4);\nmap.put("D", 67.3);\nSystem.out.println("unsorted map: " + map);'
p5004
aS'assertEquals("b", map.firstKey());\nmap.put("e", 2);\nassertEquals(5, map.size());'
p5005
aS'assertEquals("b", map.firstKey());\nmap.put("e", 2);'
p5006
aS'sorted_map.putAll(map);\nSystem.out.println("results: " + sorted_map);'
p5007
aS'TreeMap<String, Integer> map = new ValueComparableMap<String, Integer>(Ordering.natural());\nmap.put("a", 5);\nmap.put("b", 1);\nmap.put("c", 3);\nassertEquals("b", map.firstKey());'
p5008
aS'TreeMap<String, Integer> map = new ValueComparableMap<String, Integer>(Ordering.natural());\nmap.put("a", 5);\nmap.put("b", 1);'
p5009
aS'for (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n    Assert.assertNotNull(entry.getValue());\n    if (previous != null) {\n        Assert.assertTrue(entry.getValue() >= previous);\n    }\n    previous = entry.getValue();\n}'
p5010
aS'for (Map.Entry<K, V> entry : list) {\n    result.put(entry.getKey(), entry.getValue());\n}\nreturn result;'
p5011
aS'map.put("B", 67.4);'
p5012
aS'sorted_map.putAll(map);'
p5013
aS'map.put("C", 67.4);\nmap.put("D", 67.3);\nSystem.out.println("unsorted map: " + map);'
p5014
aS'testMap = MapUtil.sortByValue(testMap);\nAssert.assertEquals(1000, testMap.size());\nInteger previous = null;\nfor (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n}'
p5015
aS'for (int i = 0; i < 1000; ++i) {\n    testMap.put("SomeString" + random.nextInt(), random.nextInt());\n}\ntestMap = MapUtil.sortByValue(testMap);\nAssert.assertEquals(1000, testMap.size());'
p5016
aS'TreeMap<String, Integer> map = new ValueComparableMap<String, Integer>(Ordering.natural());\nmap.put("a", 5);\nmap.put("b", 1);\nmap.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);'
p5017
aS'TreeMap<String, Integer> map = new ValueComparableMap<String, Integer>(Ordering.natural());\nmap.put("a", 5);\nmap.put("b", 1);\nmap.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);\nassertEquals(5, map.size());\nassertEquals(2, (int) map.get("e"));\nassertEquals(2, (int) map.get("d"));'
p5018
aS'assertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());'
p5019
aS'ValueComparator bvc = new ValueComparator(map);\nTreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);\nmap.put("A", 99.5);\nmap.put("B", 67.4);\nmap.put("C", 67.4);\nmap.put("D", 67.3);\nSystem.out.println("unsorted map: " + map);'
p5020
aS'Random random = new Random(System.currentTimeMillis());\nMap<String, Integer> testMap = new HashMap<String, Integer>(1000);\nfor (int i = 0; i < 1000; ++i) {\n    testMap.put("SomeString" + random.nextInt(), random.nextInt());\n}\ntestMap = MapUtil.sortByValue(testMap);\nAssert.assertEquals(1000, testMap.size());\nInteger previous = null;'
p5021
aS'map.put("d", 0);'
p5022
aS'Random random = new Random(System.currentTimeMillis());\nMap<String, Integer> testMap = new HashMap<String, Integer>(1000);\nfor (int i = 0; i < 1000; ++i) {\n    testMap.put("SomeString" + random.nextInt(), random.nextInt());\n}\ntestMap = MapUtil.sortByValue(testMap);\nAssert.assertEquals(1000, testMap.size());'
p5023
aS'import java.util.HashMap;\nimport java.util.Map;\nimport java.util.TreeMap;'
p5024
aS'map.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);'
p5025
aS'public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) {\n    List<Map.Entry<K, V>> list = new LinkedList<>(map.entrySet());\n    Collections.sort(list, new Comparator<Map.Entry<K, V>>() {\n\n        @Override\n        public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {\n            return (o1.getValue()).compareTo(o2.getValue());\n        }\n    });\n    Map<K, V> result = new LinkedHashMap<>();\n    for (Map.Entry<K, V> entry : list) {\n        result.put(entry.getKey(), entry.getValue());\n    }\n    return result;\n}'
p5026
aS'return (o1.getValue()).compareTo(o2.getValue());'
p5027
aS'Map<K, V> result = new LinkedHashMap<K, V>();'
p5028
aS'for (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n}'
p5029
aS'class ValueComparator implements Comparator<String> {\n\n    Map<String, Double> base;\n}'
p5030
aS'List<Map.Entry<K, V>> list = new LinkedList<Map.Entry<K, V>>(map.entrySet());\nCollections.sort(list, new Comparator<Map.Entry<K, V>>() {\n\n    public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {\n        return (o1.getValue()).compareTo(o2.getValue());\n    }\n});\nMap<K, V> result = new LinkedHashMap<K, V>();\nfor (Map.Entry<K, V> entry : list) {\n    result.put(entry.getKey(), entry.getValue());\n}'
p5031
aS'private ValueComparableMap(Ordering<? super V> partialValueOrdering, HashMap<K, V> valueMap) {\n    super(partialValueOrdering.onResultOf(Functions.forMap(valueMap)).compound(Ordering.natural()));\n    this.valueMap = valueMap;\n}\npublic V put(K k, V v) {\n    if (valueMap.containsKey(k)) {\n        remove(k);\n    }\n    valueMap.put(k, v);\n    return super.put(k, v);\n}'
p5032
aS'map.put("a", 5);\nmap.put("b", 1);\nmap.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);'
p5033
aS'map.put("A", 99.5);\nmap.put("B", 67.4);\nmap.put("C", 67.4);\nmap.put("D", 67.3);\nSystem.out.println("unsorted map: " + map);'
p5034
aS'Map<String, Integer> testMap = new HashMap<String, Integer>(1000);\nfor (int i = 0; i < 1000; ++i) {\n    testMap.put("SomeString" + random.nextInt(), random.nextInt());\n}\ntestMap = MapUtil.sortByValue(testMap);\nAssert.assertEquals(1000, testMap.size());\nInteger previous = null;\nfor (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n    Assert.assertNotNull(entry.getValue());\n    if (previous != null) {\n        Assert.assertTrue(entry.getValue() >= previous);\n    }\n    previous = entry.getValue();\n}'
p5035
aS'map.put("c", 3);'
p5036
aS'System.out.println("unsorted map: " + map);\nsorted_map.putAll(map);\nSystem.out.println("results: " + sorted_map);'
p5037
aS'Assert.assertEquals(1000, testMap.size());\nInteger previous = null;\nfor (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n    Assert.assertNotNull(entry.getValue());\n}'
p5038
aS'TreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);'
p5039
aS'import static org.junit.Assert.assertEquals;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.TreeMap;'
p5040
aS'if (base.get(a) >= base.get(b)) {\n    return -1;\n} else {\n}'
p5041
aS'Collections.sort(list, new Comparator<Map.Entry<K, V>>() {\n\n    @Override\n    public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {\n        return (o1.getValue()).compareTo(o2.getValue());\n    }\n});'
p5042
aS'Collections.sort(list, new Comparator<Map.Entry<K, V>>() {\n\n    @Override\n    public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {\n        return (o1.getValue()).compareTo(o2.getValue());\n    }\n});\nMap<K, V> result = new LinkedHashMap<>();\nfor (Map.Entry<K, V> entry : list) {\n    result.put(entry.getKey(), entry.getValue());\n}'
p5043
aS'map.put("a", 5);\nmap.put("b", 1);\nmap.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);'
p5044
aS'ValueComparator bvc = new ValueComparator(map);\nTreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);\nmap.put("A", 99.5);\nmap.put("B", 67.4);\nmap.put("C", 67.4);'
p5045
aS'public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) {\n    return map.entrySet().stream().sorted(Map.Entry.comparingByValue()).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));\n}'
p5046
aS'for (int i = 0; i < 1000; ++i) {\n}'
p5047
aS'import static org.junit.Assert.assertEquals;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.TreeMap;\nimport com.google.common.base.Functions;\nimport com.google.common.collect.Ordering;\n\nclass ValueComparableMap<K extends Comparable<K>, V> extends TreeMap<K, V> {\n\n    private final Map<K, V> valueMap;\n\n    ValueComparableMap(final Ordering<? super V> partialValueOrdering) {\n        this(partialValueOrdering, new HashMap<K, V>());\n    }\n\n    private ValueComparableMap(Ordering<? super V> partialValueOrdering, HashMap<K, V> valueMap) {\n        super(partialValueOrdering.onResultOf(Functions.forMap(valueMap)).compound(Ordering.natural()));\n        this.valueMap = valueMap;\n    }\n\n    public V put(K k, V v) {\n        if (valueMap.containsKey(k)) {\n            remove(k);\n        }\n        valueMap.put(k, v);\n        return super.put(k, v);\n    }\n\n    public static void main(String[] args) {\n        TreeMap<String, Integer> map = new ValueComparableMap<String, Integer>(Ordering.natural());\n        map.put("a", 5);\n        map.put("b", 1);\n        map.put("c", 3);\n        assertEquals("b", map.firstKey());\n        assertEquals("a", map.lastKey());\n        map.put("d", 0);\n        assertEquals("d", map.firstKey());\n        map.put("d", 2);\n        assertEquals("b", map.firstKey());\n        map.put("e", 2);\n        assertEquals(5, map.size());\n        assertEquals(2, (int) map.get("e"));\n        assertEquals(2, (int) map.get("d"));\n    }\n}'
p5048
aS'private final Map<K, V> valueMap;\nValueComparableMap(final Ordering<? super V> partialValueOrdering) {\n    this(partialValueOrdering, new HashMap<K, V>());\n}'
p5049
aS'Assert.assertNotNull(entry.getValue());'
p5050
aS'import static org.junit.Assert.assertEquals;'
p5051
aS'testMap = MapUtil.sortByValue(testMap);\nAssert.assertEquals(1000, testMap.size());\nInteger previous = null;'
p5052
aS'for (Map.Entry<K, V> entry : list) {\n    result.put(entry.getKey(), entry.getValue());\n}'
p5053
aS'ValueComparator bvc = new ValueComparator(map);\nTreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);'
p5054
aS'Assert.assertEquals(1000, testMap.size());\nInteger previous = null;\nfor (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n    Assert.assertNotNull(entry.getValue());\n    if (previous != null) {\n        Assert.assertTrue(entry.getValue() >= previous);\n    }\n}'
p5055
aS'Assert.assertNotNull(entry.getValue());\nif (previous != null) {\n}'
p5056
aS'import java.util.Map;\nimport java.util.TreeMap;\nimport com.google.common.base.Functions;\nimport com.google.common.collect.Ordering;\n\nclass ValueComparableMap<K extends Comparable<K>, V> extends TreeMap<K, V> {\n\n    private final Map<K, V> valueMap;\n\n    ValueComparableMap(final Ordering<? super V> partialValueOrdering) {\n        this(partialValueOrdering, new HashMap<K, V>());\n    }\n\n    private ValueComparableMap(Ordering<? super V> partialValueOrdering, HashMap<K, V> valueMap) {\n        super(partialValueOrdering.onResultOf(Functions.forMap(valueMap)).compound(Ordering.natural()));\n        this.valueMap = valueMap;\n    }\n\n    public V put(K k, V v) {\n        if (valueMap.containsKey(k)) {\n            remove(k);\n        }\n        valueMap.put(k, v);\n        return super.put(k, v);\n    }\n\n    public static void main(String[] args) {\n        TreeMap<String, Integer> map = new ValueComparableMap<String, Integer>(Ordering.natural());\n        map.put("a", 5);\n        map.put("b", 1);\n        map.put("c", 3);\n        assertEquals("b", map.firstKey());\n        assertEquals("a", map.lastKey());\n        map.put("d", 0);\n        assertEquals("d", map.firstKey());\n        map.put("d", 2);\n        assertEquals("b", map.firstKey());\n        map.put("e", 2);\n        assertEquals(5, map.size());\n        assertEquals(2, (int) map.get("e"));\n        assertEquals(2, (int) map.get("d"));\n    }\n}'
p5057
aS'public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) {\n    List<Map.Entry<K, V>> list = new LinkedList<Map.Entry<K, V>>(map.entrySet());\n    Collections.sort(list, new Comparator<Map.Entry<K, V>>() {\n\n        public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {\n            return (o1.getValue()).compareTo(o2.getValue());\n        }\n    });\n    Map<K, V> result = new LinkedHashMap<K, V>();\n    for (Map.Entry<K, V> entry : list) {\n        result.put(entry.getKey(), entry.getValue());\n    }\n    return result;\n}'
p5058
aS'assertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);\nassertEquals(5, map.size());\nassertEquals(2, (int) map.get("e"));'
p5059
aS'map.put("B", 67.4);\nmap.put("C", 67.4);'
p5060
aS'testMap = MapUtil.sortByValue(testMap);\nAssert.assertEquals(1000, testMap.size());\nInteger previous = null;\nfor (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n    Assert.assertNotNull(entry.getValue());\n    if (previous != null) {\n        Assert.assertTrue(entry.getValue() >= previous);\n    }\n}'
p5061
aS'assertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);'
p5062
aS'this.valueMap = valueMap;'
p5063
aS'Map<String, Integer> testMap = new HashMap<String, Integer>(1000);\nfor (int i = 0; i < 1000; ++i) {\n    testMap.put("SomeString" + random.nextInt(), random.nextInt());\n}\ntestMap = MapUtil.sortByValue(testMap);\nAssert.assertEquals(1000, testMap.size());\nInteger previous = null;\nfor (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n    Assert.assertNotNull(entry.getValue());\n    if (previous != null) {\n        Assert.assertTrue(entry.getValue() >= previous);\n    }\n}'
p5064
aS'map = ImmutableSortedMap.copyOf(myOriginalMap, valueComparator);'
p5065
aS'import com.google.common.collect.Ordering;\n\nclass ValueComparableMap<K extends Comparable<K>, V> extends TreeMap<K, V> {\n\n    private final Map<K, V> valueMap;\n\n    ValueComparableMap(final Ordering<? super V> partialValueOrdering) {\n        this(partialValueOrdering, new HashMap<K, V>());\n    }\n\n    private ValueComparableMap(Ordering<? super V> partialValueOrdering, HashMap<K, V> valueMap) {\n        super(partialValueOrdering.onResultOf(Functions.forMap(valueMap)).compound(Ordering.natural()));\n        this.valueMap = valueMap;\n    }\n\n    public V put(K k, V v) {\n        if (valueMap.containsKey(k)) {\n            remove(k);\n        }\n        valueMap.put(k, v);\n        return super.put(k, v);\n    }\n\n    public static void main(String[] args) {\n        TreeMap<String, Integer> map = new ValueComparableMap<String, Integer>(Ordering.natural());\n        map.put("a", 5);\n        map.put("b", 1);\n        map.put("c", 3);\n        assertEquals("b", map.firstKey());\n        assertEquals("a", map.lastKey());\n        map.put("d", 0);\n        assertEquals("d", map.firstKey());\n        map.put("d", 2);\n        assertEquals("b", map.firstKey());\n        map.put("e", 2);\n        assertEquals(5, map.size());\n        assertEquals(2, (int) map.get("e"));\n        assertEquals(2, (int) map.get("d"));\n    }\n}'
p5066
aS'map.put("b", 1);\nmap.put("c", 3);'
p5067
aS'class ValueComparableMap<K extends Comparable<K>, V> extends TreeMap<K, V> {\n\n    private final Map<K, V> valueMap;\n}'
p5068
aS'import java.util.HashMap;\nimport java.util.Map;\nimport java.util.TreeMap;\nimport com.google.common.base.Functions;\nimport com.google.common.collect.Ordering;'
p5069
aS'map.put("a", 5);\nmap.put("b", 1);\nmap.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);\nassertEquals(5, map.size());\nassertEquals(2, (int) map.get("e"));'
p5070
aS'assertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);\nassertEquals(5, map.size());\nassertEquals(2, (int) map.get("e"));'
p5071
aS'Collections.sort(list, new Comparator<Map.Entry<K, V>>() {\n\n    @Override\n    public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {\n        return (o1.getValue()).compareTo(o2.getValue());\n    }\n});\nMap<K, V> result = new LinkedHashMap<>();\nfor (Map.Entry<K, V> entry : list) {\n}'
p5072
aS'class ValueComparableMap<K extends Comparable<K>, V> extends TreeMap<K, V> {\n\n    private final Map<K, V> valueMap;\n\n    ValueComparableMap(final Ordering<? super V> partialValueOrdering) {\n        this(partialValueOrdering, new HashMap<K, V>());\n    }\n}'
p5073
aS'Integer previous = null;\nfor (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n    Assert.assertNotNull(entry.getValue());\n}'
p5074
aS'this.base = base;'
p5075
aS'List<Map.Entry<K, V>> list = new LinkedList<Map.Entry<K, V>>(map.entrySet());\nCollections.sort(list, new Comparator<Map.Entry<K, V>>() {\n\n    public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {\n        return (o1.getValue()).compareTo(o2.getValue());\n    }\n});'
p5076
aS'if (base.get(a) >= base.get(b)) {\n    return -1;\n}'
p5077
aS'TreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);\nmap.put("A", 99.5);\nmap.put("B", 67.4);\nmap.put("C", 67.4);\nmap.put("D", 67.3);\nSystem.out.println("unsorted map: " + map);\nsorted_map.putAll(map);\nSystem.out.println("results: " + sorted_map);'
p5078
aS'assertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);'
p5079
aS'public V put(K k, V v) {\n    if (valueMap.containsKey(k)) {\n        remove(k);\n    }\n    valueMap.put(k, v);\n    return super.put(k, v);\n}\npublic static void main(String[] args) {\n    TreeMap<String, Integer> map = new ValueComparableMap<String, Integer>(Ordering.natural());\n    map.put("a", 5);\n    map.put("b", 1);\n    map.put("c", 3);\n    assertEquals("b", map.firstKey());\n    assertEquals("a", map.lastKey());\n    map.put("d", 0);\n    assertEquals("d", map.firstKey());\n    map.put("d", 2);\n    assertEquals("b", map.firstKey());\n    map.put("e", 2);\n    assertEquals(5, map.size());\n    assertEquals(2, (int) map.get("e"));\n    assertEquals(2, (int) map.get("d"));\n}'
p5080
aS'map.put("b", 1);\nmap.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());'
p5081
aS'HashMap<String, Double> map = new HashMap<String, Double>();\nValueComparator bvc = new ValueComparator(map);\nTreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);\nmap.put("A", 99.5);\nmap.put("B", 67.4);\nmap.put("C", 67.4);\nmap.put("D", 67.3);\nSystem.out.println("unsorted map: " + map);\nsorted_map.putAll(map);\nSystem.out.println("results: " + sorted_map);'
p5082
aS'map.put("a", 5);\nmap.put("b", 1);\nmap.put("c", 3);'
p5083
aS'map.put("d", 2);\nassertEquals("b", map.firstKey());'
p5084
aS'map.put("A", 99.5);\nmap.put("B", 67.4);\nmap.put("C", 67.4);\nmap.put("D", 67.3);'
p5085
aS'ValueComparableMap(final Ordering<? super V> partialValueOrdering) {\n    this(partialValueOrdering, new HashMap<K, V>());\n}\nprivate ValueComparableMap(Ordering<? super V> partialValueOrdering, HashMap<K, V> valueMap) {\n    super(partialValueOrdering.onResultOf(Functions.forMap(valueMap)).compound(Ordering.natural()));\n    this.valueMap = valueMap;\n}\npublic V put(K k, V v) {\n    if (valueMap.containsKey(k)) {\n        remove(k);\n    }\n    valueMap.put(k, v);\n    return super.put(k, v);\n}'
p5086
aS'List<Map.Entry<K, V>> list = new LinkedList<Map.Entry<K, V>>(map.entrySet());\nCollections.sort(list, new Comparator<Map.Entry<K, V>>() {\n\n    public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {\n        return (o1.getValue()).compareTo(o2.getValue());\n    }\n});\nMap<K, V> result = new LinkedHashMap<K, V>();\nfor (Map.Entry<K, V> entry : list) {\n}'
p5087
aS'class ValueComparator implements Comparator<String> {\n\n    Map<String, Double> base;\n\n    public ValueComparator(Map<String, Double> base) {\n        this.base = base;\n    }\n}'
p5088
aS'List<Map.Entry<K, V>> list = new LinkedList<>(map.entrySet());\nCollections.sort(list, new Comparator<Map.Entry<K, V>>() {\n\n    @Override\n    public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {\n        return (o1.getValue()).compareTo(o2.getValue());\n    }\n});'
p5089
aS'map.put("D", 67.3);\nSystem.out.println("unsorted map: " + map);\nsorted_map.putAll(map);'
p5090
aS'System.out.println("unsorted map: " + map);'
p5091
aS'map.put("b", 1);\nmap.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);\nassertEquals(5, map.size());\nassertEquals(2, (int) map.get("e"));\nassertEquals(2, (int) map.get("d"));'
p5092
aS'Collections.sort(list, new Comparator<Map.Entry<K, V>>() {\n\n    public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {\n        return (o1.getValue()).compareTo(o2.getValue());\n    }\n});\nMap<K, V> result = new LinkedHashMap<K, V>();\nfor (Map.Entry<K, V> entry : list) {\n}'
p5093
aS'HashMap<String, Double> map = new HashMap<String, Double>();\nValueComparator bvc = new ValueComparator(map);'
p5094
aS'map.put("b", 1);'
p5095
aS'HashMap<String, Double> map = new HashMap<String, Double>();'
p5096
aS'map.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);'
p5097
aS'System.out.println("results: " + sorted_map);'
p5098
aS'import java.util.TreeMap;\nimport com.google.common.base.Functions;'
p5099
aS'Map<K, V> result = new LinkedHashMap<K, V>();\nfor (Map.Entry<K, V> entry : list) {\n    result.put(entry.getKey(), entry.getValue());\n}'
p5100
aS'TreeMap<String, Integer> map = new ValueComparableMap<String, Integer>(Ordering.natural());\nmap.put("a", 5);\nmap.put("b", 1);\nmap.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);'
p5101
aS'import org.junit.*;'
p5102
aS'ValueComparator bvc = new ValueComparator(map);\nTreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);\nmap.put("A", 99.5);\nmap.put("B", 67.4);\nmap.put("C", 67.4);\nmap.put("D", 67.3);\nSystem.out.println("unsorted map: " + map);\nsorted_map.putAll(map);'
p5103
aS'class ValueComparableMap<K extends Comparable<K>, V> extends TreeMap<K, V> {\n\n    private final Map<K, V> valueMap;\n\n    ValueComparableMap(final Ordering<? super V> partialValueOrdering) {\n        this(partialValueOrdering, new HashMap<K, V>());\n    }\n\n    private ValueComparableMap(Ordering<? super V> partialValueOrdering, HashMap<K, V> valueMap) {\n        super(partialValueOrdering.onResultOf(Functions.forMap(valueMap)).compound(Ordering.natural()));\n        this.valueMap = valueMap;\n    }\n\n    public V put(K k, V v) {\n        if (valueMap.containsKey(k)) {\n            remove(k);\n        }\n        valueMap.put(k, v);\n        return super.put(k, v);\n    }\n}'
p5104
aS'Map<K, V> result = new LinkedHashMap<K, V>();\nfor (Map.Entry<K, V> entry : list) {\n    result.put(entry.getKey(), entry.getValue());\n}\nreturn result;'
p5105
aS'List<Map.Entry<K, V>> list = new LinkedList<Map.Entry<K, V>>(map.entrySet());\nCollections.sort(list, new Comparator<Map.Entry<K, V>>() {\n\n    public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {\n        return (o1.getValue()).compareTo(o2.getValue());\n    }\n});\nMap<K, V> result = new LinkedHashMap<K, V>();'
p5106
aS'assertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);'
p5107
aS'private final Map<K, V> valueMap;'
p5108
aS'TreeMap<String, Integer> map = new ValueComparableMap<String, Integer>(Ordering.natural());\nmap.put("a", 5);\nmap.put("b", 1);\nmap.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());'
p5109
aS'if (valueMap.containsKey(k)) {\n}'
p5110
aS'map.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);'
p5111
aS'HashMap<String, Double> map = new HashMap<String, Double>();\nValueComparator bvc = new ValueComparator(map);\nTreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);\nmap.put("A", 99.5);\nmap.put("B", 67.4);'
p5112
aS'map.put("a", 5);\nmap.put("b", 1);\nmap.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);'
p5113
aS'Collections.sort(list, new Comparator<Map.Entry<K, V>>() {\n\n    public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {\n        return (o1.getValue()).compareTo(o2.getValue());\n    }\n});\nMap<K, V> result = new LinkedHashMap<K, V>();\nfor (Map.Entry<K, V> entry : list) {\n    result.put(entry.getKey(), entry.getValue());\n}\nreturn result;'
p5114
aS'map.put("e", 2);'
p5115
aS'map.put("b", 1);\nmap.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());'
p5116
aS'map.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);\nassertEquals(5, map.size());'
p5117
aS'System.out.println("unsorted map: " + map);\nsorted_map.putAll(map);'
p5118
aS'List<Map.Entry<K, V>> list = new LinkedList<>(map.entrySet());\nCollections.sort(list, new Comparator<Map.Entry<K, V>>() {\n\n    @Override\n    public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {\n        return (o1.getValue()).compareTo(o2.getValue());\n    }\n});\nMap<K, V> result = new LinkedHashMap<>();\nfor (Map.Entry<K, V> entry : list) {\n    result.put(entry.getKey(), entry.getValue());\n}\nreturn result;'
p5119
aS'for (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n    Assert.assertNotNull(entry.getValue());\n}'
p5120
aS'for (int i = 0; i < 1000; ++i) {\n    testMap.put("SomeString" + random.nextInt(), random.nextInt());\n}\ntestMap = MapUtil.sortByValue(testMap);\nAssert.assertEquals(1000, testMap.size());\nInteger previous = null;\nfor (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n}'
p5121
aS'Random random = new Random(System.currentTimeMillis());\nMap<String, Integer> testMap = new HashMap<String, Integer>(1000);\nfor (int i = 0; i < 1000; ++i) {\n    testMap.put("SomeString" + random.nextInt(), random.nextInt());\n}\ntestMap = MapUtil.sortByValue(testMap);'
p5122
aS'Assert.assertNotNull(entry.getValue());\nif (previous != null) {\n    Assert.assertTrue(entry.getValue() >= previous);\n}\nprevious = entry.getValue();'
p5123
aS'public int compare(String a, String b) {\n    if (base.get(a) >= base.get(b)) {\n        return -1;\n    } else {\n        return 1;\n    }\n}'
p5124
aS'assertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());\nmap.put("d", 2);\nassertEquals("b", map.firstKey());\nmap.put("e", 2);'
p5125
aS'import com.google.common.base.Functions;\nimport com.google.common.collect.Ordering;'
p5126
aS'import java.util.HashMap;'
p5127
aS'map.put("A", 99.5);'
p5128
aS'class ValueComparableMap<K extends Comparable<K>, V> extends TreeMap<K, V> {\n\n    private final Map<K, V> valueMap;\n\n    ValueComparableMap(final Ordering<? super V> partialValueOrdering) {\n        this(partialValueOrdering, new HashMap<K, V>());\n    }\n\n    private ValueComparableMap(Ordering<? super V> partialValueOrdering, HashMap<K, V> valueMap) {\n        super(partialValueOrdering.onResultOf(Functions.forMap(valueMap)).compound(Ordering.natural()));\n        this.valueMap = valueMap;\n    }\n}'
p5129
aS'map.put("a", 5);\nmap.put("b", 1);\nmap.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());'
p5130
aS'Random random = new Random(System.currentTimeMillis());'
p5131
aS'map.put("c", 3);\nassertEquals("b", map.firstKey());\nassertEquals("a", map.lastKey());\nmap.put("d", 0);\nassertEquals("d", map.firstKey());'
p5132
aS'valueComparator = Ordering.natural().onResultOf(Functions.forMap(map)).compound(Ordering.natural());'
p5133
aS'map.put("e", 2);\nassertEquals(5, map.size());\nassertEquals(2, (int) map.get("e"));\nassertEquals(2, (int) map.get("d"));'
p5134
aS'public class Testing {\n\n    public static void main(String[] args) {\n        HashMap<String, Double> map = new HashMap<String, Double>();\n        ValueComparator bvc = new ValueComparator(map);\n        TreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);\n        map.put("A", 99.5);\n        map.put("B", 67.4);\n        map.put("C", 67.4);\n        map.put("D", 67.3);\n        System.out.println("unsorted map: " + map);\n        sorted_map.putAll(map);\n        System.out.println("results: " + sorted_map);\n    }\n}'
p5135
aS'Map<String, Integer> testMap = new HashMap<String, Integer>(1000);\nfor (int i = 0; i < 1000; ++i) {\n    testMap.put("SomeString" + random.nextInt(), random.nextInt());\n}\ntestMap = MapUtil.sortByValue(testMap);\nAssert.assertEquals(1000, testMap.size());\nInteger previous = null;\nfor (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n}'
p5136
aS'map.put("A", 99.5);\nmap.put("B", 67.4);'
p5137
aS'assertEquals("b", map.firstKey());\nmap.put("e", 2);\nassertEquals(5, map.size());\nassertEquals(2, (int) map.get("e"));\nassertEquals(2, (int) map.get("d"));'
p5138
aS'for (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n    Assert.assertNotNull(entry.getValue());\n    if (previous != null) {\n        Assert.assertTrue(entry.getValue() >= previous);\n    }\n}'
p5139
aS'Collections.sort(list, new Comparator<Map.Entry<K, V>>() {\n\n    public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {\n        return (o1.getValue()).compareTo(o2.getValue());\n    }\n});\nMap<K, V> result = new LinkedHashMap<K, V>();\nfor (Map.Entry<K, V> entry : list) {\n    result.put(entry.getKey(), entry.getValue());\n}'
p5140
aS'Random random = new Random(System.currentTimeMillis());\nMap<String, Integer> testMap = new HashMap<String, Integer>(1000);\nfor (int i = 0; i < 1000; ++i) {\n    testMap.put("SomeString" + random.nextInt(), random.nextInt());\n}\ntestMap = MapUtil.sortByValue(testMap);\nAssert.assertEquals(1000, testMap.size());\nInteger previous = null;\nfor (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n    Assert.assertNotNull(entry.getValue());\n}'
p5141
atp5142
Rp5143
sI811851
g1
((lp5144
S'public static void main(String[] args) throws IOException {\n    BufferedReader buffer = new BufferedReader(new InputStreamReader(System.in));\n    int c = 0;\n    while ((c = buffer.read()) != -1) {\n        char character = (char) c;\n        System.out.println(character);\n    }\n}'
p5145
aS'try (InputStream in = new FileInputStream(file);\n    Reader reader = new InputStreamReader(in, encoding);\n    Reader buffer = new BufferedReader(reader)) {\n}'
p5146
aS'Charset encoding = Charset.defaultCharset();\nfor (String filename : args) {\n}'
p5147
aS'public class Reader {\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader buffer = new BufferedReader(new InputStreamReader(System.in));\n        int c = 0;\n        while ((c = buffer.read()) != -1) {\n            char character = (char) c;\n            System.out.println(character);\n        }\n    }\n}'
p5148
aS'int c;'
p5149
aS'import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;'
p5150
aS'while ((c = reader.read()) != -1) {\n}'
p5151
aS'for (String filename : args) {\n    File file = new File(filename);\n    handleFile(file, encoding);\n}'
p5152
aS'int c = 0;\nwhile ((c = buffer.read()) != -1) {\n    char character = (char) c;\n}'
p5153
aS'BufferedReader buffer = new BufferedReader(new InputStreamReader(System.in));\nint c = 0;\nwhile ((c = buffer.read()) != -1) {\n    char character = (char) c;\n}'
p5154
aS'private static void handleFile(File file, Charset encoding) throws IOException {\n    try (InputStream in = new FileInputStream(file);\n        Reader reader = new InputStreamReader(in, encoding);\n        Reader buffer = new BufferedReader(reader)) {\n        handleCharacters(buffer);\n    }\n}'
p5155
aS'char ch = (char) r;\nSystem.out.println("Do something with " + ch);'
p5156
aS'public class CharacterHandler {\n\n    public static void main(String[] args) throws IOException {\n        Charset encoding = Charset.defaultCharset();\n        for (String filename : args) {\n            File file = new File(filename);\n            handleFile(file, encoding);\n        }\n    }\n\n    private static void handleFile(File file, Charset encoding) throws IOException {\n        try (InputStream in = new FileInputStream(file);\n            Reader reader = new InputStreamReader(in, encoding);\n            Reader buffer = new BufferedReader(reader)) {\n            handleCharacters(buffer);\n        }\n    }\n\n    private static void handleCharacters(Reader reader) throws IOException {\n        int r;\n        while ((r = reader.read()) != -1) {\n            char ch = (char) r;\n            System.out.println("Do something with " + ch);\n        }\n    }\n}'
p5157
aS'Charset encoding = Charset.defaultCharset();\nfor (String filename : args) {\n    File file = new File(filename);\n    handleFile(file, encoding);\n}'
p5158
aS'import java.io.BufferedReader;'
p5159
aS'private static void handleFile(File file, Charset encoding) throws IOException {\n    try (InputStream in = new FileInputStream(file);\n        Reader reader = new InputStreamReader(in, encoding);\n        Reader buffer = new BufferedReader(reader)) {\n        handleCharacters(buffer);\n    }\n}\nprivate static void handleCharacters(Reader reader) throws IOException {\n    int r;\n    while ((r = reader.read()) != -1) {\n        char ch = (char) r;\n        System.out.println("Do something with " + ch);\n    }\n}'
p5160
aS'handleFile(file, encoding);'
p5161
aS'int c = 0;'
p5162
aS'while ((c = reader.read()) != -1) {\n    char character = (char) c;\n}'
p5163
aS'BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), Charset.forName("UTF-8")));\nint c;'
p5164
aS'for (String filename : args) {\n}'
p5165
aS'int c;\nwhile ((c = reader.read()) != -1) {\n    char character = (char) c;\n}'
p5166
aS'import java.io.InputStreamReader;\n\npublic class Reader {\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader buffer = new BufferedReader(new InputStreamReader(System.in));\n        int c = 0;\n        while ((c = buffer.read()) != -1) {\n            char character = (char) c;\n            System.out.println(character);\n        }\n    }\n}'
p5167
aS'while ((c = buffer.read()) != -1) {\n    char character = (char) c;\n    System.out.println(character);\n}'
p5168
aS'BufferedReader buffer = new BufferedReader(new InputStreamReader(System.in));\nint c = 0;'
p5169
aS'import java.io.InputStreamReader;'
p5170
aS'import java.io.BufferedReader;\nimport java.io.IOException;'
p5171
aS'private static void handleCharacters(Reader reader) throws IOException {\n    int r;\n    while ((r = reader.read()) != -1) {\n        char ch = (char) r;\n        System.out.println("Do something with " + ch);\n    }\n}'
p5172
aS'int r;\nwhile ((r = reader.read()) != -1) {\n    char ch = (char) r;\n}'
p5173
aS'while ((r = reader.read()) != -1) {\n    char ch = (char) r;\n    System.out.println("Do something with " + ch);\n}'
p5174
aS'while ((r = reader.read()) != -1) {\n    char ch = (char) r;\n}'
p5175
aS'Charset encoding = Charset.defaultCharset();'
p5176
aS'File file = new File(filename);\nhandleFile(file, encoding);'
p5177
aS'while ((c = buffer.read()) != -1) {\n}'
p5178
aS'File file = new File(filename);'
p5179
aS'public static void main(String[] args) throws IOException {\n    Charset encoding = Charset.defaultCharset();\n    for (String filename : args) {\n        File file = new File(filename);\n        handleFile(file, encoding);\n    }\n}\nprivate static void handleFile(File file, Charset encoding) throws IOException {\n    try (InputStream in = new FileInputStream(file);\n        Reader reader = new InputStreamReader(in, encoding);\n        Reader buffer = new BufferedReader(reader)) {\n        handleCharacters(buffer);\n    }\n}\nprivate static void handleCharacters(Reader reader) throws IOException {\n    int r;\n    while ((r = reader.read()) != -1) {\n        char ch = (char) r;\n        System.out.println("Do something with " + ch);\n    }\n}'
p5180
aS'System.out.println(character);'
p5181
aS'int c = 0;\nwhile ((c = buffer.read()) != -1) {\n}'
p5182
aS'char ch = (char) r;'
p5183
aS'int c;\nwhile ((c = reader.read()) != -1) {\n}'
p5184
aS'import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class Reader {\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader buffer = new BufferedReader(new InputStreamReader(System.in));\n        int c = 0;\n        while ((c = buffer.read()) != -1) {\n            char character = (char) c;\n            System.out.println(character);\n        }\n    }\n}'
p5185
aS'int r;\nwhile ((r = reader.read()) != -1) {\n    char ch = (char) r;\n    System.out.println("Do something with " + ch);\n}'
p5186
aS'import java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class Reader {\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader buffer = new BufferedReader(new InputStreamReader(System.in));\n        int c = 0;\n        while ((c = buffer.read()) != -1) {\n            char character = (char) c;\n            System.out.println(character);\n        }\n    }\n}'
p5187
aS'BufferedReader buffer = new BufferedReader(new InputStreamReader(System.in));\nint c = 0;\nwhile ((c = buffer.read()) != -1) {\n}'
p5188
aS'while ((r = reader.read()) != -1) {\n}'
p5189
aS'for (String filename : args) {\n    File file = new File(filename);\n}'
p5190
aS'Charset encoding = Charset.defaultCharset();\nfor (String filename : args) {\n    File file = new File(filename);\n}'
p5191
aS'int r;'
p5192
aS'char character = (char) c;'
p5193
aS'BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), Charset.forName("UTF-8")));\nint c;\nwhile ((c = reader.read()) != -1) {\n}'
p5194
aS'handleCharacters(buffer);'
p5195
aS'while ((c = buffer.read()) != -1) {\n    char character = (char) c;\n}'
p5196
aS'Reader reader = new InputStreamReader(in, encoding);'
p5197
aS'BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), Charset.forName("UTF-8")));\nint c;\nwhile ((c = reader.read()) != -1) {\n    char character = (char) c;\n}'
p5198
aS'public static void main(String[] args) throws IOException {\n    Charset encoding = Charset.defaultCharset();\n    for (String filename : args) {\n        File file = new File(filename);\n        handleFile(file, encoding);\n    }\n}\nprivate static void handleFile(File file, Charset encoding) throws IOException {\n    try (InputStream in = new FileInputStream(file);\n        Reader reader = new InputStreamReader(in, encoding);\n        Reader buffer = new BufferedReader(reader)) {\n        handleCharacters(buffer);\n    }\n}'
p5199
aS'int r;\nwhile ((r = reader.read()) != -1) {\n}'
p5200
aS'System.out.println("Do something with " + ch);'
p5201
aS'public static void main(String[] args) throws IOException {\n    Charset encoding = Charset.defaultCharset();\n    for (String filename : args) {\n        File file = new File(filename);\n        handleFile(file, encoding);\n    }\n}'
p5202
aS'int c = 0;\nwhile ((c = buffer.read()) != -1) {\n    char character = (char) c;\n    System.out.println(character);\n}'
p5203
aS'char character = (char) c;\nSystem.out.println(character);'
p5204
aS'import java.io.IOException;'
p5205
aS'BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), Charset.forName("UTF-8")));'
p5206
aS'try (InputStream in = new FileInputStream(file);\n    Reader reader = new InputStreamReader(in, encoding);\n    Reader buffer = new BufferedReader(reader)) {\n    handleCharacters(buffer);\n}'
p5207
aS'BufferedReader buffer = new BufferedReader(new InputStreamReader(System.in));\nint c = 0;\nwhile ((c = buffer.read()) != -1) {\n    char character = (char) c;\n    System.out.println(character);\n}'
p5208
aS'BufferedReader buffer = new BufferedReader(new InputStreamReader(System.in));'
p5209
aS'import java.io.IOException;\nimport java.io.InputStreamReader;'
p5210
atp5211
Rp5212
sI15758685
g1
((lp5213
S'SimpleFormatter formatter = new SimpleFormatter();'
p5214
aS'fh.setFormatter(new Formatter() {\n\n    @Override\n    public String format(LogRecord record) {\n        SimpleDateFormat logTime = new SimpleDateFormat("MM-dd-yyyy HH:mm:ss");\n        Calendar cal = new GregorianCalendar();\n        cal.setTimeInMillis(record.getMillis());\n        return record.getLevel() + logTime.format(cal.getTime()) + " || " + record.getSourceClassName().substring(record.getSourceClassName().lastIndexOf(".") + 1, record.getSourceClassName().length()) + "." + record.getSourceMethodName() + "() : " + record.getMessage() + "\\n";\n    }\n});'
p5215
aS'logger.info("Hi How r u?");'
p5216
aS'Logger logger = Logger.getLogger("MyLog");\nFileHandler fh;\ntry {\n    fh = new FileHandler("C:/temp/test/MyLogFile.log");\n    logger.addHandler(fh);\n    SimpleFormatter formatter = new SimpleFormatter();\n    fh.setFormatter(formatter);\n    logger.info("My first log");\n} catch (SecurityException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n}'
p5217
aS'try {\n    fh = new FileHandler("C:/temp/test/MyLogFile.log");\n    logger.addHandler(fh);\n    SimpleFormatter formatter = new SimpleFormatter();\n    fh.setFormatter(formatter);\n    logger.info("My first log");\n} catch (SecurityException e) {\n    e.printStackTrace();\n}'
p5218
aS'FileHandler fh;\ntry {\n    fh = new FileHandler("C:/temp/test/MyLogFile.log");\n    logger.addHandler(fh);\n    SimpleFormatter formatter = new SimpleFormatter();\n    fh.setFormatter(formatter);\n    logger.info("My first log");\n} catch (SecurityException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n}\nlogger.info("Hi How r u?");'
p5219
aS'SimpleDateFormat format = new SimpleDateFormat("M-d_HHmmss");\ntry {\n    fh = new FileHandler("C:/temp/test/MyLogFile_" + format.format(Calendar.getInstance().getTime()) + ".log");\n} catch (Exception e) {\n}'
p5220
aS'cal.setTimeInMillis(record.getMillis());\nreturn record.getLevel() + logTime.format(cal.getTime()) + " || " + record.getSourceClassName().substring(record.getSourceClassName().lastIndexOf(".") + 1, record.getSourceClassName().length()) + "." + record.getSourceMethodName() + "() : " + record.getMessage() + "\\n";'
p5221
aS'SimpleDateFormat format = new SimpleDateFormat("M-d_HHmmss");'
p5222
aS'try {\n    fh = new FileHandler("C:/temp/test/MyLogFile_" + format.format(Calendar.getInstance().getTime()) + ".log");\n} catch (Exception e) {\n    e.printStackTrace();\n}'
p5223
aS'public void doLogging() {\n    logger.info("info msg");\n    logger.severe("error message");\n    logger.fine("fine message");\n}'
p5224
aS'private FileHandler fh = null;\npublic LoggingTester() {\n    SimpleDateFormat format = new SimpleDateFormat("M-d_HHmmss");\n    try {\n        fh = new FileHandler("C:/temp/test/MyLogFile_" + format.format(Calendar.getInstance().getTime()) + ".log");\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    fh.setFormatter(new SimpleFormatter());\n    logger.addHandler(fh);\n}'
p5225
aS'SimpleDateFormat logTime = new SimpleDateFormat("MM-dd-yyyy HH:mm:ss");\nCalendar cal = new GregorianCalendar();\ncal.setTimeInMillis(record.getMillis());\nreturn record.getLevel() + logTime.format(cal.getTime()) + " || " + record.getSourceClassName().substring(record.getSourceClassName().lastIndexOf(".") + 1, record.getSourceClassName().length()) + "." + record.getSourceMethodName() + "() : " + record.getMessage() + "\\n";'
p5226
aS'private final Logger logger = Logger.getLogger(LoggingTester.class.getName());\nprivate FileHandler fh = null;'
p5227
aS'logger.info("info msg");'
p5228
aS'public class LoggingTester {\n\n    private final Logger logger = Logger.getLogger(LoggingTester.class.getName());\n\n    private FileHandler fh = null;\n\n    public LoggingTester() {\n        SimpleDateFormat format = new SimpleDateFormat("M-d_HHmmss");\n        try {\n            fh = new FileHandler("C:/temp/test/MyLogFile_" + format.format(Calendar.getInstance().getTime()) + ".log");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        fh.setFormatter(new SimpleFormatter());\n        logger.addHandler(fh);\n    }\n\n    public void doLogging() {\n        logger.info("info msg");\n        logger.severe("error message");\n        logger.fine("fine message");\n    }\n}'
p5229
aS'try {\n    fh = new FileHandler("C:/temp/test/MyLogFile_" + format.format(Calendar.getInstance().getTime()) + ".log");\n} catch (Exception e) {\n    e.printStackTrace();\n}\nfh.setFormatter(new SimpleFormatter());'
p5230
aS'logger.addHandler(fh);\nSimpleFormatter formatter = new SimpleFormatter();\nfh.setFormatter(formatter);\nlogger.info("My first log");'
p5231
aS'Logger logger = Logger.getLogger("MyLog");\nFileHandler fh;\ntry {\n    fh = new FileHandler("C:/temp/test/MyLogFile.log");\n    logger.addHandler(fh);\n    SimpleFormatter formatter = new SimpleFormatter();\n    fh.setFormatter(formatter);\n    logger.info("My first log");\n} catch (SecurityException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n}'
p5232
aS'fh = new FileHandler("C:/temp/test/MyLogFile.log");\nlogger.addHandler(fh);'
p5233
aS'fh.setFormatter(formatter);\nlogger.info("My first log");'
p5234
aS'e.printStackTrace();'
p5235
aS'try {\n    fh = new FileHandler("C:/temp/test/MyLogFile.log");\n    logger.addHandler(fh);\n    SimpleFormatter formatter = new SimpleFormatter();\n    fh.setFormatter(formatter);\n    logger.info("My first log");\n} catch (SecurityException e) {\n}'
p5236
aS'Logger logger = Logger.getLogger("MyLog");\nFileHandler fh;\ntry {\n    fh = new FileHandler("C:/temp/test/MyLogFile.log");\n    logger.addHandler(fh);\n    SimpleFormatter formatter = new SimpleFormatter();\n    fh.setFormatter(formatter);\n    logger.info("My first log");\n} catch (SecurityException e) {\n}'
p5237
aS'SimpleDateFormat logTime = new SimpleDateFormat("MM-dd-yyyy HH:mm:ss");\nCalendar cal = new GregorianCalendar();\ncal.setTimeInMillis(record.getMillis());'
p5238
aS'public LoggingTester() {\n    SimpleDateFormat format = new SimpleDateFormat("M-d_HHmmss");\n    try {\n        fh = new FileHandler("C:/temp/test/MyLogFile_" + format.format(Calendar.getInstance().getTime()) + ".log");\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    fh.setFormatter(new SimpleFormatter());\n    logger.addHandler(fh);\n}'
p5239
aS'@Override\npublic String format(LogRecord record) {\n    SimpleDateFormat logTime = new SimpleDateFormat("MM-dd-yyyy HH:mm:ss");\n    Calendar cal = new GregorianCalendar();\n    cal.setTimeInMillis(record.getMillis());\n    return record.getLevel() + logTime.format(cal.getTime()) + " || " + record.getSourceClassName().substring(record.getSourceClassName().lastIndexOf(".") + 1, record.getSourceClassName().length()) + "." + record.getSourceMethodName() + "() : " + record.getMessage() + "\\n";\n}'
p5240
aS'fh = new FileHandler("C:/temp/test/MyLogFile.log");\nlogger.addHandler(fh);\nSimpleFormatter formatter = new SimpleFormatter();'
p5241
aS'FileHandler fh;\ntry {\n    fh = new FileHandler("C:/temp/test/MyLogFile.log");\n    logger.addHandler(fh);\n    SimpleFormatter formatter = new SimpleFormatter();\n    fh.setFormatter(formatter);\n    logger.info("My first log");\n} catch (SecurityException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n}'
p5242
aS'Logger logger = Logger.getLogger("MyLog");\nFileHandler fh;\ntry {\n    fh = new FileHandler("C:/temp/test/MyLogFile.log");\n    logger.addHandler(fh);\n    SimpleFormatter formatter = new SimpleFormatter();\n    fh.setFormatter(formatter);\n    logger.info("My first log");\n} catch (SecurityException e) {\n    e.printStackTrace();\n}'
p5243
aS'logger.setUseParentHandlers(false);'
p5244
aS'SimpleDateFormat logTime = new SimpleDateFormat("MM-dd-yyyy HH:mm:ss");'
p5245
aS'logger.severe("error message");\nlogger.fine("fine message");'
p5246
aS'fh.setFormatter(formatter);'
p5247
aS'fh = new FileHandler("C:/temp/test/MyLogFile.log");\nlogger.addHandler(fh);\nSimpleFormatter formatter = new SimpleFormatter();\nfh.setFormatter(formatter);\nlogger.info("My first log");'
p5248
aS'SimpleFormatter formatter = new SimpleFormatter();\nfh.setFormatter(formatter);'
p5249
aS'try {\n    fh = new FileHandler("C:/temp/test/MyLogFile_" + format.format(Calendar.getInstance().getTime()) + ".log");\n} catch (Exception e) {\n}'
p5250
aS'fh = new FileHandler("C:/temp/test/MyLogFile.log");'
p5251
aS'FileHandler fh;\ntry {\n    fh = new FileHandler("C:/temp/test/MyLogFile.log");\n    logger.addHandler(fh);\n    SimpleFormatter formatter = new SimpleFormatter();\n    fh.setFormatter(formatter);\n    logger.info("My first log");\n} catch (SecurityException e) {\n}'
p5252
aS'logger.info("My first log");'
p5253
aS'logger.info("info msg");\nlogger.severe("error message");\nlogger.fine("fine message");'
p5254
aS'logger.addHandler(fh);\nSimpleFormatter formatter = new SimpleFormatter();'
p5255
aS'SimpleDateFormat logTime = new SimpleDateFormat("MM-dd-yyyy HH:mm:ss");\nCalendar cal = new GregorianCalendar();'
p5256
aS'logger.addHandler(fh);\nSimpleFormatter formatter = new SimpleFormatter();\nfh.setFormatter(formatter);'
p5257
aS'private final Logger logger = Logger.getLogger(LoggingTester.class.getName());'
p5258
aS'try {\n    fh = new FileHandler("C:/temp/test/MyLogFile.log");\n    logger.addHandler(fh);\n    SimpleFormatter formatter = new SimpleFormatter();\n    fh.setFormatter(formatter);\n    logger.info("My first log");\n} catch (SecurityException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n}\nlogger.info("Hi How r u?");'
p5259
aS'public LoggingTester() {\n    SimpleDateFormat format = new SimpleDateFormat("M-d_HHmmss");\n    try {\n        fh = new FileHandler("C:/temp/test/MyLogFile_" + format.format(Calendar.getInstance().getTime()) + ".log");\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    fh.setFormatter(new SimpleFormatter());\n    logger.addHandler(fh);\n}\npublic void doLogging() {\n    logger.info("info msg");\n    logger.severe("error message");\n    logger.fine("fine message");\n}'
p5260
aS'logger.info("info msg");\nlogger.severe("error message");'
p5261
aS'Logger logger = Logger.getLogger("MyLog");\nFileHandler fh;\ntry {\n    fh = new FileHandler("C:/temp/test/MyLogFile.log");\n    logger.addHandler(fh);\n    SimpleFormatter formatter = new SimpleFormatter();\n    fh.setFormatter(formatter);\n    logger.info("My first log");\n} catch (SecurityException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n}\nlogger.info("Hi How r u?");'
p5262
aS'logger.severe("error message");'
p5263
aS'public static void main(String[] args) {\n    Logger logger = Logger.getLogger("MyLog");\n    FileHandler fh;\n    try {\n        fh = new FileHandler("C:/temp/test/MyLogFile.log");\n        logger.addHandler(fh);\n        SimpleFormatter formatter = new SimpleFormatter();\n        fh.setFormatter(formatter);\n        logger.info("My first log");\n    } catch (SecurityException e) {\n        e.printStackTrace();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    logger.info("Hi How r u?");\n}'
p5264
aS'fh.setFormatter(new SimpleFormatter());'
p5265
aS'private FileHandler fh = null;\npublic LoggingTester() {\n    SimpleDateFormat format = new SimpleDateFormat("M-d_HHmmss");\n    try {\n        fh = new FileHandler("C:/temp/test/MyLogFile_" + format.format(Calendar.getInstance().getTime()) + ".log");\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    fh.setFormatter(new SimpleFormatter());\n    logger.addHandler(fh);\n}\npublic void doLogging() {\n    logger.info("info msg");\n    logger.severe("error message");\n    logger.fine("fine message");\n}'
p5266
aS'Calendar cal = new GregorianCalendar();\ncal.setTimeInMillis(record.getMillis());'
p5267
aS'cal.setTimeInMillis(record.getMillis());'
p5268
aS'private final Logger logger = Logger.getLogger(LoggingTester.class.getName());\nprivate FileHandler fh = null;\npublic LoggingTester() {\n    SimpleDateFormat format = new SimpleDateFormat("M-d_HHmmss");\n    try {\n        fh = new FileHandler("C:/temp/test/MyLogFile_" + format.format(Calendar.getInstance().getTime()) + ".log");\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    fh.setFormatter(new SimpleFormatter());\n    logger.addHandler(fh);\n}\npublic void doLogging() {\n    logger.info("info msg");\n    logger.severe("error message");\n    logger.fine("fine message");\n}'
p5269
aS'fh = new FileHandler("C:/temp/test/MyLogFile_" + format.format(Calendar.getInstance().getTime()) + ".log");'
p5270
aS'Calendar cal = new GregorianCalendar();\ncal.setTimeInMillis(record.getMillis());\nreturn record.getLevel() + logTime.format(cal.getTime()) + " || " + record.getSourceClassName().substring(record.getSourceClassName().lastIndexOf(".") + 1, record.getSourceClassName().length()) + "." + record.getSourceMethodName() + "() : " + record.getMessage() + "\\n";'
p5271
aS'try {\n    fh = new FileHandler("C:/temp/test/MyLogFile_" + format.format(Calendar.getInstance().getTime()) + ".log");\n} catch (Exception e) {\n    e.printStackTrace();\n}\nfh.setFormatter(new SimpleFormatter());\nlogger.addHandler(fh);'
p5272
aS'private FileHandler fh = null;'
p5273
aS'SimpleDateFormat format = new SimpleDateFormat("M-d_HHmmss");\ntry {\n    fh = new FileHandler("C:/temp/test/MyLogFile_" + format.format(Calendar.getInstance().getTime()) + ".log");\n} catch (Exception e) {\n    e.printStackTrace();\n}\nfh.setFormatter(new SimpleFormatter());'
p5274
aS'FileHandler fh;'
p5275
aS'private final Logger logger = Logger.getLogger(LoggingTester.class.getName());\nprivate FileHandler fh = null;\npublic LoggingTester() {\n    SimpleDateFormat format = new SimpleDateFormat("M-d_HHmmss");\n    try {\n        fh = new FileHandler("C:/temp/test/MyLogFile_" + format.format(Calendar.getInstance().getTime()) + ".log");\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    fh.setFormatter(new SimpleFormatter());\n    logger.addHandler(fh);\n}'
p5276
aS'fh = new FileHandler("C:/temp/test/MyLogFile.log");\nlogger.addHandler(fh);\nSimpleFormatter formatter = new SimpleFormatter();\nfh.setFormatter(formatter);'
p5277
aS'FileHandler fh;\ntry {\n    fh = new FileHandler("C:/temp/test/MyLogFile.log");\n    logger.addHandler(fh);\n    SimpleFormatter formatter = new SimpleFormatter();\n    fh.setFormatter(formatter);\n    logger.info("My first log");\n} catch (SecurityException e) {\n    e.printStackTrace();\n}'
p5278
aS'public String format(LogRecord record) {\n    SimpleDateFormat logTime = new SimpleDateFormat("MM-dd-yyyy HH:mm:ss");\n    Calendar cal = new GregorianCalendar();\n    cal.setTimeInMillis(record.getMillis());\n    return record.getLevel() + logTime.format(cal.getTime()) + " || " + record.getSourceClassName().substring(record.getSourceClassName().lastIndexOf(".") + 1, record.getSourceClassName().length()) + "." + record.getSourceMethodName() + "() : " + record.getMessage() + "\\n";\n}'
p5279
aS'return record.getLevel() + logTime.format(cal.getTime()) + " || " + record.getSourceClassName().substring(record.getSourceClassName().lastIndexOf(".") + 1, record.getSourceClassName().length()) + "." + record.getSourceMethodName() + "() : " + record.getMessage() + "\\n";'
p5280
aS'Logger logger = Logger.getLogger("MyLog");\nFileHandler fh;'
p5281
aS'logger.addHandler(fh);'
p5282
aS'try {\n    fh = new FileHandler("C:/temp/test/MyLogFile.log");\n    logger.addHandler(fh);\n    SimpleFormatter formatter = new SimpleFormatter();\n    fh.setFormatter(formatter);\n    logger.info("My first log");\n} catch (SecurityException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n}'
p5283
aS'SimpleFormatter formatter = new SimpleFormatter();\nfh.setFormatter(formatter);\nlogger.info("My first log");'
p5284
aS'logger.fine("fine message");'
p5285
aS'FileHandler fh;\ntry {\n    fh = new FileHandler("C:/temp/test/MyLogFile.log");\n    logger.addHandler(fh);\n    SimpleFormatter formatter = new SimpleFormatter();\n    fh.setFormatter(formatter);\n    logger.info("My first log");\n} catch (SecurityException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n}'
p5286
aS'SimpleDateFormat format = new SimpleDateFormat("M-d_HHmmss");\ntry {\n    fh = new FileHandler("C:/temp/test/MyLogFile_" + format.format(Calendar.getInstance().getTime()) + ".log");\n} catch (Exception e) {\n    e.printStackTrace();\n}\nfh.setFormatter(new SimpleFormatter());\nlogger.addHandler(fh);'
p5287
aS'try {\n    fh = new FileHandler("C:/temp/test/MyLogFile.log");\n    logger.addHandler(fh);\n    SimpleFormatter formatter = new SimpleFormatter();\n    fh.setFormatter(formatter);\n    logger.info("My first log");\n} catch (SecurityException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n}'
p5288
aS'Logger logger = Logger.getLogger("MyLog");'
p5289
aS'SimpleDateFormat format = new SimpleDateFormat("M-d_HHmmss");\ntry {\n    fh = new FileHandler("C:/temp/test/MyLogFile_" + format.format(Calendar.getInstance().getTime()) + ".log");\n} catch (Exception e) {\n    e.printStackTrace();\n}'
p5290
aS'fh.setFormatter(new SimpleFormatter());\nlogger.addHandler(fh);'
p5291
aS'Calendar cal = new GregorianCalendar();'
p5292
atp5293
Rp5294
sI1391970
g1
((lp5295
S'CharSequence cs = s;'
p5296
aS'public void foo(CharSequence cs) {\n    System.out.println(cs);\n}'
p5297
aS'String s = "Hello World!";'
p5298
aS'foo(s);'
p5299
aS'System.out.println(cs);'
p5300
aS'String s = "Hello World!";\nCharSequence cs = s;'
p5301
aS'String s = cs.toString();'
p5302
aS'CharSequence cs = "string";\nString s = cs.toString();\nfoo(s);'
p5303
aS'CharSequence cs = "string";'
p5304
aS'CharSequence cs = "string";\nString s = cs.toString();'
p5305
aS'String s = cs.toString();\nfoo(s);'
p5306
atp5307
Rp5308
sI7522022
g1
((lp5309
S'System.out.print(String.format("\\033[2J"));'
p5310
aS'public void write(int b) throws IOException {\n}'
p5311
aS'System.out.print("world");'
p5312
aS'System.out.print("hello");\nThread.sleep(1000);\nSystem.out.print("\\b\\b\\b\\b\\b");\nSystem.out.print("world");'
p5313
aS'System.out.print("\\033[2K");'
p5314
aS'Thread.sleep(1000);\nSystem.out.print("\\b\\b\\b\\b\\b");'
p5315
aS'System.out.print(String.format("\\033[%dA", count));'
p5316
aS'System.out.print("\\b\\b\\b\\b\\b");\nSystem.out.print("world");'
p5317
aS'System.out.print("\\b\\b\\b\\b\\b");'
p5318
aS'Runtime.getRuntime().exec("cls");'
p5319
aS'System.out.print(String.format("\\033[%dA", count));\nSystem.out.print("\\033[2K");'
p5320
aS'int count = 1;'
p5321
aS'System.out.print("hello");\nThread.sleep(1000);'
p5322
aS'System.out.print("hello");\nThread.sleep(1000);\nSystem.out.print("\\b\\b\\b\\b\\b");'
p5323
aS'int count = 1;\nSystem.out.print(String.format("\\033[%dA", count));\nSystem.out.print("\\033[2K");'
p5324
aS'System.out.print("hello");'
p5325
aS'int count = 1;\nSystem.out.print(String.format("\\033[%dA", count));'
p5326
aS'@Override\npublic void write(int b) throws IOException {\n}'
p5327
aS'Thread.sleep(1000);'
p5328
aS'Thread.sleep(1000);\nSystem.out.print("\\b\\b\\b\\b\\b");\nSystem.out.print("world");'
p5329
aS'System.setOut(new PrintStream(new OutputStream() {\n\n    @Override\n    public void write(int b) throws IOException {\n    }\n}));'
p5330
atp5331
Rp5332
sI473446
g1
((lp5333
S'System.out.println("Hostname of local machine: " + localMachine.getHostName());'
p5334
aS'InetAddress.getLocalHost().getHostName();'
p5335
aS'System.getProperty("user.name");'
p5336
aS'java.net.InetAddress localMachine = java.net.InetAddress.getLocalHost();'
p5337
aS'java.net.InetAddress localMachine = java.net.InetAddress.getLocalHost();\nSystem.out.println("Hostname of local machine: " + localMachine.getHostName());'
p5338
atp5339
Rp5340
sI8721262
g1
((lp5341
S'long size = f.length();'
p5342
aS'long length = f.length();'
p5343
atp5344
Rp5345
sI2525042
g1
((lp5346
S'TypeFactory factory;\nMapType type;\nfactory = TypeFactory.defaultInstance();\ntype = factory.constructMapType(HashMap.class, String.class, String.class);\nmapper = new ObjectMapper();'
p5347
aS'mapper = new ObjectMapper();'
p5348
aS'Map<String, String> result;\nObjectMapper mapper;\nTypeFactory factory;\nMapType type;\nfactory = TypeFactory.defaultInstance();\ntype = factory.constructMapType(HashMap.class, String.class, String.class);\nmapper = new ObjectMapper();\nresult = mapper.readValue(data, type);'
p5349
aS'Map<String, String> result = new ObjectMapper().readValue(data, TypeFactory.mapType(HashMap.class, String.class, String.class));'
p5350
aS'TypeFactory factory;\nMapType type;'
p5351
aS'File from = new File("albumnList.txt");\nTypeReference<HashMap<String, Object>> typeRef = new TypeReference<HashMap<String, Object>>() {\n};'
p5352
aS'ObjectMapper mapper = new ObjectMapper();\nFile from = new File("albumnList.txt");\nTypeReference<HashMap<String, Object>> typeRef = new TypeReference<HashMap<String, Object>>() {\n};'
p5353
aS'HashMap<String, Object> props;\nprops = new ObjectMapper().readValue(src, new TypeReference<HashMap<String, Object>>() {\n});'
p5354
aS'File from = new File("albumnList.txt");\nTypeReference<HashMap<String, Object>> typeRef = new TypeReference<HashMap<String, Object>>() {\n};\nHashMap<String, Object> o = mapper.readValue(from, typeRef);'
p5355
aS'type = factory.constructMapType(HashMap.class, String.class, String.class);'
p5356
aS'ObjectMapper mapper = new ObjectMapper();\nFile from = new File("albumnList.txt");\nTypeReference<HashMap<String, Object>> typeRef = new TypeReference<HashMap<String, Object>>() {\n};\nHashMap<String, Object> o = mapper.readValue(from, typeRef);\nSystem.out.println("Got " + o);'
p5357
aS'ObjectMapper mapper;\nTypeFactory factory;\nMapType type;\nfactory = TypeFactory.defaultInstance();'
p5358
aS'public void testJackson() throws IOException {\n    ObjectMapper mapper = new ObjectMapper();\n    File from = new File("albumnList.txt");\n    TypeReference<HashMap<String, Object>> typeRef = new TypeReference<HashMap<String, Object>>() {\n    };\n    HashMap<String, Object> o = mapper.readValue(from, typeRef);\n    System.out.println("Got " + o);\n}'
p5359
aS'ObjectMapper mapper = new ObjectMapper();\nFile from = new File("albumnList.txt");'
p5360
aS'ObjectMapper mapper;\nTypeFactory factory;\nMapType type;'
p5361
aS'ObjectMapper mapper = new ObjectMapper();'
p5362
aS'MapType type;'
p5363
aS'props = (HashMap<String, Object>) new ObjectMapper().readValue(src, HashMap.class);'
p5364
aS'ObjectMapper mapper;'
p5365
aS'mapper = new ObjectMapper();\nresult = mapper.readValue(data, type);'
p5366
aS'TypeFactory factory;\nMapType type;\nfactory = TypeFactory.defaultInstance();\ntype = factory.constructMapType(HashMap.class, String.class, String.class);\nmapper = new ObjectMapper();\nresult = mapper.readValue(data, type);'
p5367
aS'props = new ObjectMapper().readValue(src, new TypeReference<HashMap<String, Object>>() {\n});'
p5368
aS'MapType type;\nfactory = TypeFactory.defaultInstance();\ntype = factory.constructMapType(HashMap.class, String.class, String.class);\nmapper = new ObjectMapper();\nresult = mapper.readValue(data, type);'
p5369
aS'Map<String, String> result;\nObjectMapper mapper;\nTypeFactory factory;\nMapType type;\nfactory = TypeFactory.defaultInstance();\ntype = factory.constructMapType(HashMap.class, String.class, String.class);'
p5370
aS'new ByteArrayInputStream(astring.getBytes("UTF-8"));'
p5371
aS'TypeFactory factory;\nMapType type;\nfactory = TypeFactory.defaultInstance();'
p5372
aS'MapType type;\nfactory = TypeFactory.defaultInstance();\ntype = factory.constructMapType(HashMap.class, String.class, String.class);'
p5373
aS'MapType type;\nfactory = TypeFactory.defaultInstance();\ntype = factory.constructMapType(HashMap.class, String.class, String.class);\nmapper = new ObjectMapper();'
p5374
aS'File from = new File("albumnList.txt");'
p5375
aS'factory = TypeFactory.defaultInstance();'
p5376
aS'Map<String, String> result;\nObjectMapper mapper;'
p5377
aS'factory = TypeFactory.defaultInstance();\ntype = factory.constructMapType(HashMap.class, String.class, String.class);\nmapper = new ObjectMapper();\nresult = mapper.readValue(data, type);'
p5378
aS'Map<String, String> result;\nObjectMapper mapper;\nTypeFactory factory;'
p5379
aS'ObjectMapper mapper = new ObjectMapper();\nFile from = new File("albumnList.txt");\nTypeReference<HashMap<String, Object>> typeRef = new TypeReference<HashMap<String, Object>>() {\n};\nHashMap<String, Object> o = mapper.readValue(from, typeRef);'
p5380
aS'ObjectMapper mapper;\nTypeFactory factory;\nMapType type;\nfactory = TypeFactory.defaultInstance();\ntype = factory.constructMapType(HashMap.class, String.class, String.class);\nmapper = new ObjectMapper();\nresult = mapper.readValue(data, type);'
p5381
aS'props = new ObjectMapper().readValue(src, HashMap.class);'
p5382
aS'System.out.println("Got " + o);'
p5383
aS'Map<String, String> result;\nObjectMapper mapper;\nTypeFactory factory;\nMapType type;\nfactory = TypeFactory.defaultInstance();\ntype = factory.constructMapType(HashMap.class, String.class, String.class);\nmapper = new ObjectMapper();'
p5384
aS'props = new ObjectMapper().readValue(src, new TypeReference<HashMap<String, Object>>() {\n});\nprops = (HashMap<String, Object>) new ObjectMapper().readValue(src, HashMap.class);'
p5385
aS'type = factory.constructMapType(HashMap.class, String.class, String.class);\nmapper = new ObjectMapper();\nresult = mapper.readValue(data, type);'
p5386
aS'File from = new File("albumnList.txt");\nTypeReference<HashMap<String, Object>> typeRef = new TypeReference<HashMap<String, Object>>() {\n};\nHashMap<String, Object> o = mapper.readValue(from, typeRef);\nSystem.out.println("Got " + o);'
p5387
aS'Map<String, String> result;\nObjectMapper mapper;\nTypeFactory factory;\nMapType type;\nfactory = TypeFactory.defaultInstance();'
p5388
aS'TypeReference<HashMap<String, Object>> typeRef = new TypeReference<HashMap<String, Object>>() {\n};'
p5389
aS'ObjectMapper mapper;\nTypeFactory factory;\nMapType type;\nfactory = TypeFactory.defaultInstance();\ntype = factory.constructMapType(HashMap.class, String.class, String.class);'
p5390
aS'HashMap<String, Object> o = mapper.readValue(from, typeRef);'
p5391
aS'Map<String, String> result;\nObjectMapper mapper;\nTypeFactory factory;\nMapType type;'
p5392
aS'type = factory.constructMapType(HashMap.class, String.class, String.class);\nmapper = new ObjectMapper();'
p5393
aS'Map<String, String> result;'
p5394
aS'TypeReference<HashMap<String, Object>> typeRef = new TypeReference<HashMap<String, Object>>() {\n};\nHashMap<String, Object> o = mapper.readValue(from, typeRef);\nSystem.out.println("Got " + o);'
p5395
aS'TypeFactory factory;'
p5396
aS'TypeFactory factory;\nMapType type;\nfactory = TypeFactory.defaultInstance();\ntype = factory.constructMapType(HashMap.class, String.class, String.class);'
p5397
aS'HashMap<String, Object> props;\nprops = new ObjectMapper().readValue(src, new TypeReference<HashMap<String, Object>>() {\n});\nprops = (HashMap<String, Object>) new ObjectMapper().readValue(src, HashMap.class);'
p5398
aS'ObjectMapper mapper;\nTypeFactory factory;\nMapType type;\nfactory = TypeFactory.defaultInstance();\ntype = factory.constructMapType(HashMap.class, String.class, String.class);\nmapper = new ObjectMapper();'
p5399
aS'ObjectMapper mapper;\nTypeFactory factory;'
p5400
aS'result = mapper.readValue(data, type);'
p5401
aS'TypeReference<HashMap<String, Object>> typeRef = new TypeReference<HashMap<String, Object>>() {\n};\nHashMap<String, Object> o = mapper.readValue(from, typeRef);'
p5402
aS'factory = TypeFactory.defaultInstance();\ntype = factory.constructMapType(HashMap.class, String.class, String.class);'
p5403
aS'MapType type;\nfactory = TypeFactory.defaultInstance();'
p5404
aS'HashMap<String, Object> o = mapper.readValue(from, typeRef);\nSystem.out.println("Got " + o);'
p5405
aS'factory = TypeFactory.defaultInstance();\ntype = factory.constructMapType(HashMap.class, String.class, String.class);\nmapper = new ObjectMapper();'
p5406
aS'HashMap<String, Object> props;'
p5407
atp5408
Rp5409
sI4404084
g1
((lp5410
S'boolean result = false;\nif (object == null || object.getClass() != getClass()) {\n    result = false;\n} else {\n    EmployeeModel employee = (EmployeeModel) object;\n}'
p5411
aS'EmployeeModel first = new EmployeeModel("Sameer", "Developer", 25);\nEmployeeModel second = new EmployeeModel("Jon", "Manager", 30);\nEmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\nEmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);'
p5412
aS'List<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();'
p5413
aS'EmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\nEmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);\nSystem.out.println("Check checkUserTwo is in list or not ");\nSystem.out.println("Is checkUserTwo Preasent = ? " + employeeList.contains(checkUserTwo));'
p5414
aS'EmployeeModel second = new EmployeeModel("Jon", "Manager", 30);\nEmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);'
p5415
aS'List<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);'
p5416
aS'boolean result = false;'
p5417
aS'System.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\nEmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);\nSystem.out.println("Check checkUserTwo is in list or not ");'
p5418
aS'EmployeeModel employee = (EmployeeModel) object;\nif (this.name.equals(employee.getName()) && this.designation.equals(employee.getDesignation()) && this.age == employee.getAge()) {\n    result = true;\n}'
p5419
aS'EmployeeModel first = new EmployeeModel("Sameer", "Developer", 25);\nEmployeeModel second = new EmployeeModel("Jon", "Manager", 30);\nEmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);'
p5420
aS'employeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\nEmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);'
p5421
aS'if (object == null || object.getClass() != getClass()) {\n}'
p5422
aS'EmployeeModel first = new EmployeeModel("Sameer", "Developer", 25);\nEmployeeModel second = new EmployeeModel("Jon", "Manager", 30);\nEmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));'
p5423
aS'System.out.println("Check checkUserOne is in list or not ");'
p5424
aS'employeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\nEmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);\nSystem.out.println("Check checkUserTwo is in list or not ");\nSystem.out.println("Is checkUserTwo Preasent = ? " + employeeList.contains(checkUserTwo));'
p5425
aS'List<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);'
p5426
aS'EmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);\nSystem.out.println("Check checkUserTwo is in list or not ");'
p5427
aS'EmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);'
p5428
aS'System.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));'
p5429
aS'EmployeeModel second = new EmployeeModel("Jon", "Manager", 30);'
p5430
aS'EmployeeModel employee = (EmployeeModel) object;\nif (this.name.equals(employee.getName()) && this.designation.equals(employee.getDesignation()) && this.age == employee.getAge()) {\n}'
p5431
aS'EmployeeModel first = new EmployeeModel("Sameer", "Developer", 25);\nEmployeeModel second = new EmployeeModel("Jon", "Manager", 30);\nEmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);'
p5432
aS'employeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\nEmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);\nSystem.out.println("Check checkUserTwo is in list or not ");'
p5433
aS'EmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\nEmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);\nSystem.out.println("Check checkUserTwo is in list or not ");'
p5434
aS'System.out.println("Check checkUserTwo is in list or not ");\nSystem.out.println("Is checkUserTwo Preasent = ? " + employeeList.contains(checkUserTwo));'
p5435
aS'employeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\nEmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);\nSystem.out.println("Check checkUserTwo is in list or not ");\nSystem.out.println("Is checkUserTwo Preasent = ? " + employeeList.contains(checkUserTwo));'
p5436
aS'System.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));'
p5437
aS'employeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));'
p5438
aS'if (object == null || object.getClass() != getClass()) {\n    result = false;\n}'
p5439
aS'System.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\nEmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);'
p5440
aS'List<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");'
p5441
aS'boolean result = false;\nif (object == null || object.getClass() != getClass()) {\n    result = false;\n}'
p5442
aS'EmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));'
p5443
aS'EmployeeModel second = new EmployeeModel("Jon", "Manager", 30);\nEmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");'
p5444
aS'EmployeeModel first = new EmployeeModel("Sameer", "Developer", 25);\nEmployeeModel second = new EmployeeModel("Jon", "Manager", 30);'
p5445
aS'EmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);'
p5446
aS'EmployeeModel first = new EmployeeModel("Sameer", "Developer", 25);\nEmployeeModel second = new EmployeeModel("Jon", "Manager", 30);\nEmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();'
p5447
aS'boolean result = false;\nif (object == null || object.getClass() != getClass()) {\n    result = false;\n} else {\n    EmployeeModel employee = (EmployeeModel) object;\n    if (this.name.equals(employee.getName()) && this.designation.equals(employee.getDesignation()) && this.age == employee.getAge()) {\n        result = true;\n    }\n}\nreturn result;'
p5448
aS'employeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\nEmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);\nSystem.out.println("Check checkUserTwo is in list or not ");\nSystem.out.println("Is checkUserTwo Preasent = ? " + employeeList.contains(checkUserTwo));'
p5449
aS'List<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);'
p5450
aS'List<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));'
p5451
aS'EmployeeModel employee = (EmployeeModel) object;'
p5452
aS'public static void main(String[] args) {\n    EmployeeModel first = new EmployeeModel("Sameer", "Developer", 25);\n    EmployeeModel second = new EmployeeModel("Jon", "Manager", 30);\n    EmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\n    List<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\n    employeeList.add(first);\n    employeeList.add(second);\n    employeeList.add(third);\n    EmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\n    System.out.println("Check checkUserOne is in list or not ");\n    System.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\n    EmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);\n    System.out.println("Check checkUserTwo is in list or not ");\n    System.out.println("Is checkUserTwo Preasent = ? " + employeeList.contains(checkUserTwo));\n}'
p5453
aS'EmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));'
p5454
aS'employeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\nEmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);\nSystem.out.println("Check checkUserTwo is in list or not ");'
p5455
aS'employeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));'
p5456
aS'EmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);'
p5457
aS'EmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);'
p5458
aS'result = false;'
p5459
aS'EmployeeModel second = new EmployeeModel("Jon", "Manager", 30);\nEmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);'
p5460
aS'boolean result = false;\nif (object == null || object.getClass() != getClass()) {\n    result = false;\n} else {\n    EmployeeModel employee = (EmployeeModel) object;\n    if (this.name.equals(employee.getName()) && this.designation.equals(employee.getDesignation()) && this.age == employee.getAge()) {\n        result = true;\n    }\n}'
p5461
aS'employeeList.add(first);\nemployeeList.add(second);'
p5462
aS'@Override\npublic boolean equals(Object object) {\n    boolean result = false;\n    if (object == null || object.getClass() != getClass()) {\n        result = false;\n    } else {\n        EmployeeModel employee = (EmployeeModel) object;\n        if (this.name.equals(employee.getName()) && this.designation.equals(employee.getDesignation()) && this.age == employee.getAge()) {\n            result = true;\n        }\n    }\n    return result;\n}'
p5463
aS'EmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\nEmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);'
p5464
aS'if (lista.contains(conta1)) {\n    System.out.println("Account found");\n} else {\n}'
p5465
aS'EmployeeModel first = new EmployeeModel("Sameer", "Developer", 25);\nEmployeeModel second = new EmployeeModel("Jon", "Manager", 30);\nEmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\nEmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);\nSystem.out.println("Check checkUserTwo is in list or not ");'
p5466
aS'employeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));'
p5467
aS'employeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\nEmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);'
p5468
aS'EmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\nEmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);\nSystem.out.println("Check checkUserTwo is in list or not ");\nSystem.out.println("Is checkUserTwo Preasent = ? " + employeeList.contains(checkUserTwo));'
p5469
aS'employeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\nEmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);\nSystem.out.println("Check checkUserTwo is in list or not ");'
p5470
aS'employeeList.add(second);\nemployeeList.add(third);'
p5471
aS'if (lista.contains(conta1)) {\n}'
p5472
aS'EmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");'
p5473
aS'boolean result = false;\nif (object == null || object.getClass() != getClass()) {\n}'
p5474
aS'employeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");'
p5475
aS'EmployeeModel second = new EmployeeModel("Jon", "Manager", 30);\nEmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);'
p5476
aS'if (this.name.equals(employee.getName()) && this.designation.equals(employee.getDesignation()) && this.age == employee.getAge()) {\n    result = true;\n}'
p5477
aS'if (object == null || object.getClass() != getClass()) {\n    result = false;\n} else {\n    EmployeeModel employee = (EmployeeModel) object;\n}'
p5478
aS'EmployeeModel first = new EmployeeModel("Sameer", "Developer", 25);\nEmployeeModel second = new EmployeeModel("Jon", "Manager", 30);\nEmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");'
p5479
aS'EmployeeModel second = new EmployeeModel("Jon", "Manager", 30);\nEmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);'
p5480
aS'EmployeeModel first = new EmployeeModel("Sameer", "Developer", 25);\nEmployeeModel second = new EmployeeModel("Jon", "Manager", 30);\nEmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\nEmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);\nSystem.out.println("Check checkUserTwo is in list or not ");\nSystem.out.println("Is checkUserTwo Preasent = ? " + employeeList.contains(checkUserTwo));'
p5481
aS'employeeList.add(third);'
p5482
aS'EmployeeModel second = new EmployeeModel("Jon", "Manager", 30);\nEmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\nEmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);\nSystem.out.println("Check checkUserTwo is in list or not ");\nSystem.out.println("Is checkUserTwo Preasent = ? " + employeeList.contains(checkUserTwo));'
p5483
aS'if (object == null || object.getClass() != getClass()) {\n    result = false;\n} else {\n}'
p5484
aS'EmployeeModel second = new EmployeeModel("Jon", "Manager", 30);\nEmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\nEmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);\nSystem.out.println("Check checkUserTwo is in list or not ");'
p5485
aS'employeeList.add(first);'
p5486
aS'System.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\nEmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);\nSystem.out.println("Check checkUserTwo is in list or not ");'
p5487
aS'List<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\nEmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);\nSystem.out.println("Check checkUserTwo is in list or not ");'
p5488
aS'EmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);\nSystem.out.println("Check checkUserTwo is in list or not ");\nSystem.out.println("Is checkUserTwo Preasent = ? " + employeeList.contains(checkUserTwo));'
p5489
aS'System.out.println("Is checkUserTwo Preasent = ? " + employeeList.contains(checkUserTwo));'
p5490
aS'System.out.println("Account found");'
p5491
aS'EmployeeModel first = new EmployeeModel("Sameer", "Developer", 25);\nEmployeeModel second = new EmployeeModel("Jon", "Manager", 30);\nEmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);'
p5492
aS'EmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");'
p5493
aS'System.out.println("Check checkUserTwo is in list or not ");'
p5494
aS'EmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\nEmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);\nSystem.out.println("Check checkUserTwo is in list or not ");'
p5495
aS'employeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\nEmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);'
p5496
aS'EmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();'
p5497
aS'if (object == null || object.getClass() != getClass()) {\n    result = false;\n} else {\n    EmployeeModel employee = (EmployeeModel) object;\n    if (this.name.equals(employee.getName()) && this.designation.equals(employee.getDesignation()) && this.age == employee.getAge()) {\n        result = true;\n    }\n}\nreturn result;'
p5498
aS'employeeList.add(second);'
p5499
aS'if (this.name.equals(employee.getName()) && this.designation.equals(employee.getDesignation()) && this.age == employee.getAge()) {\n}'
p5500
aS'employeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);'
p5501
aS'return result;'
p5502
aS'result = true;'
p5503
aS'employeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);'
p5504
aS'System.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\nEmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);\nSystem.out.println("Check checkUserTwo is in list or not ");\nSystem.out.println("Is checkUserTwo Preasent = ? " + employeeList.contains(checkUserTwo));'
p5505
aS'if (object == null || object.getClass() != getClass()) {\n    result = false;\n} else {\n    EmployeeModel employee = (EmployeeModel) object;\n    if (this.name.equals(employee.getName()) && this.designation.equals(employee.getDesignation()) && this.age == employee.getAge()) {\n        result = true;\n    }\n}'
p5506
aS'boolean result = false;\nif (object == null || object.getClass() != getClass()) {\n    result = false;\n} else {\n}'
p5507
aS'EmployeeModel first = new EmployeeModel("Sameer", "Developer", 25);'
p5508
aS'if (lista.contains(conta1)) {\n    System.out.println("Account found");\n} else {\n    System.out.println("Account not found");\n}'
p5509
aS'EmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\nEmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);'
p5510
aS'System.out.println("Account not found");'
p5511
aS'employeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);'
p5512
aS'public boolean equals(Object object) {\n    boolean result = false;\n    if (object == null || object.getClass() != getClass()) {\n        result = false;\n    } else {\n        EmployeeModel employee = (EmployeeModel) object;\n        if (this.name.equals(employee.getName()) && this.designation.equals(employee.getDesignation()) && this.age == employee.getAge()) {\n            result = true;\n        }\n    }\n    return result;\n}'
p5513
aS'System.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\nEmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);\nSystem.out.println("Check checkUserTwo is in list or not ");\nSystem.out.println("Is checkUserTwo Preasent = ? " + employeeList.contains(checkUserTwo));'
p5514
aS'EmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);'
p5515
aS'EmployeeModel second = new EmployeeModel("Jon", "Manager", 30);\nEmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();'
p5516
aS'employeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");'
p5517
aS'employeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);'
p5518
aS'EmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);'
p5519
aS'List<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\nEmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);'
p5520
aS'List<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);'
p5521
aS'EmployeeModel second = new EmployeeModel("Jon", "Manager", 30);\nEmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);'
p5522
aS'System.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\nEmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);'
p5523
aS'EmployeeModel first = new EmployeeModel("Sameer", "Developer", 25);\nEmployeeModel second = new EmployeeModel("Jon", "Manager", 30);\nEmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);'
p5524
aS'EmployeeModel second = new EmployeeModel("Jon", "Manager", 30);\nEmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\nEmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);'
p5525
aS'EmployeeModel first = new EmployeeModel("Sameer", "Developer", 25);\nEmployeeModel second = new EmployeeModel("Jon", "Manager", 30);\nEmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);'
p5526
aS'employeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");'
p5527
aS'List<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));\nEmployeeModel checkUserTwo = new EmployeeModel("Tim", "Tester", 24);\nSystem.out.println("Check checkUserTwo is in list or not ");\nSystem.out.println("Is checkUserTwo Preasent = ? " + employeeList.contains(checkUserTwo));'
p5528
aS'EmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);'
p5529
aS'EmployeeModel second = new EmployeeModel("Jon", "Manager", 30);\nEmployeeModel third = new EmployeeModel("Priyanka", "Tester", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);\nEmployeeModel checkUserOne = new EmployeeModel("Sameer", "Developer", 25);\nSystem.out.println("Check checkUserOne is in list or not ");\nSystem.out.println("Is checkUserOne Preasent = ? " + employeeList.contains(checkUserOne));'
p5530
atp5531
Rp5532
sI1383797
g1
((lp5533
S'public class NewClass1 {\n\n    public static void main(String[] args) {\n        Map<Integer, String> testMap = new HashMap<Integer, String>();\n        testMap.put(10, "a");\n        testMap.put(20, "b");\n        testMap.put(30, "c");\n        testMap.put(40, "d");\n        for (Entry<Integer, String> entry : testMap.entrySet()) {\n            if (entry.getValue().equals("c")) {\n                System.out.println(entry.getKey());\n            }\n        }\n    }\n}'
p5534
aS"Token token = tokenToChar.inverse().get('(');\nCharacter c = tokenToChar.get(token);"
p5535
aS'testMap.put(40, "d");'
p5536
aS'return keys;'
p5537
aS'Set<T> keys = new HashSet<T>();\nfor (Entry<T, E> entry : map.entrySet()) {\n    if (Objects.equals(value, entry.getValue())) {\n        keys.add(entry.getKey());\n    }\n}\nreturn keys;'
p5538
aS'public static <T, E> Set<T> getKeysByValue(Map<T, E> map, E value) {\n    return map.entrySet().stream().filter(entry -> Objects.equals(entry.getValue(), value)).map(Map.Entry::getKey).collect(Collectors.toSet());\n}'
p5539
aS"BiMap<Token, Character> tokenToChar = ImmutableBiMap.of(Token.LEFT_BRACKET, '[', Token.LEFT_PARENTHESIS, '(');\nToken token = tokenToChar.inverse().get('(');\nCharacter c = tokenToChar.get(token);"
p5540
aS'return map.entrySet().stream().filter(entry -> Objects.equals(entry.getValue(), value)).map(Map.Entry::getKey).collect(Collectors.toSet());'
p5541
aS'testMap.put(10, "a");\ntestMap.put(20, "b");'
p5542
aS'for (Entry<T, E> entry : map.entrySet()) {\n    if (Objects.equals(value, entry.getValue())) {\n        keys.add(entry.getKey());\n    }\n}'
p5543
aS'Map<Integer, String> testMap = new HashMap<Integer, String>();\ntestMap.put(10, "a");\ntestMap.put(20, "b");\ntestMap.put(30, "c");\ntestMap.put(40, "d");\nfor (Entry<Integer, String> entry : testMap.entrySet()) {\n}'
p5544
aS'testMap.put(10, "a");\ntestMap.put(20, "b");\ntestMap.put(30, "c");\ntestMap.put(40, "d");'
p5545
aS'for (Entry<T, E> entry : map.entrySet()) {\n}'
p5546
aS'Character c = tokenToChar.get(token);'
p5547
aS'Map<Integer, String> testMap = new HashMap<Integer, String>();\ntestMap.put(10, "a");\ntestMap.put(20, "b");\ntestMap.put(30, "c");\ntestMap.put(40, "d");\nfor (Entry<Integer, String> entry : testMap.entrySet()) {\n    if (entry.getValue().equals("c")) {\n        System.out.println(entry.getKey());\n    }\n}'
p5548
aS'for (Entry<T, E> entry : map.entrySet()) {\n    if (Objects.equals(value, entry.getValue())) {\n        return entry.getKey();\n    }\n}\nreturn null;'
p5549
aS'return entry.getKey();'
p5550
aS'for (Entry<Integer, String> entry : testMap.entrySet()) {\n}'
p5551
aS'Map<Integer, String> testMap = new HashMap<Integer, String>();\ntestMap.put(10, "a");\ntestMap.put(20, "b");\ntestMap.put(30, "c");\ntestMap.put(40, "d");'
p5552
aS'Map<Integer, String> testMap = new HashMap<Integer, String>();'
p5553
aS"BiMap<Token, Character> tokenToChar = ImmutableBiMap.of(Token.LEFT_BRACKET, '[', Token.LEFT_PARENTHESIS, '(');\nToken token = tokenToChar.inverse().get('(');"
p5554
aS'System.out.println(entry.getKey());'
p5555
aS'testMap.put(30, "c");\ntestMap.put(40, "d");\nfor (Entry<Integer, String> entry : testMap.entrySet()) {\n    if (entry.getValue().equals("c")) {\n        System.out.println(entry.getKey());\n    }\n}'
p5556
aS'testMap.put(20, "b");'
p5557
aS"BiMap<Token, Character> tokenToChar = ImmutableBiMap.of(Token.LEFT_BRACKET, '[', Token.LEFT_PARENTHESIS, '(');"
p5558
aS'testMap.put(10, "a");\ntestMap.put(20, "b");\ntestMap.put(30, "c");\ntestMap.put(40, "d");\nfor (Entry<Integer, String> entry : testMap.entrySet()) {\n}'
p5559
aS'Map<Integer, String> testMap = new HashMap<Integer, String>();\ntestMap.put(10, "a");\ntestMap.put(20, "b");'
p5560
aS'if (Objects.equals(value, entry.getValue())) {\n    return entry.getKey();\n}'
p5561
aS'Set<T> keys = new HashSet<T>();'
p5562
aS'for (Entry<T, E> entry : map.entrySet()) {\n    if (Objects.equals(value, entry.getValue())) {\n        return entry.getKey();\n    }\n}'
p5563
aS'testMap.put(10, "a");\ntestMap.put(20, "b");\ntestMap.put(30, "c");\ntestMap.put(40, "d");\nfor (Entry<Integer, String> entry : testMap.entrySet()) {\n    if (entry.getValue().equals("c")) {\n        System.out.println(entry.getKey());\n    }\n}'
p5564
aS'testMap.put(30, "c");'
p5565
aS'for (Entry<Integer, String> entry : testMap.entrySet()) {\n    if (entry.getValue().equals("c")) {\n        System.out.println(entry.getKey());\n    }\n}'
p5566
aS'testMap.put(20, "b");\ntestMap.put(30, "c");\ntestMap.put(40, "d");\nfor (Entry<Integer, String> entry : testMap.entrySet()) {\n    if (entry.getValue().equals("c")) {\n        System.out.println(entry.getKey());\n    }\n}'
p5567
aS"Token token = tokenToChar.inverse().get('(');"
p5568
aS'testMap.put(10, "a");'
p5569
aS'testMap.put(20, "b");\ntestMap.put(30, "c");\ntestMap.put(40, "d");\nfor (Entry<Integer, String> entry : testMap.entrySet()) {\n}'
p5570
aS'Map<Integer, String> testMap = new HashMap<Integer, String>();\ntestMap.put(10, "a");'
p5571
aS'Map<Integer, String> testMap = new HashMap<Integer, String>();\ntestMap.put(10, "a");\ntestMap.put(20, "b");\ntestMap.put(30, "c");'
p5572
aS'public static <T, E> Set<T> getKeysByValue(Map<T, E> map, E value) {\n    Set<T> keys = new HashSet<T>();\n    for (Entry<T, E> entry : map.entrySet()) {\n        if (Objects.equals(value, entry.getValue())) {\n            keys.add(entry.getKey());\n        }\n    }\n    return keys;\n}'
p5573
aS'testMap.put(20, "b");\ntestMap.put(30, "c");\ntestMap.put(40, "d");'
p5574
aS'public static void main(String[] args) {\n    Map<Integer, String> testMap = new HashMap<Integer, String>();\n    testMap.put(10, "a");\n    testMap.put(20, "b");\n    testMap.put(30, "c");\n    testMap.put(40, "d");\n    for (Entry<Integer, String> entry : testMap.entrySet()) {\n        if (entry.getValue().equals("c")) {\n            System.out.println(entry.getKey());\n        }\n    }\n}'
p5575
aS'if (entry.getValue().equals("c")) {\n}'
p5576
aS'testMap.put(30, "c");\ntestMap.put(40, "d");'
p5577
aS'if (Objects.equals(value, entry.getValue())) {\n}'
p5578
aS'keys.add(entry.getKey());'
p5579
aS'testMap.put(40, "d");\nfor (Entry<Integer, String> entry : testMap.entrySet()) {\n    if (entry.getValue().equals("c")) {\n        System.out.println(entry.getKey());\n    }\n}'
p5580
aS'if (Objects.equals(value, entry.getValue())) {\n    keys.add(entry.getKey());\n}'
p5581
aS'testMap.put(40, "d");\nfor (Entry<Integer, String> entry : testMap.entrySet()) {\n}'
p5582
aS'testMap.put(30, "c");\ntestMap.put(40, "d");\nfor (Entry<Integer, String> entry : testMap.entrySet()) {\n}'
p5583
aS'return null;'
p5584
aS'Set<T> keys = new HashSet<T>();\nfor (Entry<T, E> entry : map.entrySet()) {\n}'
p5585
aS'Set<T> keys = new HashSet<T>();\nfor (Entry<T, E> entry : map.entrySet()) {\n    if (Objects.equals(value, entry.getValue())) {\n        keys.add(entry.getKey());\n    }\n}'
p5586
aS'for (Entry<T, E> entry : map.entrySet()) {\n    if (Objects.equals(value, entry.getValue())) {\n        keys.add(entry.getKey());\n    }\n}\nreturn keys;'
p5587
aS'public static <T, E> T getKeyByValue(Map<T, E> map, E value) {\n    for (Entry<T, E> entry : map.entrySet()) {\n        if (Objects.equals(value, entry.getValue())) {\n            return entry.getKey();\n        }\n    }\n    return null;\n}'
p5588
aS'testMap.put(10, "a");\ntestMap.put(20, "b");\ntestMap.put(30, "c");'
p5589
aS'testMap.put(20, "b");\ntestMap.put(30, "c");'
p5590
atp5591
Rp5592
sI112503
g1
((lp5593
S'array = list.toArray(new String[0]);'
p5594
aS'List<String> list = new ArrayList<>();\nCollections.addAll(list, array);'
p5595
aS'array = list.toArray(array);'
p5596
aS'Collections.addAll(list, array);\nlist.removeAll(Arrays.asList("a"));'
p5597
aS'String[] filteredArray = Arrays.stream(array).filter(e -> !e.equals(foo)).toArray(String[]::new);'
p5598
aS'List<String> list = new ArrayList<String>(Arrays.asList(array));'
p5599
aS'Collections.addAll(list, array);\nlist.removeAll(Arrays.asList("a"));\narray = list.toArray(EMPTY_STRING_ARRAY);'
p5600
aS'List<String> list = new ArrayList<>();\nCollections.addAll(list, array);\nlist.removeAll(Arrays.asList("a"));\narray = list.toArray(EMPTY_STRING_ARRAY);'
p5601
aS'List<String> list = new ArrayList<>();\nCollections.addAll(list, array);\nlist.removeAll(Arrays.asList("a"));'
p5602
aS'list.removeAll(Arrays.asList("a"));'
p5603
aS'list.removeAll(Arrays.asList("a"));\narray = list.toArray(EMPTY_STRING_ARRAY);'
p5604
aS'List<String> list = new ArrayList<String>(Arrays.asList(array));\nlist.removeAll(Arrays.asList("a"));'
p5605
aS'array = list.toArray(new String[list.size()]);'
p5606
aS'List<String> list = new ArrayList<>();'
p5607
aS'array = list.toArray(EMPTY_STRING_ARRAY);'
p5608
aS'List<String> list = new ArrayList<String>(Arrays.asList(array));\nlist.removeAll(Arrays.asList("a"));\narray = list.toArray(array);'
p5609
aS'private static final String[] EMPTY_STRING_ARRAY = new String[0];'
p5610
aS'list.removeAll(Arrays.asList("a"));\narray = list.toArray(array);'
p5611
aS'Collections.addAll(list, array);'
p5612
atp5613
Rp5614
sI8557716
g1
((lp5615
S'public String name;'
p5616
aS'String[] ar = new String[2];\nar[0] = name;\nar[1] = location;'
p5617
aS'ar[0] = name;'
p5618
aS'ar[0] = name;\nar[1] = location;'
p5619
aS'public class MyResult {\n\n    int returnCode;\n\n    String errorMessage;\n}'
p5620
aS'public class MyResult {\n\n    int returnCode;\n\n    String errorMessage;\n}\npublic MyResult someMethod() {\n}'
p5621
aS'String[] ar = new String[2];\nar[0] = name;\nar[1] = location;\nreturn ar;'
p5622
aS'ar[0] = name;\nar[1] = location;\nreturn ar;'
p5623
aS'return ar;'
p5624
aS'public String name;\npublic String location;\npublic String[] getExample() {\n    String[] ar = new String[2];\n    ar[0] = name;\n    ar[1] = location;\n    return ar;\n}'
p5625
aS'ar[1] = location;'
p5626
aS'ar[1] = location;\nreturn ar;'
p5627
aS'public String name;\npublic String location;'
p5628
aS'int returnCode;'
p5629
aS'public String[] getExample() {\n    String[] ar = new String[2];\n    ar[0] = name;\n    ar[1] = location;\n    return ar;\n}'
p5630
aS'public MyResult someMethod() {\n}'
p5631
aS'String[] ar = new String[2];\nar[0] = name;'
p5632
aS'String[] ar = new String[2];'
p5633
aS'public String location;\npublic String[] getExample() {\n    String[] ar = new String[2];\n    ar[0] = name;\n    ar[1] = location;\n    return ar;\n}'
p5634
aS'public class Example {\n\n    public String name;\n\n    public String location;\n\n    public String[] getExample() {\n        String[] ar = new String[2];\n        ar[0] = name;\n        ar[1] = location;\n        return ar;\n    }\n}'
p5635
aS'int returnCode;\nString errorMessage;'
p5636
aS'public String location;'
p5637
aS'String errorMessage;'
p5638
atp5639
Rp5640
sI867194
g1
((lp5641
S'do {\n} while (resultSet.next());'
p5642
aS'System.out.println("No data");'
p5643
aS'if (!resultSet.next()) {\n}'
p5644
aS'if (!resultSet.next()) {\n    System.out.println("no data");\n} else {\n}'
p5645
aS'if (!resultSet.isBeforeFirst()) {\n}'
p5646
aS'if (!resultSet.next()) {\n    System.out.println("no data");\n} else {\n    do {\n    } while (resultSet.next());\n}'
p5647
aS'System.out.println("no data");'
p5648
atp5649
Rp5650
sI13386107
g1
((lp5651
S'String a = "Cool";'
p5652
aS'StringBuilder sb = new StringBuilder(inputString);'
p5653
aS'a = a.replace("o", "");'
p5654
aS'String result = str.substring(0, index) + str.substring(index + 1);'
p5655
aS'String resultString = sb.toString();'
p5656
aS'String a = "Cool";\na = a.replace("o", "");'
p5657
atp5658
Rp5659
sI4138364
g1
((lp5660
S'import java.util.stream.Collectors;'
p5661
aS'for (Item i : list) map.put(i.getKey(), i);'
p5662
aS'public class Test {\n\n    public static void main(String[] args) {\n        List<Item> list = IntStream.rangeClosed(1, 4).mapToObj(Item::new).collect(Collectors.toList());\n        Map<String, Item> map = list.stream().collect(Collectors.toMap(Item::getKey, item -> item));\n        map.forEach((k, v) -> System.out.println(k + " => " + v));\n    }\n}\n\nclass Item {\n\n    private final int i;\n\n    public Item(int i) {\n        this.i = i;\n    }\n\n    public String getKey() {\n        return "Key-" + i;\n    }\n\n    @Override\n    public String toString() {\n        return "Item [i=" + i + "]";\n    }\n}'
p5663
aS'Map<String, Item> map = list.stream().collect(Collectors.toMap(Item::getKey, item -> item));\nmap.forEach((k, v) -> System.out.println(k + " => " + v));'
p5664
aS'import java.util.List;\nimport java.util.Map;'
p5665
aS'public String getKey() {\n    return "Key-" + i;\n}'
p5666
aS'return "Item [i=" + i + "]";'
p5667
aS'import java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;'
p5668
aS'List<Item> list = IntStream.rangeClosed(1, 4).mapToObj(Item::new).collect(Collectors.toList());'
p5669
aS'import java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;'
p5670
aS'public class Test {\n\n    public static void main(String[] args) {\n        List<Item> list = IntStream.rangeClosed(1, 4).mapToObj(Item::new).collect(Collectors.toList());\n        Map<String, Item> map = list.stream().collect(Collectors.toMap(Item::getKey, item -> item));\n        map.forEach((k, v) -> System.out.println(k + " => " + v));\n    }\n}'
p5671
aS'import java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\npublic class Test {\n\n    public static void main(String[] args) {\n        List<Item> list = IntStream.rangeClosed(1, 4).mapToObj(Item::new).collect(Collectors.toList());\n        Map<String, Item> map = list.stream().collect(Collectors.toMap(Item::getKey, item -> item));\n        map.forEach((k, v) -> System.out.println(k + " => " + v));\n    }\n}\n\nclass Item {\n\n    private final int i;\n\n    public Item(int i) {\n        this.i = i;\n    }\n\n    public String getKey() {\n        return "Key-" + i;\n    }\n\n    @Override\n    public String toString() {\n        return "Item [i=" + i + "]";\n    }\n}'
p5672
aS'public String toString() {\n    return "Item [i=" + i + "]";\n}'
p5673
aS'List<Item> list = IntStream.rangeClosed(1, 4).mapToObj(Item::new).collect(Collectors.toList());\nMap<String, Item> map = list.stream().collect(Collectors.toMap(Item::getKey, item -> item));'
p5674
aS'Map<String, Integer> map = intList.stream().collect(toMap(i -> String.valueOf(i % 3), i -> i));'
p5675
aS'List<Item> list;\nMap<Key, Item> map = new HashMap<Key, Item>();'
p5676
aS'Map<String, Role> mappedRoles = Maps.uniqueIndex(yourList, new Function<Role, String>() {\n\n    public String apply(Role from) {\n        return from.getName();\n    }\n});'
p5677
aS'import java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\npublic class Test {\n\n    public static void main(String[] args) {\n        List<Item> list = IntStream.rangeClosed(1, 4).mapToObj(Item::new).collect(Collectors.toList());\n        Map<String, Item> map = list.stream().collect(Collectors.toMap(Item::getKey, item -> item));\n        map.forEach((k, v) -> System.out.println(k + " => " + v));\n    }\n}'
p5678
aS'import java.util.Map;'
p5679
aS'class Item {\n}'
p5680
aS'this.i = i;'
p5681
aS'import java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;'
p5682
aS'List<Item> list;\nMap<Key, Item> map = new HashMap<Key, Item>();\nfor (Item i : list) map.put(i.getKey(), i);'
p5683
aS'@Override\npublic String toString() {\n    return "Item [i=" + i + "]";\n}'
p5684
aS'map.forEach((k, v) -> System.out.println(k + " => " + v));'
p5685
aS'List<Item> list;'
p5686
aS'List<Item> list = IntStream.rangeClosed(1, 4).mapToObj(Item::new).collect(Collectors.toList());\nMap<String, Item> map = list.stream().collect(Collectors.toMap(Item::getKey, item -> item));\nmap.forEach((k, v) -> System.out.println(k + " => " + v));'
p5687
aS'import java.util.Map;\nimport java.util.stream.Collectors;\n\npublic class Test {\n\n    public static void main(String[] args) {\n        List<Item> list = IntStream.rangeClosed(1, 4).mapToObj(Item::new).collect(Collectors.toList());\n        Map<String, Item> map = list.stream().collect(Collectors.toMap(Item::getKey, item -> item));\n        map.forEach((k, v) -> System.out.println(k + " => " + v));\n    }\n}\n\nclass Item {\n\n    private final int i;\n\n    public Item(int i) {\n        this.i = i;\n    }\n\n    public String getKey() {\n        return "Key-" + i;\n    }\n\n    @Override\n    public String toString() {\n        return "Item [i=" + i + "]";\n    }\n}'
p5688
aS'import java.util.stream.Collectors;\n\npublic class Test {\n\n    public static void main(String[] args) {\n        List<Item> list = IntStream.rangeClosed(1, 4).mapToObj(Item::new).collect(Collectors.toList());\n        Map<String, Item> map = list.stream().collect(Collectors.toMap(Item::getKey, item -> item));\n        map.forEach((k, v) -> System.out.println(k + " => " + v));\n    }\n}'
p5689
aS'class Item {\n\n    private final int i;\n}'
p5690
aS'Map<String, Integer> map = intList.stream().collect(toMap(i -> String.valueOf(i % 3), i -> i, Integer::sum));'
p5691
aS'import java.util.Map;\nimport java.util.stream.Collectors;\n\npublic class Test {\n\n    public static void main(String[] args) {\n        List<Item> list = IntStream.rangeClosed(1, 4).mapToObj(Item::new).collect(Collectors.toList());\n        Map<String, Item> map = list.stream().collect(Collectors.toMap(Item::getKey, item -> item));\n        map.forEach((k, v) -> System.out.println(k + " => " + v));\n    }\n}'
p5692
aS'Map<Key, Item> map = new HashMap<Key, Item>();'
p5693
aS'public Item(int i) {\n    this.i = i;\n}\npublic String getKey() {\n    return "Key-" + i;\n}\n@Override\npublic String toString() {\n    return "Item [i=" + i + "]";\n}'
p5694
aS'private final int i;'
p5695
aS'private final int i;\npublic Item(int i) {\n    this.i = i;\n}\npublic String getKey() {\n    return "Key-" + i;\n}\n@Override\npublic String toString() {\n    return "Item [i=" + i + "]";\n}'
p5696
aS'Map<Key, Item> map = new HashMap<Key, Item>();\nfor (Item i : list) map.put(i.getKey(), i);'
p5697
aS'Map<String, Item> map = list.stream().collect(Collectors.toMap(Item::getKey, item -> item));'
p5698
aS'class Item {\n\n    private final int i;\n\n    public Item(int i) {\n        this.i = i;\n    }\n}'
p5699
aS'List<Integer> intList = Arrays.asList(1, 2, 3, 4, 5, 6);'
p5700
aS'return from.getName();'
p5701
aS'class Item {\n\n    private final int i;\n\n    public Item(int i) {\n        this.i = i;\n    }\n\n    public String getKey() {\n        return "Key-" + i;\n    }\n}'
p5702
aS'private final int i;\npublic Item(int i) {\n    this.i = i;\n}\npublic String getKey() {\n    return "Key-" + i;\n}'
p5703
aS'private final int i;\npublic Item(int i) {\n    this.i = i;\n}'
p5704
aS'class Item {\n\n    private final int i;\n\n    public Item(int i) {\n        this.i = i;\n    }\n\n    public String getKey() {\n        return "Key-" + i;\n    }\n\n    @Override\n    public String toString() {\n        return "Item [i=" + i + "]";\n    }\n}'
p5705
aS'public Item(int i) {\n    this.i = i;\n}\npublic String getKey() {\n    return "Key-" + i;\n}'
p5706
aS'import java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\npublic class Test {\n\n    public static void main(String[] args) {\n        List<Item> list = IntStream.rangeClosed(1, 4).mapToObj(Item::new).collect(Collectors.toList());\n        Map<String, Item> map = list.stream().collect(Collectors.toMap(Item::getKey, item -> item));\n        map.forEach((k, v) -> System.out.println(k + " => " + v));\n    }\n}\n\nclass Item {\n\n    private final int i;\n\n    public Item(int i) {\n        this.i = i;\n    }\n\n    public String getKey() {\n        return "Key-" + i;\n    }\n\n    @Override\n    public String toString() {\n        return "Item [i=" + i + "]";\n    }\n}'
p5707
aS'return "Key-" + i;'
p5708
aS'public String apply(Role from) {\n    return from.getName();\n}'
p5709
aS'public String getKey() {\n    return "Key-" + i;\n}\n@Override\npublic String toString() {\n    return "Item [i=" + i + "]";\n}'
p5710
aS'public static void main(String[] args) {\n    List<Item> list = IntStream.rangeClosed(1, 4).mapToObj(Item::new).collect(Collectors.toList());\n    Map<String, Item> map = list.stream().collect(Collectors.toMap(Item::getKey, item -> item));\n    map.forEach((k, v) -> System.out.println(k + " => " + v));\n}'
p5711
aS'import java.util.Map;\nimport java.util.stream.Collectors;'
p5712
aS'public Item(int i) {\n    this.i = i;\n}'
p5713
aS'import java.util.Arrays;'
p5714
aS'import java.util.Arrays;\nimport java.util.List;'
p5715
aS'import java.util.stream.Collectors;\n\npublic class Test {\n\n    public static void main(String[] args) {\n        List<Item> list = IntStream.rangeClosed(1, 4).mapToObj(Item::new).collect(Collectors.toList());\n        Map<String, Item> map = list.stream().collect(Collectors.toMap(Item::getKey, item -> item));\n        map.forEach((k, v) -> System.out.println(k + " => " + v));\n    }\n}\n\nclass Item {\n\n    private final int i;\n\n    public Item(int i) {\n        this.i = i;\n    }\n\n    public String getKey() {\n        return "Key-" + i;\n    }\n\n    @Override\n    public String toString() {\n        return "Item [i=" + i + "]";\n    }\n}'
p5716
aS'import java.util.List;'
p5717
aS'List<Integer> intList = Arrays.asList(1, 2, 3, 4, 5, 6);\nMap<String, Integer> map = intList.stream().collect(toMap(i -> String.valueOf(i % 3), i -> i));'
p5718
aS'import java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\npublic class Test {\n\n    public static void main(String[] args) {\n        List<Item> list = IntStream.rangeClosed(1, 4).mapToObj(Item::new).collect(Collectors.toList());\n        Map<String, Item> map = list.stream().collect(Collectors.toMap(Item::getKey, item -> item));\n        map.forEach((k, v) -> System.out.println(k + " => " + v));\n    }\n}'
p5719
atp5720
Rp5721
sI2627992
g1
((lp5722
S'System.setProperty("user.timezone", "EST");'
p5723
aS'Calendar tzCal = Calendar.getInstance(TimeZone.getTimeZone("GMT"));\nPreparedStatement ps = conn.createPreparedStatement("update ...");\nps.setDate("DateColumn", dateValue, tzCal);'
p5724
aS'ps.executeUpdate();'
p5725
aS'Calendar tzCal = Calendar.getInstance(TimeZone.getTimeZone("GMT"));\nPreparedStatement ps = conn.createPreparedStatement("update ...");\nps.setDate("DateColumn", dateValue, tzCal);\nps.executeUpdate();'
p5726
aS'TimeZone tz = TimeZone.getTimeZone("<local-time-zone>");'
p5727
aS'Calendar tzCal = Calendar.getInstance(TimeZone.getTimeZone("GMT"));\nPreparedStatement ps = conn.createPreparedStatement("update ...");'
p5728
aS'ps.setDate("DateColumn", dateValue, tzCal);\nps.executeUpdate();'
p5729
aS'PreparedStatement ps = conn.createPreparedStatement("update ...");\nps.setDate("DateColumn", dateValue, tzCal);'
p5730
aS'ps.setDate("DateColumn", dateValue, tzCal);'
p5731
aS'PreparedStatement ps = conn.createPreparedStatement("update ...");'
p5732
aS'Calendar calValue = Calendar.getInstance(tz);'
p5733
aS'Date dateValue = rs.getDate("DateColumn");\nCalendar calValue = Calendar.getInstance(tz);'
p5734
aS'PreparedStatement ps = conn.createPreparedStatement("update ...");\nps.setDate("DateColumn", dateValue, tzCal);\nps.executeUpdate();'
p5735
aS'TimeZone tz = TimeZone.getTimeZone("<local-time-zone>");\nDate dateValue = rs.getDate("DateColumn");\nCalendar calValue = Calendar.getInstance(tz);\ncalValue.setTime(dateValue);'
p5736
aS'while (rs.next()) {\n    Date dateValue = rs.getDate("DateColumn", tzCal);\n}'
p5737
aS'while (rs.next()) {\n}'
p5738
aS'TimeZone tz = TimeZone.getTimeZone("<local-time-zone>");\nDate dateValue = rs.getDate("DateColumn");'
p5739
aS'Calendar calValue = Calendar.getInstance(tz);\ncalValue.setTime(dateValue);'
p5740
aS'Date dateValue = rs.getDate("DateColumn", tzCal);'
p5741
aS'TimeZone tz = TimeZone.getTimeZone("<local-time-zone>");\nDate dateValue = rs.getDate("DateColumn");\nCalendar calValue = Calendar.getInstance(tz);'
p5742
aS'Calendar tzCal = Calendar.getInstance(TimeZone.getTimeZone("GMT"));'
p5743
aS'Date dateValue = rs.getDate("DateColumn");\nCalendar calValue = Calendar.getInstance(tz);\ncalValue.setTime(dateValue);'
p5744
aS'Date dateValue = rs.getDate("DateColumn");'
p5745
aS'calValue.setTime(dateValue);'
p5746
atp5747
Rp5748
sI1448858
g1
((lp5749
S'System.out.println((char) 27 + "[31mThis text would show up red" + (char) 27 + "[0m");'
p5750
atp5751
Rp5752
sI1892765
g1
((lp5753
S'char[] chars = string.toLowerCase().toCharArray();\nboolean found = false;'
p5754
aS"if (!found && Character.isLetter(chars[i])) {\n    chars[i] = Character.toUpperCase(chars[i]);\n    found = true;\n} else if (Character.isWhitespace(chars[i]) || chars[i] == '.' || chars[i] == '\\'') {\n}"
p5755
aS'return Character.toUpperCase(line.charAt(0)) + line.substring(1);'
p5756
aS"for (int i = 0; i < chars.length; i++) {\n    if (!found && Character.isLetter(chars[i])) {\n        chars[i] = Character.toUpperCase(chars[i]);\n        found = true;\n    } else if (Character.isWhitespace(chars[i]) || chars[i] == '.' || chars[i] == '\\'') {\n        found = false;\n    }\n}"
p5757
aS'chars[i] = Character.toUpperCase(chars[i]);'
p5758
aS'if (!found && Character.isLetter(chars[i])) {\n    chars[i] = Character.toUpperCase(chars[i]);\n    found = true;\n}'
p5759
aS'if (!found && Character.isLetter(chars[i])) {\n}'
p5760
aS'found = false;'
p5761
aS'if (!found && Character.isLetter(chars[i])) {\n    chars[i] = Character.toUpperCase(chars[i]);\n}'
p5762
aS"for (int i = 0; i < chars.length; i++) {\n    if (!found && Character.isLetter(chars[i])) {\n        chars[i] = Character.toUpperCase(chars[i]);\n        found = true;\n    } else if (Character.isWhitespace(chars[i]) || chars[i] == '.' || chars[i] == '\\'') {\n        found = false;\n    }\n}\nreturn String.valueOf(chars);"
p5763
aS'char[] chars = string.toLowerCase().toCharArray();'
p5764
aS"public static String capitalizeString(String string) {\n    char[] chars = string.toLowerCase().toCharArray();\n    boolean found = false;\n    for (int i = 0; i < chars.length; i++) {\n        if (!found && Character.isLetter(chars[i])) {\n            chars[i] = Character.toUpperCase(chars[i]);\n            found = true;\n        } else if (Character.isWhitespace(chars[i]) || chars[i] == '.' || chars[i] == '\\'') {\n            found = false;\n        }\n    }\n    return String.valueOf(chars);\n}"
p5765
aS'chars[i] = Character.toUpperCase(chars[i]);\nfound = true;'
p5766
aS"char[] chars = string.toLowerCase().toCharArray();\nboolean found = false;\nfor (int i = 0; i < chars.length; i++) {\n    if (!found && Character.isLetter(chars[i])) {\n        chars[i] = Character.toUpperCase(chars[i]);\n        found = true;\n    } else if (Character.isWhitespace(chars[i]) || chars[i] == '.' || chars[i] == '\\'') {\n        found = false;\n    }\n}\nreturn String.valueOf(chars);"
p5767
aS'char[] chars = string.toLowerCase().toCharArray();\nboolean found = false;\nfor (int i = 0; i < chars.length; i++) {\n}'
p5768
aS'private String capitalize(final String line) {\n    return Character.toUpperCase(line.charAt(0)) + line.substring(1);\n}'
p5769
aS'boolean found = false;'
p5770
aS'return String.valueOf(chars);'
p5771
aS"if (!found && Character.isLetter(chars[i])) {\n    chars[i] = Character.toUpperCase(chars[i]);\n    found = true;\n} else if (Character.isWhitespace(chars[i]) || chars[i] == '.' || chars[i] == '\\'') {\n    found = false;\n}"
p5772
aS'for (int i = 0; i < chars.length; i++) {\n}'
p5773
aS'found = true;'
p5774
aS"boolean found = false;\nfor (int i = 0; i < chars.length; i++) {\n    if (!found && Character.isLetter(chars[i])) {\n        chars[i] = Character.toUpperCase(chars[i]);\n        found = true;\n    } else if (Character.isWhitespace(chars[i]) || chars[i] == '.' || chars[i] == '\\'') {\n        found = false;\n    }\n}"
p5775
aS"char[] chars = string.toLowerCase().toCharArray();\nboolean found = false;\nfor (int i = 0; i < chars.length; i++) {\n    if (!found && Character.isLetter(chars[i])) {\n        chars[i] = Character.toUpperCase(chars[i]);\n        found = true;\n    } else if (Character.isWhitespace(chars[i]) || chars[i] == '.' || chars[i] == '\\'') {\n        found = false;\n    }\n}"
p5776
aS'boolean found = false;\nfor (int i = 0; i < chars.length; i++) {\n}'
p5777
aS"boolean found = false;\nfor (int i = 0; i < chars.length; i++) {\n    if (!found && Character.isLetter(chars[i])) {\n        chars[i] = Character.toUpperCase(chars[i]);\n        found = true;\n    } else if (Character.isWhitespace(chars[i]) || chars[i] == '.' || chars[i] == '\\'') {\n        found = false;\n    }\n}\nreturn String.valueOf(chars);"
p5778
atp5779
Rp5780
sI922528
g1
((lp5781
S'Map<String, String> map = new HashMap<String, String>();\nMap<String, String> treeMap = new TreeMap<String, String>(map);\nfor (String str : treeMap.keySet()) {\n}'
p5782
aS'for (String key : keys) {\n    String value = map.get(key);\n}'
p5783
aS'Map<String, String> map = new HashMap<String, String>();\nMap<String, String> treeMap = new TreeMap<String, String>(map);\nfor (String str : treeMap.keySet()) {\n    System.out.println(str);\n}'
p5784
aS'Map<String, String> map = new HashMap<String, String>();\nMap<String, String> treeMap = new TreeMap<String, String>(map);'
p5785
aS'Collections.sort(sortedKeys);'
p5786
aS'Map<String, String> treeMap = new TreeMap<String, String>(map);\nfor (String str : treeMap.keySet()) {\n}'
p5787
aS'for (String str : treeMap.keySet()) {\n}'
p5788
aS'SortedSet<String> keys = new TreeSet<String>(map.keySet());'
p5789
aS'keys.addAll(map.keySet());'
p5790
aS'System.out.println(str);'
p5791
aS'Map<String, String> map = new HashMap<String, String>();'
p5792
aS'String value = map.get(key);'
p5793
aS'SortedSet<Foo> keys = new TreeSet<Foo>(comparator);'
p5794
aS'List sortedKeys = new ArrayList(yourMap.keySet());\nCollections.sort(sortedKeys);'
p5795
aS'SortedSet<Foo> keys = new TreeSet<Foo>(comparator);\nkeys.addAll(map.keySet());'
p5796
aS'SortedSet<String> keys = new TreeSet<String>(map.keySet());\nfor (String key : keys) {\n}'
p5797
aS'List sortedKeys = new ArrayList(yourMap.keySet());'
p5798
aS'SortedSet<String> keys = new TreeSet<String>(map.keySet());\nfor (String key : keys) {\n    String value = map.get(key);\n}'
p5799
aS'for (String key : keys) {\n}'
p5800
aS'Map<String, String> treeMap = new TreeMap<String, String>(map);\nfor (String str : treeMap.keySet()) {\n    System.out.println(str);\n}'
p5801
aS'Map<String, String> treeMap = new TreeMap<String, String>(map);'
p5802
atp5803
Rp5804
sI240546
g1
((lp5805
S'return Jsoup.parse(html).text();'
p5806
aS'android.text.Html.fromHtml(instruction).toString();'
p5807
aS'public static String html2text(String html) {\n    return Jsoup.parse(html).text();\n}'
p5808
aS'replaceAll("\\\\<[^>]*>", "");'
p5809
atp5810
Rp5811
sI75175
g1
((lp5812
S'class SomeContainer<E> {\n\n    private final Factory<E> factory;\n}'
p5813
aS'E createContents(Class<E> clazz) {\n    return clazz.newInstance();\n}'
p5814
aS'E createContents() {\n    return factory.create();\n}'
p5815
aS'class SomeContainer<E> {\n\n    private final Factory<E> factory;\n\n    SomeContainer(Factory<E> factory) {\n        this.factory = factory;\n    }\n}'
p5816
aS'SomeContainer(Factory<E> factory) {\n    this.factory = factory;\n}\nE createContents() {\n    return factory.create();\n}'
p5817
aS'private final Factory<E> factory;\nSomeContainer(Factory<E> factory) {\n    this.factory = factory;\n}'
p5818
aS'this.factory = factory;'
p5819
aS'SomeContainer(Factory<E> factory) {\n    this.factory = factory;\n}'
p5820
aS'class SomeContainer<E> {\n}'
p5821
aS'assert (new Foo<Bar>() {\n}.instance instanceof Bar);'
p5822
aS'E create();'
p5823
aS'return clazz.newInstance();'
p5824
aS'private static class SomeContainer<E> {\n\n    E createContents(Class<E> clazz) {\n        return clazz.newInstance();\n    }\n}'
p5825
aS'private final Factory<E> factory;'
p5826
aS'return factory.create();'
p5827
aS'private final Factory<E> factory;\nSomeContainer(Factory<E> factory) {\n    this.factory = factory;\n}\nE createContents() {\n    return factory.create();\n}'
p5828
aS'interface Factory<E> {\n\n    E create();\n}\n\nclass SomeContainer<E> {\n\n    private final Factory<E> factory;\n\n    SomeContainer(Factory<E> factory) {\n        this.factory = factory;\n    }\n\n    E createContents() {\n        return factory.create();\n    }\n}'
p5829
aS'public E instance;'
p5830
aS'interface Factory<E> {\n\n    E create();\n}'
p5831
aS'class SomeContainer<E> {\n\n    private final Factory<E> factory;\n\n    SomeContainer(Factory<E> factory) {\n        this.factory = factory;\n    }\n\n    E createContents() {\n        return factory.create();\n    }\n}'
p5832
aS'instance = ((Class) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0]).newInstance();'
p5833
atp5834
Rp5835
sI2536873
g1
((lp5836
S'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);'
p5837
aS'for (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}'
p5838
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));'
p5839
aS'frame.getContentPane().add(mainPanel);'
p5840
aS'for (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));'
p5841
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));\nframe.setVisible(true);'
p5842
aS'btn = new JButton();\nbtn.setPreferredSize(new Dimension(40, 40));\nsecondPanel.add(btn);'
p5843
aS'for (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));'
p5844
aS'JPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();'
p5845
aS'JPanel panel = new JPanel(new GridLayout(4, 4, 4, 4));\nfor (int i = 0; i < 16; i++) {\n    JButton btn = new JButton(String.valueOf(i));\n    btn.setPreferredSize(new Dimension(40, 40));\n    panel.add(btn);\n}\nframe.setContentPane(panel);\nframe.pack();'
p5846
aS'JFrame frame = new JFrame("test");\nframe.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\nJPanel panel = new JPanel(new GridLayout(4, 4, 4, 4));\nfor (int i = 0; i < 16; i++) {\n    JButton btn = new JButton(String.valueOf(i));\n    btn.setPreferredSize(new Dimension(40, 40));\n    panel.add(btn);\n}\nframe.setContentPane(panel);\nframe.pack();\nframe.setVisible(true);'
p5847
aS'frame.getContentPane().add(mainPanel);\nframe.pack();'
p5848
aS'firstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);'
p5849
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));'
p5850
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);'
p5851
aS'frame.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));\nframe.setVisible(true);'
p5852
aS'JFrame frame = new JFrame("test");\nframe.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);'
p5853
aS'frame.setContentPane(mainPanel);'
p5854
aS'JPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));'
p5855
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));'
p5856
aS'JPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();\nframe.setVisible(true);'
p5857
aS'JPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);'
p5858
aS'for (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);'
p5859
aS'JPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();'
p5860
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());'
p5861
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);'
p5862
aS'firstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));'
p5863
aS'JPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);'
p5864
aS'for (int j = 1; j <= 13; j++) {\n    btn = new JButton();\n}'
p5865
aS'JPanel firstPanel = new JPanel();'
p5866
aS'JPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));'
p5867
aS'for (int j = 1; j <= 4; j++) {\n    btn = new JButton();\n    btn.setPreferredSize(new Dimension(100, 100));\n    firstPanel.add(btn);\n}'
p5868
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n}'
p5869
aS'firstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);'
p5870
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));'
p5871
aS'frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\nJPanel panel = new JPanel(new GridLayout(4, 4, 4, 4));\nfor (int i = 0; i < 16; i++) {\n    JButton btn = new JButton(String.valueOf(i));\n    btn.setPreferredSize(new Dimension(40, 40));\n    panel.add(btn);\n}\nframe.setContentPane(panel);'
p5872
aS'mainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);'
p5873
aS'JPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);'
p5874
aS'firstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();'
p5875
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n}'
p5876
aS'for (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);'
p5877
aS'JPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);'
p5878
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);'
p5879
aS'frame.pack();\nframe.setVisible(true);'
p5880
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();'
p5881
aS'firstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);'
p5882
aS'JFrame frame = new JFrame("test");\nframe.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\nJPanel panel = new JPanel(new GridLayout(4, 4, 4, 4));\nfor (int i = 0; i < 16; i++) {\n    JButton btn = new JButton(String.valueOf(i));\n    btn.setPreferredSize(new Dimension(40, 40));\n    panel.add(btn);\n}\nframe.setContentPane(panel);'
p5883
aS'import java.awt.*;'
p5884
aS'JPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n}'
p5885
aS'JPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);'
p5886
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);'
p5887
aS'firstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));'
p5888
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);'
p5889
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);'
p5890
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);'
p5891
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);'
p5892
aS'mainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);'
p5893
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);'
p5894
aS'firstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));\nframe.setVisible(true);'
p5895
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}'
p5896
aS'JPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));'
p5897
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));'
p5898
aS'firstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;'
p5899
aS'for (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);'
p5900
aS'btn = new JButton();'
p5901
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);'
p5902
aS'mainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();'
p5903
aS'firstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));'
p5904
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);'
p5905
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();\nframe.setVisible(true);'
p5906
aS'firstPanel.add(new JButton());'
p5907
aS'firstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n}'
p5908
aS'firstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);'
p5909
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);'
p5910
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));'
p5911
aS'firstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);'
p5912
aS'secondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);'
p5913
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();'
p5914
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));'
p5915
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n}'
p5916
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();'
p5917
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));\nframe.setVisible(true);'
p5918
aS'for (int j = 1; j <= 4; j++) {\n}'
p5919
aS'firstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);'
p5920
aS'firstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));'
p5921
aS'secondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);'
p5922
aS'firstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n}'
p5923
aS'JPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);'
p5924
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();'
p5925
aS'JButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));'
p5926
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));'
p5927
aS'JPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());'
p5928
aS'btn.setPreferredSize(new Dimension(40, 40));\nsecondPanel.add(btn);'
p5929
aS'frame.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));\nframe.setVisible(true);'
p5930
aS'frame.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));'
p5931
aS'JPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n}'
p5932
aS'JPanel secondPanel = new JPanel(new GridLayout(13, 5));'
p5933
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();'
p5934
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));'
p5935
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}'
p5936
aS'btn.setPreferredSize(new Dimension(40, 40));'
p5937
aS'frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\nJPanel panel = new JPanel(new GridLayout(4, 4, 4, 4));\nfor (int i = 0; i < 16; i++) {\n    JButton btn = new JButton(String.valueOf(i));\n    btn.setPreferredSize(new Dimension(40, 40));\n    panel.add(btn);\n}\nframe.setContentPane(panel);\nframe.pack();\nframe.setVisible(true);'
p5938
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}'
p5939
aS'JFrame frame = new JFrame("Colored Trails");'
p5940
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}'
p5941
aS'frame.setMinimumSize(new Dimension(520, 600));'
p5942
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);'
p5943
aS'for (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);'
p5944
aS'JPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);'
p5945
aS'mainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);'
p5946
aS'for (int i = 1; i <= 5; i++) {\n}'
p5947
aS'firstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();\nframe.setVisible(true);'
p5948
aS'secondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);'
p5949
aS'JPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);'
p5950
aS'for (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();\nframe.setVisible(true);'
p5951
aS'JPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);'
p5952
aS'for (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));\nframe.setVisible(true);'
p5953
aS'secondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);'
p5954
aS'btn.setPreferredSize(new Dimension(100, 100));\nfirstPanel.add(btn);'
p5955
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);'
p5956
aS'JPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);'
p5957
aS'btn.setPreferredSize(new Dimension(40, 40));\npanel.add(btn);'
p5958
aS'frame.setContentPane(panel);\nframe.pack();\nframe.setVisible(true);'
p5959
aS'firstPanel.setLayout(new GridLayout(4, 4));'
p5960
aS'JFrame frame = new JFrame("test");\nframe.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\nJPanel panel = new JPanel(new GridLayout(4, 4, 4, 4));'
p5961
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));'
p5962
aS'firstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);'
p5963
aS'JButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));'
p5964
aS'for (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}'
p5965
aS'JPanel secondGluePanel = new JPanel(new BorderLayout());'
p5966
aS'JPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));'
p5967
aS'for (int i = 0; i < 16; i++) {\n    JButton btn = new JButton(String.valueOf(i));\n    btn.setPreferredSize(new Dimension(40, 40));\n    panel.add(btn);\n}'
p5968
aS'firstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);'
p5969
aS'firstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));\nframe.setVisible(true);'
p5970
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();'
p5971
aS'for (int j = 1; j <= 13; j++) {\n    secondPanel.add(new JButton());\n}'
p5972
aS'secondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n}'
p5973
aS'secondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);'
p5974
aS'JPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n}'
p5975
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));'
p5976
aS'JPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);'
p5977
aS'JPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}'
p5978
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}'
p5979
aS'JFrame frame = new JFrame("test");\nframe.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\nJPanel panel = new JPanel(new GridLayout(4, 4, 4, 4));\nfor (int i = 0; i < 16; i++) {\n}'
p5980
aS'mainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);'
p5981
aS'JPanel panel = new JPanel(new GridLayout(4, 4, 4, 4));\nfor (int i = 0; i < 16; i++) {\n    JButton btn = new JButton(String.valueOf(i));\n    btn.setPreferredSize(new Dimension(40, 40));\n    panel.add(btn);\n}\nframe.setContentPane(panel);\nframe.pack();\nframe.setVisible(true);'
p5982
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));'
p5983
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);'
p5984
aS'JButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);'
p5985
aS'for (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());'
p5986
aS'for (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);'
p5987
aS'JPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);'
p5988
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();'
p5989
aS'frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\nJPanel panel = new JPanel(new GridLayout(4, 4, 4, 4));\nfor (int i = 0; i < 16; i++) {\n    JButton btn = new JButton(String.valueOf(i));\n    btn.setPreferredSize(new Dimension(40, 40));\n    panel.add(btn);\n}\nframe.setContentPane(panel);\nframe.pack();'
p5990
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));'
p5991
aS'JPanel panel = new JPanel(new GridLayout(4, 4, 4, 4));\nfor (int i = 0; i < 16; i++) {\n}'
p5992
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);'
p5993
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n}'
p5994
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));'
p5995
aS'for (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);'
p5996
aS'JPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();'
p5997
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));'
p5998
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);'
p5999
aS'firstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);'
p6000
aS'frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\nJPanel panel = new JPanel(new GridLayout(4, 4, 4, 4));'
p6001
aS'firstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();\nframe.setVisible(true);'
p6002
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));'
p6003
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);'
p6004
aS'JPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}'
p6005
aS'frame.setContentPane(panel);\nframe.pack();'
p6006
aS'secondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();'
p6007
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();'
p6008
aS'firstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}'
p6009
aS'mainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));'
p6010
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);'
p6011
aS'mainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);'
p6012
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());'
p6013
aS'firstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();'
p6014
aS'public class PanelModel {\n\n    public static void main(String[] args) {\n        JFrame frame = new JFrame("Colored Trails");\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        JPanel mainPanel = new JPanel();\n        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\n        JPanel firstPanel = new JPanel(new GridLayout(4, 4));\n        firstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\n        for (int i = 1; i <= 4; i++) {\n            for (int j = 1; j <= 4; j++) {\n                firstPanel.add(new JButton());\n            }\n        }\n        JPanel firstGluePanel = new JPanel(new BorderLayout());\n        firstGluePanel.add(firstPanel, BorderLayout.WEST);\n        firstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\n        firstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\n        JPanel secondPanel = new JPanel(new GridLayout(13, 5));\n        secondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\n        for (int i = 1; i <= 5; i++) {\n            for (int j = 1; j <= 13; j++) {\n                secondPanel.add(new JButton());\n            }\n        }\n        JPanel secondGluePanel = new JPanel(new BorderLayout());\n        secondGluePanel.add(secondPanel, BorderLayout.WEST);\n        secondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\n        secondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\n        mainPanel.add(firstGluePanel);\n        mainPanel.add(secondGluePanel);\n        frame.getContentPane().add(mainPanel);\n        frame.pack();\n        frame.setVisible(true);\n    }\n}'
p6015
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();\nframe.setVisible(true);'
p6016
aS'firstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;'
p6017
aS'JPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);'
p6018
aS'JButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);'
p6019
aS'JButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();'
p6020
aS'JPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);'
p6021
aS'firstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);'
p6022
aS'btn = new JButton();\nbtn.setPreferredSize(new Dimension(40, 40));'
p6023
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));'
p6024
aS'for (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}'
p6025
aS'JPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);'
p6026
aS'JButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}'
p6027
aS'for (int j = 1; j <= 13; j++) {\n    btn = new JButton();\n    btn.setPreferredSize(new Dimension(40, 40));\n    secondPanel.add(btn);\n}'
p6028
aS'JPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);'
p6029
aS'for (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));'
p6030
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n}'
p6031
aS'firstGluePanel.add(firstPanel, BorderLayout.WEST);'
p6032
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());'
p6033
aS'firstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);'
p6034
aS'secondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());'
p6035
aS'frame.setVisible(true);'
p6036
aS'firstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);'
p6037
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n}'
p6038
aS'JPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);'
p6039
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);'
p6040
aS'firstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));'
p6041
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));'
p6042
aS'firstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);'
p6043
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();\nframe.setVisible(true);'
p6044
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);'
p6045
aS'secondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);'
p6046
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));'
p6047
aS'secondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));'
p6048
aS'mainPanel.add(secondPanel);'
p6049
aS'firstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));'
p6050
aS'secondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);'
p6051
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();'
p6052
aS'for (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);'
p6053
aS'frame.getContentPane().add(mainPanel);\nframe.pack();\nframe.setVisible(true);'
p6054
aS'for (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();\nframe.setVisible(true);'
p6055
aS'JPanel panel = new JPanel(new GridLayout(4, 4, 4, 4));'
p6056
aS'firstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);'
p6057
aS'for (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);'
p6058
aS'JPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);'
p6059
aS'JPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);'
p6060
aS'JFrame frame = new JFrame("test");\nframe.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\nJPanel panel = new JPanel(new GridLayout(4, 4, 4, 4));\nfor (int i = 0; i < 16; i++) {\n    JButton btn = new JButton(String.valueOf(i));\n    btn.setPreferredSize(new Dimension(40, 40));\n    panel.add(btn);\n}\nframe.setContentPane(panel);\nframe.pack();'
p6061
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));'
p6062
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);'
p6063
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);'
p6064
aS'for (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);'
p6065
aS'mainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();\nframe.setVisible(true);'
p6066
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();'
p6067
aS'firstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));'
p6068
aS'JButton btn;'
p6069
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));'
p6070
aS'for (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();'
p6071
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());'
p6072
aS'JPanel panel = new JPanel(new GridLayout(4, 4, 4, 4));\nfor (int i = 0; i < 16; i++) {\n    JButton btn = new JButton(String.valueOf(i));\n    btn.setPreferredSize(new Dimension(40, 40));\n    panel.add(btn);\n}'
p6073
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}'
p6074
aS'firstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n}'
p6075
aS'import javax.swing.*;\nimport java.awt.*;\n\npublic class PanelModel {\n\n    public static void main(String[] args) {\n        JFrame frame = new JFrame("Colored Trails");\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        JPanel mainPanel = new JPanel();\n        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\n        JPanel firstPanel = new JPanel(new GridLayout(4, 4));\n        firstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\n        for (int i = 1; i <= 4; i++) {\n            for (int j = 1; j <= 4; j++) {\n                firstPanel.add(new JButton());\n            }\n        }\n        JPanel firstGluePanel = new JPanel(new BorderLayout());\n        firstGluePanel.add(firstPanel, BorderLayout.WEST);\n        firstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\n        firstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\n        JPanel secondPanel = new JPanel(new GridLayout(13, 5));\n        secondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\n        for (int i = 1; i <= 5; i++) {\n            for (int j = 1; j <= 13; j++) {\n                secondPanel.add(new JButton());\n            }\n        }\n        JPanel secondGluePanel = new JPanel(new BorderLayout());\n        secondGluePanel.add(secondPanel, BorderLayout.WEST);\n        secondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\n        secondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\n        mainPanel.add(firstGluePanel);\n        mainPanel.add(secondGluePanel);\n        frame.getContentPane().add(mainPanel);\n        frame.pack();\n        frame.setVisible(true);\n    }\n}'
p6076
aS'firstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);'
p6077
aS'for (int j = 1; j <= 4; j++) {\n    firstPanel.add(new JButton());\n}'
p6078
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n}'
p6079
aS'mainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);'
p6080
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n}'
p6081
aS'firstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();\nframe.setVisible(true);'
p6082
aS'firstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}'
p6083
aS'JPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}'
p6084
aS'secondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));'
p6085
aS'secondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();'
p6086
aS'for (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));'
p6087
aS'secondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);'
p6088
aS'firstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);'
p6089
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);'
p6090
aS'frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\nJPanel panel = new JPanel(new GridLayout(4, 4, 4, 4));\nfor (int i = 0; i < 16; i++) {\n    JButton btn = new JButton(String.valueOf(i));\n    btn.setPreferredSize(new Dimension(40, 40));\n    panel.add(btn);\n}'
p6091
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}'
p6092
aS'for (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);'
p6093
aS'for (int j = 1; j <= 13; j++) {\n    btn = new JButton();\n    btn.setPreferredSize(new Dimension(40, 40));\n}'
p6094
aS'import java.awt.*;\n\npublic class PanelModel {\n\n    public static void main(String[] args) {\n        JFrame frame = new JFrame("Colored Trails");\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        JPanel mainPanel = new JPanel();\n        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\n        JPanel firstPanel = new JPanel(new GridLayout(4, 4));\n        firstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\n        for (int i = 1; i <= 4; i++) {\n            for (int j = 1; j <= 4; j++) {\n                firstPanel.add(new JButton());\n            }\n        }\n        JPanel firstGluePanel = new JPanel(new BorderLayout());\n        firstGluePanel.add(firstPanel, BorderLayout.WEST);\n        firstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\n        firstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\n        JPanel secondPanel = new JPanel(new GridLayout(13, 5));\n        secondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\n        for (int i = 1; i <= 5; i++) {\n            for (int j = 1; j <= 13; j++) {\n                secondPanel.add(new JButton());\n            }\n        }\n        JPanel secondGluePanel = new JPanel(new BorderLayout());\n        secondGluePanel.add(secondPanel, BorderLayout.WEST);\n        secondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\n        secondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\n        mainPanel.add(firstGluePanel);\n        mainPanel.add(secondGluePanel);\n        frame.getContentPane().add(mainPanel);\n        frame.pack();\n        frame.setVisible(true);\n    }\n}'
p6095
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}'
p6096
aS'frame.pack();'
p6097
aS'secondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);'
p6098
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));'
p6099
aS'secondPanel.setMaximumSize(new Dimension(520, 200));'
p6100
aS'JPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));'
p6101
aS'firstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}'
p6102
aS'JPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;'
p6103
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n}'
p6104
aS'frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\nJPanel panel = new JPanel(new GridLayout(4, 4, 4, 4));\nfor (int i = 0; i < 16; i++) {\n    JButton btn = new JButton(String.valueOf(i));\n}'
p6105
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);'
p6106
aS'JButton btn = new JButton(String.valueOf(i));'
p6107
aS'for (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());'
p6108
aS'JPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n}'
p6109
aS'firstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();'
p6110
aS'firstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);'
p6111
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);'
p6112
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);'
p6113
aS'firstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);'
p6114
aS'for (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}'
p6115
aS'JPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);'
p6116
aS'secondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));\nframe.setVisible(true);'
p6117
aS'secondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();\nframe.setVisible(true);'
p6118
aS'secondPanel.setLayout(new GridLayout(5, 13));'
p6119
aS'frame.setMinimumSize(new Dimension(520, 600));\nframe.setVisible(true);'
p6120
aS'JPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);'
p6121
aS'for (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);'
p6122
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());'
p6123
aS'firstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));'
p6124
aS'JPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n}'
p6125
aS'firstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}'
p6126
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();\nframe.setVisible(true);'
p6127
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));'
p6128
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);'
p6129
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));'
p6130
aS'for (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n}'
p6131
aS'JPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());'
p6132
aS'firstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);'
p6133
aS'JButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}'
p6134
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;'
p6135
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);'
p6136
aS'JPanel mainPanel = new JPanel();'
p6137
aS'secondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);'
p6138
aS'JPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}'
p6139
aS'for (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);'
p6140
aS'JPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));'
p6141
aS'mainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();\nframe.setVisible(true);'
p6142
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);'
p6143
aS'JButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));\nframe.setVisible(true);'
p6144
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));'
p6145
aS'mainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));'
p6146
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n}'
p6147
aS'JPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);'
p6148
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;'
p6149
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n}'
p6150
aS'firstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);'
p6151
aS'secondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}'
p6152
aS'import javax.swing.*;'
p6153
aS'JPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));'
p6154
aS'for (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);'
p6155
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);'
p6156
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}'
p6157
aS'firstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));'
p6158
aS'secondPanel.add(new JButton());'
p6159
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}'
p6160
aS'JPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();\nframe.setVisible(true);'
p6161
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));\nframe.setVisible(true);'
p6162
aS'JPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);'
p6163
aS'JPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);'
p6164
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));'
p6165
aS'firstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}'
p6166
aS'frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\nJPanel panel = new JPanel(new GridLayout(4, 4, 4, 4));\nfor (int i = 0; i < 16; i++) {\n}'
p6167
aS'JPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));'
p6168
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}'
p6169
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());'
p6170
aS'secondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);'
p6171
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}'
p6172
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);'
p6173
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));'
p6174
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);'
p6175
aS'firstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n}'
p6176
aS'secondGluePanel.add(secondPanel, BorderLayout.WEST);'
p6177
aS'for (int i = 0; i < 16; i++) {\n    JButton btn = new JButton(String.valueOf(i));\n}'
p6178
aS'secondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}'
p6179
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);'
p6180
aS'firstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));'
p6181
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n}'
p6182
aS'mainPanel.add(firstPanel);\nmainPanel.add(secondPanel);'
p6183
aS'for (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);'
p6184
aS'for (int i = 0; i < 16; i++) {\n    JButton btn = new JButton(String.valueOf(i));\n    btn.setPreferredSize(new Dimension(40, 40));\n    panel.add(btn);\n}\nframe.setContentPane(panel);\nframe.pack();'
p6185
aS'secondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);'
p6186
aS'secondPanel.add(btn);'
p6187
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));'
p6188
aS'firstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}'
p6189
aS'firstPanel.setMaximumSize(new Dimension(400, 400));'
p6190
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));'
p6191
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));\nframe.setVisible(true);'
p6192
aS'for (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);'
p6193
aS'firstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);'
p6194
aS'JPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);'
p6195
aS'JPanel panel = new JPanel(new GridLayout(4, 4, 4, 4));\nfor (int i = 0; i < 16; i++) {\n    JButton btn = new JButton(String.valueOf(i));\n    btn.setPreferredSize(new Dimension(40, 40));\n    panel.add(btn);\n}\nframe.setContentPane(panel);'
p6196
aS'frame.setContentPane(panel);'
p6197
aS'for (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();'
p6198
aS'for (int i = 0; i < 16; i++) {\n}'
p6199
aS'JPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);'
p6200
aS'JPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());'
p6201
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);'
p6202
aS'JPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);'
p6203
aS'firstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n}'
p6204
aS'JPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));'
p6205
aS'firstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);'
p6206
aS'firstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);'
p6207
aS'for (int j = 1; j <= 13; j++) {\n}'
p6208
aS'secondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);'
p6209
aS'JPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);'
p6210
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);'
p6211
aS'firstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);'
p6212
aS'JButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));'
p6213
aS'firstPanel.add(btn);'
p6214
aS'JPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}'
p6215
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));'
p6216
aS'secondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();'
p6217
aS'firstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);'
p6218
aS'firstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}'
p6219
aS'JPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}'
p6220
aS'JPanel firstGluePanel = new JPanel(new BorderLayout());'
p6221
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);'
p6222
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);'
p6223
aS'secondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));\nframe.setVisible(true);'
p6224
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());'
p6225
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();'
p6226
aS'for (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);'
p6227
aS'secondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);'
p6228
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}'
p6229
aS'firstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);'
p6230
aS'secondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);'
p6231
aS'JButton btn = new JButton(String.valueOf(i));\nbtn.setPreferredSize(new Dimension(40, 40));\npanel.add(btn);'
p6232
aS'firstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());'
p6233
aS'mainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();'
p6234
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();'
p6235
aS'btn.setPreferredSize(new Dimension(100, 100));'
p6236
aS'for (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));'
p6237
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;'
p6238
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n}'
p6239
aS'secondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}'
p6240
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));'
p6241
aS'public static void main(String[] args) {\n    JFrame frame = new JFrame("Colored Trails");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    JPanel mainPanel = new JPanel();\n    mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\n    JPanel firstPanel = new JPanel(new GridLayout(4, 4));\n    firstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\n    for (int i = 1; i <= 4; i++) {\n        for (int j = 1; j <= 4; j++) {\n            firstPanel.add(new JButton());\n        }\n    }\n    JPanel firstGluePanel = new JPanel(new BorderLayout());\n    firstGluePanel.add(firstPanel, BorderLayout.WEST);\n    firstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\n    firstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\n    JPanel secondPanel = new JPanel(new GridLayout(13, 5));\n    secondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\n    for (int i = 1; i <= 5; i++) {\n        for (int j = 1; j <= 13; j++) {\n            secondPanel.add(new JButton());\n        }\n    }\n    JPanel secondGluePanel = new JPanel(new BorderLayout());\n    secondGluePanel.add(secondPanel, BorderLayout.WEST);\n    secondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\n    secondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\n    mainPanel.add(firstGluePanel);\n    mainPanel.add(secondGluePanel);\n    frame.getContentPane().add(mainPanel);\n    frame.pack();\n    frame.setVisible(true);\n}'
p6242
aS'mainPanel.add(firstGluePanel);'
p6243
aS'secondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);'
p6244
aS'JPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));'
p6245
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);'
p6246
aS'firstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));'
p6247
aS'firstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();'
p6248
aS'secondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));'
p6249
aS'firstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);'
p6250
aS'frame.setContentPane(mainPanel);\nframe.setSize(520, 600);'
p6251
aS'JPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);'
p6252
aS'firstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());'
p6253
aS'firstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));'
p6254
aS'firstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);'
p6255
aS'JButton btn;\nfor (int i = 1; i <= 4; i++) {\n}'
p6256
aS'for (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));'
p6257
aS'JPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));\nframe.setVisible(true);'
p6258
aS'secondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);'
p6259
aS'JFrame frame = new JFrame("test");\nframe.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\nJPanel panel = new JPanel(new GridLayout(4, 4, 4, 4));\nfor (int i = 0; i < 16; i++) {\n    JButton btn = new JButton(String.valueOf(i));\n    btn.setPreferredSize(new Dimension(40, 40));\n}'
p6260
aS'secondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n}'
p6261
aS'for (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));\nframe.setVisible(true);'
p6262
aS'firstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n}'
p6263
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));'
p6264
aS'for (int i = 1; i <= 4; i++) {\n}'
p6265
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));'
p6266
aS'for (int j = 1; j <= 4; j++) {\n    btn = new JButton();\n}'
p6267
aS'firstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();\nframe.setVisible(true);'
p6268
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);'
p6269
aS'secondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();\nframe.setVisible(true);'
p6270
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);'
p6271
aS'for (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());'
p6272
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));'
p6273
aS'import javax.swing.*;\nimport java.awt.*;'
p6274
aS'secondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();\nframe.setVisible(true);'
p6275
aS'for (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);'
p6276
aS'JPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);'
p6277
aS'firstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);'
p6278
aS'JPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();'
p6279
aS'JPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));'
p6280
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());'
p6281
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);'
p6282
aS'firstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);'
p6283
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n}'
p6284
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}'
p6285
aS'JPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();\nframe.setVisible(true);'
p6286
aS'secondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();\nframe.setVisible(true);'
p6287
aS'JPanel firstPanel = new JPanel(new GridLayout(4, 4));'
p6288
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));'
p6289
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);'
p6290
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));'
p6291
aS'for (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);'
p6292
aS'JPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();'
p6293
aS'JButton btn = new JButton(String.valueOf(i));\nbtn.setPreferredSize(new Dimension(40, 40));'
p6294
aS'secondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n}'
p6295
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));'
p6296
aS'JFrame frame = new JFrame("test");\nframe.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\nJPanel panel = new JPanel(new GridLayout(4, 4, 4, 4));\nfor (int i = 0; i < 16; i++) {\n    JButton btn = new JButton(String.valueOf(i));\n}'
p6297
aS'firstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));'
p6298
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n}'
p6299
aS'for (int j = 1; j <= 4; j++) {\n    btn = new JButton();\n    btn.setPreferredSize(new Dimension(100, 100));\n}'
p6300
aS'for (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);'
p6301
aS'JButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n}'
p6302
aS'JButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);'
p6303
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);'
p6304
aS'mainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));\nframe.setVisible(true);'
p6305
aS'for (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}'
p6306
aS'firstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);'
p6307
aS'firstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}'
p6308
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));'
p6309
aS'JPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());'
p6310
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));'
p6311
aS'firstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());'
p6312
aS'JPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);'
p6313
aS'JPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n}'
p6314
aS'JPanel panel = new JPanel(new GridLayout(4, 4, 4, 4));\nfor (int i = 0; i < 16; i++) {\n    JButton btn = new JButton(String.valueOf(i));\n}'
p6315
aS'firstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));'
p6316
aS'mainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);'
p6317
aS'firstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n}'
p6318
aS'JPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();\nframe.setVisible(true);'
p6319
aS'secondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);'
p6320
aS'secondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);'
p6321
aS'secondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);'
p6322
aS'firstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n}'
p6323
aS'JPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);'
p6324
aS'JPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);'
p6325
aS'for (int i = 0; i < 16; i++) {\n    JButton btn = new JButton(String.valueOf(i));\n    btn.setPreferredSize(new Dimension(40, 40));\n    panel.add(btn);\n}\nframe.setContentPane(panel);\nframe.pack();\nframe.setVisible(true);'
p6326
aS'JPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));\nframe.setVisible(true);'
p6327
aS'firstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);'
p6328
aS'secondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);'
p6329
aS'secondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);'
p6330
aS'firstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);'
p6331
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}'
p6332
aS'firstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);'
p6333
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);'
p6334
aS'for (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();'
p6335
aS'mainPanel.add(firstPanel);'
p6336
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);'
p6337
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();'
p6338
aS'for (int i = 0; i < 16; i++) {\n    JButton btn = new JButton(String.valueOf(i));\n    btn.setPreferredSize(new Dimension(40, 40));\n    panel.add(btn);\n}\nframe.setContentPane(panel);'
p6339
aS'secondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);'
p6340
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;'
p6341
aS'secondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);'
p6342
aS'secondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);'
p6343
aS'JFrame frame = new JFrame("test");\nframe.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\nJPanel panel = new JPanel(new GridLayout(4, 4, 4, 4));\nfor (int i = 0; i < 16; i++) {\n    JButton btn = new JButton(String.valueOf(i));\n    btn.setPreferredSize(new Dimension(40, 40));\n    panel.add(btn);\n}'
p6344
aS'mainPanel.add(secondGluePanel);'
p6345
aS'secondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));'
p6346
aS'JFrame frame = new JFrame("Colored Trails");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);'
p6347
aS'for (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);'
p6348
aS'JPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n}'
p6349
aS'JPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);'
p6350
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);'
p6351
aS'JButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);'
p6352
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}'
p6353
aS'for (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);'
p6354
aS'firstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));'
p6355
aS'frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);'
p6356
aS'btn = new JButton();\nbtn.setPreferredSize(new Dimension(100, 100));'
p6357
aS'secondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);'
p6358
aS'JPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);'
p6359
aS'firstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);'
p6360
aS'firstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);'
p6361
aS'JPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));'
p6362
aS'btn = new JButton();\nbtn.setPreferredSize(new Dimension(100, 100));\nfirstPanel.add(btn);'
p6363
aS'firstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());'
p6364
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();'
p6365
aS'frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\nJPanel panel = new JPanel(new GridLayout(4, 4, 4, 4));\nfor (int i = 0; i < 16; i++) {\n    JButton btn = new JButton(String.valueOf(i));\n    btn.setPreferredSize(new Dimension(40, 40));\n}'
p6366
aS'firstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);'
p6367
aS'firstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);'
p6368
aS'JPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);'
p6369
aS'firstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n}'
p6370
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);'
p6371
aS'firstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));'
p6372
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);'
p6373
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));'
p6374
aS'JPanel panel = new JPanel(new GridLayout(4, 4, 4, 4));\nfor (int i = 0; i < 16; i++) {\n    JButton btn = new JButton(String.valueOf(i));\n    btn.setPreferredSize(new Dimension(40, 40));\n}'
p6375
aS'JPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);'
p6376
aS'frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n}'
p6377
aS'panel.add(btn);'
p6378
aS'for (int i = 0; i < 16; i++) {\n    JButton btn = new JButton(String.valueOf(i));\n    btn.setPreferredSize(new Dimension(40, 40));\n}'
p6379
aS'firstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}'
p6380
aS'for (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n}'
p6381
aS'for (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);'
p6382
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);'
p6383
aS'firstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);'
p6384
aS'JPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);'
p6385
aS'for (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}'
p6386
aS'frame.setSize(520, 600);'
p6387
aS'firstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());'
p6388
aS'JPanel firstPanel = new JPanel(new GridLayout(4, 4));\nfirstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));'
p6389
aS'mainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);\nframe.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));\nframe.setVisible(true);'
p6390
aS'JFrame frame = new JFrame("test");'
p6391
aS'for (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);'
p6392
aS'mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\nJPanel firstPanel = new JPanel();\nfirstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);'
p6393
aS'firstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();'
p6394
aS'secondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);\nframe.getContentPane().add(mainPanel);\nframe.pack();'
p6395
aS'frame.setSize(520, 600);\nframe.setMinimumSize(new Dimension(520, 600));'
p6396
aS'JPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}'
p6397
aS'firstPanel.setPreferredSize(new Dimension(4 * 100, 4 * 100));\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        firstPanel.add(new JButton());\n    }\n}\nJPanel firstGluePanel = new JPanel(new BorderLayout());\nfirstGluePanel.add(firstPanel, BorderLayout.WEST);\nfirstGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nfirstGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nJPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);'
p6398
aS'JPanel secondPanel = new JPanel();'
p6399
aS'JPanel secondPanel = new JPanel();\nsecondPanel.setLayout(new GridLayout(5, 13));\nsecondPanel.setMaximumSize(new Dimension(520, 200));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(40, 40));\n        secondPanel.add(btn);\n    }\n}\nmainPanel.add(firstPanel);\nmainPanel.add(secondPanel);\nframe.setContentPane(mainPanel);'
p6400
aS'JPanel secondPanel = new JPanel(new GridLayout(13, 5));\nsecondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));'
p6401
aS'secondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);'
p6402
aS'secondPanel.setPreferredSize(new Dimension(5 * 40, 13 * 40));\nfor (int i = 1; i <= 5; i++) {\n    for (int j = 1; j <= 13; j++) {\n        secondPanel.add(new JButton());\n    }\n}\nJPanel secondGluePanel = new JPanel(new BorderLayout());\nsecondGluePanel.add(secondPanel, BorderLayout.WEST);\nsecondGluePanel.add(Box.createHorizontalGlue(), BorderLayout.CENTER);\nsecondGluePanel.add(Box.createVerticalGlue(), BorderLayout.SOUTH);\nmainPanel.add(firstGluePanel);\nmainPanel.add(secondGluePanel);'
p6403
aS'firstPanel.setLayout(new GridLayout(4, 4));\nfirstPanel.setMaximumSize(new Dimension(400, 400));\nJButton btn;\nfor (int i = 1; i <= 4; i++) {\n    for (int j = 1; j <= 4; j++) {\n        btn = new JButton();\n        btn.setPreferredSize(new Dimension(100, 100));\n        firstPanel.add(btn);\n    }\n}\nJPanel secondPanel = new JPanel();'
p6404
atp6405
Rp6406
sI4802887
g1
((lp6407
S'private String fieldName;\npublic TestExclStrat(String fqfn) throws SecurityException, NoSuchFieldException, ClassNotFoundException {\n    this.c = Class.forName(fqfn.substring(0, fqfn.lastIndexOf(".")));\n    this.fieldName = fqfn.substring(fqfn.lastIndexOf(".") + 1);\n}\npublic boolean shouldSkipClass(Class<?> arg0) {\n    return false;\n}\npublic boolean shouldSkipField(FieldAttributes f) {\n    return (f.getDeclaringClass() == c && f.getName().equals(fieldName));\n}'
p6408
aS'private Long id;'
p6409
aS'public boolean shouldSkipField(FieldAttributes f) {\n    return (f.getDeclaringClass() == Student.class && f.getName().equals("firstName")) || (f.getDeclaringClass() == Country.class && f.getName().equals("name"));\n}'
p6410
aS'Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();'
p6411
aS'public boolean shouldSkipField(FieldAttributes f) {\n    return f.getName().toLowerCase().contains("name");\n}'
p6412
aS'this.c = Class.forName(fqfn.substring(0, fqfn.lastIndexOf(".")));\nthis.fieldName = fqfn.substring(fqfn.lastIndexOf(".") + 1);'
p6413
aS'private String fieldName;\npublic TestExclStrat(String fqfn) throws SecurityException, NoSuchFieldException, ClassNotFoundException {\n    this.c = Class.forName(fqfn.substring(0, fqfn.lastIndexOf(".")));\n    this.fieldName = fqfn.substring(fqfn.lastIndexOf(".") + 1);\n}'
p6414
aS'Student src = new Student();'
p6415
aS'private transient String name;'
p6416
aS'private Class<?> c;\nprivate String fieldName;\npublic TestExclStrat(String fqfn) throws SecurityException, NoSuchFieldException, ClassNotFoundException {\n    this.c = Class.forName(fqfn.substring(0, fqfn.lastIndexOf(".")));\n    this.fieldName = fqfn.substring(fqfn.lastIndexOf(".") + 1);\n}\npublic boolean shouldSkipClass(Class<?> arg0) {\n    return false;\n}'
p6417
aS'public TestExclStrat(String fqfn) throws SecurityException, NoSuchFieldException, ClassNotFoundException {\n    this.c = Class.forName(fqfn.substring(0, fqfn.lastIndexOf(".")));\n    this.fieldName = fqfn.substring(fqfn.lastIndexOf(".") + 1);\n}'
p6418
aS'public class TestExclStrat implements ExclusionStrategy {\n\n    private Class<?> c;\n\n    private String fieldName;\n\n    public TestExclStrat(String fqfn) throws SecurityException, NoSuchFieldException, ClassNotFoundException {\n        this.c = Class.forName(fqfn.substring(0, fqfn.lastIndexOf(".")));\n        this.fieldName = fqfn.substring(fqfn.lastIndexOf(".") + 1);\n    }\n\n    public boolean shouldSkipClass(Class<?> arg0) {\n        return false;\n    }\n\n    public boolean shouldSkipField(FieldAttributes f) {\n        return (f.getDeclaringClass() == c && f.getName().equals(fieldName));\n    }\n}'
p6419
aS'return false;'
p6420
aS'String json = gson.toJson(src);\nSystem.out.println(json);'
p6421
aS'Gson gson = new GsonBuilder().setExclusionStrategies(new TestExclStrat()).create();\nStudent src = new Student();\nString json = gson.toJson(src);'
p6422
aS'Student src = new Student();\nString json = gson.toJson(src);'
p6423
aS'this.c = Class.forName(fqfn.substring(0, fqfn.lastIndexOf(".")));'
p6424
aS'Gson gson = new GsonBuilder().setExclusionStrategies(new TestExclStrat()).create();\nStudent src = new Student();'
p6425
aS'private Class<?> c;\nprivate String fieldName;'
p6426
aS'public boolean shouldSkipClass(Class<?> arg0) {\n    return false;\n}\npublic boolean shouldSkipField(FieldAttributes f) {\n    return (f.getDeclaringClass() == c && f.getName().equals(fieldName));\n}'
p6427
aS'return f.getName().toLowerCase().contains("name");'
p6428
aS'Gson gson = new GsonBuilder().setExclusionStrategies(new TestExclStrat()).create();'
p6429
aS'public boolean shouldSkipClass(Class<?> arg0) {\n    return false;\n}'
p6430
aS'public boolean shouldSkipField(FieldAttributes f) {\n    return (f.getDeclaringClass() == c && f.getName().equals(fieldName));\n}'
p6431
aS'public boolean shouldSkipClass(Class<?> arg0) {\n    return false;\n}\npublic boolean shouldSkipField(FieldAttributes f) {\n    return (f.getDeclaringClass() == Student.class && f.getName().equals("firstName")) || (f.getDeclaringClass() == Country.class && f.getName().equals("name"));\n}'
p6432
aS'return (f.getDeclaringClass() == c && f.getName().equals(fieldName));'
p6433
aS'public TestExclStrat(String fqfn) throws SecurityException, NoSuchFieldException, ClassNotFoundException {\n    this.c = Class.forName(fqfn.substring(0, fqfn.lastIndexOf(".")));\n    this.fieldName = fqfn.substring(fqfn.lastIndexOf(".") + 1);\n}\npublic boolean shouldSkipClass(Class<?> arg0) {\n    return false;\n}\npublic boolean shouldSkipField(FieldAttributes f) {\n    return (f.getDeclaringClass() == c && f.getName().equals(fieldName));\n}'
p6434
aS'private Class<?> c;'
p6435
aS'private String fieldName;'
p6436
aS'private Class<?> c;\nprivate String fieldName;\npublic TestExclStrat(String fqfn) throws SecurityException, NoSuchFieldException, ClassNotFoundException {\n    this.c = Class.forName(fqfn.substring(0, fqfn.lastIndexOf(".")));\n    this.fieldName = fqfn.substring(fqfn.lastIndexOf(".") + 1);\n}\npublic boolean shouldSkipClass(Class<?> arg0) {\n    return false;\n}\npublic boolean shouldSkipField(FieldAttributes f) {\n    return (f.getDeclaringClass() == c && f.getName().equals(fieldName));\n}'
p6437
aS'this.fieldName = fqfn.substring(fqfn.lastIndexOf(".") + 1);'
p6438
aS'Student src = new Student();\nString json = gson.toJson(src);\nSystem.out.println(json);'
p6439
aS'private Class<?> c;\nprivate String fieldName;\npublic TestExclStrat(String fqfn) throws SecurityException, NoSuchFieldException, ClassNotFoundException {\n    this.c = Class.forName(fqfn.substring(0, fqfn.lastIndexOf(".")));\n    this.fieldName = fqfn.substring(fqfn.lastIndexOf(".") + 1);\n}'
p6440
aS'String json = gson.toJson(src);'
p6441
aS'Gson gson = new GsonBuilder().setExclusionStrategies(new TestExclStrat("in.naishe.test.Country.name")).create();'
p6442
aS'public class TestExclStrat implements ExclusionStrategy {\n\n    public boolean shouldSkipClass(Class<?> arg0) {\n        return false;\n    }\n\n    public boolean shouldSkipField(FieldAttributes f) {\n        return (f.getDeclaringClass() == Student.class && f.getName().equals("firstName")) || (f.getDeclaringClass() == Country.class && f.getName().equals("name"));\n    }\n}'
p6443
aS'public TestExclStrat(String fqfn) throws SecurityException, NoSuchFieldException, ClassNotFoundException {\n    this.c = Class.forName(fqfn.substring(0, fqfn.lastIndexOf(".")));\n    this.fieldName = fqfn.substring(fqfn.lastIndexOf(".") + 1);\n}\npublic boolean shouldSkipClass(Class<?> arg0) {\n    return false;\n}'
p6444
aS'Gson gson = new GsonBuilder().setExclusionStrategies(new TestExclStrat("in.naishe.test.Country.name")).create();\nStudent src = new Student();\nString json = gson.toJson(src);\nSystem.out.println(json);'
p6445
aS'Gson gson = new GsonBuilder().setExclusionStrategies(new TestExclStrat()).create();\nStudent src = new Student();\nString json = gson.toJson(src);\nSystem.out.println(json);'
p6446
aS'@Expose\nprivate Long id;'
p6447
aS'Gson gson = new GsonBuilder().setExclusionStrategies(new TestExclStrat("in.naishe.test.Country.name")).create();\nStudent src = new Student();\nString json = gson.toJson(src);'
p6448
aS'private String fieldName;\npublic TestExclStrat(String fqfn) throws SecurityException, NoSuchFieldException, ClassNotFoundException {\n    this.c = Class.forName(fqfn.substring(0, fqfn.lastIndexOf(".")));\n    this.fieldName = fqfn.substring(fqfn.lastIndexOf(".") + 1);\n}\npublic boolean shouldSkipClass(Class<?> arg0) {\n    return false;\n}'
p6449
aS'return (f.getDeclaringClass() == Student.class && f.getName().equals("firstName")) || (f.getDeclaringClass() == Country.class && f.getName().equals("name"));'
p6450
aS'System.out.println(json);'
p6451
aS'Gson gson = new GsonBuilder().setExclusionStrategies(new TestExclStrat("in.naishe.test.Country.name")).create();\nStudent src = new Student();'
p6452
atp6453
Rp6454
sI13942701
g1
((lp6455
S'Scanner reader = new Scanner(System.in);\nchar c = reader.next().charAt(0);'
p6456
aS'char c = reader.next(".").charAt(0);'
p6457
aS'char c = reader.next().charAt(0);'
p6458
aS'Scanner reader = new Scanner(System.in);'
p6459
aS'Scanner reader = new Scanner(System.in);\nchar c = reader.next().trim().charAt(0);'
p6460
aS'char c = reader.findInLine(".").charAt(0);'
p6461
aS'char c = reader.next().trim().charAt(0);'
p6462
aS'reader.useDelimiter("");'
p6463
atp6464
Rp6465
sI4051887
g1
((lp6466
S'int number = 1500;\nString formatted = String.format("%07d", number);\nSystem.out.println("Number with leading zeros: " + formatted);'
p6467
aS'String formatted = String.format("%07d", number);'
p6468
aS'System.out.println("Number with leading zeros: " + formatted);'
p6469
aS'public class LeadingZerosExample {\n\n    public static void main(String[] args) {\n        int number = 1500;\n        String formatted = String.format("%07d", number);\n        System.out.println("Number with leading zeros: " + formatted);\n    }\n}'
p6470
aS'("00000000" + "Apple").substring("Apple".length());'
p6471
aS"StringUtils.leftPad(yourString, 8, '0');"
p6472
aS'String formatted = String.format("%07d", number);\nSystem.out.println("Number with leading zeros: " + formatted);'
p6473
aS'int number = 1500;'
p6474
aS'public static void main(String[] args) {\n    int number = 1500;\n    String formatted = String.format("%07d", number);\n    System.out.println("Number with leading zeros: " + formatted);\n}'
p6475
aS'int number = 1500;\nString formatted = String.format("%07d", number);'
p6476
atp6477
Rp6478
sI14676407
g1
((lp6479
S'System.out.println(file.getAbsolutePath());'
p6480
aS'File[] fList = directory.listFiles();\nresultList.addAll(Arrays.asList(fList));\nfor (File file : fList) {\n    if (file.isFile()) {\n        System.out.println(file.getAbsolutePath());\n    } else if (file.isDirectory()) {\n        resultList.addAll(listf(file.getAbsolutePath()));\n    }\n}'
p6481
aS'Returns: {\n}'
p6482
aS'File directory = new File(directoryName);\nFile[] fList = directory.listFiles();'
p6483
aS'File[] fList = directory.listFiles();\nresultList.addAll(Arrays.asList(fList));'
p6484
aS'File directory = new File(directoryName);\nList<File> resultList = new ArrayList<File>();\nFile[] fList = directory.listFiles();'
p6485
aS'File directory = new File(directoryName);\nList<File> resultList = new ArrayList<File>();'
p6486
aS'listf(file.getAbsolutePath(), files);'
p6487
aS'File[] fList = directory.listFiles();'
p6488
aS'List<File> resultList = new ArrayList<File>();\nFile[] fList = directory.listFiles();\nresultList.addAll(Arrays.asList(fList));\nfor (File file : fList) {\n    if (file.isFile()) {\n        System.out.println(file.getAbsolutePath());\n    } else if (file.isDirectory()) {\n        resultList.addAll(listf(file.getAbsolutePath()));\n    }\n}\nreturn resultList;'
p6489
aS'File directory = new File(directoryName);\nList<File> resultList = new ArrayList<File>();\nFile[] fList = directory.listFiles();\nresultList.addAll(Arrays.asList(fList));\nfor (File file : fList) {\n    if (file.isFile()) {\n        System.out.println(file.getAbsolutePath());\n    } else if (file.isDirectory()) {\n        resultList.addAll(listf(file.getAbsolutePath()));\n    }\n}'
p6490
aS'if (file.isFile()) {\n    files.add(file);\n} else if (file.isDirectory()) {\n    listf(file.getAbsolutePath(), files);\n}'
p6491
aS'for (File file : fList) {\n}'
p6492
aS'files.add(file);'
p6493
aS'File directory = new File(directoryName);\nList<File> resultList = new ArrayList<File>();\nFile[] fList = directory.listFiles();\nresultList.addAll(Arrays.asList(fList));\nfor (File file : fList) {\n}'
p6494
aS'for (File file : fList) {\n    if (file.isFile()) {\n        files.add(file);\n    } else if (file.isDirectory()) {\n        listf(file.getAbsolutePath(), files);\n    }\n}'
p6495
aS'if (file.isFile()) {\n}'
p6496
aS'resultList.addAll(listf(file.getAbsolutePath()));'
p6497
aS'List<File> resultList = new ArrayList<File>();\nFile[] fList = directory.listFiles();\nresultList.addAll(Arrays.asList(fList));'
p6498
aS'File[] fList = directory.listFiles();\nfor (File file : fList) {\n}'
p6499
aS'List<File> resultList = new ArrayList<File>();'
p6500
aS'File directory = new File(directoryName);\nList<File> resultList = new ArrayList<File>();\nFile[] fList = directory.listFiles();\nresultList.addAll(Arrays.asList(fList));\nfor (File file : fList) {\n    if (file.isFile()) {\n        System.out.println(file.getAbsolutePath());\n    } else if (file.isDirectory()) {\n        resultList.addAll(listf(file.getAbsolutePath()));\n    }\n}\nreturn resultList;'
p6501
aS'List<File> resultList = new ArrayList<File>();\nFile[] fList = directory.listFiles();\nresultList.addAll(Arrays.asList(fList));\nfor (File file : fList) {\n    if (file.isFile()) {\n        System.out.println(file.getAbsolutePath());\n    } else if (file.isDirectory()) {\n        resultList.addAll(listf(file.getAbsolutePath()));\n    }\n}'
p6502
aS'return resultList;'
p6503
aS'resultList.addAll(Arrays.asList(fList));\nfor (File file : fList) {\n    if (file.isFile()) {\n        System.out.println(file.getAbsolutePath());\n    } else if (file.isDirectory()) {\n        resultList.addAll(listf(file.getAbsolutePath()));\n    }\n}'
p6504
aS'File directory = new File(directoryName);\nFile[] fList = directory.listFiles();\nfor (File file : fList) {\n}'
p6505
aS'File[] fList = directory.listFiles();\nresultList.addAll(Arrays.asList(fList));\nfor (File file : fList) {\n}'
p6506
aS'public static List<File> listf(String directoryName) {\n    File directory = new File(directoryName);\n    List<File> resultList = new ArrayList<File>();\n    File[] fList = directory.listFiles();\n    resultList.addAll(Arrays.asList(fList));\n    for (File file : fList) {\n        if (file.isFile()) {\n            System.out.println(file.getAbsolutePath());\n        } else if (file.isDirectory()) {\n            resultList.addAll(listf(file.getAbsolutePath()));\n        }\n    }\n    return resultList;\n}'
p6507
aS'File[] fList = directory.listFiles();\nresultList.addAll(Arrays.asList(fList));\nfor (File file : fList) {\n    if (file.isFile()) {\n        System.out.println(file.getAbsolutePath());\n    } else if (file.isDirectory()) {\n        resultList.addAll(listf(file.getAbsolutePath()));\n    }\n}\nreturn resultList;'
p6508
aS'resultList.addAll(Arrays.asList(fList));\nfor (File file : fList) {\n    if (file.isFile()) {\n        System.out.println(file.getAbsolutePath());\n    } else if (file.isDirectory()) {\n        resultList.addAll(listf(file.getAbsolutePath()));\n    }\n}\nreturn resultList;'
p6509
aS'public void listf(String directoryName, ArrayList<File> files) {\n    File directory = new File(directoryName);\n    File[] fList = directory.listFiles();\n    for (File file : fList) {\n        if (file.isFile()) {\n            files.add(file);\n        } else if (file.isDirectory()) {\n            listf(file.getAbsolutePath(), files);\n        }\n    }\n}'
p6510
aS'resultList.addAll(Arrays.asList(fList));\nfor (File file : fList) {\n}'
p6511
aS'File directory = new File(directoryName);\nFile[] fList = directory.listFiles();\nfor (File file : fList) {\n    if (file.isFile()) {\n        files.add(file);\n    } else if (file.isDirectory()) {\n        listf(file.getAbsolutePath(), files);\n    }\n}'
p6512
aS'if (file.isFile()) {\n    files.add(file);\n} else if (file.isDirectory()) {\n}'
p6513
aS'File directory = new File(directoryName);'
p6514
aS'for (File file : fList) {\n    if (file.isFile()) {\n        System.out.println(file.getAbsolutePath());\n    } else if (file.isDirectory()) {\n        resultList.addAll(listf(file.getAbsolutePath()));\n    }\n}\nreturn resultList;'
p6515
aS'if (file.isFile()) {\n    System.out.println(file.getAbsolutePath());\n} else if (file.isDirectory()) {\n    resultList.addAll(listf(file.getAbsolutePath()));\n}'
p6516
aS'List<File> resultList = new ArrayList<File>();\nFile[] fList = directory.listFiles();\nresultList.addAll(Arrays.asList(fList));\nfor (File file : fList) {\n}'
p6517
aS'resultList.addAll(Arrays.asList(fList));'
p6518
aS'for (File file : fList) {\n    if (file.isFile()) {\n        System.out.println(file.getAbsolutePath());\n    } else if (file.isDirectory()) {\n        resultList.addAll(listf(file.getAbsolutePath()));\n    }\n}'
p6519
aS'Parameters: {\n}'
p6520
aS'if (file.isFile()) {\n    files.add(file);\n}'
p6521
aS'List<File> resultList = new ArrayList<File>();\nFile[] fList = directory.listFiles();'
p6522
aS'File directory = new File(directoryName);\nList<File> resultList = new ArrayList<File>();\nFile[] fList = directory.listFiles();\nresultList.addAll(Arrays.asList(fList));'
p6523
aS'if (file.isFile()) {\n    System.out.println(file.getAbsolutePath());\n} else if (file.isDirectory()) {\n}'
p6524
aS'File[] fList = directory.listFiles();\nfor (File file : fList) {\n    if (file.isFile()) {\n        files.add(file);\n    } else if (file.isDirectory()) {\n        listf(file.getAbsolutePath(), files);\n    }\n}'
p6525
atp6526
Rp6527
sI2364856
g1
((lp6528
S'boolean[] array = new boolean[size];'
p6529
aS'Boolean[] array = new Boolean[size];'
p6530
aS'Arrays.fill(array, Boolean.FALSE);'
p6531
aS'Boolean[] array = new Boolean[size];\nArrays.fill(array, Boolean.FALSE);'
p6532
atp6533
Rp6534
sI5762491
g1
((lp6535
S'public static final String ANSI_YELLOW = "\x1b[33m";\npublic static final String ANSI_BLUE = "\x1b[34m";\npublic static final String ANSI_PURPLE = "\x1b[35m";\npublic static final String ANSI_CYAN = "\x1b[36m";'
p6536
aS'public static final String ANSI_PURPLE_BACKGROUND = "\x1b[45m";'
p6537
aS'public static final String ANSI_GREEN_BACKGROUND = "\x1b[42m";\npublic static final String ANSI_YELLOW_BACKGROUND = "\x1b[43m";\npublic static final String ANSI_BLUE_BACKGROUND = "\x1b[44m";\npublic static final String ANSI_PURPLE_BACKGROUND = "\x1b[45m";\npublic static final String ANSI_CYAN_BACKGROUND = "\x1b[46m";\npublic static final String ANSI_WHITE_BACKGROUND = "\x1b[47m";'
p6538
aS'public static final String ANSI_BLUE_BACKGROUND = "\x1b[44m";\npublic static final String ANSI_PURPLE_BACKGROUND = "\x1b[45m";\npublic static final String ANSI_CYAN_BACKGROUND = "\x1b[46m";\npublic static final String ANSI_WHITE_BACKGROUND = "\x1b[47m";'
p6539
aS'public static final String ANSI_BLACK_BACKGROUND = "\x1b[40m";\npublic static final String ANSI_RED_BACKGROUND = "\x1b[41m";\npublic static final String ANSI_GREEN_BACKGROUND = "\x1b[42m";\npublic static final String ANSI_YELLOW_BACKGROUND = "\x1b[43m";\npublic static final String ANSI_BLUE_BACKGROUND = "\x1b[44m";'
p6540
aS'public static final String ANSI_RED_BACKGROUND = "\x1b[41m";\npublic static final String ANSI_GREEN_BACKGROUND = "\x1b[42m";'
p6541
aS'public static final String ANSI_BLACK_BACKGROUND = "\x1b[40m";'
p6542
aS'public static final String ANSI_GREEN_BACKGROUND = "\x1b[42m";\npublic static final String ANSI_YELLOW_BACKGROUND = "\x1b[43m";\npublic static final String ANSI_BLUE_BACKGROUND = "\x1b[44m";\npublic static final String ANSI_PURPLE_BACKGROUND = "\x1b[45m";'
p6543
aS'public static final String ANSI_BLACK_BACKGROUND = "\x1b[40m";\npublic static final String ANSI_RED_BACKGROUND = "\x1b[41m";'
p6544
aS'public static final String ANSI_PURPLE_BACKGROUND = "\x1b[45m";\npublic static final String ANSI_CYAN_BACKGROUND = "\x1b[46m";\npublic static final String ANSI_WHITE_BACKGROUND = "\x1b[47m";'
p6545
aS'public static final String ANSI_GREEN_BACKGROUND = "\x1b[42m";\npublic static final String ANSI_YELLOW_BACKGROUND = "\x1b[43m";\npublic static final String ANSI_BLUE_BACKGROUND = "\x1b[44m";'
p6546
aS'public static final String ANSI_CYAN_BACKGROUND = "\x1b[46m";'
p6547
aS'public static final String ANSI_BLACK = "\x1b[30m";\npublic static final String ANSI_RED = "\x1b[31m";\npublic static final String ANSI_GREEN = "\x1b[32m";\npublic static final String ANSI_YELLOW = "\x1b[33m";'
p6548
aS'public static final String ANSI_RED_BACKGROUND = "\x1b[41m";\npublic static final String ANSI_GREEN_BACKGROUND = "\x1b[42m";\npublic static final String ANSI_YELLOW_BACKGROUND = "\x1b[43m";\npublic static final String ANSI_BLUE_BACKGROUND = "\x1b[44m";\npublic static final String ANSI_PURPLE_BACKGROUND = "\x1b[45m";\npublic static final String ANSI_CYAN_BACKGROUND = "\x1b[46m";'
p6549
aS'public static final String ANSI_YELLOW = "\x1b[33m";'
p6550
aS'public static final String ANSI_RED_BACKGROUND = "\x1b[41m";\npublic static final String ANSI_GREEN_BACKGROUND = "\x1b[42m";\npublic static final String ANSI_YELLOW_BACKGROUND = "\x1b[43m";\npublic static final String ANSI_BLUE_BACKGROUND = "\x1b[44m";\npublic static final String ANSI_PURPLE_BACKGROUND = "\x1b[45m";'
p6551
aS'public static final String ANSI_BLACK_BACKGROUND = "\x1b[40m";\npublic static final String ANSI_RED_BACKGROUND = "\x1b[41m";\npublic static final String ANSI_GREEN_BACKGROUND = "\x1b[42m";\npublic static final String ANSI_YELLOW_BACKGROUND = "\x1b[43m";\npublic static final String ANSI_BLUE_BACKGROUND = "\x1b[44m";\npublic static final String ANSI_PURPLE_BACKGROUND = "\x1b[45m";\npublic static final String ANSI_CYAN_BACKGROUND = "\x1b[46m";'
p6552
aS'public static final String ANSI_BLUE = "\x1b[34m";\npublic static final String ANSI_PURPLE = "\x1b[35m";'
p6553
aS'public static final String ANSI_BLUE_BACKGROUND = "\x1b[44m";\npublic static final String ANSI_PURPLE_BACKGROUND = "\x1b[45m";'
p6554
aS'public static final String ANSI_RESET = "\x1b[0m";\npublic static final String ANSI_BLACK = "\x1b[30m";'
p6555
aS'public static final String ANSI_PURPLE_BACKGROUND = "\x1b[45m";\npublic static final String ANSI_CYAN_BACKGROUND = "\x1b[46m";'
p6556
aS'public static final String ANSI_YELLOW_BACKGROUND = "\x1b[43m";'
p6557
aS'public static final String ANSI_GREEN = "\x1b[32m";\npublic static final String ANSI_YELLOW = "\x1b[33m";\npublic static final String ANSI_BLUE = "\x1b[34m";\npublic static final String ANSI_PURPLE = "\x1b[35m";\npublic static final String ANSI_CYAN = "\x1b[36m";\npublic static final String ANSI_WHITE = "\x1b[37m";'
p6558
aS'public static final String ANSI_BLACK = "\x1b[30m";\npublic static final String ANSI_RED = "\x1b[31m";'
p6559
aS'public static final String ANSI_GREEN_BACKGROUND = "\x1b[42m";'
p6560
aS'public static final String ANSI_RED_BACKGROUND = "\x1b[41m";\npublic static final String ANSI_GREEN_BACKGROUND = "\x1b[42m";\npublic static final String ANSI_YELLOW_BACKGROUND = "\x1b[43m";\npublic static final String ANSI_BLUE_BACKGROUND = "\x1b[44m";'
p6561
aS'public static final String ANSI_RESET = "\x1b[0m";\npublic static final String ANSI_BLACK = "\x1b[30m";\npublic static final String ANSI_RED = "\x1b[31m";\npublic static final String ANSI_GREEN = "\x1b[32m";\npublic static final String ANSI_YELLOW = "\x1b[33m";'
p6562
aS'public static final String ANSI_RESET = "\x1b[0m";\npublic static final String ANSI_BLACK = "\x1b[30m";\npublic static final String ANSI_RED = "\x1b[31m";'
p6563
aS'public static final String ANSI_BLACK = "\x1b[30m";\npublic static final String ANSI_RED = "\x1b[31m";\npublic static final String ANSI_GREEN = "\x1b[32m";\npublic static final String ANSI_YELLOW = "\x1b[33m";\npublic static final String ANSI_BLUE = "\x1b[34m";\npublic static final String ANSI_PURPLE = "\x1b[35m";\npublic static final String ANSI_CYAN = "\x1b[36m";'
p6564
aS'public static final String ANSI_RED = "\x1b[31m";\npublic static final String ANSI_GREEN = "\x1b[32m";\npublic static final String ANSI_YELLOW = "\x1b[33m";\npublic static final String ANSI_BLUE = "\x1b[34m";'
p6565
aS'public static final String ANSI_RESET = "\x1b[0m";\npublic static final String ANSI_BLACK = "\x1b[30m";\npublic static final String ANSI_RED = "\x1b[31m";\npublic static final String ANSI_GREEN = "\x1b[32m";\npublic static final String ANSI_YELLOW = "\x1b[33m";\npublic static final String ANSI_BLUE = "\x1b[34m";\npublic static final String ANSI_PURPLE = "\x1b[35m";'
p6566
aS'public static final String ANSI_RESET = "\x1b[0m";\npublic static final String ANSI_BLACK = "\x1b[30m";\npublic static final String ANSI_RED = "\x1b[31m";\npublic static final String ANSI_GREEN = "\x1b[32m";\npublic static final String ANSI_YELLOW = "\x1b[33m";\npublic static final String ANSI_BLUE = "\x1b[34m";'
p6567
aS'public static final String ANSI_BLUE = "\x1b[34m";\npublic static final String ANSI_PURPLE = "\x1b[35m";\npublic static final String ANSI_CYAN = "\x1b[36m";\npublic static final String ANSI_WHITE = "\x1b[37m";'
p6568
aS'public static final String ANSI_YELLOW_BACKGROUND = "\x1b[43m";\npublic static final String ANSI_BLUE_BACKGROUND = "\x1b[44m";\npublic static final String ANSI_PURPLE_BACKGROUND = "\x1b[45m";\npublic static final String ANSI_CYAN_BACKGROUND = "\x1b[46m";'
p6569
aS'public static final String ANSI_BLUE_BACKGROUND = "\x1b[44m";'
p6570
aS'public static final String ANSI_CYAN = "\x1b[36m";'
p6571
aS'public static final String ANSI_RESET = "\x1b[0m";'
p6572
aS'public static final String ANSI_RED = "\x1b[31m";\npublic static final String ANSI_GREEN = "\x1b[32m";'
p6573
aS'public static final String ANSI_RED = "\x1b[31m";\npublic static final String ANSI_GREEN = "\x1b[32m";\npublic static final String ANSI_YELLOW = "\x1b[33m";\npublic static final String ANSI_BLUE = "\x1b[34m";\npublic static final String ANSI_PURPLE = "\x1b[35m";\npublic static final String ANSI_CYAN = "\x1b[36m";\npublic static final String ANSI_WHITE = "\x1b[37m";'
p6574
aS'public static final String ANSI_GREEN = "\x1b[32m";\npublic static final String ANSI_YELLOW = "\x1b[33m";\npublic static final String ANSI_BLUE = "\x1b[34m";'
p6575
aS'public static final String ANSI_CYAN = "\x1b[36m";\npublic static final String ANSI_WHITE = "\x1b[37m";'
p6576
aS'public static final String ANSI_BLACK = "\x1b[30m";\npublic static final String ANSI_RED = "\x1b[31m";\npublic static final String ANSI_GREEN = "\x1b[32m";\npublic static final String ANSI_YELLOW = "\x1b[33m";\npublic static final String ANSI_BLUE = "\x1b[34m";'
p6577
aS'public static final String ANSI_BLUE = "\x1b[34m";\npublic static final String ANSI_PURPLE = "\x1b[35m";\npublic static final String ANSI_CYAN = "\x1b[36m";'
p6578
aS'public static final String ANSI_YELLOW_BACKGROUND = "\x1b[43m";\npublic static final String ANSI_BLUE_BACKGROUND = "\x1b[44m";\npublic static final String ANSI_PURPLE_BACKGROUND = "\x1b[45m";'
p6579
aS'public static final String ANSI_CYAN_BACKGROUND = "\x1b[46m";\npublic static final String ANSI_WHITE_BACKGROUND = "\x1b[47m";'
p6580
aS'public static final String ANSI_GREEN_BACKGROUND = "\x1b[42m";\npublic static final String ANSI_YELLOW_BACKGROUND = "\x1b[43m";'
p6581
aS'print("Hello World!", Attribute.BOLD, FColor.YELLOW, BColor.GREEN);'
p6582
aS'public static final String ANSI_YELLOW = "\x1b[33m";\npublic static final String ANSI_BLUE = "\x1b[34m";\npublic static final String ANSI_PURPLE = "\x1b[35m";'
p6583
aS'public static final String ANSI_RED = "\x1b[31m";\npublic static final String ANSI_GREEN = "\x1b[32m";\npublic static final String ANSI_YELLOW = "\x1b[33m";\npublic static final String ANSI_BLUE = "\x1b[34m";\npublic static final String ANSI_PURPLE = "\x1b[35m";\npublic static final String ANSI_CYAN = "\x1b[36m";'
p6584
aS'public static final String ANSI_RED_BACKGROUND = "\x1b[41m";\npublic static final String ANSI_GREEN_BACKGROUND = "\x1b[42m";\npublic static final String ANSI_YELLOW_BACKGROUND = "\x1b[43m";\npublic static final String ANSI_BLUE_BACKGROUND = "\x1b[44m";\npublic static final String ANSI_PURPLE_BACKGROUND = "\x1b[45m";\npublic static final String ANSI_CYAN_BACKGROUND = "\x1b[46m";\npublic static final String ANSI_WHITE_BACKGROUND = "\x1b[47m";'
p6585
aS'public static final String ANSI_PURPLE = "\x1b[35m";\npublic static final String ANSI_CYAN = "\x1b[36m";'
p6586
aS'public static final String ANSI_YELLOW_BACKGROUND = "\x1b[43m";\npublic static final String ANSI_BLUE_BACKGROUND = "\x1b[44m";\npublic static final String ANSI_PURPLE_BACKGROUND = "\x1b[45m";\npublic static final String ANSI_CYAN_BACKGROUND = "\x1b[46m";\npublic static final String ANSI_WHITE_BACKGROUND = "\x1b[47m";'
p6587
aS'public static final String ANSI_PURPLE = "\x1b[35m";\npublic static final String ANSI_CYAN = "\x1b[36m";\npublic static final String ANSI_WHITE = "\x1b[37m";'
p6588
aS'public static final String ANSI_GREEN_BACKGROUND = "\x1b[42m";\npublic static final String ANSI_YELLOW_BACKGROUND = "\x1b[43m";\npublic static final String ANSI_BLUE_BACKGROUND = "\x1b[44m";\npublic static final String ANSI_PURPLE_BACKGROUND = "\x1b[45m";\npublic static final String ANSI_CYAN_BACKGROUND = "\x1b[46m";'
p6589
aS'public static final String ANSI_RED = "\x1b[31m";'
p6590
aS'public static final String ANSI_BLACK_BACKGROUND = "\x1b[40m";\npublic static final String ANSI_RED_BACKGROUND = "\x1b[41m";\npublic static final String ANSI_GREEN_BACKGROUND = "\x1b[42m";'
p6591
aS'System.out.println(ANSI_RED + "This text is red!" + ANSI_RESET);'
p6592
aS'public static final String ANSI_BLACK = "\x1b[30m";\npublic static final String ANSI_RED = "\x1b[31m";\npublic static final String ANSI_GREEN = "\x1b[32m";\npublic static final String ANSI_YELLOW = "\x1b[33m";\npublic static final String ANSI_BLUE = "\x1b[34m";\npublic static final String ANSI_PURPLE = "\x1b[35m";'
p6593
aS'public static final String ANSI_RED_BACKGROUND = "\x1b[41m";\npublic static final String ANSI_GREEN_BACKGROUND = "\x1b[42m";\npublic static final String ANSI_YELLOW_BACKGROUND = "\x1b[43m";'
p6594
aS'public static final String ANSI_BLACK = "\x1b[30m";\npublic static final String ANSI_RED = "\x1b[31m";\npublic static final String ANSI_GREEN = "\x1b[32m";\npublic static final String ANSI_YELLOW = "\x1b[33m";\npublic static final String ANSI_BLUE = "\x1b[34m";\npublic static final String ANSI_PURPLE = "\x1b[35m";\npublic static final String ANSI_CYAN = "\x1b[36m";\npublic static final String ANSI_WHITE = "\x1b[37m";'
p6595
aS'public static final String ANSI_GREEN = "\x1b[32m";\npublic static final String ANSI_YELLOW = "\x1b[33m";\npublic static final String ANSI_BLUE = "\x1b[34m";\npublic static final String ANSI_PURPLE = "\x1b[35m";'
p6596
aS'public static final String ANSI_WHITE = "\x1b[37m";'
p6597
aS'public static final String ANSI_RED_BACKGROUND = "\x1b[41m";'
p6598
aS'public static final String ANSI_YELLOW_BACKGROUND = "\x1b[43m";\npublic static final String ANSI_BLUE_BACKGROUND = "\x1b[44m";'
p6599
aS'public static final String ANSI_BLACK_BACKGROUND = "\x1b[40m";\npublic static final String ANSI_RED_BACKGROUND = "\x1b[41m";\npublic static final String ANSI_GREEN_BACKGROUND = "\x1b[42m";\npublic static final String ANSI_YELLOW_BACKGROUND = "\x1b[43m";'
p6600
aS'public static final String ANSI_RESET = "\x1b[0m";\npublic static final String ANSI_BLACK = "\x1b[30m";\npublic static final String ANSI_RED = "\x1b[31m";\npublic static final String ANSI_GREEN = "\x1b[32m";\npublic static final String ANSI_YELLOW = "\x1b[33m";\npublic static final String ANSI_BLUE = "\x1b[34m";\npublic static final String ANSI_PURPLE = "\x1b[35m";\npublic static final String ANSI_CYAN = "\x1b[36m";\npublic static final String ANSI_WHITE = "\x1b[37m";'
p6601
aS'public static final String ANSI_RED = "\x1b[31m";\npublic static final String ANSI_GREEN = "\x1b[32m";\npublic static final String ANSI_YELLOW = "\x1b[33m";\npublic static final String ANSI_BLUE = "\x1b[34m";\npublic static final String ANSI_PURPLE = "\x1b[35m";'
p6602
aS'public static final String ANSI_BLACK = "\x1b[30m";'
p6603
aS'public static final String ANSI_PURPLE = "\x1b[35m";'
p6604
aS'public static final String ANSI_YELLOW = "\x1b[33m";\npublic static final String ANSI_BLUE = "\x1b[34m";\npublic static final String ANSI_PURPLE = "\x1b[35m";\npublic static final String ANSI_CYAN = "\x1b[36m";\npublic static final String ANSI_WHITE = "\x1b[37m";'
p6605
aS'public static final String ANSI_RESET = "\x1b[0m";\npublic static final String ANSI_BLACK = "\x1b[30m";\npublic static final String ANSI_RED = "\x1b[31m";\npublic static final String ANSI_GREEN = "\x1b[32m";'
p6606
aS'public static final String ANSI_BLACK_BACKGROUND = "\x1b[40m";\npublic static final String ANSI_RED_BACKGROUND = "\x1b[41m";\npublic static final String ANSI_GREEN_BACKGROUND = "\x1b[42m";\npublic static final String ANSI_YELLOW_BACKGROUND = "\x1b[43m";\npublic static final String ANSI_BLUE_BACKGROUND = "\x1b[44m";\npublic static final String ANSI_PURPLE_BACKGROUND = "\x1b[45m";'
p6607
aS'public static final String ANSI_BLUE = "\x1b[34m";'
p6608
aS'public static final String ANSI_GREEN = "\x1b[32m";'
p6609
aS'public static final String ANSI_YELLOW = "\x1b[33m";\npublic static final String ANSI_BLUE = "\x1b[34m";'
p6610
aS'public static final String ANSI_RESET = "\x1b[0m";\npublic static final String ANSI_BLACK = "\x1b[30m";\npublic static final String ANSI_RED = "\x1b[31m";\npublic static final String ANSI_GREEN = "\x1b[32m";\npublic static final String ANSI_YELLOW = "\x1b[33m";\npublic static final String ANSI_BLUE = "\x1b[34m";\npublic static final String ANSI_PURPLE = "\x1b[35m";\npublic static final String ANSI_CYAN = "\x1b[36m";'
p6611
aS'public static final String ANSI_GREEN = "\x1b[32m";\npublic static final String ANSI_YELLOW = "\x1b[33m";\npublic static final String ANSI_BLUE = "\x1b[34m";\npublic static final String ANSI_PURPLE = "\x1b[35m";\npublic static final String ANSI_CYAN = "\x1b[36m";'
p6612
aS'public static final String ANSI_BLACK = "\x1b[30m";\npublic static final String ANSI_RED = "\x1b[31m";\npublic static final String ANSI_GREEN = "\x1b[32m";'
p6613
aS'public static final String ANSI_BLACK_BACKGROUND = "\x1b[40m";\npublic static final String ANSI_RED_BACKGROUND = "\x1b[41m";\npublic static final String ANSI_GREEN_BACKGROUND = "\x1b[42m";\npublic static final String ANSI_YELLOW_BACKGROUND = "\x1b[43m";\npublic static final String ANSI_BLUE_BACKGROUND = "\x1b[44m";\npublic static final String ANSI_PURPLE_BACKGROUND = "\x1b[45m";\npublic static final String ANSI_CYAN_BACKGROUND = "\x1b[46m";\npublic static final String ANSI_WHITE_BACKGROUND = "\x1b[47m";'
p6614
aS'public static final String ANSI_RED = "\x1b[31m";\npublic static final String ANSI_GREEN = "\x1b[32m";\npublic static final String ANSI_YELLOW = "\x1b[33m";'
p6615
aS'public static final String ANSI_GREEN = "\x1b[32m";\npublic static final String ANSI_YELLOW = "\x1b[33m";'
p6616
aS'public static final String ANSI_BLUE_BACKGROUND = "\x1b[44m";\npublic static final String ANSI_PURPLE_BACKGROUND = "\x1b[45m";\npublic static final String ANSI_CYAN_BACKGROUND = "\x1b[46m";'
p6617
aS'public static final String ANSI_WHITE_BACKGROUND = "\x1b[47m";'
p6618
atp6619
Rp6620
sI1522108
g1
((lp6621
S"char[] list = { 'm', 'e', 'y' };\nint index = -1;"
p6622
aS'break;'
p6623
aS"int index = -1;\nfor (int i = 0; (i < list.length) && (index == -1); i++) {\n    if (list[i] == 'e') {\n        index = i;\n    }\n}\nSystem.out.println(index);"
p6624
aS'System.out.println(new String(list).indexOf("e"));'
p6625
aS"if (list[i] == 'e') {\n}"
p6626
aS'index = i;'
p6627
aS"list.add('e');"
p6628
aS"if (list[i] == 'e') {\n    index = i;\n}"
p6629
aS"char[] list = { 'm', 'e', 'y' };\nint index = -1;\nfor (int i = 0; (i < list.length) && (index == -1); i++) {\n}"
p6630
aS'System.out.println(i);'
p6631
aS'System.out.println(i);\nbreak;'
p6632
aS"list.add('y');\nSystem.out.println(list.indexOf('e'));"
p6633
aS"list.add('m');\nlist.add('e');"
p6634
aS"list.add('m');\nlist.add('e');\nlist.add('y');\nSystem.out.println(list.indexOf('e'));"
p6635
aS"list.add('e');\nlist.add('y');"
p6636
aS"if (list[i] == 'e') {\n    System.out.println(i);\n    break;\n}"
p6637
aS"list.add('e');\nlist.add('y');\nSystem.out.println(list.indexOf('e'));"
p6638
aS'for (int i = 0; i < list.length; i++) {\n}'
p6639
aS"ArrayList<Character> list = new ArrayList<Character>();\nlist.add('m');"
p6640
aS"int index = -1;\nfor (int i = 0; (i < list.length) && (index == -1); i++) {\n    if (list[i] == 'e') {\n        index = i;\n    }\n}"
p6641
aS"char[] list = { 'm', 'e', 'y' };\nint index = -1;\nfor (int i = 0; (i < list.length) && (index == -1); i++) {\n    if (list[i] == 'e') {\n        index = i;\n    }\n}\nSystem.out.println(index);"
p6642
aS'for (int i = 0; (i < list.length) && (index == -1); i++) {\n}'
p6643
aS'System.out.println(index);'
p6644
aS"ArrayList<Character> list = new ArrayList<Character>();\nlist.add('m');\nlist.add('e');\nlist.add('y');\nSystem.out.println(list.indexOf('e'));"
p6645
aS"for (int i = 0; i < list.length; i++) {\n    if (list[i] == 'e') {\n        System.out.println(i);\n        break;\n    }\n}"
p6646
aS"ArrayList<Character> list = new ArrayList<Character>();\nlist.add('m');\nlist.add('e');"
p6647
aS'int index = -1;'
p6648
aS'ArrayList<Character> list = new ArrayList<Character>();'
p6649
aS"for (int i = 0; (i < list.length) && (index == -1); i++) {\n    if (list[i] == 'e') {\n        index = i;\n    }\n}\nSystem.out.println(index);"
p6650
aS"public class T {\n\n    public static void main(String[] args) {\n        char[] list = { 'm', 'e', 'y' };\n        int index = -1;\n        for (int i = 0; (i < list.length) && (index == -1); i++) {\n            if (list[i] == 'e') {\n                index = i;\n            }\n        }\n        System.out.println(index);\n    }\n}"
p6651
aS"public static void main(String[] args) {\n    char[] list = { 'm', 'e', 'y' };\n    int index = -1;\n    for (int i = 0; (i < list.length) && (index == -1); i++) {\n        if (list[i] == 'e') {\n            index = i;\n        }\n    }\n    System.out.println(index);\n}"
p6652
aS"char[] list = { 'm', 'e', 'y' };"
p6653
aS"list.add('m');"
p6654
aS"char[] list = { 'm', 'e', 'y' };\nint index = -1;\nfor (int i = 0; (i < list.length) && (index == -1); i++) {\n    if (list[i] == 'e') {\n        index = i;\n    }\n}"
p6655
aS"for (int i = 0; (i < list.length) && (index == -1); i++) {\n    if (list[i] == 'e') {\n        index = i;\n    }\n}"
p6656
aS"ArrayList<Character> list = new ArrayList<Character>();\nlist.add('m');\nlist.add('e');\nlist.add('y');"
p6657
aS"list.add('m');\nlist.add('e');\nlist.add('y');"
p6658
aS'int index = -1;\nfor (int i = 0; (i < list.length) && (index == -1); i++) {\n}'
p6659
aS"list.add('y');"
p6660
aS"System.out.println(list.indexOf('e'));"
p6661
aS"List list = Arrays.asList(new Character[] { 'm', 'e', 'y' });\nSystem.out.println(list.indexOf('e'));"
p6662
aS"List list = Arrays.asList(new Character[] { 'm', 'e', 'y' });"
p6663
atp6664
Rp6665
sI960431
g1
((lp6666
S'List<Integer> myList;'
p6667
aS'static final Integer[] NO_INTS = new Integer[0];'
p6668
aS'int[] intArray = ArrayUtils.toPrimitive(myList.toArray(new Integer[myList.size()]));'
p6669
aS'int[] ints = Ints.toArray(list);'
p6670
aS'int[] array = list.stream().mapToInt(i -> i).toArray();'
p6671
aS'int[] intArray2 = ArrayUtils.toPrimitive(myList.toArray(NO_INTS));'
p6672
atp6673
Rp6674
sI20363719
g1
((lp6675
S'Map<String, Choice> result = choices.stream().collect(Collectors.toMap(Choice::getName, c -> c));'
p6676
aS'Map<String, List<Choice>> result = choices.stream().collect(Collectors.groupingBy(Choice::getName));'
p6677
aS'Map<String, Choice> result = choices.stream().collect(Collectors.toMap(Choice::getName, Function.identity()));'
p6678
atp6679
Rp6680
sI2369967
g1
((lp6681
S'int[] arr = null;\nif (arr == null) {\n    System.out.println("array is null");\n}'
p6682
aS'boolean empty = true;'
p6683
aS'break;'
p6684
aS'int[] arr = null;\nif (arr == null) {\n}'
p6685
aS'Object[] arr = new Object[10];\nboolean empty = true;\nfor (int i = 0; i < arr.length; i++) {\n    if (arr[i] != null) {\n        empty = false;\n        break;\n    }\n}'
p6686
aS'System.out.println("array is null");'
p6687
aS'arr = new int[0];\nif (arr.length == 0) {\n    System.out.println("array is empty");\n}'
p6688
aS'if (i == null || i.length == 0) {\n}'
p6689
aS'System.out.println("array is empty");'
p6690
aS'empty = false;\nbreak;'
p6691
aS'int[] arr = null;'
p6692
aS'for (Object ob : arr) {\n    if (ob != null) {\n        empty = false;\n        break;\n    }\n}'
p6693
aS'boolean empty = true;\nfor (Object ob : arr) {\n    if (ob != null) {\n        empty = false;\n        break;\n    }\n}'
p6694
aS'for (Object ob : arr) {\n}'
p6695
aS'Object[] arr = new Object[10];\nboolean empty = true;\nfor (Object ob : arr) {\n}'
p6696
aS'if (arr[i] != null) {\n}'
p6697
aS'for (int i = 0; i < arr.length; i++) {\n    if (arr[i] != null) {\n        empty = false;\n        break;\n    }\n}'
p6698
aS'if (ob != null) {\n    empty = false;\n}'
p6699
aS'if (arr[i] != null) {\n    empty = false;\n    break;\n}'
p6700
aS'empty = false;'
p6701
aS'if (ob != null) {\n}'
p6702
aS'Object[] arr = new Object[10];'
p6703
aS'Object[] arr = new Object[10];\nboolean empty = true;'
p6704
aS'arr = new int[0];'
p6705
aS'if (arr.length == 0) {\n}'
p6706
aS'for (int i = 0; i < arr.length; i++) {\n}'
p6707
aS'if (i.length == 0) {\n}'
p6708
aS'boolean empty = true;\nfor (int i = 0; i < arr.length; i++) {\n    if (arr[i] != null) {\n        empty = false;\n        break;\n    }\n}'
p6709
aS'if (ob != null) {\n    empty = false;\n    break;\n}'
p6710
aS'if (arr[i] != null) {\n    empty = false;\n}'
p6711
aS'Object[] arr = new Object[10];\nboolean empty = true;\nfor (int i = 0; i < arr.length; i++) {\n}'
p6712
aS'arr = new int[0];\nif (arr.length == 0) {\n}'
p6713
aS'Object[] arr = new Object[10];\nboolean empty = true;\nfor (Object ob : arr) {\n    if (ob != null) {\n        empty = false;\n        break;\n    }\n}'
p6714
aS'if (arr == null) {\n}'
p6715
aS'boolean empty = true;\nfor (int i = 0; i < arr.length; i++) {\n}'
p6716
aS'boolean empty = true;\nfor (Object ob : arr) {\n}'
p6717
atp6718
Rp6719
sI9581530
g1
((lp6720
S'int i;'
p6721
aS'i = 5;'
p6722
aS'Byte b = new Byte(rno[0]);'
p6723
aS'byte b;\ni = 5;'
p6724
aS'Byte b = rno[0];'
p6725
aS'byte b;'
p6726
aS'int v2 = b & 0xFF;'
p6727
aS'byte b = (byte) 0xC8;'
p6728
aS'Byte b = rno[0];\nint i = b.intValue();'
p6729
aS'Byte b = new Byte(rno[0]);\nint i = b.intValue();'
p6730
aS'int i = rno[0];'
p6731
aS'int i = (rno[0] << 24) & 0xff000000 | (rno[1] << 16) & 0x00ff0000 | (rno[2] << 8) & 0x0000ff00 | (rno[3] << 0) & 0x000000ff;'
p6732
aS'int i;\nbyte b;\ni = 5;\nb = (byte) i;'
p6733
aS'i = 5;\nb = (byte) i;'
p6734
aS'byte b;\ni = 5;\nb = (byte) i;'
p6735
aS'b = (byte) i;'
p6736
aS'byte b = (byte) 0xC8;\nint v1 = b;'
p6737
aS'int i;\nbyte b;'
p6738
aS'int v1 = b;'
p6739
aS'int i = b.intValue();'
p6740
aS'int i;\nbyte b;\ni = 5;'
p6741
atp6742
Rp6743
sI9102318
g1
((lp6744
S'double d = 9.5;'
p6745
aS'double d = 9.5;\nint i = (int) d;\nDouble D = 9.5;\nint i = Integer.valueOf(D.intValue());\ndouble d = 9.5;'
p6746
aS'double d = 9.5;\nLong L = Math.round(d);'
p6747
aS'double d = 9.5;\nint i = (int) d;\nDouble D = 9.5;\nint i = Integer.valueOf(D.intValue());'
p6748
aS'double d = 9.5;\nint i = (int) d;\nDouble D = 9.5;\nint i = Integer.valueOf(D.intValue());\ndouble d = 9.5;\nLong L = Math.round(d);\nint i = Integer.valueOf(L.intValue());'
p6749
aS'Long L = Math.round(d);\nint i = Integer.valueOf(L.intValue());'
p6750
aS'double d = 9.5;\nLong L = Math.round(d);\nint i = Integer.valueOf(L.intValue());'
p6751
aS'double d = 9.5;\nint i = (int) d;'
p6752
aS'int i = Integer.valueOf(D.intValue());'
p6753
aS'int i = Integer.valueOf(D.intValue());\ndouble d = 9.5;\nLong L = Math.round(d);\nint i = Integer.valueOf(L.intValue());'
p6754
aS'int i = Integer.valueOf(L.intValue());'
p6755
aS'int i = (int) d;'
p6756
aS'Double d = 5.25;'
p6757
aS'int i = (int) d;\nDouble D = 9.5;\nint i = Integer.valueOf(D.intValue());\ndouble d = 9.5;\nLong L = Math.round(d);'
p6758
aS'Long L = Math.round(d);'
p6759
aS'int i = (int) d;\nDouble D = 9.5;'
p6760
aS'Double D = 9.5;\nint i = Integer.valueOf(D.intValue());\ndouble d = 9.5;'
p6761
aS'int i = (int) d;\nDouble D = 9.5;\nint i = Integer.valueOf(D.intValue());'
p6762
aS'Double D = 9.5;\nint i = Integer.valueOf(D.intValue());\ndouble d = 9.5;\nLong L = Math.round(d);\nint i = Integer.valueOf(L.intValue());'
p6763
aS'Double D = 9.5;\nint i = Integer.valueOf(D.intValue());'
p6764
aS'Double D = 9.5;\nint i = Integer.valueOf(D.intValue());\ndouble d = 9.5;\nLong L = Math.round(d);'
p6765
aS'double d = 5.25;'
p6766
aS'int i = Integer.valueOf(D.intValue());\ndouble d = 9.5;\nLong L = Math.round(d);'
p6767
aS'int i = Integer.valueOf(D.intValue());\ndouble d = 9.5;'
p6768
aS'double d = 5.25;\nint i = (int) d;'
p6769
aS'int i = (int) d;\nDouble D = 9.5;\nint i = Integer.valueOf(D.intValue());\ndouble d = 9.5;\nLong L = Math.round(d);\nint i = Integer.valueOf(L.intValue());'
p6770
aS'Double D = 9.5;'
p6771
aS'double d = 9.5;\nint i = (int) d;\nDouble D = 9.5;\nint i = Integer.valueOf(D.intValue());\ndouble d = 9.5;\nLong L = Math.round(d);'
p6772
aS'int i = (int) d;\nDouble D = 9.5;\nint i = Integer.valueOf(D.intValue());\ndouble d = 9.5;'
p6773
aS'Integer i = d.intValue();'
p6774
aS'double d = 9.5;\nint i = (int) d;\nDouble D = 9.5;'
p6775
aS'Double d = 5.25;\nInteger i = d.intValue();'
p6776
atp6777
Rp6778
sI3402735
g1
((lp6779
S'FileInputStream fisTargetFile = new FileInputStream(new File("test.txt"));'
p6780
aS'FileInputStream fisTargetFile = new FileInputStream(new File("test.txt"));\nString targetFileStr = IOUtils.toString(fisTargetFile, "UTF-8");'
p6781
aS'String content = new Scanner(new File("filename")).useDelimiter("\\\\Z").next();\nSystem.out.println(content);'
p6782
aS'String targetFileStr = IOUtils.toString(fisTargetFile, "UTF-8");'
p6783
aS'String content = new Scanner(new File("filename")).useDelimiter("\\\\Z").next();'
p6784
aS'System.out.println(content);'
p6785
atp6786
Rp6787
sI8559092
g1
((lp6788
S'ArrayList<String>[] group = new ArrayList[4];'
p6789
aS'List<List<Individual>> group = new ArrayList<List<Individual>>(4);'
p6790
aS'ArrayList<ArrayList<Individual>> group = new ArrayList<ArrayList<Individual>>(4);'
p6791
aS'ArrayList<Individual>[] group = (ArrayList<Individual>[]) new ArrayList[4];'
p6792
atp6793
Rp6794
sI2310139
g1
((lp6795
S'myReader.setContentHandler(handler);\nmyReader.parse(new InputSource(new URL(url).openStream()));\nDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\nDocumentBuilder db = dbf.newDocumentBuilder();\nDocument doc = db.parse(new URL(url).openStream());'
p6796
aS'DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\nDocumentBuilder db = dbf.newDocumentBuilder();'
p6797
aS'URLConnection conn = url.openConnection();\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nDocumentBuilder builder = factory.newDocumentBuilder();\nDocument doc = builder.parse(conn.getInputStream());\nTransformerFactory factory = TransformerFactory.newInstance();\nTransformer xform = factory.newTransformer();'
p6798
aS'DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nDocumentBuilder builder = factory.newDocumentBuilder();\nDocument doc = builder.parse(conn.getInputStream());\nTransformerFactory factory = TransformerFactory.newInstance();'
p6799
aS'myReader.parse(new InputSource(new URL(url).openStream()));\nDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\nDocumentBuilder db = dbf.newDocumentBuilder();'
p6800
aS'URL url = new URL(urlString);'
p6801
aS'XMLReader myReader = XMLReaderFactory.createXMLReader();'
p6802
aS'URL url = new URL(urlString);\nURLConnection conn = url.openConnection();'
p6803
aS'URL url = new URL(urlString);\nURLConnection conn = url.openConnection();\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nDocumentBuilder builder = factory.newDocumentBuilder();\nDocument doc = builder.parse(conn.getInputStream());\nTransformerFactory factory = TransformerFactory.newInstance();\nTransformer xform = factory.newTransformer();\nxform.transform(new DOMSource(doc), new StreamResult(System.out));'
p6804
aS'Transformer xform = factory.newTransformer();'
p6805
aS'DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();'
p6806
aS'URLConnection conn = url.openConnection();\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nDocumentBuilder builder = factory.newDocumentBuilder();'
p6807
aS'XMLReader myReader = XMLReaderFactory.createXMLReader();\nmyReader.setContentHandler(handler);\nmyReader.parse(new InputSource(new URL(url).openStream()));\nDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\nDocumentBuilder db = dbf.newDocumentBuilder();\nDocument doc = db.parse(new URL(url).openStream());'
p6808
aS'Document doc = builder.parse(conn.getInputStream());\nTransformerFactory factory = TransformerFactory.newInstance();\nTransformer xform = factory.newTransformer();'
p6809
aS'myReader.setContentHandler(handler);\nmyReader.parse(new InputSource(new URL(url).openStream()));'
p6810
aS'URL url = new URL(urlString);\nURLConnection conn = url.openConnection();\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nDocumentBuilder builder = factory.newDocumentBuilder();\nDocument doc = builder.parse(conn.getInputStream());'
p6811
aS'DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\nDocumentBuilder db = dbf.newDocumentBuilder();\nDocument doc = db.parse(new URL(url).openStream());'
p6812
aS'XMLReader myReader = XMLReaderFactory.createXMLReader();\nmyReader.setContentHandler(handler);\nmyReader.parse(new InputSource(new URL(url).openStream()));\nDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\nDocumentBuilder db = dbf.newDocumentBuilder();'
p6813
aS'myReader.setContentHandler(handler);'
p6814
aS'DocumentBuilder builder = factory.newDocumentBuilder();'
p6815
aS'DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nDocumentBuilder builder = factory.newDocumentBuilder();\nDocument doc = builder.parse(conn.getInputStream());'
p6816
aS'XMLReader myReader = XMLReaderFactory.createXMLReader();\nmyReader.setContentHandler(handler);\nmyReader.parse(new InputSource(new URL(url).openStream()));\nDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();'
p6817
aS'URL url = new URL(urlString);\nURLConnection conn = url.openConnection();\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nDocumentBuilder builder = factory.newDocumentBuilder();\nDocument doc = builder.parse(conn.getInputStream());\nTransformerFactory factory = TransformerFactory.newInstance();\nTransformer xform = factory.newTransformer();'
p6818
aS'XMLReader myReader = XMLReaderFactory.createXMLReader();\nmyReader.setContentHandler(handler);'
p6819
aS'URLConnection conn = url.openConnection();\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nDocumentBuilder builder = factory.newDocumentBuilder();\nDocument doc = builder.parse(conn.getInputStream());'
p6820
aS'DocumentBuilder builder = factory.newDocumentBuilder();\nDocument doc = builder.parse(conn.getInputStream());\nTransformerFactory factory = TransformerFactory.newInstance();\nTransformer xform = factory.newTransformer();'
p6821
aS'URLConnection conn = url.openConnection();\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nDocumentBuilder builder = factory.newDocumentBuilder();\nDocument doc = builder.parse(conn.getInputStream());\nTransformerFactory factory = TransformerFactory.newInstance();'
p6822
aS'myReader.parse(new InputSource(new URL(url).openStream()));\nDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();'
p6823
aS'myReader.parse(new InputSource(new URL(url).openStream()));'
p6824
aS'myReader.parse(new InputSource(new URL(url).openStream()));\nDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\nDocumentBuilder db = dbf.newDocumentBuilder();\nDocument doc = db.parse(new URL(url).openStream());'
p6825
aS'xform.transform(new DOMSource(doc), new StreamResult(System.out));'
p6826
aS'DocumentBuilder db = dbf.newDocumentBuilder();\nDocument doc = db.parse(new URL(url).openStream());'
p6827
aS'myReader.setContentHandler(handler);\nmyReader.parse(new InputSource(new URL(url).openStream()));\nDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();'
p6828
aS'URLConnection conn = url.openConnection();'
p6829
aS'Document doc = builder.parse(conn.getInputStream());'
p6830
aS'URLConnection conn = url.openConnection();\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();'
p6831
aS'URL url = new URL(urlString);\nURLConnection conn = url.openConnection();\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nDocumentBuilder builder = factory.newDocumentBuilder();\nDocument doc = builder.parse(conn.getInputStream());\nTransformerFactory factory = TransformerFactory.newInstance();'
p6832
aS'DocumentBuilder builder = factory.newDocumentBuilder();\nDocument doc = builder.parse(conn.getInputStream());\nTransformerFactory factory = TransformerFactory.newInstance();'
p6833
aS'DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nDocumentBuilder builder = factory.newDocumentBuilder();'
p6834
aS'DocumentBuilder builder = factory.newDocumentBuilder();\nDocument doc = builder.parse(conn.getInputStream());\nTransformerFactory factory = TransformerFactory.newInstance();\nTransformer xform = factory.newTransformer();\nxform.transform(new DOMSource(doc), new StreamResult(System.out));'
p6835
aS'DocumentBuilder builder = factory.newDocumentBuilder();\nDocument doc = builder.parse(conn.getInputStream());'
p6836
aS'DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nDocumentBuilder builder = factory.newDocumentBuilder();\nDocument doc = builder.parse(conn.getInputStream());\nTransformerFactory factory = TransformerFactory.newInstance();\nTransformer xform = factory.newTransformer();'
p6837
aS'DocumentBuilder db = dbf.newDocumentBuilder();'
p6838
aS'Transformer xform = factory.newTransformer();\nxform.transform(new DOMSource(doc), new StreamResult(System.out));'
p6839
aS'DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nDocumentBuilder builder = factory.newDocumentBuilder();\nDocument doc = builder.parse(conn.getInputStream());\nTransformerFactory factory = TransformerFactory.newInstance();\nTransformer xform = factory.newTransformer();\nxform.transform(new DOMSource(doc), new StreamResult(System.out));'
p6840
aS'URL url = new URL(urlString);\nURLConnection conn = url.openConnection();\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();'
p6841
aS'TransformerFactory factory = TransformerFactory.newInstance();\nTransformer xform = factory.newTransformer();\nxform.transform(new DOMSource(doc), new StreamResult(System.out));'
p6842
aS'URLConnection conn = url.openConnection();\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nDocumentBuilder builder = factory.newDocumentBuilder();\nDocument doc = builder.parse(conn.getInputStream());\nTransformerFactory factory = TransformerFactory.newInstance();\nTransformer xform = factory.newTransformer();\nxform.transform(new DOMSource(doc), new StreamResult(System.out));'
p6843
aS'URL url = new URL(urlString);\nURLConnection conn = url.openConnection();\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nDocumentBuilder builder = factory.newDocumentBuilder();'
p6844
aS'Document doc = builder.parse(conn.getInputStream());\nTransformerFactory factory = TransformerFactory.newInstance();\nTransformer xform = factory.newTransformer();\nxform.transform(new DOMSource(doc), new StreamResult(System.out));'
p6845
aS'TransformerFactory factory = TransformerFactory.newInstance();'
p6846
aS'TransformerFactory factory = TransformerFactory.newInstance();\nTransformer xform = factory.newTransformer();'
p6847
aS'myReader.setContentHandler(handler);\nmyReader.parse(new InputSource(new URL(url).openStream()));\nDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\nDocumentBuilder db = dbf.newDocumentBuilder();'
p6848
aS'XMLReader myReader = XMLReaderFactory.createXMLReader();\nmyReader.setContentHandler(handler);\nmyReader.parse(new InputSource(new URL(url).openStream()));'
p6849
aS'Document doc = builder.parse(conn.getInputStream());\nTransformerFactory factory = TransformerFactory.newInstance();'
p6850
aS'Document doc = db.parse(new URL(url).openStream());'
p6851
aS'DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();'
p6852
atp6853
Rp6854
s.