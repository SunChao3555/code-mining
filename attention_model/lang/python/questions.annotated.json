[
  {
    "accepted_answer_post_id": 3061789, 
    "id": 3061761, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 252, 
        "id": 3061789, 
        "snippets": [
          ">>> a.shape\n(2, 2)\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 21, 
        "id": 33088216, 
        "snippets": [
          "import numpy as N    \n>>> N.shape(a)\n(2,2)\n", 
          ">>> a = [[1,2],[1,2]]\n>>> N.shape(a)\n(2,2)\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 7, 
        "id": 41015342, 
        "snippets": [
          "In [1]: import numpy as np\n\nIn [2]: a = np.array([[1,2],[3,4]])\n", 
          "In [3]: a.ndim  # num of dimensions/axes, *Mathematics definition of dimension*\nOut[3]: 2\n", 
          "In [4]: a[1,0]  # to index `a`, we specific 1 at the first axis and 0 at the second axis.\nOut[4]: 3  # which results in 3 (locate at the row 1 and column 0, 0-based index)\n", 
          "In [5]: a.shape\nOut[5]: (2, 2)  # both the first and second axis have 2 (columns/rows/pages/blocks/...) data\n"
        ]
      }
    ], 
    "title": "Numpy array dimensions"
  }, 
  {
    "accepted_answer_post_id": 379910, 
    "id": 379906, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 1401, 
        "id": 379910, 
        "snippets": [
          ">>> a = \"545.2222\"\n>>> float(a)\n545.22220000000004\n>>> int(float(a))\n545\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 347, 
        "id": 379966, 
        "snippets": [
          "def num(s):\n    try:\n        return int(s)\n    except ValueError:\n        return float(s)\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 252, 
        "id": 20929983, 
        "snippets": [
          "def isfloat(value):\n  try:\n    float(value)\n    return True\n  except:\n    return False\n", 
          "Command to parse                      isFloat?   Note\n------------------------------------  --------   --------------------------------\nprint(isfloat(\"\"))                    False      Blank string\nprint(isfloat(\"127\"))                 True       Passed string\nprint(isfloat(True))                  True       Pure sweet Truth\nprint(isfloat(\"True\"))                False      Vile contemptible lie\nprint(isfloat(False))                 True       So false it becomes true\nprint(isfloat(\"123.456\"))             True       Decimal\nprint(isfloat(\"      -127    \"))      True       Spaces trimmed\nprint(isfloat(\"\\t\\n12\\r\\n\"))          True       whitespace ignored\nprint(isfloat(\"NaN\"))                 True       Not a number\nprint(isfloat(\"NaNanananaBATMAN\"))    False      I am Batman\nprint(isfloat(\"-iNF\"))                True       Negative infinity\nprint(isfloat(\"123.E4\"))              True       Exponential notation\nprint(isfloat(\".1\"))                  True       mantissa only\nprint(isfloat(\"1,234\"))               False      Commas gtfo\nprint(isfloat(u'\\x30'))               True       Unicode is fine.\nprint(isfloat(\"NULL\"))                False      Null is not special\nprint(isfloat(0x3fade))               True       Hexidecimal\nprint(isfloat(\"6e7777777777777\"))     True       Shrunk to infinity\nprint(isfloat(\"1.797693e+308\"))       True       This is max value\nprint(isfloat(\"infinity\"))            True       Same as inf\nprint(isfloat(\"infinityandBEYOND\"))   False      Extra characters wreck it\nprint(isfloat(\"12.34.56\"))            False      Only one dot allowed\nprint(isfloat(u'\u56db'))                  False      Japanese '4' is not a float.\nprint(isfloat(\"#56\"))                 False      Pound sign\nprint(isfloat(\"56%\"))                 False      Percent of what?\nprint(isfloat(\"0E0\"))                 True       Exponential, move dot 0 places\nprint(isfloat(0**0))                  True       0___0  Exponentiation\nprint(isfloat(\"-5e-5\"))               True       Raise to a negative number\nprint(isfloat(\"+1e1\"))                True       Plus is OK with exponent\nprint(isfloat(\"+1e1^5\"))              False      Fancy exponent not interpreted\nprint(isfloat(\"+1e1.3\"))              False      No decimals in exponent\nprint(isfloat(\"-+1\"))                 False      Make up your mind\nprint(isfloat(\"(1)\"))                 False      Parenthesis is bad\n"
        ]
      }
    ], 
    "title": "Parse String to Float or Int"
  }, 
  {
    "accepted_answer_post_id": 3437070, 
    "id": 3437059, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 2354, 
        "id": 3437070, 
        "snippets": [
          "if \"blah\" not in somestring: \n    continue\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 242, 
        "id": 3437068, 
        "snippets": [
          "s = \"This be a string\"\nif s.find(\"is\") == -1:\n    print \"No 'is' here!\"\nelse:\n    print \"Found 'is' in the string.\"\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 65, 
        "id": 3437130, 
        "snippets": []
      }
    ], 
    "title": "Does Python have a string contains substring method?"
  }, 
  {
    "accepted_answer_post_id": 4266645, 
    "id": 4265988, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 35, 
        "id": 4266645, 
        "snippets": [
          "numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 19, 
        "id": 4266562, 
        "snippets": [
          "def random_distr(l):\n    r = random.uniform(0, 1)\n    s = 0\n    for item, prob in l:\n        s += prob\n        if s >= r:\n            return item\n    return item  # Might occur because of floating point inaccuracies\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 8, 
        "id": 4266278, 
        "snippets": [
          "pdf = [(1, 0.1), (2, 0.05), (3, 0.05), (4, 0.2), (5, 0.4), (6, 0.2)]\ncdf = [(i, sum(p for j,p in pdf if j < i)) for i,_ in pdf]\nR = max(i for r in [random.random()] for i,c in cdf if c <= r)\n", 
          "sorted(max(i for r in [random.random()] for i,c in cdf if c <= r)\n       for _ in range(1000))\n"
        ]
      }
    ], 
    "title": "Generate random numbers with a given (numerical) distribution"
  }, 
  {
    "accepted_answer_post_id": 6886507, 
    "id": 6886493, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 184, 
        "id": 6886507, 
        "snippets": []
      }, 
      {
        "rank": 1, 
        "score": 39, 
        "id": 6886536, 
        "snippets": []
      }, 
      {
        "rank": 2, 
        "score": 15, 
        "id": 39392891, 
        "snippets": [
          "class MyObj(object):\n  def __init__(self):\n    self.name = 'Chuck Norris'\n    self.phone = '+6661'\n\nobj = MyObj()\nprint(obj.__dict__)\n\n# Output:  \n# {'phone': '+6661', 'name': 'Chuck Norris'}\n"
        ]
      }
    ], 
    "title": "Get all object attributes in Python?"
  }, 
  {
    "accepted_answer_post_id": 843293, 
    "id": 843277, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 817, 
        "id": 843293, 
        "snippets": [
          "if 'myVar' in locals():\n  # myVar exists.\n", 
          "if 'myVar' in globals():\n  # myVar exists.\n", 
          "if hasattr(obj, 'attr_name'):\n  # obj.attr_name exists.\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 58, 
        "id": 843306, 
        "snippets": [
          "try:\n    myVar\nexcept NameError:\n    myVar = None\n# Now you're free to use myVar without Python complaining.\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 14, 
        "id": 843326, 
        "snippets": [
          "my_variable = None\n\ndef InitMyVariable():\n  global my_variable\n  if my_variable is None:\n    my_variable = ...\n"
        ]
      }
    ], 
    "title": "How do I check if a variable exists?"
  }, 
  {
    "accepted_answer_post_id": 546356, 
    "id": 546321, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 493, 
        "id": 4406260, 
        "snippets": [
          "from datetime import date\nfrom dateutil.relativedelta import relativedelta\n\nsix_months = date.today() + relativedelta(months=+6)\n", 
          "$ date(2010,12,31)+relativedelta(months=+1)\n  datetime.date(2011, 1, 31)\n\n$ date(2010,12,31)+relativedelta(months=+2)\n  datetime.date(2011, 2, 28)\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 55, 
        "id": 546356, 
        "snippets": [
          "import datetime\nprint (datetime.date.today() + datetime.timedelta(6*365/12)).isoformat()\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 39, 
        "id": 546354, 
        "snippets": [
          "(day, month, year) = (day, (month+6)%12, year+(month+6)/12)\n", 
          "date += datetime.timedelta(6*30)\n"
        ]
      }
    ], 
    "title": "How do I calculate the date six months from the current date using the datetime Python module?"
  }, 
  {
    "accepted_answer_post_id": 39501288, 
    "id": 237079, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 553, 
        "id": 237084, 
        "snippets": [
          "import os.path, time\nprint \"last modified: %s\" % time.ctime(os.path.getmtime(file))\nprint \"created: %s\" % time.ctime(os.path.getctime(file))\n", 
          "import os, time\n(mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) = os.stat(file)\nprint \"last modified: %s\" % time.ctime(mtime)\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 298, 
        "id": 1526089, 
        "snippets": [
          "import os\nimport datetime\ndef modification_date(filename):\n    t = os.path.getmtime(filename)\n    return datetime.datetime.fromtimestamp(t)\n", 
          ">>> d = modification_date('/var/log/syslog')\n>>> print d\n2009-10-06 10:50:01\n>>> print repr(d)\ndatetime.datetime(2009, 10, 6, 10, 50, 1)\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 92, 
        "id": 39501288, 
        "snippets": [
          "import os\nimport platform\n\ndef creation_date(path_to_file):\n    \"\"\"\n    Try to get the date that a file was created, falling back to when it was\n    last modified if that isn't possible.\n    See http://stackoverflow.com/a/39501288/1709587 for explanation.\n    \"\"\"\n    if platform.system() == 'Windows':\n        return os.path.getctime(path_to_file)\n    else:\n        stat = os.stat(path_to_file)\n        try:\n            return stat.st_birthtime\n        except AttributeError:\n            # We're probably on Linux. No easy way to get creation dates here,\n            # so we'll settle for when its content was last modified.\n            return stat.st_mtime\n"
        ]
      }
    ], 
    "title": "How to get file creation & modification date/times in Python?"
  }, 
  {
    "accepted_answer_post_id": 6159912, 
    "id": 6159900, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 660, 
        "id": 6159912, 
        "snippets": [
          "from __future__ import print_function\nprint(\"hi there\", file=f)\n", 
          "f = open('myfile','w')\nf.write('hi there\\n') # python will convert \\n to os.linesep\nf.close() # you can omit in most cases as the destructor will call it\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 331, 
        "id": 6160082, 
        "snippets": [
          ">>> with open('somefile.txt', 'a') as the_file:\n...     the_file.write('Hello\\n')\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 63, 
        "id": 6165711, 
        "snippets": [
          "Python 2.7.1 (r271:86832, Nov 27 2010, 18:30:46) [MSC v.1500 32 bit (Intel)] on\nwin32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import os\n>>> os.linesep\n'\\r\\n'\n>>> f = open('myfile','w')\n>>> f.write('hi there\\n')\n>>> f.write('hi there' + os.linesep) # same result as previous line ?????????\n>>> f.close()\n>>> open('myfile', 'rb').read()\n'hi there\\r\\nhi there\\r\\r\\n'\n>>>\n"
        ]
      }
    ], 
    "title": "Correct way to write line to file in Python"
  }, 
  {
    "accepted_answer_post_id": 899176, 
    "id": 899103, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 325, 
        "id": 899176, 
        "snippets": [
          "for item in thelist:\n  thefile.write(\"%s\\n\" % item)\n", 
          "for item in thelist:\n  print>>thefile, item\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 132, 
        "id": 899199, 
        "snippets": [
          "import pickle\n\npickle.dump(itemlist, outfile)\n", 
          "itemlist = pickle.load(infile)\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 119, 
        "id": 899149, 
        "snippets": [
          "outfile.write(\"\\n\".join(itemlist))\n"
        ]
      }
    ], 
    "title": "Writing a list to a file with Python"
  }, 
  {
    "accepted_answer_post_id": 3939381, 
    "id": 3939361, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 323, 
        "id": 3939381, 
        "snippets": [
          "line = line.translate(None, '!@#$')\n", 
          "import re\nline = re.sub('[!@#$]', '', line)\n", 
          "translation_table = dict.fromkeys(map(ord, '!@#$'), None)\nunicode_line = unicode_line.translate(translation_table)\n", 
          "{ord('!'): None, ord('@'): None, ...}\n", 
          "unicode_line = unicode_line.translate({ord(c): None for c in '!@#$'})\n", 
          "import string\nline = line.translate(string.maketrans('', ''), '!@#$')\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 80, 
        "id": 3942100, 
        "snippets": [
          ">>> string = \"ab1cd1ef\"\n>>> string.replace(\"1\",\"\")\n'abcdef'\n>>>\n", 
          ">>>\n>>> a = \"a!b@c#d$\"\n>>> b = \"!@#$\"\n>>> for char in b:\n...     a = a.replace(char,\"\")\n...\n>>> print a\nabcd\n>>>\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 14, 
        "id": 3939473, 
        "snippets": [
          ">>> line = \"abc#@!?efg12;:?\"\n>>> ''.join( c for c in line if  c not in '?:!/;' )\n'abc#@efg12'\n"
        ]
      }
    ], 
    "title": "Remove specific characters from a string in python"
  }, 
  {
    "accepted_answer_post_id": 9001529, 
    "id": 9001509, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 436, 
        "id": 9001529, 
        "snippets": [
          "In [1]: import collections\n\nIn [2]: d = {2:3, 1:89, 4:5, 3:0}\n\nIn [3]: od = collections.OrderedDict(sorted(d.items()))\n\nIn [4]: od\nOut[4]: OrderedDict([(1, 89), (2, 3), (3, 0), (4, 5)])\n", 
          "In [11]: od[1]\nOut[11]: 89\n\nIn [12]: od[3]\nOut[12]: 0\n\nIn [13]: for k, v in od.iteritems(): print k, v\n   ....: \n1 89\n2 3\n3 0\n4 5\n", 
          "In [13]: for k, v in od.items(): print(k, v)\n   ....: \n1 89\n2 3\n3 0\n4 5\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 240, 
        "id": 13990710, 
        "snippets": [
          "mydict = {'carl':40,\n          'alan':2,\n          'bob':1,\n          'danny':3}\n\nfor key in sorted(mydict):\n    print \"%s: %s\" % (key, mydict[key])\n", 
          "alan: 2\nbob: 1\ncarl: 40\ndanny: 3\n", 
          "keylist = mydict.keys()\nkeylist.sort()\nfor key in keylist:\n    print \"%s: %s\" % (key, mydict[key])\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 107, 
        "id": 15179418, 
        "snippets": [
          ">>> from collections import OrderedDict\n\n>>> # regular unsorted dictionary\n>>> d = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}\n\n>>> # dictionary sorted by key -- OrderedDict(sorted(d.items()) also works\n>>> OrderedDict(sorted(d.items(), key=lambda t: t[0]))\nOrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])\n\n>>> # dictionary sorted by value\n>>> OrderedDict(sorted(d.items(), key=lambda t: t[1]))\nOrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])\n\n>>> # dictionary sorted by length of the key string\n>>> OrderedDict(sorted(d.items(), key=lambda t: len(t[0])))\nOrderedDict([('pear', 1), ('apple', 4), ('orange', 2), ('banana', 3)])\n"
        ]
      }
    ], 
    "title": "How can I sort a dictionary by key?"
  }, 
  {
    "accepted_answer_post_id": 2990152, 
    "id": 2990121, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 168, 
        "id": 2990152, 
        "snippets": [
          "for i in xrange(0,10,2):\n  print(i)\n", 
          "for i in range(0,10,2):\n  print(i)\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 35, 
        "id": 2990151, 
        "snippets": [
          "from itertools import izip_longest\n\ndef grouper(n, iterable, fillvalue=None):\n    \"grouper(3, 'ABCDEFG', 'x') --> ABC DEF Gxx\"\n    args = [iter(iterable)] * n\n    return izip_longest(fillvalue=fillvalue, *args)\n", 
          "for item1, item2 in grouper(2, l):\n    # Do something with item1 and item2\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 35, 
        "id": 2990281, 
        "snippets": [
          "mylist = [1,2,3,4,5,6,7,8,9,10]\nfor i in mylist[::2]:\n    print i,\n# prints 1 3 5 7 9\n\nfor i in mylist[1::2]:\n    print i,\n# prints 2 4 6 8 10\n"
        ]
      }
    ], 
    "title": "How do I loop through a Python list by twos?"
  }, 
  {
    "accepted_answer_post_id": 26443334, 
    "id": 26443308, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 33, 
        "id": 26443334, 
        "snippets": [
          ">>> \"abcd}def}\".rfind('}')\n8\n"
        ]
      }
    ], 
    "title": "Find last occurrence of character in string Python"
  }, 
  {
    "accepted_answer_post_id": 4174955, 
    "id": 4174941, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 162, 
        "id": 4174955, 
        "snippets": [
          ">>> from operator import itemgetter\n>>> L=[[0, 1, 'f'], [4, 2, 't'], [9, 4, 'afsd']]\n>>> sorted(L, key=itemgetter(2))\n[[9, 4, 'afsd'], [0, 1, 'f'], [4, 2, 't']]\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 85, 
        "id": 4174956, 
        "snippets": [
          ">>> l = [[0, 1, 'f'], [4, 2, 't'], [9, 4, 'afsd']]\n>>> l.sort(key=lambda x: x[2])\n", 
          ">>> sorted(l, key=lambda x: x[2])\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 43, 
        "id": 15544861, 
        "snippets": [
          "sorted_list = sorted(list_to_sort, key=itemgetter(2,0,1))\n"
        ]
      }
    ], 
    "title": "How to sort a list of lists by a specific index of the inner list?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 3207219, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 1670, 
        "id": 3207973, 
        "snippets": [
          "from os import listdir\nfrom os.path import isfile, join\nonlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]\n", 
          "from os import walk\n\nf = []\nfor (dirpath, dirnames, filenames) in walk(mypath):\n    f.extend(filenames)\n    break\n", 
          ">>> q = [1, 2, 3]\n>>> w = [4, 5, 6]\n>>> q = q + w\n>>> q\n[1, 2, 3, 4, 5, 6]\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 694, 
        "id": 3215392, 
        "snippets": [
          "import glob\nprint glob.glob(\"/home/adam/*.txt\")\n", 
          "['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 265, 
        "id": 3207254, 
        "snippets": [
          "import os\nos.listdir(\"somedirectory\")\n"
        ]
      }
    ], 
    "title": "How to list all files of a directory in Python"
  }, 
  {
    "accepted_answer_post_id": 2972226, 
    "id": 2972212, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 164, 
        "id": 2972226, 
        "snippets": [
          "% python -mtimeit  \"l=[]\"\n10000000 loops, best of 3: 0.0711 usec per loop\n\n% python -mtimeit  \"l=list()\"\n1000000 loops, best of 3: 0.297 usec per loop\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 67, 
        "id": 2972369, 
        "snippets": []
      }, 
      {
        "rank": 2, 
        "score": 9, 
        "id": 2972414, 
        "snippets": []
      }
    ], 
    "title": "Creating an empty list in Python"
  }, 
  {
    "accepted_answer_post_id": 3964691, 
    "id": 3964681, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 1021, 
        "id": 3964691, 
        "snippets": [
          "import glob, os\nos.chdir(\"/mydir\")\nfor file in glob.glob(\"*.txt\"):\n    print(file)\n", 
          "import os\nfor file in os.listdir(\"/mydir\"):\n    if file.endswith(\".txt\"):\n        print(file)\n", 
          "import os\nfor root, dirs, files in os.walk(\"/mydir\"):\n    for file in files:\n        if file.endswith(\".txt\"):\n             print(os.path.join(root, file))\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 119, 
        "id": 3964689, 
        "snippets": [
          ">>> import glob\n>>> glob.glob('./*.txt')\n['./outline.txt', './pip-log.txt', './test.txt', './testingvim.txt']\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 77, 
        "id": 3964690, 
        "snippets": []
      }
    ], 
    "title": "Find all files in directory with extension .txt in Python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 1514553, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 171, 
        "id": 1514557, 
        "snippets": [
          "variable = []\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 58, 
        "id": 1514649, 
        "snippets": [
          "from array import array\nintarray = array('i')\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 34, 
        "id": 4476624, 
        "snippets": [
          "   f = []\n\n   for i in range(30):\n       f.append(0)\n"
        ]
      }
    ], 
    "title": "How to declare an array in Python?"
  }, 
  {
    "accepted_answer_post_id": 21888214, 
    "id": 21887754, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 37, 
        "id": 21888214, 
        "snippets": [
          "a = np.array([[1,5,9],[2,6,10]])\nb = np.array([[3,7,11],[4,8,12]])\n", 
          "print concatenate((a,b),axis=0)\narray([[ 1,  5,  9],\n       [ 2,  6, 10],\n       [ 3,  7, 11],\n       [ 4,  8, 12]])\n", 
          "print concatenate((a,b),axis=1)\narray([[ 1,  5,  9,  3,  7, 11],\n      [ 2,  6, 10,  4,  8, 12]])\n", 
          "a = np.array([1,2,3])\nb = np.array([4,5,6])\nvstack((a,b))\n", 
          "a=a.reshape(1,3)\nb=b.reshape(1,3)\nprint concatenate((a,b))\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 6, 
        "id": 29913056, 
        "snippets": [
          "import numpy as np\na = np.array([1,2,3])\nb = np.array([4,5,6])\nc = np.r_[a[None,:],b[None,:]]\nprint(c)\n#[[1 2 3]\n# [4 5 6]]\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 0, 
        "id": 42738514, 
        "snippets": [
          "a = np.array([1,2,3])\nb = np.array([4,5,6])\nnp.array((a,b))\n", 
          "np.array([[1,2,3], [4,5,6]])\n", 
          "return _nx.concatenate([atleast_2d(_m) for _m in tup], 0)\n"
        ]
      }
    ], 
    "title": "numpy concatenate two arrays vertically"
  }, 
  {
    "accepted_answer_post_id": 13571166, 
    "id": 13571134, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 46, 
        "id": 13571166, 
        "snippets": [
          "with open('output.txt','w') as fout:\n    for root, subFolders, files in os.walk(rootdir):\n        if 'data.txt' in files:\n            with open(os.path.join(root, 'data.txt'), 'r') as fin:\n                for lines in fin:\n                    dosomething()\n"
        ]
      }
    ], 
    "title": "How to recursively go through all subdirectories and read files?"
  }, 
  {
    "accepted_answer_post_id": 2612815, 
    "id": 2612802, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 1366, 
        "id": 2612815, 
        "snippets": [
          "new_list = old_list[:]\n", 
          "new_list = list(old_list)\n", 
          "import copy\nnew_list = copy.copy(old_list)\n", 
          "import copy\nnew_list = copy.deepcopy(old_list)\n", 
          "import copy\n\nclass Foo(object):\n    def __init__(self, val):\n         self.val = val\n\n    def __repr__(self):\n        return str(self.val)\n\nfoo = Foo(1)\n\na = ['foo', foo]\nb = a[:]\nc = list(a)\nd = copy.copy(a)\ne = copy.deepcopy(a)\n\n# edit orignal list and instance \na.append('baz')\nfoo.val = 5\n\nprint('original: %r\\n slice: %r\\n list(): %r\\n copy: %r\\n deepcopy: %r'\n      % (a, b, c, d, e))\n", 
          "original: ['foo', 5, 'baz']\nslice: ['foo', 5]\nlist(): ['foo', 5]\ncopy: ['foo', 5]\ndeepcopy: ['foo', 1]\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 281, 
        "id": 2612990, 
        "snippets": [
          "from copy import deepcopy\n\nclass old_class:\n    def __init__(self):\n        self.blah = 'blah'\n\nclass new_class(object):\n    def __init__(self):\n        self.blah = 'blah'\n\ndignore = {str: None, unicode: None, int: None, type(None): None}\n\ndef Copy(obj, use_deepcopy=True):\n    t = type(obj)\n\n    if t in (list, tuple):\n        if t == tuple:\n            # Convert to a list if a tuple to \n            # allow assigning to when copying\n            is_tuple = True\n            obj = list(obj)\n        else: \n            # Otherwise just do a quick slice copy\n            obj = obj[:]\n            is_tuple = False\n\n        # Copy each item recursively\n        for x in xrange(len(obj)):\n            if type(obj[x]) in dignore:\n                continue\n            obj[x] = Copy(obj[x], use_deepcopy)\n\n        if is_tuple: \n            # Convert back into a tuple again\n            obj = tuple(obj)\n\n    elif t == dict: \n        # Use the fast shallow dict copy() method and copy any \n        # values which aren't immutable (like lists, dicts etc)\n        obj = obj.copy()\n        for k in obj:\n            if type(obj[k]) in dignore:\n                continue\n            obj[k] = Copy(obj[k], use_deepcopy)\n\n    elif t in dignore: \n        # Numeric or string/unicode? \n        # It's immutable, so ignore it!\n        pass \n\n    elif use_deepcopy: \n        obj = deepcopy(obj)\n    return obj\n\nif __name__ == '__main__':\n    import copy\n    from time import time\n\n    num_times = 100000\n    L = [None, 'blah', 1, 543.4532, \n         ['foo'], ('bar',), {'blah': 'blah'},\n         old_class(), new_class()]\n\n    t = time()\n    for i in xrange(num_times):\n        Copy(L)\n    print 'Custom Copy:', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        Copy(L, use_deepcopy=False)\n    print 'Custom Copy Only Copying Lists/Tuples/Dicts (no classes):', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        copy.copy(L)\n    print 'copy.copy:', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        copy.deepcopy(L)\n    print 'copy.deepcopy:', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        L[:]\n    print 'list slicing [:]:', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        list(L)\n    print 'list(L):', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        [i for i in L]\n    print 'list expression(L):', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        a = []\n        a.extend(L)\n    print 'list extend:', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        a = []\n        for y in L:\n            a.append(y)\n    print 'list append:', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        a = []\n        a.extend(i for i in L)\n    print 'generator expression extend:', time()-t\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 52, 
        "id": 17810305, 
        "snippets": []
      }
    ], 
    "title": "How to clone or copy a list?"
  }, 
  {
    "accepted_answer_post_id": 610893, 
    "id": 610883, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 1154, 
        "id": 610893, 
        "snippets": [
          "if hasattr(a, 'property'):\n    a.property\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 354, 
        "id": 610923, 
        "snippets": [
          "try:\n    doStuff(a.property)\nexcept AttributeError:\n    otherStuff()\n", 
          "if hasattr(a, 'property'):\n    doStuff(a.property)\nelse:\n    otherStuff()\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 287, 
        "id": 611708, 
        "snippets": [
          "getattr(a, 'property', 'default value')\n"
        ]
      }
    ], 
    "title": "How to know if an object has an attribute in Python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 402504, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 596, 
        "id": 402704, 
        "snippets": [
          ">>> i = 123\n>>> type(i)\n<type 'int'>\n>>> type(i) is int\nTrue\n>>> i = 123456789L\n>>> type(i)\n<type 'long'>\n>>> type(i) is long\nTrue\n>>> i = 123.456\n>>> type(i)\n<type 'float'>\n>>> type(i) is float\nTrue\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 177, 
        "id": 402507, 
        "snippets": [
          ">>> v = 10\n>>> type(v)\n<type 'int'>\n", 
          ">>> v = 100000000000000\n>>> type(v)\n<type 'long'>\n", 
          ">>> v = -10\n>>> type(v)\n<type 'int'>\n", 
          ">>> v = 'hi'\n>>> type(v)\n<type 'str'>\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 57, 
        "id": 32885953, 
        "snippets": [
          "print type(variable_name)\n"
        ]
      }
    ], 
    "title": "How to determine the variable type in Python?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 275018, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 979, 
        "id": 275025, 
        "snippets": [
          ">>> 'test string\\n'.rstrip()\n'test string'\n", 
          ">>> 'test string \\n\\n'.rstrip('\\n')\n'test string '\n", 
          ">>> s = \" \\n  abc   def   \"\n>>> s.strip()\n'abc   def'\n>>> s.rstrip()\n' \\n  abc   def'\n>>> s.lstrip()\n'abc   def   '\n>>>\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 113, 
        "id": 275659, 
        "snippets": [
          ">>> text = \"line 1\\nline 2\\r\\nline 3\\nline 4\"\n>>> text.splitlines()\n['line 1', 'line 2', 'line 3', 'line 4']\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 100, 
        "id": 275401, 
        "snippets": [
          ">>> 'Mac EOL\\r'.rstrip('\\r\\n')\n'Mac EOL'\n>>> 'Windows EOL\\r\\n'.rstrip('\\r\\n')\n'Windows EOL'\n>>> 'Unix EOL\\n'.rstrip('\\r\\n')\n'Unix EOL'\n", 
          ">>> \"Hello\\n\\n\\n\".rstrip(\"\\n\")\n\"Hello\"\n"
        ]
      }
    ], 
    "title": "How can I remove (chomp) a newline in Python?"
  }, 
  {
    "accepted_answer_post_id": 364769, 
    "id": 364621, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 189, 
        "id": 364769, 
        "snippets": [
          " [i for i,x in enumerate(testlist) if x == 1]\n", 
          ">>> testlist\n[1, 2, 3, 5, 3, 1, 2, 1, 6]\n>>> [i for i,x in enumerate(testlist) if x == 1]\n[0, 5, 7]\n", 
          ">>> for i in [i for i,x in enumerate(testlist) if x == 1]:\n...     print i\n... \n0\n5\n7\n", 
          ">>> (i for i,x in enumerate(testlist) if x == 1)\n<generator object at 0x6b508>\n>>> for i in (i for i,x in enumerate(testlist) if x == 1):\n...     print i\n... \n0\n5\n7\n", 
          ">>> gen = (i for i,x in enumerate(testlist) if x == 1)\n>>> for i in gen: print i\n... \n0\n5\n7\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 90, 
        "id": 10266829, 
        "snippets": [
          "print testlist.index(element)\n", 
          "if element in testlist:\n    print testlist.index(element)\n", 
          "print(testlist.index(element) if element in testlist else None)\n", 
          "try:\n    print testlist.index(element)\nexcept ValueError:\n    pass\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 36, 
        "id": 364641, 
        "snippets": [
          "testlist = [1,2,3,5,3,1,2,1,6]\nfor position, item in enumerate(testlist):\n    if item == 1:\n        print position\n"
        ]
      }
    ], 
    "title": "How to get item's position in a list?"
  }, 
  {
    "accepted_answer_post_id": 952952, 
    "id": 952914, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 1642, 
        "id": 952952, 
        "snippets": [
          "[item for sublist in l for item in sublist]\n", 
          "$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' '[item for sublist in l for item in sublist]'\n10000 loops, best of 3: 143 usec per loop\n$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'sum(l, [])'\n1000 loops, best of 3: 969 usec per loop\n$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'reduce(lambda x,y: x+y,l)'\n1000 loops, best of 3: 1.1 msec per loop\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 699, 
        "id": 953097, 
        "snippets": [
          ">>> import itertools\n>>> list2d = [[1,2,3],[4,5,6], [7], [8,9]]\n>>> merged = list(itertools.chain(*list2d))\n", 
          ">>> import itertools\n>>> list2d = [[1,2,3],[4,5,6], [7], [8,9]]\n>>> merged = list(itertools.chain.from_iterable(list2d))\n", 
          "[me@home]$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99;import itertools' 'list(itertools.chain.from_iterable(l))'\n10000 loops, best of 3: 24.2 usec per loop\n[me@home]$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' '[item for sublist in l for item in sublist]'\n10000 loops, best of 3: 45.2 usec per loop\n[me@home]$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'sum(l, [])'\n1000 loops, best of 3: 488 usec per loop\n[me@home]$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'reduce(lambda x,y: x+y,l)'\n1000 loops, best of 3: 522 usec per loop\n[me@home]$ python --version\nPython 2.7.3\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 383, 
        "id": 952946, 
        "snippets": [
          ">>> sum(l, [])\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
        ]
      }
    ], 
    "title": "Making a flat list out of list of lists in Python"
  }, 
  {
    "accepted_answer_post_id": 2468983, 
    "id": 276052, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 205, 
        "id": 2468983, 
        "snippets": []
      }, 
      {
        "rank": 1, 
        "score": 8, 
        "id": 38984517, 
        "snippets": [
          "from __future__ import print_function\nimport psutil\nprint(psutil.__versi\u200c\u200bon__)\n", 
          "from __future__ import print_function\nimport psutil\nprint(psutil.cpu_percent())\nprint(psutil.virtual_memory()) #  physical memory usage\n", 
          "import os\nimport psutil\npid = os.getpid()\npy = psutil.Process(pid)\nmemoryUse = py.memory_info()[0]/2.**30  # memory use in GB...I think\nprint('memory use:', memoryUse)\n", 
          "tar -xvzf psutil-0.5.0.tar.gz\u200c\u200b\ncd psutil-0.5.0\nsudo python setup.py install\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 7, 
        "id": 276934, 
        "snippets": [
          "'''\nMonitor window processes\n\nderived from:\n>for sys available mem\nhttp://msdn2.microsoft.com/en-us/library/aa455130.aspx\n\n> individual process information and python script examples\nhttp://www.microsoft.com/technet/scriptcenter/scripts/default.mspx?mfr=true\n\nNOTE: the WMI interface/process is also available for performing similar tasks\n        I'm not using it here because the current method covers my needs, but if someday it's needed\n        to extend or improve this module, then may want to investigate the WMI tools available.\n        WMI for python:\n        http://tgolden.sc.sabren.com/python/wmi.html\n'''\n\n__revision__ = 3\n\nimport win32com.client\nfrom ctypes import *\nfrom ctypes.wintypes import *\nimport pythoncom\nimport pywintypes\nimport datetime\n\n\nclass MEMORYSTATUS(Structure):\n    _fields_ = [\n                ('dwLength', DWORD),\n                ('dwMemoryLoad', DWORD),\n                ('dwTotalPhys', DWORD),\n                ('dwAvailPhys', DWORD),\n                ('dwTotalPageFile', DWORD),\n                ('dwAvailPageFile', DWORD),\n                ('dwTotalVirtual', DWORD),\n                ('dwAvailVirtual', DWORD),\n                ]\n\n\ndef winmem():\n    x = MEMORYSTATUS() # create the structure\n    windll.kernel32.GlobalMemoryStatus(byref(x)) # from cytypes.wintypes\n    return x    \n\n\nclass process_stats:\n    '''process_stats is able to provide counters of (all?) the items available in perfmon.\n    Refer to the self.supported_types keys for the currently supported 'Performance Objects'\n\n    To add logging support for other data you can derive the necessary data from perfmon:\n    ---------\n    perfmon can be run from windows 'run' menu by entering 'perfmon' and enter.\n    Clicking on the '+' will open the 'add counters' menu,\n    From the 'Add Counters' dialog, the 'Performance object' is the self.support_types key.\n    --> Where spaces are removed and symbols are entered as text (Ex. # == Number, % == Percent)\n    For the items you wish to log add the proper attribute name in the list in the self.supported_types dictionary,\n    keyed by the 'Performance Object' name as mentioned above.\n    ---------\n\n    NOTE: The 'NETFramework_NETCLRMemory' key does not seem to log dotnet 2.0 properly.\n\n    Initially the python implementation was derived from:\n    http://www.microsoft.com/technet/scriptcenter/scripts/default.mspx?mfr=true\n    '''\n    def __init__(self,process_name_list=[],perf_object_list=[],filter_list=[]):\n        '''process_names_list == the list of all processes to log (if empty log all)\n        perf_object_list == list of process counters to log\n        filter_list == list of text to filter\n        print_results == boolean, output to stdout\n        '''\n        pythoncom.CoInitialize() # Needed when run by the same process in a thread\n\n        self.process_name_list = process_name_list\n        self.perf_object_list = perf_object_list\n        self.filter_list = filter_list\n\n        self.win32_perf_base = 'Win32_PerfFormattedData_'\n\n        # Define new datatypes here!\n        self.supported_types = {\n                                    'NETFramework_NETCLRMemory':    [\n                                                                        'Name',\n                                                                        'NumberTotalCommittedBytes',\n                                                                        'NumberTotalReservedBytes',\n                                                                        'NumberInducedGC',    \n                                                                        'NumberGen0Collections',\n                                                                        'NumberGen1Collections',\n                                                                        'NumberGen2Collections',\n                                                                        'PromotedMemoryFromGen0',\n                                                                        'PromotedMemoryFromGen1',\n                                                                        'PercentTimeInGC',\n                                                                        'LargeObjectHeapSize'\n                                                                     ],\n\n                                    'PerfProc_Process':              [\n                                                                          'Name',\n                                                                          'PrivateBytes',\n                                                                          'ElapsedTime',\n                                                                          'IDProcess',# pid\n                                                                          'Caption',\n                                                                          'CreatingProcessID',\n                                                                          'Description',\n                                                                          'IODataBytesPersec',\n                                                                          'IODataOperationsPersec',\n                                                                          'IOOtherBytesPersec',\n                                                                          'IOOtherOperationsPersec',\n                                                                          'IOReadBytesPersec',\n                                                                          'IOReadOperationsPersec',\n                                                                          'IOWriteBytesPersec',\n                                                                          'IOWriteOperationsPersec'     \n                                                                      ]\n                                }\n\n    def get_pid_stats(self, pid):\n        this_proc_dict = {}\n\n        pythoncom.CoInitialize() # Needed when run by the same process in a thread\n        if not self.perf_object_list:\n            perf_object_list = self.supported_types.keys()\n\n        for counter_type in perf_object_list:\n            strComputer = \".\"\n            objWMIService = win32com.client.Dispatch(\"WbemScripting.SWbemLocator\")\n            objSWbemServices = objWMIService.ConnectServer(strComputer,\"root\\cimv2\")\n\n            query_str = '''Select * from %s%s''' % (self.win32_perf_base,counter_type)\n            colItems = objSWbemServices.ExecQuery(query_str) # \"Select * from Win32_PerfFormattedData_PerfProc_Process\")# changed from Win32_Thread        \n\n            if len(colItems) > 0:        \n                for objItem in colItems:\n                    if hasattr(objItem, 'IDProcess') and pid == objItem.IDProcess:\n\n                            for attribute in self.supported_types[counter_type]:\n                                eval_str = 'objItem.%s' % (attribute)\n                                this_proc_dict[attribute] = eval(eval_str)\n\n                            this_proc_dict['TimeStamp'] = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S.') + str(datetime.datetime.now().microsecond)[:3]\n                            break\n\n        return this_proc_dict      \n\n\n    def get_stats(self):\n        '''\n        Show process stats for all processes in given list, if none given return all processes   \n        If filter list is defined return only the items that match or contained in the list\n        Returns a list of result dictionaries\n        '''    \n        pythoncom.CoInitialize() # Needed when run by the same process in a thread\n        proc_results_list = []\n        if not self.perf_object_list:\n            perf_object_list = self.supported_types.keys()\n\n        for counter_type in perf_object_list:\n            strComputer = \".\"\n            objWMIService = win32com.client.Dispatch(\"WbemScripting.SWbemLocator\")\n            objSWbemServices = objWMIService.ConnectServer(strComputer,\"root\\cimv2\")\n\n            query_str = '''Select * from %s%s''' % (self.win32_perf_base,counter_type)\n            colItems = objSWbemServices.ExecQuery(query_str) # \"Select * from Win32_PerfFormattedData_PerfProc_Process\")# changed from Win32_Thread\n\n            try:  \n                if len(colItems) > 0:\n                    for objItem in colItems:\n                        found_flag = False\n                        this_proc_dict = {}\n\n                        if not self.process_name_list:\n                            found_flag = True\n                        else:\n                            # Check if process name is in the process name list, allow print if it is\n                            for proc_name in self.process_name_list:\n                                obj_name = objItem.Name\n                                if proc_name.lower() in obj_name.lower(): # will log if contains name\n                                    found_flag = True\n                                    break\n\n                        if found_flag:\n                            for attribute in self.supported_types[counter_type]:\n                                eval_str = 'objItem.%s' % (attribute)\n                                this_proc_dict[attribute] = eval(eval_str)\n\n                            this_proc_dict['TimeStamp'] = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S.') + str(datetime.datetime.now().microsecond)[:3]\n                            proc_results_list.append(this_proc_dict)\n\n            except pywintypes.com_error, err_msg:\n                # Ignore and continue (proc_mem_logger calls this function once per second)\n                continue\n        return proc_results_list     \n\n\ndef get_sys_stats():\n    ''' Returns a dictionary of the system stats'''\n    pythoncom.CoInitialize() # Needed when run by the same process in a thread\n    x = winmem()\n\n    sys_dict = { \n                    'dwAvailPhys': x.dwAvailPhys,\n                    'dwAvailVirtual':x.dwAvailVirtual\n                }\n    return sys_dict\n\n\nif __name__ == '__main__':\n    # This area used for testing only\n    sys_dict = get_sys_stats()\n\n    stats_processor = process_stats(process_name_list=['process2watch'],perf_object_list=[],filter_list=[])\n    proc_results = stats_processor.get_stats()\n\n    for result_dict in proc_results:\n        print result_dict\n\n    import os\n    this_pid = os.getpid()\n    this_proc_results = stats_processor.get_pid_stats(this_pid)\n\n    print 'this proc results:'\n    print this_proc_results\n"
        ]
      }
    ], 
    "title": "How to get current CPU and RAM usage in Python?"
  }, 
  {
    "accepted_answer_post_id": 5137509, 
    "id": 5137497, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 1115, 
        "id": 5137509, 
        "snippets": [
          "import os \ndir_path = os.path.dirname(os.path.realpath(__file__))\n", 
          "import os\ncwd = os.getcwd()\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 226, 
        "id": 5137507, 
        "snippets": []
      }, 
      {
        "rank": 2, 
        "score": 172, 
        "id": 13720875, 
        "snippets": [
          "import os\n\nprint(\"Path at terminal when executing this file\")\nprint(os.getcwd() + \"\\n\")\n\nprint(\"This file path, relative to os.getcwd()\")\nprint(__file__ + \"\\n\")\n\nprint(\"This file full path (following symlinks)\")\nfull_path = os.path.realpath(__file__)\nprint(full_path + \"\\n\")\n\nprint(\"This file directory and name\")\npath, filename = os.path.split(full_path)\nprint(path + ' --> ' + filename + \"\\n\")\n\nprint(\"This file directory only\")\nprint(os.path.dirname(full_path))\n"
        ]
      }
    ], 
    "title": "Find current directory and file's directory"
  }, 
  {
    "accepted_answer_post_id": 930398, 
    "id": 930397, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 1387, 
        "id": 930398, 
        "snippets": [
          ">>> some_list = [1, 2, 3]\n>>> some_list[-1] = 5 # Set the last element\n>>> some_list[-2] = 3 # Set the second to last element\n>>> some_list\n[1, 3, 5]\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 119, 
        "id": 4139773, 
        "snippets": [
          "alist = []\nalist[-1]   # will generate an IndexError exception whereas \nalist[-1:]  # will return an empty list\nastr = ''\nastr[-1]    # will generate an IndexError exception whereas\nastr[-1:]   # will return an empty str\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 49, 
        "id": 930759, 
        "snippets": [
          "alist.pop()\n"
        ]
      }
    ], 
    "title": "Getting the last element of a list in Python"
  }, 
  {
    "accepted_answer_post_id": 961638, 
    "id": 961632, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 1066, 
        "id": 961638, 
        "snippets": [
          ">>> str(10)\n'10'\n>>> int('10')\n10\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 51, 
        "id": 961636, 
        "snippets": [
          "str(i)\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 29, 
        "id": 961652, 
        "snippets": [
          "str(a)\n", 
          "a.__str__()\n"
        ]
      }
    ], 
    "title": "Converting integer to string in Python?"
  }, 
  {
    "accepted_answer_post_id": 1712236, 
    "id": 1712227, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 1421, 
        "id": 1712236, 
        "snippets": [
          ">>> len([1,2,3])\n3\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 38, 
        "id": 16114025, 
        "snippets": [
          "class slist(list):\n    @property\n    def length(self):\n        return len(self)\n", 
          ">>> l = slist(range(10))\n>>> l.length\n10\n>>> print l\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 33, 
        "id": 27137427, 
        "snippets": [
          "items = []\nitems.append(\"apple\")\nitems.append(\"orange\")\nitems.append(\"banana\")\n", 
          "len(items)\n", 
          "items.__len__()\n", 
          ">>> all(hasattr(cls, '__len__') for cls in (str, bytes, tuple, list, \n                                            xrange, dict, set, frozenset))\nTrue\n"
        ]
      }
    ], 
    "title": "How to get the size of a list"
  }, 
  {
    "accepted_answer_post_id": 1720432, 
    "id": 1720421, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 1627, 
        "id": 1720432, 
        "snippets": [
          "mergedlist = listone + listtwo\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 136, 
        "id": 1724975, 
        "snippets": [
          "import itertools\nfor item in itertools.chain(listone, listtwo):\n   # do something with each list item\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 103, 
        "id": 3749835, 
        "snippets": [
          "mergedlist = list(set(listone + listtwo))\n"
        ]
      }
    ], 
    "title": "How to append list to second list (concatenate lists)"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 16196712, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 4, 
        "id": 16197061, 
        "snippets": [
          "p = subprocess.Popen('unrar e ' + root + '/' + i + ' ' + testfolder,\n        bufsize=2048, shell=True, stdin=subprocess.PIPE)\n", 
          "p = subprocess.Popen(['unrar', 'e', '%s/%s' % (root, i), testfolder],\n        bufsize=2048, stdin=subprocess.PIPE)\np.stdin.write('e')\np.wait()\nif p.returncode == 0:\n    pass # put code that must only run if successful here.\n", 
          "import pipes # in Python 2.x; in 3.x, use shlex.quote() instead\np = subprocess.Popen(['ssh', ' '.join(\n      [pipes.quote(s) for s in ['unrar', 'e', '%s/%s' % (root, i), testfolder]])\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 0, 
        "id": 16196938, 
        "snippets": []
      }
    ], 
    "title": "python to wait for shell command to complete"
  }, 
  {
    "accepted_answer_post_id": 209550, 
    "id": 209513, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 603, 
        "id": 209550, 
        "snippets": [
          "x = int(\"deadbeef\", 16)\n", 
          ">>> print int(\"0xdeadbeef\", 0)\n3735928559\n>>> print int(\"10\", 0)\n10\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 101, 
        "id": 209529, 
        "snippets": [
          ">>> int(\"a\", 16)\n10\n>>> int(\"0xa\",16)\n10\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 32, 
        "id": 209530, 
        "snippets": [
          "int(s, 16)\n"
        ]
      }
    ], 
    "title": "Convert hex string to int in Python"
  }, 
  {
    "accepted_answer_post_id": 642169, 
    "id": 642154, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 332, 
        "id": 642169, 
        "snippets": [
          "print int(\"1\") + 1\n", 
          "T2 = [map(int, x) for x in T1]\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 21, 
        "id": 642177, 
        "snippets": [
          "T2 = [[int(column) for column in row] for row in T1]\n", 
          "T2 = [parse_a_row_of_T1(row) for row in T1]\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 12, 
        "id": 855419, 
        "snippets": [
          "[[int(y) for y in x] for x in T1]\n"
        ]
      }
    ], 
    "title": "How to convert strings into integers in Python?"
  }, 
  {
    "accepted_answer_post_id": 7961390, 
    "id": 7961363, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 697, 
        "id": 7961390, 
        "snippets": [
          ">>> t = [1, 2, 3, 1, 2, 5, 6, 7, 8]\n>>> t\n[1, 2, 3, 1, 2, 5, 6, 7, 8]\n>>> list(set(t))\n[1, 2, 3, 5, 6, 7, 8]\n>>> s = [1, 2, 3]\n>>> list(set(t) - set(s))\n[8, 5, 6, 7]\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 201, 
        "id": 7961425, 
        "snippets": [
          ">>> from collections import OrderedDict\n>>> list(OrderedDict.fromkeys('abracadabra'))\n['a', 'b', 'r', 'c', 'd']\n", 
          ">>> list(dict.fromkeys('abracadabra'))\n['a', 'b', 'r', 'c', 'd']\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 122, 
        "id": 7961393, 
        "snippets": []
      }
    ], 
    "title": "Removing duplicates in lists"
  }, 
  {
    "accepted_answer_post_id": 2269836, 
    "id": 2269827, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 119, 
        "id": 2269836, 
        "snippets": [
          ">>> chr(0x65) == '\\x65'\nTrue\n\n\n>>> hex(65)\n'0x41'\n>>> chr(65) == '\\x41'\nTrue\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 74, 
        "id": 2269863, 
        "snippets": [
          "strHex = \"0x%0.2X\" % 255\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 29, 
        "id": 2269841, 
        "snippets": [
          "\"0x%x\" % 255 # => 0xff\n", 
          "\"0x%X\" % 255 # => 0xFF\n"
        ]
      }
    ], 
    "title": "How to convert an int to a hex string?"
  }, 
  {
    "accepted_answer_post_id": 6996628, 
    "id": 6996603, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 1204, 
        "id": 6996628, 
        "snippets": []
      }, 
      {
        "rank": 1, 
        "score": 38, 
        "id": 6996662, 
        "snippets": [
          "shutil.rmtree(path[, ignore_errors[, onerror]])\n", 
          "os.remove\n", 
          "os.rmdir\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 15, 
        "id": 39079453, 
        "snippets": [
          "os.unlink(path, *, dir_fd=None)\n", 
          "os.remove(path, *, dir_fd=None)\n", 
          "os.rmdir(path, *, dir_fd=None)\n", 
          "shutil.rmtree(path, ignore_errors=False, onerror=None)\n", 
          "os.removedirs(name)\n"
        ]
      }
    ], 
    "title": "Delete a file or folder in Python"
  }, 
  {
    "accepted_answer_post_id": 663175, 
    "id": 663171, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 1585, 
        "id": 663175, 
        "snippets": [
          ">>> x = \"Hello World!\"\n>>> x[2:]\n'llo World!'\n>>> x[:2]\n'He'\n>>> x[:-2]\n'Hello Worl'\n>>> x[-2:]\n'd!'\n>>> x[2:-2]\n'llo Worl'\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 200, 
        "id": 9780082, 
        "snippets": [
          "some_string[::-1]\n", 
          "\"H-e-l-l-o- -W-o-r-l-d\"[::2] # outputs \"Hello World\"\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 52, 
        "id": 11808384, 
        "snippets": [
          "s = Substr(s, beginning, LENGTH)\n", 
          "s = s[ beginning : beginning + LENGTH]\n"
        ]
      }
    ], 
    "title": "Is there a way to substring a string in Python?"
  }, 
  {
    "accepted_answer_post_id": 9257122, 
    "id": 9257094, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 560, 
        "id": 9257122, 
        "snippets": [
          ">>> s = 'sdsd'\n>>> s.upper()\n'SDSD'\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 59, 
        "id": 9257158, 
        "snippets": [
          "s = 'sdsd'\ns.upper()\n#=> 'SDSD'\n", 
          "import string\nstring.ascii_uppercase\n#=> 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 5, 
        "id": 24770472, 
        "snippets": [
          "s = 'sdsd'\nprint s.upper()\n>>or\nupper = raw_input('type in something lowercase.')\nlower = raw_input('type in the same thing caps lock.')\nprint upper.upper()\nprint lower.lower()\n"
        ]
      }
    ], 
    "title": "How to change a string into uppercase"
  }, 
  {
    "accepted_answer_post_id": 730778, 
    "id": 730764, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 577, 
        "id": 730778, 
        "snippets": [
          "try:\n  doSomething()\nexcept: \n  pass\n", 
          "try:\n  doSomething()\nexcept Exception: \n  pass\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 94, 
        "id": 730806, 
        "snippets": [
          "try:\n    do_something()\nexcept:\n    handle_exception()\n    raise  #re-raise the exact same exception that was thrown\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 79, 
        "id": 736029, 
        "snippets": [
          ">>> shutil.rmtree(\"/fake/dir\")\nTraceback (most recent call last):\n    [...]\nOSError: [Errno 2] No such file or directory: '/fake/dir'\n", 
          "try:\n    shutil.rmtree(path)\nexcept OSError:\n    pass\n", 
          "shutil.rmtree(2)\n", 
          ">>> try:\n...     sys.exit(1)\n... except:\n...     pass\n... \n>>>\n", 
          ">>> try:\n...     sys.exit(1)\n... except Exception:\n...     pass\n... \nshell:~$ \n", 
          "try:\n    shutil.rmtree(path)\nexcept OSError, e:\n    if e.errno == 2:\n        # suppress \"No such file or directory\" error\n        pass\n    else:\n        # reraise the exception, as it's an unexpected error\n        raise\n"
        ]
      }
    ], 
    "title": "Try/Except in Python: How do you properly ignore Exceptions?"
  }, 
  {
    "accepted_answer_post_id": 70833, 
    "id": 70797, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 299, 
        "id": 70814, 
        "snippets": [
          "var = raw_input(\"Please enter something: \")\nprint \"you entered\", var\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 186, 
        "id": 70833, 
        "snippets": [
          "import sys\nprint sys.argv\n", 
          "import sys\nprint(sys.argv)\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 131, 
        "id": 8334188, 
        "snippets": [
          "input_var = input(\"Enter something: \")\nprint (\"you entered \" + input_var) \n"
        ]
      }
    ], 
    "title": "Python: user input and commandline arguments"
  }, 
  {
    "accepted_answer_post_id": 4706520, 
    "id": 4706499, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 1262, 
        "id": 4706520, 
        "snippets": [
          "with open(\"test.txt\", \"a\") as myfile:\n    myfile.write(\"appended text\")\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 99, 
        "id": 4706519, 
        "snippets": [
          ">>> with open('test1','wb') as f:\n        f.write('test')\n>>> with open('test1','ab') as f:\n        f.write('koko')\n>>> with open('test1','rb') as f:\n        f.read()\n'testkoko'\n", 
          ">>> f = open('test','a+') # Not using 'with' just to simplify the example REPL session\n>>> f.write('hi')\n>>> f.seek(0)\n>>> f.read()\n'hi'\n>>> f.seek(0)\n>>> f.write('bye') # Will still append despite the seek(0)!\n>>> f.seek(0)\n>>> f.read()\n'hibye'\n", 
          "fseek(stream, 0, SEEK_END);\n", 
          ">>> open(\"test\",\"wb\").write(\"test\")\n>>> open(\"test\",\"a+b\").write(\"koko\")\n>>> open(\"test\",\"rb\").read()\n'testkoko'\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 19, 
        "id": 4706565, 
        "snippets": [
          "with open(\"foo\", \"a\") as f:\n    f.write(\"cool beans...\")\n"
        ]
      }
    ], 
    "title": "How do you append to a file in Python?"
  }, 
  {
    "accepted_answer_post_id": 22682, 
    "id": 22676, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 766, 
        "id": 22776, 
        "snippets": [
          "import urllib\nurllib.urlretrieve (\"http://www.example.com/songs/mp3.mp3\", \"mp3.mp3\")\n", 
          "import urllib2\n\nurl = \"http://download.thinkbroadband.com/10MB.zip\"\n\nfile_name = url.split('/')[-1]\nu = urllib2.urlopen(url)\nf = open(file_name, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders(\"Content-Length\")[0])\nprint \"Downloading: %s Bytes: %s\" % (file_name, file_size)\n\nfile_size_dl = 0\nblock_sz = 8192\nwhile True:\n    buffer = u.read(block_sz)\n    if not buffer:\n        break\n\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = r\"%10d  [%3.2f%%]\" % (file_size_dl, file_size_dl * 100. / file_size)\n    status = status + chr(8)*(len(status)+1)\n    print status,\n\nf.close()\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 290, 
        "id": 22682, 
        "snippets": [
          "import urllib2\nresponse = urllib2.urlopen('http://www.example.com/')\nhtml = response.read()\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 227, 
        "id": 10744565, 
        "snippets": [
          ">>> import requests\n>>> \n>>> url = \"http://download.thinkbroadband.com/10MB.zip\"\n>>> r = requests.get(url)\n>>> print len(r.content)\n10485760\n", 
          "from tqdm import tqdm\nimport requests\n\nurl = \"http://download.thinkbroadband.com/10MB.zip\"\nresponse = requests.get(url, stream=True)\n\nwith open(\"10MB\", \"wb\") as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)\n"
        ]
      }
    ], 
    "title": "How do I download a file over HTTP using Python?"
  }, 
  {
    "accepted_answer_post_id": 11709155, 
    "id": 11709079, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 98, 
        "id": 11709155, 
        "snippets": [
          "try: \n    from BeautifulSoup import BeautifulSoup\nexcept ImportError:\n    from bs4 import BeautifulSoup\nhtml = #the HTML code you've written above\nparsed_html = BeautifulSoup(html)\nprint parsed_html.body.find('div', attrs={'class':'container'}).text\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 33, 
        "id": 11709361, 
        "snippets": [
          "from pyquery import PyQuery    \nhtml = # Your HTML CODE\npq = PyQuery(html)\ntag = pq('div#class')\nprint tag.text()\n", 
          "pq('div#mw-head.noprint')\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 28, 
        "id": 11709123, 
        "snippets": [
          "import urllib2\nfrom BeautifulSoup import BeautifulSoup\n\npage = urllib2.urlopen('http://www.google.com/')\nsoup = BeautifulSoup(page)\n\nx = soup.body.find('div', attrs={'class' : 'container'}).text\n"
        ]
      }
    ], 
    "title": "Parsing HTML using Python"
  }, 
  {
    "accepted_answer_post_id": 23885252, 
    "id": 739993, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 639, 
        "id": 740018, 
        "snippets": [
          "help('modules')\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 272, 
        "id": 23885252, 
        "snippets": [
          "import pip\ninstalled_packages = pip.get_installed_distributions()\ninstalled_packages_list = sorted([\"%s==%s\" % (i.key, i.version)\n     for i in installed_packages])\nprint(installed_packages_list)\n", 
          "sorted([\"%s==%s\" % (i.key, i.version) for i in pip.get_installed_distributions()])\n", 
          "['behave==1.2.4', 'enum34==1.0', 'flask==0.10.1', 'itsdangerous==0.24', \n 'jinja2==2.7.2', 'jsonschema==2.3.0', 'markupsafe==0.23', 'nose==1.3.3', \n 'parse-type==0.3.4', 'parse==1.6.4', 'prettytable==0.7.2', 'requests==2.3.0',\n 'six==1.6.1', 'vioozer-metadata==0.1', 'vioozer-users-server==0.1', \n 'werkzeug==0.9.4']\n", 
          "$ cd /tmp\n$ virtualenv test_env\nNew python executable in test_env/bin/python\nInstalling setuptools, pip...done.\n$ source test_env/bin/activate\n(test_env) $ \n", 
          "(test_env) $ git clone https://github.com/behave/behave.git\nCloning into 'behave'...\nremote: Reusing existing pack: 4350, done.\nremote: Total 4350 (delta 0), reused 0 (delta 0)\nReceiving objects: 100% (4350/4350), 1.85 MiB | 418.00 KiB/s, done.\nResolving deltas: 100% (2388/2388), done.\nChecking connectivity... done.\n", 
          "(test_env) $ ls /tmp/behave/setup.py\n/tmp/behave/setup.py\n", 
          "(test_env) $ cd /tmp/behave && python setup.py install\nrunning install\n...\nInstalled /private/tmp/test_env/lib/python2.7/site-packages/enum34-1.0-py2.7.egg\nFinished processing dependencies for behave==1.2.5a1\n", 
          ">>> import pip\n>>> sorted([\"%s==%s\" % (i.key, i.version) for i in pip.get_installed_distributions()])\n['behave==1.2.5a1', 'enum34==1.0', 'parse-type==0.3.4', 'parse==1.6.4', 'six==1.6.1']\n>>> import os\n>>> os.getcwd()\n'/private/tmp'\n", 
          ">>> import pip\n>>> sorted([\"%s==%s\" % (i.key, i.version) for i in pip.get_installed_distributions()])\n['enum34==1.0', 'parse-type==0.3.4', 'parse==1.6.4', 'six==1.6.1']\n>>> import os\n>>> os.getcwd()\n'/private/tmp/behave'\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 175, 
        "id": 4703670, 
        "snippets": [
          "pip freeze\n", 
          "Fabric==0.9.3\napache-libcloud==0.4.0\nbzr==2.3b4\ndistribute==0.6.14\ndocutils==0.7\ngreenlet==0.3.1\nipython==0.10.1\niterpipes==0.4\nlibxml2-python==2.6.21\n"
        ]
      }
    ], 
    "title": "How can I get a list of locally installed Python modules?"
  }, 
  {
    "accepted_answer_post_id": 9210558, 
    "id": 9210525, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 99, 
        "id": 9210558, 
        "snippets": [
          "s = \"6a48f82d8e828ce82b82\"\n", 
          "i = int(s, 16)\n", 
          "str(i)\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 22, 
        "id": 9210556, 
        "snippets": [
          ">>> int(\"0xff\", 16)\n255\n", 
          ">>> int(\"FFFF\", 16)\n65535\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 10, 
        "id": 9210564, 
        "snippets": [
          ">>> ast.literal_eval('0xdeadbeef')\n3735928559\n", 
          ">>> int('deadbeef', 16)\n3735928559\n"
        ]
      }
    ], 
    "title": "How do I convert hex to decimal in Python?"
  }, 
  {
    "accepted_answer_post_id": 6797990, 
    "id": 6797984, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 1412, 
        "id": 6797990, 
        "snippets": [
          "s = \"Kilometer\"\nprint(s.lower())\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 60, 
        "id": 6798246, 
        "snippets": [
          "raw_input('Type Something').lower()\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 55, 
        "id": 26175350, 
        "snippets": [
          ">>> s='\u041a\u0438\u043b\u043e\u043c\u0435\u0442\u0440'\n>>> print s.lower()\n\u041a\u0438\u043b\u043e\u043c\u0435\u0442\u0440\n>>> print s.decode('utf-8').lower()\n\u043a\u0438\u043b\u043e\u043c\u0435\u0442\u0440\n"
        ]
      }
    ], 
    "title": "How to convert string to lowercase in Python?"
  }, 
  {
    "accepted_answer_post_id": 1207479, 
    "id": 1207457, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 376, 
        "id": 1207479, 
        "snippets": [
          "title = u\"Kl\u00fcft skr\u00e4ms inf\u00f6r p\u00e5 f\u00e9d\u00e9ral \u00e9lectoral gro\u00dfe\"\nimport unicodedata\nunicodedata.normalize('NFKD', title).encode('ascii','ignore')\n'Kluft skrams infor pa federal electoral groe'\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 183, 
        "id": 1211102, 
        "snippets": [
          ">>> a=u\"aaa\u00e0\u00e7\u00e7\u00e7\u00f1\u00f1\u00f1\"\n>>> type(a)\n<type 'unicode'>\n>>> a.encode('ascii','ignore')\n'aaa'\n>>> a.encode('ascii','replace')\n'aaa???????'\n>>>\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 76, 
        "id": 1207836, 
        "snippets": [
          ">>> s= u'\u00a310'\n>>> s.encode('utf8')\n'\\xc2\\x9c10'\n>>> s.encode('utf16')\n'\\xff\\xfe\\x9c\\x001\\x000\\x00'\n", 
          "import codecs\nf = codecs.open('path/to/file.txt','w','utf8')\nf.write(my_unicode_string)  # Stored on disk as UTF-8\n"
        ]
      }
    ], 
    "title": "Convert a Unicode string to a string in Python (containing extra symbols)"
  }, 
  {
    "accepted_answer_post_id": 3294899, 
    "id": 3294889, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 2046, 
        "id": 3294899, 
        "snippets": [
          "for key in d:\n", 
          "for key, value in d.iteritems():\n", 
          "for key, value in d.items():\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 229, 
        "id": 3295295, 
        "snippets": [
          "for k in dict: ...\n", 
          "for k in dict.keys(): ...\n", 
          "for key in dict.iterkeys(): ...\n\nfor value in dict.itervalues(): ...\n\nfor key, value in dict.iteritems(): ...\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 89, 
        "id": 3295662, 
        "snippets": [
          ">>> d = {'x': 1, 'y': 2, 'z': 3} \n>>> list(d)\n['y', 'x', 'z']\n>>> d.keys()\n['y', 'x', 'z']\n", 
          ">>> d.items()\n[('y', 2), ('x', 1), ('z', 3)]\n", 
          "for k,v in d.items():\n    print k, 'corresponds to', v\n", 
          "for letter, number in d.items():\n    print letter, 'corresponds to', number\n", 
          "for letter, number in d.items():\n    print '{0} corresponds to {1}'.format(letter, number)\n"
        ]
      }
    ], 
    "title": "Iterating over dictionaries using for loops in Python"
  }, 
  {
    "accepted_answer_post_id": 7571665, 
    "id": 7571635, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 484, 
        "id": 7571665, 
        "snippets": [
          "7 in a\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 23, 
        "id": 7571776, 
        "snippets": [
          "a = [1,2,3,4,'a','b','c']\nreturn 'a' in a\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 12, 
        "id": 7572489, 
        "snippets": [
          "a = [4,2,3,1,5,6]\n\nindex = dict((y,x) for x,y in enumerate(a))\ntry:\n   a_index = index[7]\nexcept KeyError:\n   print \"Not found\"\nelse:\n   print \"found\"\n"
        ]
      }
    ], 
    "title": "Fastest way to check if a value exist in a list"
  }, 
  {
    "accepted_answer_post_id": 1093331, 
    "id": 1093322, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 650, 
        "id": 1093331, 
        "snippets": [
          ">>> import sys\n", 
          ">>> print (sys.version) #parentheses necessary in python 3.       \n2.5.2 (r252:60911, Jul 31 2008, 17:28:52) \n[GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)]\n", 
          ">>> sys.version_info\n(2, 5, 2, 'final', 0)\n# or\n>>> sys.hexversion\n34014192\n", 
          "assert sys.version_info >= (2,5)\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 130, 
        "id": 17796193, 
        "snippets": [
          "python -V\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 74, 
        "id": 3018075, 
        "snippets": [
          ">>> import sys\n>>> sys.hexversion\n33883376\n>>> '%x' % sys.hexversion\n'20504f0'\n>>> sys.hexversion < 0x02060000\nTrue\n"
        ]
      }
    ], 
    "title": "How do I check what version of Python is running my script?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 5618878, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 325, 
        "id": 5618893, 
        "snippets": [
          "list1 = ['1', '2', '3']\nstr1 = ''.join(list1)\n", 
          "list1 = [1, 2, 3]\nstr1 = ''.join(str(e) for e in list1)\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 32, 
        "id": 5618910, 
        "snippets": [
          ">>> L = [1,2,3]       \n>>> \" \".join(str(x) for x in L)\n>>> '1 2 3'\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 22, 
        "id": 5618944, 
        "snippets": [
          "L = ['L','O','L']\nmakeitastring = ''.join(map(str, L))\n"
        ]
      }
    ], 
    "title": "How to convert list to string"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 3277503, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 936, 
        "id": 3277516, 
        "snippets": [
          "with open(fname) as f:\n    content = f.readlines()\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 570, 
        "id": 3277515, 
        "snippets": [
          "with open('filename') as f:\n    lines = f.readlines()\n", 
          "lines = [line.rstrip('\\n') for line in open('filename')]\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 235, 
        "id": 3277512, 
        "snippets": [
          "with open(\"file.txt\", \"r\") as ins:\n    array = []\n    for line in ins:\n        array.append(line)\n"
        ]
      }
    ], 
    "title": "How to read a file line by line into a list with Python"
  }, 
  {
    "accepted_answer_post_id": 5844692, 
    "id": 5844672, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 681, 
        "id": 5844692, 
        "snippets": [
          "del d[key]\n", 
          "def removekey(d, key):\n    r = dict(d)\n    del r[key]\n    return r\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 40, 
        "id": 5844700, 
        "snippets": [
          ">>> a\n{0: 'zero', 1: 'one', 2: 'two', 3: 'three'}\n>>> {i:a[i] for i in a if i!=0}\n{1: 'one', 2: 'two', 3: 'three'}\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 40, 
        "id": 22564121, 
        "snippets": [
          " >>>lol = {\"hello\":\"gdbye\"}\n >>>lol.pop(\"hello\")\n    'gdbye'\n >>> lol\n     {}\n"
        ]
      }
    ], 
    "title": "Delete an element from a dictionary"
  }, 
  {
    "accepted_answer_post_id": 1400622, 
    "id": 1400608, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 416, 
        "id": 1400622, 
        "snippets": [
          "del lst[:]\n", 
          "lst1 = [1, 2, 3]\nlst2 = lst1\ndel lst1[:]\nprint(lst2)\n", 
          "lst[:] = []\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 45, 
        "id": 1400624, 
        "snippets": [
          "alist[:] = []\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 30, 
        "id": 30087221, 
        "snippets": [
          "alist.clear()  # removes all items from alist (equivalent to del alist[:])\n"
        ]
      }
    ], 
    "title": "How to empty a list in Python?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 16296643, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 99, 
        "id": 23497549, 
        "snippets": [
          ">>> t = ('my', 'name', 'is', 'mr', 'tuple')\n>>> t\n('my', 'name', 'is', 'mr', 'tuple')\n>>> list(t)\n['my', 'name', 'is', 'mr', 'tuple']\n", 
          ">>> l = ['my', 'name', 'is', 'mr', 'list']\n>>> l\n['my', 'name', 'is', 'mr', 'list']\n>>> tuple(l)\n('my', 'name', 'is', 'mr', 'list')\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 41, 
        "id": 16296703, 
        "snippets": [
          "[list(i) for i in level] # list of lists\n", 
          "map(list, level)\n", 
          "tuple(tuple(i) for i in edited) # tuple of tuples\n", 
          "tuple(itertools.imap(tuple, edited))\n", 
          ">>> a = numpy.array(level1)\n>>> a\narray([[1, 1, 1, 1, 1, 1],\n       [1, 0, 0, 0, 0, 1],\n       [1, 0, 0, 0, 0, 1],\n       [1, 0, 0, 0, 0, 1],\n       [1, 0, 0, 0, 0, 1],\n       [1, 1, 1, 1, 1, 1]])\n", 
          "if clicked[0] == 1:\n    x = (mousey + cameraY) // 60 # For readability\n    y = (mousex + cameraX) // 60 # For readability\n    a[x][y] = 1\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 16, 
        "id": 16296668, 
        "snippets": [
          "level1 = [list(row) for row in level1]\n", 
          "level1 = map(list, level1)\n"
        ]
      }
    ], 
    "title": "Convert tuple to list and back"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 4004550, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 57, 
        "id": 4004554, 
        "snippets": [
          "s = '5.2 5.6 5.3'\nfloats = [float(x) for x in s.split()]\n", 
          "floats = map(float, s.split())\n"
        ]
      }
    ], 
    "title": "Converting string series to float list in python"
  }, 
  {
    "accepted_answer_post_id": 10543316, 
    "id": 10543303, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 62, 
        "id": 10543316, 
        "snippets": [
          ">>> j = [4, 5, 6, 7, 1, 3, 7, 5]\n>>> sum(i > 5 for i in j)\n3\n", 
          ">>> issubclass(bool, int)\nTrue\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 6, 
        "id": 10543348, 
        "snippets": [
          ">>> j = [4, 5, 6, 7, 1, 3, 7, 5]\n>>> len([1 for i in j if i > 5])\n3\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 5, 
        "id": 10543345, 
        "snippets": [
          "import numpy as np\nj = np.array(j)\nsum(j > i)\n"
        ]
      }
    ], 
    "title": "number of values in a list greater than a certain number"
  }, 
  {
    "accepted_answer_post_id": 674775, 
    "id": 674764, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 93, 
        "id": 674774, 
        "snippets": [
          ">>> x = \"Hello World\"\n>>> x.find('World')\n6\n>>> x.find('Aloha');\n-1\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 38, 
        "id": 674775, 
        "snippets": [
          ">>> 'sdfasdf'.index('cc')\nTraceback (most recent call last):\n  File \"<pyshell#144>\", line 1, in <module>\n    'sdfasdf'.index('cc')\nValueError: substring not found\n>>> 'sdfasdf'.index('df')\n1\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 27, 
        "id": 674790, 
        "snippets": [
          ">>> str = \"abcdefioshgoihgs sijsiojs \"\n>>> str.find('a')\n0\n>>> str.find('g')\n10\n>>> str.find('s',11)\n15\n>>> str.find('s',15)\n15\n>>> str.find('s',16)\n17\n>>> str.find('s',11,14)\n-1\n"
        ]
      }
    ], 
    "title": "Examples for string find in Python"
  }, 
  {
    "accepted_answer_post_id": 433161, 
    "id": 432842, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 750, 
        "id": 433161, 
        "snippets": [
          "bool(a) != bool(b)\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 292, 
        "id": 432844, 
        "snippets": [
          "(a and not b) or (not a and b)\n", 
          "bool(a) ^ bool(b)\n", 
          "def logical_xor(str1, str2):\n    return bool(str1) ^ bool(str2)\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 96, 
        "id": 11036506, 
        "snippets": [
          "from operator import xor\nxor(bool(a), bool(b))\n"
        ]
      }
    ], 
    "title": "How do you get the logical xor of two variables in Python?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 1303243, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 210, 
        "id": 1303252, 
        "snippets": []
      }, 
      {
        "rank": 1, 
        "score": 104, 
        "id": 1303266, 
        "snippets": [
          "isinstance(o, basestring)\n", 
          "type(o) is str\n", 
          "isinstance(o, str)\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 44, 
        "id": 26535728, 
        "snippets": [
          "isinstance(obj_to_test, str)\n"
        ]
      }
    ], 
    "title": "How to find out if a Python object is a string?"
  }, 
  {
    "accepted_answer_post_id": 165662, 
    "id": 163542, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 211, 
        "id": 165662, 
        "snippets": [
          "    pipe = os.popen(cmd, 'w', bufsize)\n    # ==>\n    pipe = Popen(cmd, shell=True, bufsize=bufsize, stdin=PIPE).stdin\n", 
          "from subprocess import Popen, PIPE, STDOUT\n\np = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)    \ngrep_stdout = p.communicate(input=b'one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]\nprint(grep_stdout.decode())\n# -> four\n# -> five\n# ->\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 26, 
        "id": 163556, 
        "snippets": [
          ">>> p = subprocess.Popen(['grep','f'],stdout=subprocess.PIPE,stdin=subprocess.PIPE)\n>>> p.stdin.write('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')\n>>> p.communicate()[0]\n'four\\nfive\\n'\n>>> p.stdin.close()\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 12, 
        "id": 163870, 
        "snippets": []
      }
    ], 
    "title": "Python - How do I pass a string into subprocess.Popen (using the stdin argument)?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 4383571, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 510, 
        "id": 4383597, 
        "snippets": [
          "# some_file.py\nimport sys\nsys.path.insert(0, '/path/to/application/app/folder')\n\nimport file\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 201, 
        "id": 21995949, 
        "snippets": [
          "from application.app.folder.file import func_name\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 14, 
        "id": 21878513, 
        "snippets": [
          "PYTHONPATH\n", 
          "export PYTHONPATH=$HOME/dirWithScripts/:$PYTHONPATH\n"
        ]
      }
    ], 
    "title": "Importing files from different folder in Python"
  }, 
  {
    "accepted_answer_post_id": 11801336, 
    "id": 11801309, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 71, 
        "id": 11801338, 
        "snippets": [
          "import os  \nfor fn in os.listdir('.'):\n     if os.path.isfile(fn):\n        print (fn)\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 21, 
        "id": 11801336, 
        "snippets": [
          "log = open(os.path.join(root, f), 'r')\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 5, 
        "id": 35114238, 
        "snippets": [
          "source = '/home/test/py_test/'\nfor root, dirs, filenames in os.walk(source):\n    for f in filenames:\n        print f\n        fullpath = os.path.join(source, f)\n        log = open(fullpath, 'r')\n"
        ]
      }
    ], 
    "title": "How to loop over files with Python?"
  }, 
  {
    "accepted_answer_post_id": 306417, 
    "id": 306400, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 1499, 
        "id": 306417, 
        "snippets": [
          "import random\n\nfoo = ['a', 'b', 'c', 'd', 'e']\nprint(random.choice(foo))\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 65, 
        "id": 12373205, 
        "snippets": [
          "foo = ['a', 'b', 'c', 'd', 'e']\nfrom random import randrange\nrandom_index = randrange(0,len(foo))\nprint foo[random_index]\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 38, 
        "id": 30488952, 
        "snippets": [
          "import random\ngroup_of_items = {1, 2, 3, 4}               # a sequence or set will work here.\nnum_to_select = 2                           # set the number to select here.\nlist_of_random_items = random.sample(group_of_items, num_to_select)\nfirst_random_item = list_of_random_items[0]\nsecond_random_item = list_of_random_items[1] \n"
        ]
      }
    ], 
    "title": "How do I randomly select an item from a list using Python?"
  }, 
  {
    "accepted_answer_post_id": 3996930, 
    "id": 3996904, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 727, 
        "id": 3996930, 
        "snippets": [
          "from random import randint\nprint(randint(0,9))\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 159, 
        "id": 16376904, 
        "snippets": [
          "import random\nprint(random.randint(0,9))\n", 
          "random.randint(a, b)\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 51, 
        "id": 3996919, 
        "snippets": [
          "from random import randrange, uniform\n\n# randrange gives you an integral value\nirand = randrange(0, 10)\n\n# uniform gives you a floating-point value\nfrand = uniform(0, 10)\n"
        ]
      }
    ], 
    "title": "Generate random integers between 0 and 9"
  }, 
  {
    "accepted_answer_post_id": 627453, 
    "id": 627435, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 758, 
        "id": 627453, 
        "snippets": [
          "In [9]: a = range(10)\nIn [10]: a\nOut[10]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nIn [11]: del a[-1]\nIn [12]: a\nOut[12]: [0, 1, 2, 3, 4, 5, 6, 7, 8]\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 310, 
        "id": 627441, 
        "snippets": [
          "a = ['a', 'b', 'c', 'd']\na.pop(1)\n\n# now a is ['a', 'c', 'd']\n", 
          "a = ['a', 'b', 'c', 'd']\na.pop()\n\n# now a is ['a', 'b', 'c']\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 44, 
        "id": 24352671, 
        "snippets": [
          ">>> a = [  1, 2, 3, 4, 5, 6 ]\n>>> index = 3 # Only Positive index\n\n>>> a = a[:index] + a[index+1 :]\n# a is now [ 1, 2, 3, 5, 6 ]\n", 
          "class foo(object):\n    def __init__(self, items):\n        self.items = items\n\n    def __getitem__(self, index):\n        return foo(self.items[index])\n\n    def __add__(self, right):\n        return foo( self.items + right.items )\n", 
          "a = range(10)\nindex = 3\n", 
          "def del_method():\n    global a\n    global index\n    del a[index]\n", 
          " 10           0 LOAD_GLOBAL              0 (a)\n              3 LOAD_GLOBAL              1 (index)\n              6 DELETE_SUBSCR       # This is the line that deletes the item\n              7 LOAD_CONST               0 (None)\n             10 RETURN_VALUE        \nNone\n", 
          "def pop_method():\n    global a\n    global index\n    a.pop(index)\n", 
          " 17           0 LOAD_GLOBAL              0 (a)\n              3 LOAD_ATTR                1 (pop)\n              6 LOAD_GLOBAL              2 (index)\n              9 CALL_FUNCTION            1\n             12 POP_TOP             \n             13 LOAD_CONST               0 (None)\n             16 RETURN_VALUE        \n", 
          "def slice_method():\n    global a\n    global index\n    a = a[:index] + a[index+1:]\n", 
          " 24           0 LOAD_GLOBAL              0 (a)\n              3 LOAD_GLOBAL              1 (index)\n              6 SLICE+2             \n              7 LOAD_GLOBAL              0 (a)\n             10 LOAD_GLOBAL              1 (index)\n             13 LOAD_CONST               1 (1)\n             16 BINARY_ADD          \n             17 SLICE+1             \n             18 BINARY_ADD          \n             19 STORE_GLOBAL             0 (a)\n             22 LOAD_CONST               0 (None)\n             25 RETURN_VALUE        \nNone\n"
        ]
      }
    ], 
    "title": "How to remove an element from a list by index in Python?"
  }, 
  {
    "accepted_answer_post_id": 1774043, 
    "id": 1773805, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 327, 
        "id": 1774043, 
        "snippets": [
          "#!/usr/bin/env python\n\nimport yaml\n\nwith open(\"example.yaml\", 'r') as stream:\n    try:\n        print(yaml.load(stream))\n    except yaml.YAMLError as exc:\n        print(exc)\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 15, 
        "id": 38922434, 
        "snippets": [
          "import ruamel.yaml as yaml\n\nwith open(\"example.yaml\") as stream:\n    try:\n        print(yaml.load(stream))\n    except yaml.YAMLError as exc:\n        print(exc)\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 6, 
        "id": 42054860, 
        "snippets": [
          "# -*- coding: utf-8 -*-\nimport yaml\nimport io\n\n# Define data\ndata = {'a list': [1, 42, 3.141, 1337, 'help', u'\u20ac'],\n        'a string': 'bla',\n        'another dict': {'foo': 'bar',\n                         'key': 'value',\n                         'the answer': 42}}\n\n# Write YAML file\nwith io.open('data.yaml', 'w', encoding='utf8') as outfile:\n    yaml.dump(data, outfile, default_flow_style=False, allow_unicode=True)\n\n# Read YAML file\nwith open(\"data.yaml\", 'r') as stream:\n    data_loaded = yaml.load(stream)\n\nprint(data == data_loaded)\n", 
          "a list:\n- 1\n- 42\n- 3.141\n- 1337\n- help\n- \u20ac\na string: bla\nanother dict:\n  foo: bar\n  key: value\n  the answer: 42\n"
        ]
      }
    ], 
    "title": "How can I parse a YAML file in Python"
  }, 
  {
    "accepted_answer_post_id": 10406143, 
    "id": 10406130, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 191, 
        "id": 10406143, 
        "snippets": [
          ">>> 3 not in [2, 3, 4]\nFalse\n>>> 3 not in [4, 5, 6]\nTrue\n", 
          ">>> (2, 3) not in [(2, 3), (5, 6), (9, 1)]\nFalse\n>>> (2, 3) not in [(2, 7), (7, 3), \"hi\"]\nTrue\n"
        ]
      }
    ], 
    "title": "Check if something is not in a list in Python"
  }, 
  {
    "accepted_answer_post_id": 1185529, 
    "id": 1185524, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 938, 
        "id": 1185529, 
        "snippets": [
          "s = \"  \\t a string example\\t  \"\ns = s.strip()\n", 
          "s = s.rstrip()\n", 
          "s = s.lstrip()\n", 
          "s = s.strip(' \\t\\n\\r')\n", 
          "import re\nprint re.sub('[\\s+]', '', s)\n", 
          "astringexample\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 39, 
        "id": 9326184, 
        "snippets": [
          "str.strip() #trim\nstr.lstrip() #ltrim\nstr.rstrip() #rtrim\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 17, 
        "id": 1185528, 
        "snippets": [
          "s = '   foo    \\t   '\nprint s.strip()\n", 
          "import re\npat = re.compile(r'\\s+')\ns = '  \\t  foo   \\t   bar \\t  '\nprint pat.sub('', s)\n"
        ]
      }
    ], 
    "title": "How to trim whitespace (including tabs)?"
  }, 
  {
    "accepted_answer_post_id": 354130, 
    "id": 354038, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 1086, 
        "id": 354073, 
        "snippets": [
          ">>> a = \"03523\"\n>>> a.isdigit()\nTrue\n>>> b = \"963spam\"\n>>> b.isdigit()\nFalse\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 439, 
        "id": 354130, 
        "snippets": []
      }, 
      {
        "rank": 2, 
        "score": 50, 
        "id": 3618897, 
        "snippets": [
          ">>> float('NaN')\nnan\n"
        ]
      }
    ], 
    "title": "How do I check if a string is a number (float) in Python?"
  }, 
  {
    "accepted_answer_post_id": 2600208, 
    "id": 2600191, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 937, 
        "id": 5829377, 
        "snippets": [
          ">>> from collections import Counter\n>>> z = ['blue', 'red', 'blue', 'yellow', 'blue', 'red']\n>>> Counter(z)\nCounter({'blue': 3, 'red': 2, 'yellow': 1})\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 852, 
        "id": 2600208, 
        "snippets": [
          ">>> [1, 2, 3, 4, 1, 4, 1].count(1)\n3\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 87, 
        "id": 23909767, 
        "snippets": [
          ">>> l = [\"a\",\"b\",\"b\"]\n>>> l.count(\"a\")\n1\n>>> l.count(\"b\")\n2\n", 
          "[[x,l.count(x)] for x in set(l)]\n", 
          ">>> l = [\"a\",\"b\",\"b\"]\n>>> [[x,l.count(x)] for x in set(l)]\n[['a', 1], ['b', 2]]\n>>> dict((x,l.count(x)) for x in set(l))\n{'a': 1, 'b': 2}\n", 
          "Counter(l)\n", 
          ">>> l = [\"a\",\"b\",\"b\"]\n>>> from collections import Counter\n>>> Counter(l)\nCounter({'b': 2, 'a': 1})\n", 
          "import timeit\n\nt1=timeit.Timer('Counter(l)', \\\n                'import random;import string;from collections import Counter;n=1000;l=[random.choice(string.ascii_letters) for x in xrange(n)]'\n                )\n\nt2=timeit.Timer('[[x,l.count(x)] for x in set(l)]',\n                'import random;import string;n=1000;l=[random.choice(string.ascii_letters) for x in xrange(n)]'\n                )\n\nprint \"Counter(): \", t1.repeat(repeat=3,number=10000)\nprint \"count():   \", t2.repeat(repeat=3,number=10000)\n", 
          "Counter():  [6.360648187146579, 6.613881559699756, 6.392260466851987]\ncount():    [12.885062765334006, 13.045601897769359, 12.87746743077426]\n"
        ]
      }
    ], 
    "title": "How can I count the occurrences of a list item in Python?"
  }, 
  {
    "accepted_answer_post_id": 4944929, 
    "id": 4940032, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 172, 
        "id": 4944929, 
        "snippets": [
          "if 'blabla' in open('example.txt').read():\n    print \"true\"\n", 
          "import mmap\nf = open('example.txt')\ns = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\nif s.find('blabla') != -1:\n    print 'true'\n", 
          "#!/usr/bin/env python3\nimport mmap\n\nwith open('example.txt', 'rb', 0) as file, \\\n     mmap.mmap(file.fileno(), 0, access=mmap.ACCESS_READ) as s:\n    if s.find(b'blabla') != -1:\n        print('true')\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 18, 
        "id": 4940068, 
        "snippets": [
          "def check():\n        datafile = file('example.txt')\n        found = False #this isn't really necessary \n        for line in datafile:\n            if blabla in line:\n                #found = True #not necessary \n                return True\n        return False #because you finished the search without finding anything\n\n\nprint check()\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 7, 
        "id": 4940041, 
        "snippets": [
          "if True:\n    print \"true\"\n", 
          "if check():\n    print \"true\"\nelse:\n    print \"false\"\n"
        ]
      }
    ], 
    "title": "Search for string in txt file Python"
  }, 
  {
    "accepted_answer_post_id": 845081, 
    "id": 845058, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 348, 
        "id": 1019572, 
        "snippets": [
          "num_lines = sum(1 for line in open('myfile.txt'))\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 179, 
        "id": 845081, 
        "snippets": []
      }, 
      {
        "rank": 2, 
        "score": 155, 
        "id": 850962, 
        "snippets": [
          "mapcount : 0.465599966049\nsimplecount : 0.756399965286\nbufcount : 0.546800041199\nopcount : 0.718600034714\n", 
          "mapcount : 0.471799945831\nsimplecount : 0.634400033951\nbufcount : 0.468800067902\nopcount : 0.602999973297\n", 
          "from __future__ import with_statement\nimport time\nimport mmap\nimport random\nfrom collections import defaultdict\n\ndef mapcount(filename):\n    f = open(filename, \"r+\")\n    buf = mmap.mmap(f.fileno(), 0)\n    lines = 0\n    readline = buf.readline\n    while readline():\n        lines += 1\n    return lines\n\ndef simplecount(filename):\n    lines = 0\n    for line in open(filename):\n        lines += 1\n    return lines\n\ndef bufcount(filename):\n    f = open(filename)                  \n    lines = 0\n    buf_size = 1024 * 1024\n    read_f = f.read # loop optimization\n\n    buf = read_f(buf_size)\n    while buf:\n        lines += buf.count('\\n')\n        buf = read_f(buf_size)\n\n    return lines\n\ndef opcount(fname):\n    with open(fname) as f:\n        for i, l in enumerate(f):\n            pass\n    return i + 1\n\n\ncounts = defaultdict(list)\n\nfor i in range(5):\n    for func in [mapcount, simplecount, bufcount, opcount]:\n        start_time = time.time()\n        assert func(\"big_file.txt\") == 1209138\n        counts[func].append(time.time() - start_time)\n\nfor key, vals in counts.items():\n    print key.__name__, \":\", sum(vals) / float(len(vals))\n"
        ]
      }
    ], 
    "title": "How to get line count cheaply in Python?"
  }, 
  {
    "accepted_answer_post_id": 6416142, 
    "id": 6416131, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 503, 
        "id": 6416142, 
        "snippets": [
          "default_data['item3'] = 3\n", 
          "default_data.update({'item3': 3})\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 37, 
        "id": 6416157, 
        "snippets": [
          "default_data['item3'] = 3\n", 
          "default_data.update({'item4': 4, 'item5': 5})\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 15, 
        "id": 6416471, 
        "snippets": [
          ">>> class Dict(dict):\n...     def __add__(self, other):\n...         copy = self.copy()\n...         copy.update(other)\n...         return copy\n...     def __radd__(self, other):\n...         copy = other.copy()\n...         copy.update(self)\n...         return copy\n... \n>>> default_data = Dict({'item1': 1, 'item2': 2})\n>>> default_data + {'item3': 3}\n{'item2': 2, 'item3': 3, 'item1': 1}\n>>> {'test1': 1} + Dict(test2=2)\n{'test1': 1, 'test2': 2}\n"
        ]
      }
    ], 
    "title": "Python add new item to dictionary"
  }, 
  {
    "accepted_answer_post_id": 53522, 
    "id": 53513, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 2443, 
        "id": 53522, 
        "snippets": [
          "if not a:\n  print(\"List is empty\")\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 581, 
        "id": 53752, 
        "snippets": []
      }, 
      {
        "rank": 2, 
        "score": 274, 
        "id": 7302987, 
        "snippets": [
          "if len(li) == 0:\n    print 'the list is empty'\n"
        ]
      }
    ], 
    "title": "Best way to check if a list is empty"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 849674, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 22, 
        "id": 849759, 
        "snippets": [
          "import thread, time\n\ndef myfunction(mystring,*args):\n    print mystring\n\n\nif __name__ == '__main__':\n\n    try:\n\n        thread.start_new_thread(myfunction,('MyStringHere',1))\n\n    except Exception, errtxt:\n        print errtxt\n\n    time.sleep(5)\n", 
          "from threading import Thread\n\ndef myfunction(mystring,*args):\n    print mystring\n\n\nif __name__ == '__main__':\n\n    try:\n        Thread(target=myfunction, args=('MyStringHere',1)).start()\n    except Exception, errtxt:\n        print errtxt\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 14, 
        "id": 849896, 
        "snippets": [
          "from threading import Thread\n\ndef myfunction(mystring,*args):\n    print mystring\n\nif __name__ == '__main__':\n\n    try:\n        t = Thread(None,myfunction,None,('MyStringHere',1))\n        t.start()\n        t.join()\n    except Exception as errtxt:\n        print errtxt\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 0, 
        "id": 20633107, 
        "snippets": [
          "import thread\n\ndef myfunction(mystring,*args):\n    print mystring\n\nif __name__ == '__main__':\n\n    try:\n\n        thread.start_new_thread(myfunction,('MyStringHere',1))\n\n    except Exception as errtxt:\n        print errtxt\n\nwhile 1:\n    pass\n"
        ]
      }
    ], 
    "title": "Simple threading in Python 2.6 using thread.start_new_thread()"
  }, 
  {
    "accepted_answer_post_id": 8270146, 
    "id": 8270092, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 638, 
        "id": 8270146, 
        "snippets": [
          "sentence = ' hello  apple'\nsentence.strip()\n>>> 'hello  apple'\n", 
          "sentence = ' hello  apple'\nsentence.replace(\" \", \"\")\n>>> 'helloapple'\n", 
          "sentence = ' hello  apple'\n\" \".join(sentence.split())\n>>> 'hello apple'\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 135, 
        "id": 8270124, 
        "snippets": [
          "sentence = sentence.replace(' ', '')\n", 
          "sentence = ''.join(sentence.split())\n", 
          "import re\npattern = re.compile(r'\\s+')\nsentence = re.sub(pattern, '', sentence)\n", 
          "sentence = sentence.strip()\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 21, 
        "id": 28607213, 
        "snippets": [
          "sentence = re.sub(r\"\\s+\", \"\", sentence, flags=re.UNICODE)\n"
        ]
      }
    ], 
    "title": "Python remove all whitespace in a string"
  }, 
  {
    "accepted_answer_post_id": 227472, 
    "id": 227459, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 719, 
        "id": 227472, 
        "snippets": [
          ">>> ord('a')\n97\n>>> chr(97)\n'a'\n>>> chr(ord('a') + 3)\n'd'\n>>>\n", 
          ">>> unichr(97)\nu'a'\n>>> unichr(1234)\nu'\\u04d2'\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 115, 
        "id": 227889, 
        "snippets": [
          ">>> ord(u'\u3042')\n12354\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 34, 
        "id": 227466, 
        "snippets": [
          "ord()\n"
        ]
      }
    ], 
    "title": "ASCII value of a character in Python"
  }, 
  {
    "accepted_answer_post_id": 931095, 
    "id": 931092, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 1624, 
        "id": 931095, 
        "snippets": [
          ">>> 'hello world'[::-1]\n'dlrow olleh'\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 156, 
        "id": 931099, 
        "snippets": []
      }, 
      {
        "rank": 2, 
        "score": 56, 
        "id": 27843760, 
        "snippets": [
          "string[subscript]\n", 
          "    string[start:stop:step]\n", 
          "    slice_obj = slice(start, stop, step)\n    string[slice_obj]\n", 
          "def reverse_string_readable_answer(string):\n    return ''.join(reversed(string))\n", 
          "'foo'[::-1]\n", 
          "start = stop = None\nstep = -1\nreverse_slice = slice(start, stop, step)\n'foo'[reverse_slice]\n", 
          "def reversed_string(a_string):\n    return a_string[::-1]\n", 
          "reversed_string('foo')\n", 
          "def reverse_a_string_slowly(a_string):\n    new_string = ''\n    index = len(a_string)\n    while index:\n        index -= 1                    # index = index - 1\n        new_string += a_string[index] # new_string = new_string + character\n    return new_string\n", 
          "def reverse_a_string_more_slowly(a_string):\n    new_strings = []\n    index = len(a_string)\n    while index:\n        index -= 1                       \n        new_strings.append(a_string[index])\n    return ''.join(new_strings)\n", 
          ">>> a_string = 'amanaplanacanalpanama' * 10\n>>> min(timeit.repeat(lambda: reverse_string_readable_answer(a_string)))\n10.38789987564087\n>>> min(timeit.repeat(lambda: reversed_string(a_string)))\n0.6622700691223145\n>>> min(timeit.repeat(lambda: reverse_a_string_slowly(a_string)))\n25.756799936294556\n>>> min(timeit.repeat(lambda: reverse_a_string_more_slowly(a_string)))\n38.73570013046265\n"
        ]
      }
    ], 
    "title": "Reverse a string in Python"
  }, 
  {
    "accepted_answer_post_id": 415519, 
    "id": 415511, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 1183, 
        "id": 415519, 
        "snippets": [
          ">>> import datetime\n>>> datetime.datetime.now()\ndatetime(2009, 1, 6, 15, 8, 24, 78915)\n", 
          ">>> datetime.datetime.time(datetime.datetime.now())\ndatetime.time(15, 8, 24, 78915)\n", 
          ">>> datetime.datetime.now().time()\n", 
          ">>> from datetime import datetime\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 492, 
        "id": 415525, 
        "snippets": [
          ">>> from time import gmtime, strftime\n>>> strftime(\"%Y-%m-%d %H:%M:%S\", gmtime())\n'2009-01-05 22:14:39'\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 225, 
        "id": 5877368, 
        "snippets": [
          ">>> from datetime import datetime\n>>> str(datetime.now())\n'2011-05-03 17:45:35.177000'\n"
        ]
      }
    ], 
    "title": "How to get current time in Python"
  }, 
  {
    "accepted_answer_post_id": 14043939, 
    "id": 14043934, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 21, 
        "id": 14043939, 
        "snippets": [
          ">>> import datetime\n>>> t = datetime.datetime.now()\n>>> t - datetime.timedelta(hours=1, minutes=10)\ndatetime.datetime(2012, 12, 26, 17, 18, 52, 167840)\n", 
          ">>> t = datetime.time(1, 2)\n>>> dt = datetime.datetime.combine(datetime.date.today(), t)\n>>> dt\ndatetime.datetime(2012, 12, 26, 1, 2)\n>>> dt -= datetime.timedelta(hours=5)\n>>> dt.time()\ndatetime.time(20, 2)\n"
        ]
      }
    ], 
    "title": "python time offset"
  }, 
  {
    "accepted_answer_post_id": 3940144, 
    "id": 3940128, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 679, 
        "id": 3940137, 
        "snippets": [
          ">>> L = [0,10,20,40]\n>>> L[::-1]\n[40, 20, 10, 0]\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 491, 
        "id": 3940144, 
        "snippets": [
          ">>> array=[0,10,20,40]\n>>> for i in reversed(array):\n...     print i\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 181, 
        "id": 3940149, 
        "snippets": [
          ">>> L = [0,10,20,40]\n>>> L.reverse()\n>>> L\n[40, 20, 10, 0]\n", 
          ">>> L[::-1]\n[40, 20, 10, 0]\n"
        ]
      }
    ], 
    "title": "How can I reverse a list in python?"
  }, 
  {
    "accepted_answer_post_id": 1949360, 
    "id": 1949318, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 45, 
        "id": 1949360, 
        "snippets": [
          ">>> print urllib.urlopen(\"http://www.stackoverflow.com\").getcode()\n>>> 200\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 7, 
        "id": 1949393, 
        "snippets": [
          "import httplib\nconn = httplib.HTTPConnection(\"www.python.org\")\nconn.request(\"HEAD\", \"/\")\nr1 = conn.getresponse()\nprint r1.status, r1.reason\n", 
          "200 OK\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 5, 
        "id": 15743618, 
        "snippets": [
          "import requests\n\ndef url_ok(url):\n    r = requests.head(url)\n    return r.status_code == 200\n"
        ]
      }
    ], 
    "title": "Checking if a website is up via Python"
  }, 
  {
    "accepted_answer_post_id": 24065533, 
    "id": 2052390, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 829, 
        "id": 24065533, 
        "snippets": [
          "raise ValueError('A very specific bad thing happened')\n", 
          "raise Exception('I know Python!') # don't, if you catch, likely to hide bugs.\n", 
          "def demo_bad_catch():\n    try:\n        raise ValueError('represents a hidden bug, do not catch this')\n        raise Exception('This is the exception you expect to handle')\n    except Exception as error:\n        print('caught this error: ' + repr(error))\n\n>>> demo_bad_catch()\ncaught this error: ValueError('represents a hidden bug, do not catch this',)\n", 
          "def demo_no_catch():\n    try:\n        raise Exception('general exceptions not caught by specific handling')\n    except ValueError as e:\n        print('we will not catch e')\n\n\n>>> demo_no_catch()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 3, in demo_no_catch\nException: general exceptions not caught by specific handling\n", 
          "raise ValueError('A very specific bad thing happened')\n", 
          "raise ValueError('A very specific bad thing happened', 'foo', 'bar', 'baz') \n", 
          "try:\n    some_code_that_may_raise_our_value_error()\nexcept ValueError as err:\n    print(err.args)\n", 
          "('message', 'foo', 'bar', 'baz')    \n", 
          "try:\n    do_something_in_app_that_breaks_easily()\nexcept AppError as error:\n    logger.error(error)\n    raise                 # just this!\n    # raise AppError      # Don't do this, you'll lose the stack trace!\n", 
          "    raise AppError, error, sys.exc_info()[2] # avoid this.\n    # Equivalently, as error *is* the second object:\n    raise sys.exc_info()[0], sys.exc_info()[1], sys.exc_info()[2]\n", 
          "    raise error.with_traceback(sys.exc_info()[2])\n", 
          "    raise RuntimeError('specific message') from error\n", 
          "raise ValueError, 'message' # Don't do this, it's deprecated!\n", 
          "raise 'message' # really really wrong. don't do this.\n", 
          "def api_func(foo):\n    '''foo should be either 'baz' or 'bar'. returns something very useful.'''\n    if foo not in _ALLOWED_ARGS:\n        raise ValueError('{foo} wrong, use \"baz\" or \"bar\"'.format(foo=repr(foo)))\n", 
          "class MyAppLookupError(LookupError):\n    '''raise this when there's a lookup error for my app'''\n", 
          "if important_key not in resource_dict and not ok_to_be_missing:\n    raise MyAppLookupError('resource is missing, and that is not ok.')\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 568, 
        "id": 2052396, 
        "snippets": [
          "raise Exception(\"I know python!\")\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 15, 
        "id": 30317038, 
        "snippets": [
          "if 0 < distance <= RADIUS:\n    #Do something.\nelif RADIUS < distance:\n    #Do something.\nelse:\n    raise AssertionError(\"Unexpected value of 'distance'!\", distance)\n"
        ]
      }
    ], 
    "title": "Manually raising (throwing) an exception in Python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 2331943, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 23, 
        "id": 2331958, 
        "snippets": [
          "try:\n    import json\nexcept ImportError:\n    import simplejson as json\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 13, 
        "id": 2331967, 
        "snippets": [
          "import urllib2\nimport json\n\nu = urllib2.urlopen('http://www.reddit.com/.json')\nprint json.load(u)\nu.close()\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 0, 
        "id": 2331962, 
        "snippets": []
      }
    ], 
    "title": "How to decode JSON with Python"
  }, 
  {
    "accepted_answer_post_id": 273227, 
    "id": 273192, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 2100, 
        "id": 273227, 
        "snippets": [
          "if not os.path.exists(directory):\n    os.makedirs(directory)\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 437, 
        "id": 5032238, 
        "snippets": [
          "import os\nimport errno\n\ndef make_sure_path_exists(path):\n    try:\n        os.makedirs(path)\n    except OSError as exception:\n        if exception.errno != errno.EEXIST:\n            raise\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 342, 
        "id": 14364249, 
        "snippets": [
          "try: \n    os.makedirs(path)\nexcept OSError:\n    if not os.path.isdir(path):\n        raise\n", 
          "import distutils.dir_util\ndistutils.dir_util.mkpath(path)\n", 
          "os.makedirs(path, exist_ok=True)\n"
        ]
      }
    ], 
    "title": "How to check if a directory exists and create it if necessary?"
  }, 
  {
    "accepted_answer_post_id": 14931808, 
    "id": 14931769, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 23, 
        "id": 14931808, 
        "snippets": [
          "import itertools\nlst = list(itertools.product([0, 1], repeat=3))\n", 
          "n = 3\nlst = list(itertools.product([0, 1], repeat=n))\n", 
          "lst = map(list, itertools.product([0, 1], repeat=n))\n", 
          "lst = list(map(list, itertools.product([0, 1], repeat=n)))\n# OR\nlst = [list(i) for i in itertools.product([0, 1], repeat=n)]\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 2, 
        "id": 14932354, 
        "snippets": [
          "def per(n):\n    for i in range(1<<n):\n        s=bin(i)[2:]\n        s='0'*(n-len(s))+s\n        print map(int,list(s))\nper(3)\n", 
          "[0, 0, 0]\n[0, 0, 1]\n[0, 1, 0]\n[0, 1, 1]\n[1, 0, 0]\n[1, 0, 1]\n[1, 1, 0]\n[1, 1, 1]\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 1, 
        "id": 14931812, 
        "snippets": [
          "bin = [0,1]\n[ (x,y,z) for x in bin for y in bin for z in bin ]\n"
        ]
      }
    ], 
    "title": "How to get all combination of n binary value?"
  }, 
  {
    "accepted_answer_post_id": 3519314, 
    "id": 3518778, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 292, 
        "id": 3519314, 
        "snippets": [
          "from numpy import genfromtxt\nmy_data = genfromtxt('my_file.csv', delimiter=',')\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 72, 
        "id": 26296194, 
        "snippets": [
          "import pandas as pd\ndf=pd.read_csv('myfile.csv', sep=',',header=None)\ndf.values\narray([[ 1. ,  2. ,  3. ],\n       [ 4. ,  5.5,  6. ]])\n", 
          "1.0, 2, 3\n4, 5.5, 6\n\nimport numpy as np\nnp.genfromtxt('myfile.csv',delimiter=',')\n", 
          "array([[ 1. ,  2. ,  3. ],\n       [ 4. ,  5.5,  6. ]])\n", 
          "np.genfromtxt('myfile.csv',delimiter=',',dtype=None)\n", 
          "array([(1.0, 2.0, 3), (4.0, 5.5, 6)], \n      dtype=[('f0', '<f8'), ('f1', '<f8'), ('f2', '<i4')])\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 57, 
        "id": 4724179, 
        "snippets": []
      }
    ], 
    "title": "How to read csv into record array in numpy?"
  }, 
  {
    "accepted_answer_post_id": 4020824, 
    "id": 4020539, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 80, 
        "id": 4020824, 
        "snippets": [
          ">>> myString = \"spam\\\\neggs\"\n>>> decoded_string = bytes(myString, \"utf-8\").decode(\"unicode_escape\") # python3 \n>>> decoded_string = myString.decode('string_escape') # python2\n>>> print(decoded_string)\nspam\neggs\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 53, 
        "id": 24519338, 
        "snippets": [
          ">>> s = 'na\u00efve \\\\t test'\n>>> print(s.encode('utf-8').decode('unicode_escape'))\nna\u00c3\u00afve   test\n", 
          ">>> import codecs\n>>> print(codecs.decode(s, 'unicode_escape'))\nna\u00c3\u00afve   test\n", 
          ">>> print(s.encode('latin-1').decode('unicode_escape'))\nna\u00efve    test\n", 
          ">>> print('Ern\u0151 \\\\t Rubik'.encode('latin-1').decode('unicode_escape'))\nUnicodeEncodeError: 'latin-1' codec can't encode character '\\u0151'\nin position 3: ordinal not in range(256)\n", 
          "import re\nimport codecs\n\nESCAPE_SEQUENCE_RE = re.compile(r'''\n    ( \\\\U........      # 8-digit hex escapes\n    | \\\\u....          # 4-digit hex escapes\n    | \\\\x..            # 2-digit hex escapes\n    | \\\\[0-7]{1,3}     # Octal escapes\n    | \\\\N\\{[^}]+\\}     # Unicode characters by name\n    | \\\\[\\\\'\"abfnrtv]  # Single-character escapes\n    )''', re.UNICODE | re.VERBOSE)\n\ndef decode_escapes(s):\n    def decode_match(match):\n        return codecs.decode(match.group(0), 'unicode-escape')\n\n    return ESCAPE_SEQUENCE_RE.sub(decode_match, s)\n", 
          ">>> print(decode_escapes('Ern\u0151 \\\\t Rubik'))\nErn\u0151     Rubik\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 6, 
        "id": 37059682, 
        "snippets": [
          ">>> import codecs\n>>> myString = \"spam\\\\neggs\"\n>>> print(codecs.escape_decode(bytes(myString, \"utf-8\"))[0].decode(\"utf-8\"))\nspam\neggs\n>>> myString = \"na\u00efve \\\\t test\"\n>>> print(codecs.escape_decode(bytes(myString, \"utf-8\"))[0].decode(\"utf-8\"))\nna\u00efve    test\n"
        ]
      }
    ], 
    "title": "Process escape sequences in a string in Python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 21129020, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 282, 
        "id": 21190382, 
        "snippets": [
          "as3:/usr/local/lib/python2.7/site-packages# cat sitecustomize.py\n# encoding=utf8  \nimport sys  \n\nreload(sys)  \nsys.setdefaultencoding('utf8')\n", 
          "as3:~/ngokevin-site# python\nPython 2.7.6 (default, Dec  6 2013, 14:49:02)\n[GCC 4.4.5] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import sys\n>>> reload(sys)\n<module 'sys' (built-in)>\n>>> sys.getdefaultencoding()\n'utf8'\n>>>\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 142, 
        "id": 35444608, 
        "snippets": [
          ">>> my_u = u'my \u00fcnic\u00f4d\u00e9 str\u012fng'\n>>> type(my_u)\n<type 'unicode'>\n", 
          "unicode('\u20ac')                       # explicit conversion without encoding\nu\"The currency is: {}\".format('\u20ac') # new style format string into Unicode string - Python will try to convert value string to Unicode first\nu'The currency is: %s' % '\u20ac'       # old style format string into Unicode string - Python will try to convert value string to Unicode first\nu'The currency is: ' + '\u20ac'         # append string to Unicode - Python will try to convert string to Unicode first\n", 
          "u'Z\u00fcrich'\n", 
          "# encoding: utf-8\n", 
          "with io.open(\"my_utf8_file.txt\", \"r\", encoding=\"utf-8\") as my_file:\n     my_unicode_string = my_file.read() \n", 
          "charset='utf8',\nuse_unicode=True\n", 
          "psycopg2.extensions.register_type(psycopg2.extensions.UNICODE)\npsycopg2.extensions.register_type(psycopg2.extensions.UNICODEARRAY)\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 85, 
        "id": 21129492, 
        "snippets": [
          "source = unicode(source, 'utf-8')\n"
        ]
      }
    ], 
    "title": "How to fix: \"UnicodeDecodeError: 'ascii' codec can't decode byte\""
  }, 
  {
    "accepted_answer_post_id": 1857, 
    "id": 1854, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 391, 
        "id": 1857, 
        "snippets": [
          ">>> import os\n>>> print os.name\nposix\n>>> import platform\n>>> platform.system()\n'Linux'\n>>> platform.release()\n'2.6.22-15-generic'\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 122, 
        "id": 1871, 
        "snippets": [
          ">>> import os\n>>> os.name\n'nt'\n>>> import platform\n>>> platform.system()\n'Windows'\n>>> platform.release()\n'Vista'\n", 
          ">>> import os\n>>> os.name\n'nt'\n>>> import platform\n>>> platform.system()\n'Windows'\n>>> platform.release()\n'10'\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 95, 
        "id": 1879, 
        "snippets": [
          ">>> import os\n>>> os.name\n'posix'\n>>> import platform\n>>> platform.system()\n'Darwin'\n>>> platform.release()\n'8.11.1'\n"
        ]
      }
    ], 
    "title": "Python: What OS am I running on?"
  }, 
  {
    "accepted_answer_post_id": 613218, 
    "id": 613183, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 2329, 
        "id": 613218, 
        "snippets": [
          "import operator\nx = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\nsorted_x = sorted(x.items(), key=operator.itemgetter(1))\n", 
          "import operator\nx = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\nsorted_x = sorted(x.items(), key=operator.itemgetter(0))\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 670, 
        "id": 3177911, 
        "snippets": [
          "d = defaultdict(int)\nfor w in text.split():\n  d[w] += 1\n", 
          "for w in sorted(d, key=d.get, reverse=True):\n  print w, d[w]\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 375, 
        "id": 2258273, 
        "snippets": []
      }
    ], 
    "title": "Sort a Python dictionary by value"
  }, 
  {
    "accepted_answer_post_id": 31818069, 
    "id": 31818050, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 81, 
        "id": 31818069, 
        "snippets": [
          "int(round(x))\n", 
          "h = int(round(h))\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 5, 
        "id": 38115077, 
        "snippets": [
          ">>> round(32.268907563, 3)\n32.269\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 2, 
        "id": 38239574, 
        "snippets": [
          ">>> round(1.0005,3)\n1.0\n>>> round(2.0005,3)\n2.001\n>>> round(3.0005,3)\n3.001\n>>> round(4.0005,3)\n4.0\n>>> round(1.005,2)\n1.0\n>>> round(5.005,2)\n5.0\n>>> round(6.005,2)\n6.0\n>>> round(7.005,2)\n7.0\n>>> round(3.005,2)\n3.0\n>>> round(8.005,2)\n8.01\n", 
          ">>> round(0.075,2)\n\n0.07\n\n>>> round(0.075+10**(-2*5),2)\n\n0.08\n", 
          "def roundTraditional(val,digits):\n   return round(val+10**(-len(str(val))-1))\n"
        ]
      }
    ], 
    "title": "Python 2.7: round number to nearest integer"
  }, 
  {
    "accepted_answer_post_id": 3501408, 
    "id": 3501382, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 484, 
        "id": 3501408, 
        "snippets": [
          "isinstance( <var>, int )\n", 
          "isinstance( <var>, ( int, long ) )\n", 
          "class Spam( int ): pass\nx = Spam( 0 )\ntype( x ) == int # False\nisinstance( x, int ) # True\n", 
          "try:\n    x += 1\nexcept TypeError:\n    ...\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 41, 
        "id": 9266979, 
        "snippets": [
          "for index in range(y): \n    # do something\n    if (index/x.).is_integer():\n        # do something special\n", 
          ">>> float(5).is_integer()\nTrue\n>>> float(5.1).is_integer()\nFalse\n>>> float(5.0).is_integer()\nTrue\n", 
          "def is_int(val):\n    if type(val) == int:\n        return True\n    else:\n        if val.is_integer():\n            return True\n        else:\n            return False\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 35, 
        "id": 3646519, 
        "snippets": [
          ">>> import numbers\n>>> isinstance(3, numbers.Integral)\nTrue\n"
        ]
      }
    ], 
    "title": "Checking whether a variable is an integer or not"
  }, 
  {
    "accepted_answer_post_id": 89243, 
    "id": 89228, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 2242, 
        "id": 89243, 
        "snippets": [
          "from subprocess import call\ncall([\"ls\", \"-l\"])\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 1912, 
        "id": 92395, 
        "snippets": [
          "os.system(\"some_command < input_file | another_command > output_file\")  \n", 
          "print subprocess.Popen(\"echo Hello World\", shell=True, stdout=subprocess.PIPE).stdout.read()\n", 
          "print os.popen(\"echo Hello World\").read()\n", 
          "return_code = subprocess.call(\"echo Hello World\", shell=True)  \n", 
          "print subprocess.Popen(\"echo %s \" % user_input, stdout=PIPE).stdout.read()\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 156, 
        "id": 95246, 
        "snippets": [
          "import subprocess\n\np = subprocess.Popen('ls', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\nfor line in p.stdout.readlines():\n    print line,\nretval = p.wait()\n"
        ]
      }
    ], 
    "title": "Calling an external command in Python"
  }, 
  {
    "accepted_answer_post_id": 493399, 
    "id": 493386, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 1156, 
        "id": 493399, 
        "snippets": [
          "import sys\nsys.stdout.write('.')\n", 
          "sys.stdout.flush()\n", 
          "from __future__ import print_function\n", 
          "print('.', end=\"\")\n", 
          "print('.', end=\"\", flush=True)\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 169, 
        "id": 11685717, 
        "snippets": [
          ">>> for i in range(10):\n...     print i,\n... else:\n...     print\n...\n0 1 2 3 4 5 6 7 8 9\n>>> \n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 149, 
        "id": 493500, 
        "snippets": [
          ">>> strings = [ \"one\", \"two\", \"three\" ]\n>>>\n>>> for i in xrange(3):\n...     print \"Item %d: %s\" % (i, strings[i])\n...\nItem 0: one\nItem 1: two\nItem 2: three\n", 
          ">>> print \".\" * 10\n..........\n"
        ]
      }
    ], 
    "title": "How to print in Python without newline or space?"
  }, 
  {
    "accepted_answer_post_id": 311655, 
    "id": 311627, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 508, 
        "id": 311655, 
        "snippets": [
          "for date in mylist :\n    print str(date)\n", 
          "import datetime\nmylist = []\ntoday = datetime.date.today()\nmylist.append(today)\nprint mylist[0] # print the date object, not the container ;-)\n2008-11-22\n\n# It's better to always use str() because :\n\nprint \"This is a new day : \", mylist[0] # will work\nThis is a new day : 2008-11-22\n\nprint \"This is a new day : \" + mylist[0] # will crash\ncannot concatenate 'str' and 'datetime.date' objects\n\nprint \"This is a new day : \" + str(mylist[0]) \nThis is a new day : 2008-11-22\n", 
          "print today.strftime('We are the %d, %b %Y')\n'We are the 22, Nov 2008'\n", 
          "print \"We are the {:%d, %b %Y}\".format(today)\n'We are the 22, Nov 2008'\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 130, 
        "id": 14320620, 
        "snippets": [
          "import datetime\nprint datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M\")\n", 
          "import time\nprint time.strftime(\"%Y-%m-%d %H:%M\")\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 62, 
        "id": 18944849, 
        "snippets": [
          "    %a  Locale\u2019s abbreviated weekday name.\n    %A  Locale\u2019s full weekday name.      \n    %b  Locale\u2019s abbreviated month name.     \n    %B  Locale\u2019s full month name.\n    %c  Locale\u2019s appropriate date and time representation.   \n    %d  Day of the month as a decimal number [01,31].    \n    %f  Microsecond as a decimal number [0,999999], zero-padded on the left\n    %H  Hour (24-hour clock) as a decimal number [00,23].    \n    %I  Hour (12-hour clock) as a decimal number [01,12].    \n    %j  Day of the year as a decimal number [001,366].   \n    %m  Month as a decimal number [01,12].   \n    %M  Minute as a decimal number [00,59].      \n    %p  Locale\u2019s equivalent of either AM or PM.\n    %S  Second as a decimal number [00,61].\n    %U  Week number of the year (Sunday as the first day of the week)\n    %w  Weekday as a decimal number [0(Sunday),6].   \n    %W  Week number of the year (Monday as the first day of the week)\n    %x  Locale\u2019s appropriate date representation.    \n    %X  Locale\u2019s appropriate time representation.    \n    %y  Year without century as a decimal number [00,99].    \n    %Y  Year with century as a decimal number.   \n    %z  UTC offset in the form +HHMM or -HHMM.\n    %Z  Time zone name (empty string if the object is naive).    \n    %%  A literal '%' character.\n", 
          "    import time\n    import datetime\n\n    print \"Time in seconds since the epoch: %s\" %time.time()\n    print \"Current date and time: \" , datetime.datetime.now()\n    print \"Or like this: \" ,datetime.datetime.now().strftime(\"%y-%m-%d-%H-%M\")\n\n\n    print \"Current year: \", datetime.date.today().strftime(\"%Y\")\n    print \"Month of year: \", datetime.date.today().strftime(\"%B\")\n    print \"Week number of the year: \", datetime.date.today().strftime(\"%W\")\n    print \"Weekday of the week: \", datetime.date.today().strftime(\"%w\")\n    print \"Day of year: \", datetime.date.today().strftime(\"%j\")\n    print \"Day of the month : \", datetime.date.today().strftime(\"%d\")\n    print \"Day of week: \", datetime.date.today().strftime(\"%A\")\n", 
          "    Time in seconds since the epoch:    1349271346.46\n    Current date and time:              2012-10-03 15:35:46.461491\n    Or like this:                       12-10-03-15-35\n    Current year:                       2012\n    Month of year:                      October\n    Week number of the year:            40\n    Weekday of the week:                3\n    Day of year:                        277\n    Day of the month :                  03\n    Day of week:                        Wednesday\n"
        ]
      }
    ], 
    "title": "How to print date in a regular format in Python?"
  }, 
  {
    "accepted_answer_post_id": 1024851, 
    "id": 1024847, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 1633, 
        "id": 1024851, 
        "snippets": [
          ">>> d = {'key':'value'}\n>>> print d\n{'key': 'value'}\n>>> d['mynewkey'] = 'mynewvalue'\n>>> print d\n{'mynewkey': 'mynewvalue', 'key': 'value'}\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 667, 
        "id": 1165836, 
        "snippets": [
          ">>> x = {1:2}\n>>> print x\n{1: 2}\n\n>>> x.update({3:4})\n>>> print x\n{1: 2, 3: 4}\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 272, 
        "id": 8381589, 
        "snippets": [
          "### Making a dictionary ###\n\ndata = {}\n# OR\ndata = dict()\n\n### Initially adding values ###\n\ndata = {'a':1,'b':2,'c':3}\n# OR\ndata = dict(a=1, b=2, c=3)\n\n### Inserting/Updating value ###\n\ndata['a']=1  # updates if 'a' exists, else adds 'a'\n# OR\ndata.update({'a':1})\n# OR\ndata.update(dict(a=1))\n# OR\ndata.update(a=1)\n\n### Merging 2 dictionaries ###\n\ndata.update(data2)  # Where data2 is also a dict.\n\n### Deleting items in dictionary ###\n\ndel data[key] #Remove specific element in a dictionary\ndata.pop(key) #Removes the key & returns the value\ndata.clear() #Clear entire dictionary\n"
        ]
      }
    ], 
    "title": "Add key to a dictionary in Python?"
  }, 
  {
    "accepted_answer_post_id": 120701, 
    "id": 120656, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 505, 
        "id": 120701, 
        "snippets": [
          "import os\n\nfor dirname, dirnames, filenames in os.walk('.'):\n    # print path to all subdirectories first.\n    for subdirname in dirnames:\n        print(os.path.join(dirname, subdirname))\n\n    # print path to all filenames.\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n    # Advanced usage:\n    # editing the 'dirnames' list will stop os.walk() from recursing into there.\n    if '.git' in dirnames:\n        # don't go into any .git directories.\n        dirnames.remove('.git')\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 373, 
        "id": 120676, 
        "snippets": [
          "os.listdir(path)\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 74, 
        "id": 120692, 
        "snippets": [
          "import os\n\nfor filename in os.listdir(\"C:\\\\temp\"):\n    print  filename\n"
        ]
      }
    ], 
    "title": "Directory listing in Python"
  }, 
  {
    "accepted_answer_post_id": 1823101, 
    "id": 1823058, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 959, 
        "id": 10742904, 
        "snippets": [
          "\"{:,}\".format(value)\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 214, 
        "id": 1823101, 
        "snippets": [
          ">>> import locale\n>>> locale.setlocale(locale.LC_ALL, 'en_US')\n'en_US'\n>>> locale.format(\"%d\", 1255000, grouping=True)\n'1,255,000'\n", 
          "def intWithCommas(x):\n    if type(x) not in [type(0), type(0L)]:\n        raise TypeError(\"Parameter must be an integer.\")\n    if x < 0:\n        return '-' + intWithCommas(-x)\n    result = ''\n    while x >= 1000:\n        x, r = divmod(x, 1000)\n        result = \",%03d%s\" % (r, result)\n    return \"%d%s\" % (x, result)\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 81, 
        "id": 1823189, 
        "snippets": [
          "def group(number):\n    s = '%d' % number\n    groups = []\n    while s and s[-1].isdigit():\n        groups.append(s[-3:])\n        s = s[:-3]\n    return s + ','.join(reversed(groups))\n\n>>> group(-23432432434.34)\n'-23,432,432,434'\n", 
          ">>> '{:20,.2f}'.format(f)\n'18,446,744,073,709,551,616.00'\n", 
          ">>> format(1234567, ',d')\n'1,234,567'\n"
        ]
      }
    ], 
    "title": "How to print number with commas as thousands separators?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 2150739, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 86, 
        "id": 28147286, 
        "snippets": [
          "import datetime\ndatetime.datetime.now().isoformat()\n", 
          "import datetime\ndatetime.datetime.utcnow().isoformat()\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 37, 
        "id": 15142736, 
        "snippets": [
          "datetime.isoformat([sep])\n\nReturn a string representing the date and time in ISO 8601 format, YYYY-MM-DDTHH:MM:SS.mmmmmm or, if microsecond is 0, YYYY-MM-DDTHH:MM:SS\n\nIf utcoffset() does not return None, a 6-character string is appended, giving the UTC offset in (signed) hours and minutes: YYYY-MM-DDTHH:MM:SS.mmmmmm+HH:MM or, if microsecond is 0 YYYY-MM-DDTHH:MM:SS+HH:MM\n\nThe optional argument sep (default 'T') is a one-character separator, placed between the date and time portions of the result. For example,\n>>>\n\n>>> from datetime import tzinfo, timedelta, datetime\n>>> class TZ(tzinfo):\n...     def utcoffset(self, dt): return timedelta(minutes=-399)\n...\n>>> datetime(2002, 12, 25, tzinfo=TZ()).isoformat(' ')\n'2002-12-25 00:00:00-06:39'\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 29, 
        "id": 4462893, 
        "snippets": [
          "2010-12-16 17:22:15\n20101216T172215\n", 
          ">>> from time import strftime\n>>> strftime(\"%Y-%m-%d %H:%M:%S\")\n'2010-03-03 21:16:45'\n", 
          ">>> from datetime import datetime\n>>> datetime.strptime(\"2010-06-04 21:08:12\", \"%Y-%m-%d %H:%M:%S\")\ndatetime.datetime(2010, 6, 4, 21, 8, 12)\n", 
          ">>> from mx.DateTime.ISO import ParseDateTimeUTC\n>>> from datetime import datetime\n>>> x = ParseDateTimeUTC(\"2010-06-04 21:08:12\")\n>>> datetime.fromtimestamp(x)\ndatetime.datetime(2010, 3, 6, 21, 8, 12)\n"
        ]
      }
    ], 
    "title": "ISO Time (ISO 8601) in Python?"
  }, 
  {
    "accepted_answer_post_id": 4641871, 
    "id": 4641765, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 12, 
        "id": 4641797, 
        "snippets": [
          "foo = [1,2,3,4,5]\nfoo.append( 4 )\nfoo.append( [8,7] )    \nprint(foo)            #[1, 2, 3, 4, 5, 4, [8, 7]]\n", 
          "foo = [1,2,3,4,5]\nfoo[3] = foo[3] + 4     \nprint(foo)            #[1,2,3,8,5]\n", 
          "x = [2,5,10]\nx.insert(2, 77)\nprint(x)              #[2, 5, 77, 10]\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 6, 
        "id": 4641871, 
        "snippets": [
          ">>> L = [0, 0, 0, 0]\n>>> things_to_add = ({'idx':1, 'amount': 1}, {'idx': 2, 'amount': 1})\n>>> for item in things_to_add:\n...     L[item['idx']] += item['amount']\n... \n>>> L\n[0, 1, 1, 0]\n", 
          ">>> L = [0, 0, 0, 0]\n>>> things_to_add = [0, 1, 1, 0]\n>>> for idx, amount in enumerate(things_to_add):\n...     L[idx] += amount\n... \n>>> L\n[0, 1, 1, 0]\n", 
          "L[:] = [sum(i) for i in zip(L, things_to_add)]\n", 
          ">>> things_to_add = [(1, 1), (2, 1)]\n>>> for idx, amount in things_to_add:\n...     L[idx] += amount\n... \n>>> L\n[0, 1, 1, 0]\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 1, 
        "id": 4641787, 
        "snippets": [
          "fooList = [1,3,348,2]\nfooList.append(3)\nfooList.append(2734)\nprint(fooList) # [1,3,348,2,3,2734]\n"
        ]
      }
    ], 
    "title": "Add to integers in a list"
  }, 
  {
    "accepted_answer_post_id": 1747827, 
    "id": 1747817, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 1250, 
        "id": 1747827, 
        "snippets": [
          "d = dict((key, value) for (key, value) in iterable)\n", 
          "d = {key: value for (key, value) in iterable}\n", 
          "d = {value: foo(value) for value in sequence if bar(value)}\n\ndef key_value_gen(k):\n   yield chr(k+65)\n   yield chr((k+13)%26+65)\nd = dict(map(key_value_gen, range(26)))\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 143, 
        "id": 1747888, 
        "snippets": [
          "d = {k:v for k, v in iterable}\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 21, 
        "id": 16863042, 
        "snippets": [
          ">>> ts = [(1, 2), (3, 4), (5, 6)]\n>>> dict(ts)\n{1: 2, 3: 4, 5: 6}\n>>> gen = ((i, i+1) for i in range(1, 6, 2))\n>>> gen\n<generator object <genexpr> at 0xb7201c5c>\n>>> dict(gen)\n{1: 2, 3: 4, 5: 6}\n"
        ]
      }
    ], 
    "title": "Create a dictionary with list comprehension in Python"
  }, 
  {
    "accepted_answer_post_id": 2793341, 
    "id": 2793324, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 589, 
        "id": 2793341, 
        "snippets": [
          ">>> a = ['a', 'b', 'c', 'd']\n>>> a.remove('b')\n>>> print a\n['a', 'c', 'd']\n", 
          ">>> a = [1, 2, 3, 4, 2, 3, 4, 2, 7, 2]\n>>> a = [x for x in a if x != 2]\n>>> print a\n[1, 3, 4, 3, 4, 7]\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 85, 
        "id": 2793356, 
        "snippets": [
          "if c in a:\n    a.remove(c)\n", 
          "try:\n    a.remove(c)\nexcept ValueError:\n    pass\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 40, 
        "id": 2793345, 
        "snippets": [
          "a=[1,2,3,4]\nif 6 in a:\n    a.remove(6)\n", 
          "try:\n    a.remove(6)\nexcept:\n    pass\n"
        ]
      }
    ], 
    "title": "Is there a simple way to delete a list element by value in python?"
  }, 
  {
    "accepted_answer_post_id": 3523128, 
    "id": 3523048, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 31, 
        "id": 3523128, 
        "snippets": [
          "final_choices = (another_choice,) + my_choices\n", 
          "my_choices=[\n     ('1','first choice'),\n     ('2','second choice'),\n     ('3','third choice')\n]\n", 
          "my_choices.insert(0, another_choice)\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 6, 
        "id": 3523139, 
        "snippets": [
          ">>> foo = ((1,),(2,),(3,))\n>>> foo = ((0,),) + foo\n>>> foo\n((0,), (1,), (2,), (3,))\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 2, 
        "id": 3523150, 
        "snippets": [
          "\nfinal_choices = (another_choice,) + my_choices\n"
        ]
      }
    ], 
    "title": "Add another tuple to a tuple of tuples"
  }, 
  {
    "accepted_answer_post_id": 123212, 
    "id": 123198, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 992, 
        "id": 123212, 
        "snippets": [
          "from shutil import copyfile\n\ncopyfile(src, dst)\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 286, 
        "id": 123238, 
        "snippets": [
          "import shutil\nshutil.copy2('/dir/file.ext', '/new/dir/newname.ext')\n", 
          "shutil.copy2('/dir/file.ext', '/new/dir')\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 140, 
        "id": 30359308, 
        "snippets": [
          "-------------------------------------------------------------------------\n| Function          |Copies Metadata|Copies Permissions|Can Specify Buffer|\n-------------------------------------------------------------------------\n| shutil.copy       |      No       |        Yes       |        No        |\n-------------------------------------------------------------------------\n| shutil.copyfile   |      No       |         No       |        No        |\n-------------------------------------------------------------------------\n| shutil.copy2      |     Yes       |        Yes       |        No        |\n-------------------------------------------------------------------------\n| shutil.copyfileobj|      No       |         No       |       Yes        |\n-------------------------------------------------------------------------\n"
        ]
      }
    ], 
    "title": "How do I copy a file in python?"
  }, 
  {
    "accepted_answer_post_id": 1602964, 
    "id": 1602934, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 1292, 
        "id": 1602964, 
        "snippets": [
          "d = dict()\n\nfor i in xrange(100):\n    key = i % 10\n    if key in d:\n        d[key] += 1\n    else:\n        d[key] = 1\n", 
          "d = dict()\n\nfor i in xrange(100):\n    key = i % 10\n    d[key] = d.get(key, 0) + 1\n", 
          "from collections import defaultdict\n\nd = defaultdict(lambda: 0)\n\nfor i in xrange(100):\n    d[i % 10] += 1\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 616, 
        "id": 1602944, 
        "snippets": [
          "if 'key1' in dict:\n  print \"blah\"\nelse:\n  print \"boo\"\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 183, 
        "id": 1602990, 
        "snippets": [
          "d = {'a': 1, 'b': 2}\n'a' in d # <== evaluates to True\n'c' in d # <== evaluates to False\n"
        ]
      }
    ], 
    "title": "Check if a given key already exists in a dictionary"
  }, 
  {
    "accepted_answer_post_id": 9573259, 
    "id": 9573244, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 772, 
        "id": 9573259, 
        "snippets": [
          "if not myString:\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 163, 
        "id": 9573283, 
        "snippets": [
          "if not some_string:\n", 
          "if some_string:\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 93, 
        "id": 9573278, 
        "snippets": [
          "if not my_string:\n", 
          " >>> bool(\"\")\n False\n >>> bool(\"   \")\n True\n >>> bool(\"   \".strip())\n False\n"
        ]
      }
    ], 
    "title": "Most elegant way to check if the string is empty in Python?"
  }, 
  {
    "accepted_answer_post_id": 743823, 
    "id": 743806, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 205, 
        "id": 743807, 
        "snippets": [
          "words = text.split()      \n", 
          "words = text.split(\",\")   \n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 186, 
        "id": 743823, 
        "snippets": [
          "text.split()\n", 
          "words.append(word)\n", 
          "word.append(words)\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 47, 
        "id": 743824, 
        "snippets": [
          ">>> line=\"a sentence with a few words\"\n>>> line.split()\n['a', 'sentence', 'with', 'a', 'few', 'words']\n>>> \n"
        ]
      }
    ], 
    "title": "Split string into a list in Python"
  }, 
  {
    "accepted_answer_post_id": 518038, 
    "id": 518021, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 734, 
        "id": 518038, 
        "snippets": [
          "my_list = [1,2,3,4,5]\nlen(my_list)\n", 
          "my_tuple = (1,2,3,4,5)\nlen(my_tuple)\n", 
          "my_string = 'hello world'\nlen(my_string)\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 32, 
        "id": 518061, 
        "snippets": [
          "l = [1,2,3,4]\ns = 'abcde'\nlen(l) #returns 4\nlen(s) #returns 5\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 19, 
        "id": 518053, 
        "snippets": []
      }
    ], 
    "title": "Getting the length of an array in Python"
  }, 
  {
    "accepted_answer_post_id": 19343, 
    "id": 19339, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 447, 
        "id": 19343, 
        "snippets": [
          ">>> zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])\n[('a', 'b', 'c', 'd'), (1, 2, 3, 4)]\n", 
          "zip(('a', 1), ('b', 2), ('c', 3), ('d', 4))\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 18, 
        "id": 25193, 
        "snippets": [
          "result = ([ a for a,b in original ], [ b for a,b in original ])\n", 
          "result = (( a for a,b in original ), ( b for a,b in original ))\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 15, 
        "id": 4578299, 
        "snippets": [
          ">>> zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])\n[('a', 'b', 'c', 'd'), (1, 2, 3, 4)]\n", 
          ">>> zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )])\n[('a', 'b', 'c', 'd', 'e')]\n", 
          ">>> map(None, *[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )])\n[('a', 'b', 'c', 'd', 'e'), (1, 2, 3, 4, None)]\n"
        ]
      }
    ], 
    "title": "Transpose/Unzip Function (inverse of zip)?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 510348, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 1218, 
        "id": 510351, 
        "snippets": [
          "import time\ntime.sleep(5) # delays for 5 seconds\n", 
          "import time \nwhile True:\n    print \"This prints once a minute.\"\n    time.sleep(60)  # Delay for 1 minute (60 seconds)\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 339, 
        "id": 64486, 
        "snippets": [
          "from time import sleep\nsleep(0.1) # Time in seconds.\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 45, 
        "id": 510356, 
        "snippets": [
          "import time\ntime.sleep(60)\n", 
          "time.sleep(time.localtime(time.time())[5])\n", 
          "import time\ntime.sleep(0.1) \n"
        ]
      }
    ], 
    "title": "How can I make a time delay in Python?"
  }, 
  {
    "accepted_answer_post_id": 2151553, 
    "id": 2151517, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 56, 
        "id": 2151553, 
        "snippets": [
          ">>> results_list = [[1,2,3], [1,2,4]]\n>>> results_union = set().union(*results_list)\n>>> print results_union\nset([1, 2, 3, 4])\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 8, 
        "id": 2152138, 
        "snippets": [
          "   import itertools\n\n   ...\n\n   return list(set(itertools.chain(*result_list)))\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 3, 
        "id": 2151551, 
        "snippets": []
      }
    ], 
    "title": "Pythonic Way to Create Union of All Values Contained in Multiple Lists"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 82831, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 2437, 
        "id": 82852, 
        "snippets": [
          "import os.path\nos.path.isfile(fname) \n", 
          "from pathlib import Path\n\nmy_file = Path(\"/path/to/file\")\nif my_file.is_file():\n    # file exists\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 991, 
        "id": 82846, 
        "snippets": [
          "import os.path\nos.path.exists(file_path)\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 650, 
        "id": 84173, 
        "snippets": [
          ">>> print os.path.isfile(\"/etc/password.txt\")\nTrue\n>>> print os.path.isfile(\"/etc\")\nFalse\n>>> print os.path.isfile(\"/does/not/exist\")\nFalse\n>>> print os.path.exists(\"/etc/password.txt\")\nTrue\n>>> print os.path.exists(\"/etc\")\nTrue\n>>> print os.path.exists(\"/does/not/exist\")\nFalse\n"
        ]
      }
    ], 
    "title": "How do I check whether a file exists using Python?"
  }, 
  {
    "accepted_answer_post_id": 510364, 
    "id": 510357, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 116, 
        "id": 510364, 
        "snippets": [
          "class _Getch:\n    \"\"\"Gets a single character from standard input.  Does not echo to the\nscreen.\"\"\"\n    def __init__(self):\n        try:\n            self.impl = _GetchWindows()\n        except ImportError:\n            self.impl = _GetchUnix()\n\n    def __call__(self): return self.impl()\n\n\nclass _GetchUnix:\n    def __init__(self):\n        import tty, sys\n\n    def __call__(self):\n        import sys, tty, termios\n        fd = sys.stdin.fileno()\n        old_settings = termios.tcgetattr(fd)\n        try:\n            tty.setraw(sys.stdin.fileno())\n            ch = sys.stdin.read(1)\n        finally:\n            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)\n        return ch\n\n\nclass _GetchWindows:\n    def __init__(self):\n        import msvcrt\n\n    def __call__(self):\n        import msvcrt\n        return msvcrt.getch()\n\n\ngetch = _Getch()\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 58, 
        "id": 510404, 
        "snippets": [
          "sys.stdin.read(1)\n", 
          "class _Getch:\n    \"\"\"Gets a single character from standard input.  Does not echo to the screen.\"\"\"\n    def __init__(self):\n        try:\n            self.impl = _GetchWindows()\n        except ImportError:\n            self.impl = _GetchUnix()\n\n    def __call__(self): return self.impl()\n\n\nclass _GetchUnix:\n    def __init__(self):\n        import tty, sys\n\n    def __call__(self):\n        import sys, tty, termios\n        fd = sys.stdin.fileno()\n        old_settings = termios.tcgetattr(fd)\n        try:\n            tty.setraw(sys.stdin.fileno())\n            ch = sys.stdin.read(1)\n        finally:\n            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)\n        return ch\n\n\nclass _GetchWindows:\n    def __init__(self):\n        import msvcrt\n\n    def __call__(self):\n        import msvcrt\n        return msvcrt.getch()\n\n\ngetch = _Getch()\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 36, 
        "id": 21659588, 
        "snippets": [
          "def _find_getch():\n    try:\n        import termios\n    except ImportError:\n        # Non-POSIX. Return msvcrt's (Windows') getch.\n        import msvcrt\n        return msvcrt.getch\n\n    # POSIX system. Create and return a getch that manipulates the tty.\n    import sys, tty\n    def _getch():\n        fd = sys.stdin.fileno()\n        old_settings = termios.tcgetattr(fd)\n        try:\n            tty.setraw(fd)\n            ch = sys.stdin.read(1)\n        finally:\n            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)\n        return ch\n\n    return _getch\n\ngetch = _find_getch()\n"
        ]
      }
    ], 
    "title": "Python read a single character from the user"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 1450393, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 645, 
        "id": 1454400, 
        "snippets": [
          "import fileinput\n\nfor line in fileinput.input():\n    pass\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 440, 
        "id": 1450398, 
        "snippets": []
      }, 
      {
        "rank": 2, 
        "score": 216, 
        "id": 3289051, 
        "snippets": [
          "import sys\n\nfor line in sys.stdin:\n    print line\n"
        ]
      }
    ], 
    "title": "How do you read from stdin in Python?"
  }, 
  {
    "accepted_answer_post_id": 2759130, 
    "id": 2759067, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 460, 
        "id": 2759130, 
        "snippets": [
          "$ ls\ncheese_cheese_type.bar  cheese_cheese_type.foo\n$ python\n>>> import os\n>>> for filename in os.listdir(\".\"):\n...  if filename.startswith(\"cheese_\"):\n...    os.rename(filename, filename[7:])\n... \n>>> \n$ ls\ncheese_type.bar  cheese_type.foo\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 29, 
        "id": 2759103, 
        "snippets": [
          "#!/usr/bin/env python\nfrom os import rename, listdir\n\nbadprefix = \"cheese_\"\nfnames = listdir('.')\n\nfor fname in fnames:\n    if fname.startswith(badprefix*2):\n        rename(fname, fname.replace(badprefix, '', 1))\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 11, 
        "id": 2759308, 
        "snippets": [
          "from glob import glob\nfrom os import rename\nfor fname in glob('*.prj'):\n    rename(fname, fname[8:])\n"
        ]
      }
    ], 
    "title": "Rename Files in Python"
  }, 
  {
    "accepted_answer_post_id": 15411146, 
    "id": 15411107, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 239, 
        "id": 15411146, 
        "snippets": [
          " mydict.pop(\"key\", None)\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 5, 
        "id": 15411148, 
        "snippets": [
          "try:\n    del mydict[key]\nexcept KeyError:\n    pass\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 4, 
        "id": 15411416, 
        "snippets": [
          "keys_to_remove = set(keys).intersection(set(mydict.keys()))\nfor key in keys_to_remove:\n    del mydict[key]\n", 
          "keys_to_keep = set(mydict.keys()) - set(keys)\nnew_dict = {k: v for k, v in mydict.iteritems() if k in keys_to_keep}\n", 
          "keys_to_keep = set(mydict.keys()) - set(keys)\nnew_dict = {k: mydict[k] for k in keys_to_keep}\n"
        ]
      }
    ], 
    "title": "Delete a dictionary item if the key exists"
  }, 
  {
    "accepted_answer_post_id": 466376, 
    "id": 466345, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 1420, 
        "id": 466376, 
        "snippets": [
          "from datetime import datetime\n\ndate_object = datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 435, 
        "id": 466366, 
        "snippets": []
      }, 
      {
        "rank": 2, 
        "score": 413, 
        "id": 470303, 
        "snippets": [
          "from dateutil import parser\ndt = parser.parse(\"Aug 28 1999 12:00AM\")\n", 
          "pip install python-dateutil\n"
        ]
      }
    ], 
    "title": "Converting string into datetime"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 13368659, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 4, 
        "id": 13368679, 
        "snippets": [
          "for i in range(256):\n    for j in range(256):\n        ip = \"192.168.%d.%d\" % (i, j)\n        print ip\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 4, 
        "id": 13368863, 
        "snippets": [
          "for i,j in product(range(256),range(256)):\n    print \"192.168.{0}.{1}\".format(i,j)\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 2, 
        "id": 33801373, 
        "snippets": [
          "from netaddr import iter_iprange\ngenerator = iter_iprange('192.168.1.1', '192.168.255.255', step=1)\ngenerator.next() # 192.168.1.1\ngenerator.next() # 192.168.1.2\n"
        ]
      }
    ], 
    "title": "How can I loop through an IP address range in python"
  }, 
  {
    "accepted_answer_post_id": 10973638, 
    "id": 10973614, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 47, 
        "id": 10973638, 
        "snippets": [
          "import json\n\narray = '{\"fruits\": [\"apple\", \"banana\", \"orange\"]}'\ndata  = json.loads(array)\nprint data['fruits']\n# the print displays:\n# [u'apple', u'banana', u'orange']\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 7, 
        "id": 10973648, 
        "snippets": [
          "\nimport json\narray = '{\"fruits\": [\"apple\", \"banana\", \"orange\"]}'\ndata  = json.loads(array)\nfruits_list = data['fruits']\nprint fruits_list\n"
        ]
      }
    ], 
    "title": "Convert JSON array to Python list"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 4135344, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 13, 
        "id": 4136113, 
        "snippets": []
      }, 
      {
        "rank": 1, 
        "score": 4, 
        "id": 31117621, 
        "snippets": [
          "# Ubuntu\napt-get install wkhtmltopdf\n", 
          "pip install pdfkit\npip install markdown\n", 
          "from markdown import markdown\nimport pdfkit\n\ninput_filename = 'README.md'\noutput_filename = 'README.pdf'\n\nwith open(input_filename, 'r') as f:\n    html_text = markdown(f.read(), output_format='html4')\n\npdfkit.from_string(html_text, output_filename)\n"
        ]
      }
    ], 
    "title": "Is there any direct way to generate pdf from markdown file by python"
  }, 
  {
    "accepted_answer_post_id": 8177090, 
    "id": 8177079, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 160, 
        "id": 8177090, 
        "snippets": [
          "list2.extend(list1)\n", 
          "list2.append(list1)\n", 
          ">>> a = range(5)\n>>> b = range(3)\n>>> c = range(2)\n>>> b.append(a)\n>>> b\n[0, 1, 2, [0, 1, 2, 3, 4]]\n>>> c.extend(a)\n>>> c\n[0, 1, 0, 1, 2, 3, 4]\n", 
          "for line in mylog:\n    list1.append(line)\n", 
          "list1.extend(mylog)\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 5, 
        "id": 8177108, 
        "snippets": [
          ">>> import itertools\n>>> p = ['a', 'b', 'c']\n>>> q = ['d', 'e', 'f']\n>>> r = ['g', 'h', 'i']\n>>> for x in itertools.chain(p, q, r):\n        print x.upper()\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 2, 
        "id": 8177126, 
        "snippets": [
          "for logs in mydir:\n\n    for line in mylog:\n        #...if the conditions are met\n        list1.append(line)\n\n    if any(True for line in list1 if \"string\" in line):\n        list2.extend(list1)\n    del list1\n\n    ....\n"
        ]
      }
    ], 
    "title": "Python: take the content of a list and append it to another list"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 455612, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 705, 
        "id": 455634, 
        "snippets": [
          "  >>> 125650429603636838/(2**53)\n  13.949999999999999\n\n  >>> 234042163/(2**24)\n  13.949999988079071\n\n  >>> a=13.946\n  >>> print(a)\n  13.946\n  >>> print(\"%.2f\" % a)\n  13.95\n  >>> round(a,2)\n  13.949999999999999\n  >>> print(\"%.2f\" % round(a,2))\n  13.95\n  >>> print(\"{0:.2f}\".format(a))\n  13.95\n  >>> print(\"{0:.2f}\".format(round(a,2)))\n  13.95\n  >>> print(\"{0:.15f}\".format(round(a,2)))\n  13.949999999999999\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 256, 
        "id": 6539677, 
        "snippets": [
          "\"{0:.2f}\".format(13.949999999999999)\n", 
          "float(\"{0:.2f}\".format(13.949999999999999))\n", 
          ">>> x = 13.949999999999999999\n>>> x\n13.95\n>>> g = float(\"{0:.2f}\".format(x))\n>>> g\n13.95\n>>> x == g\nTrue\n>>> h = round(x, 2)\n>>> h\n13.95\n>>> x == h\nTrue\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 70, 
        "id": 455678, 
        "snippets": [
          ">>> \"%.2f\" % 3.14159\n'3.14'\n>>> \"%.2f\" % 13.9499999\n'13.95'\n"
        ]
      }
    ], 
    "title": "Limiting floats to two decimal points"
  }, 
  {
    "accepted_answer_post_id": 73673, 
    "id": 73663, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 663, 
        "id": 73673, 
        "snippets": [
          "import sys\nsys.exit()\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 93, 
        "id": 14836329, 
        "snippets": [
          "#do stuff\nif this == that:\n  quit()\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 73, 
        "id": 73680, 
        "snippets": [
          "raise SystemExit\n"
        ]
      }
    ], 
    "title": "Terminating a Python script"
  }, 
  {
    "accepted_answer_post_id": 319435, 
    "id": 319426, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 319, 
        "id": 319435, 
        "snippets": [
          "string1 = 'Hello'\nstring2 = 'hello'\n\nif string1.lower() == string2.lower():\n    print \"The strings are the same (case insensitive)\"\nelse:\n    print \"The strings are not the same (case insensitive)\"\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 211, 
        "id": 29247821, 
        "snippets": [
          "\"\u00df\".lower()\n#>>> '\u00df'\n\n\"\u00df\".upper().lower()\n#>>> 'ss'\n", 
          "help(str.casefold)\n#>>> Help on method_descriptor:\n#>>>\n#>>> casefold(...)\n#>>>     S.casefold() -> str\n#>>>     \n#>>>     Return a version of S suitable for caseless comparisons.\n#>>>\n", 
          "\"\u00ea\" == \"e\u0302\"\n#>>> False\n", 
          "import unicodedata\n\n[unicodedata.name(char) for char in \"\u00ea\"]\n#>>> ['LATIN SMALL LETTER E WITH CIRCUMFLEX']\n\n[unicodedata.name(char) for char in \"e\u0302\"]\n#>>> ['LATIN SMALL LETTER E', 'COMBINING CIRCUMFLEX ACCENT']\n", 
          "unicodedata.normalize(\"NFKD\", \"\u00ea\") == unicodedata.normalize(\"NFKD\", \"e\u0302\")\n#>>> True\n", 
          "import unicodedata\n\ndef normalize_caseless(text):\n    return unicodedata.normalize(\"NFKD\", text.casefold())\n\ndef caseless_equal(left, right):\n    return normalize_caseless(left) == normalize_caseless(right)\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 45, 
        "id": 11573384, 
        "snippets": [
          "string1.lower() == string2.lower()\n", 
          ">>> utf8_bytes = open(\"unicode.txt\", 'r').read()\n>>> print repr(utf8_bytes)\n'\\xce\\xa3\\xce\\xaf\\xcf\\x83\\xcf\\x85\\xcf\\x86\\xce\\xbf\\xcf\\x82\\n\\xce\\xa3\\xce\\x8a\\xce\\xa3\\xce\\xa5\\xce\\xa6\\xce\\x9f\\xce\\xa3\\n'\n>>> u = utf8_bytes.decode('utf8')\n>>> print u\n\u03a3\u03af\u03c3\u03c5\u03c6\u03bf\u03c2\n\u03a3\u038a\u03a3\u03a5\u03a6\u039f\u03a3\n\n>>> first, second = u.splitlines()\n>>> print first.lower()\n\u03c3\u03af\u03c3\u03c5\u03c6\u03bf\u03c2\n>>> print second.lower()\n\u03c3\u03af\u03c3\u03c5\u03c6\u03bf\u03c3\n>>> first.lower() == second.lower()\nFalse\n>>> first.upper() == second.upper()\nTrue\n", 
          ">>> s = open('unicode.txt', encoding='utf8').read()\n>>> print(s)\n\u03a3\u03af\u03c3\u03c5\u03c6\u03bf\u03c2\n\u03a3\u038a\u03a3\u03a5\u03a6\u039f\u03a3\n\n>>> first, second = s.splitlines()\n>>> print(first.lower())\n\u03c3\u03af\u03c3\u03c5\u03c6\u03bf\u03c2\n>>> print(second.lower())\n\u03c3\u03af\u03c3\u03c5\u03c6\u03bf\u03c2\n>>> first.lower() == second.lower()\nTrue\n>>> first.upper() == second.upper()\nTrue\n"
        ]
      }
    ], 
    "title": "How do I do a case insensitive string comparison in Python?"
  }, 
  {
    "accepted_answer_post_id": 13107, 
    "id": 1476, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 220, 
        "id": 13107, 
        "snippets": [
          ">>> 0b101111\n47\n", 
          ">>> bin(173)\n'0b10101101'\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 61, 
        "id": 1484, 
        "snippets": [
          ">>> print int('01010101111',2)\n687\n>>> print int('11111111',2)\n255\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 5, 
        "id": 37226387, 
        "snippets": [
          ">>> 0b0010101010\n170\n>>> 0B010101\n21\n", 
          "integer      ::=  decinteger | bininteger | octinteger | hexinteger\ndecinteger   ::=  nonzerodigit ([\"_\"] digit)* | \"0\"+ ([\"_\"] \"0\")*\nbininteger   ::=  \"0\" (\"b\" | \"B\") ([\"_\"] bindigit)+\noctinteger   ::=  \"0\" (\"o\" | \"O\") ([\"_\"] octdigit)+\nhexinteger   ::=  \"0\" (\"x\" | \"X\") ([\"_\"] hexdigit)+\nnonzerodigit ::=  \"1\"...\"9\"\ndigit        ::=  \"0\"...\"9\"\nbindigit     ::=  \"0\" | \"1\"\noctdigit     ::=  \"0\"...\"7\"\nhexdigit     ::=  digit | \"a\"...\"f\" | \"A\"...\"F\"\n", 
          "7     2147483647                        0o177    0b100110111\n3     79228162514264337593543950336     0o377    0xdeadbeef\n      100_000_000_000                   0b_1110_0101\n", 
          ">>> int('010101', 2)\n21\n", 
          ">>> int('0b0010101010', 2)\n170\n", 
          ">>> int('10101', 0)\n10101\n>>> int('0b10101', 0)\n21\n", 
          ">>> bin(21)\n'0b10101'\n", 
          ">>> bin(int('010101', 2))\n'0b10101'\n", 
          ">>> format(int('010101', 2), '{fill}{width}b'.format(width=10, fill=0))\n'0000010101'\n>>> format(int('010101', 2), '010b')\n'0000010101'\n"
        ]
      }
    ], 
    "title": "How do you express binary literals in Python?"
  }, 
  {
    "accepted_answer_post_id": 43663, 
    "id": 42950, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 639, 
        "id": 43663, 
        "snippets": [
          ">>> import calendar\n>>> calendar.monthrange(2002,1)\n(1, 31)\n>>> calendar.monthrange(2008,2)\n(4, 29)\n>>> calendar.monthrange(2100,2)\n(0, 28)\n", 
          "calendar.monthrange(year, month)[1]\n", 
          ">>> from calendar import monthrange\n>>> monthrange(2012, 2)\n(2, 29)\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 50, 
        "id": 42997, 
        "snippets": [
          ">>> import datetime\n>>> datetime.date (2000, 2, 1) - datetime.timedelta (days = 1)\ndatetime.date(2000, 1, 31)\n>>> \n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 48, 
        "id": 13565185, 
        "snippets": [
          "import datetime\n\ndef last_day_of_month(any_day):\n    next_month = any_day.replace(day=28) + datetime.timedelta(days=4)  # this will never fail\n    return next_month - datetime.timedelta(days=next_month.day)\n", 
          ">>> for month in range(1, 13):\n...     print last_day_of_month(datetime.date(2012, month, 1))\n...\n2012-01-31\n2012-02-29\n2012-03-31\n2012-04-30\n2012-05-31\n2012-06-30\n2012-07-31\n2012-08-31\n2012-09-30\n2012-10-31\n2012-11-30\n2012-12-31\n"
        ]
      }
    ], 
    "title": "Get Last Day of the Month in Python"
  }, 
  {
    "accepted_answer_post_id": 761825, 
    "id": 761804, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 949, 
        "id": 761825, 
        "snippets": [
          ">>> ' Hello '.strip()\n'Hello'\n>>> ' Hello'.strip()\n'Hello'\n>>> 'Bob has a cat'.strip()\n'Bob has a cat'\n>>> '          Hello        '.strip()  # ALL spaces at ends removed\n'Hello'\n", 
          "def strip_one_space(s):\n    if s.endswith(\" \"): s = s[:-1]\n    if s.startswith(\" \"): s = s[1:]\n    return s\n\n>>> strip_one_space(\"   Hello \")\n'  Hello'\n", 
          ">>> \"  Hello\\n\".strip(\" \")\n'Hello\\n'\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 165, 
        "id": 6039813, 
        "snippets": [
          "myString.strip()\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 68, 
        "id": 10192113, 
        "snippets": [
          "# remove all leading/trailing commas, periods and hyphens\ntitle = title.strip(',.-')\n"
        ]
      }
    ], 
    "title": "Trimming a string in Python"
  }, 
  {
    "accepted_answer_post_id": 4476389, 
    "id": 4476373, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 67, 
        "id": 4476389, 
        "snippets": [
          "import requests\nurl = 'https://...'\npayload = {'key1': 'value1', 'key2': 'value2'}\n\n# GET\nr = requests.get(url)\n\n# GET with params in URL\nr = requests.get(url, params=payload)\n\n# POST with form-encoded data\nr = requests.post(url, data=payload)\n\n# POST with JSON \nimport json\nr = requests.post(url, data=json.dumps(payload))\n\n# Response, status etc\nr.text\nr.status_code\n", 
          ">>> from httplib2 import Http\n>>> from urllib import urlencode\n>>> h = Http()\n>>> data = dict(name=\"Joe\", comment=\"A test comment\")\n>>> resp, content = h.request(\"http://bitworking.org/news/223/Meet-Ares\", \"POST\", urlencode(data))\n>>> resp\n{'status': '200', 'transfer-encoding': 'chunked', 'vary': 'Accept-Encoding,User-Agent',\n 'server': 'Apache', 'connection': 'close', 'date': 'Tue, 31 Jul 2007 15:29:52 GMT', \n 'content-type': 'text/html'}\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 42, 
        "id": 10022497, 
        "snippets": [
          "import requests\nget_response = requests.get(url='http://google.com')\npost_data = {'username':'joeb', 'password':'foobar'}\n# POST some form-encoded data:\npost_response = requests.post(url='http://httpbin.org/post', data=post_data)\n", 
          "import json\npost_response = requests.post(url='http://httpbin.org/post', data=json.dumps(post_data))\n# If using requests v2.4.2 or later, pass the dict via the json parameter and it will be encoded directly:\npost_response = requests.post(url='http://httpbin.org/post', json=post_data)\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 30, 
        "id": 4476392, 
        "snippets": [
          "def URLRequest(url, params, method=\"GET\"):\n    if method == \"POST\":\n        return urllib2.Request(url, data=urllib.urlencode(params))\n    else:\n        return urllib2.Request(url + \"?\" + urllib.urlencode(params))\n"
        ]
      }
    ], 
    "title": "Simple URL GET/POST function in Python"
  }, 
  {
    "accepted_answer_post_id": 248862, 
    "id": 247770, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 442, 
        "id": 248862, 
        "snippets": [
          "import a_module\nprint a_module.__file__\n", 
          "import os\npath = os.path.dirname(amodule.__file__)\n", 
          "path = os.path.abspath(amodule.__file__)\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 136, 
        "id": 12154601, 
        "snippets": [
          ">>> import os\n>>> import inspect\n>>> inspect.getfile(os)\n'/usr/lib64/python2.7/os.pyc'\n>>> inspect.getfile(inspect)\n'/usr/lib64/python2.7/inspect.pyc'\n>>> os.path.dirname(inspect.getfile(inspect))\n'/usr/lib64/python2.7'\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 49, 
        "id": 6416114, 
        "snippets": [
          "#/path1/foo.py\nimport bar\nprint bar.__file__\n", 
          "#/path2/bar.py\nimport os\nprint os.getcwd()\nprint __file__\n", 
          "/path1        # \"import bar\" causes the line \"print os.getcwd()\" to run\n/path2/bar.py # then \"print __file__\" runs\n/path2/bar.py # then the import statement finishes and \"print bar.__file__\" runs\n", 
          "/path2                              # \"print os.getcwd()\" still works fine\nTraceback (most recent call last):  # but __file__ doesn't exist if bar.py is running as main\n  File \"/path2/bar.py\", line 3, in <module>\n    print __file__\nNameError: name '__file__' is not defined \n"
        ]
      }
    ], 
    "title": "Retrieving python module path"
  }, 
  {
    "accepted_answer_post_id": 4907053, 
    "id": 4906977, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 1010, 
        "id": 4907053, 
        "snippets": [
          "import os\nprint os.environ['HOME']\n", 
          "os.environ\n", 
          "# using get will return `None` if a key is not present rather than raise a `KeyError`\nprint os.environ.get('KEY_THAT_MIGHT_EXIST')\n\n# os.getenv is equivalent, and can also give a default value instead of `None`\nprint os.getenv('KEY_THAT_MIGHT_EXIST', default_value)\n", 
          "import sys\nprint sys.prefix\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 71, 
        "id": 11447648, 
        "snippets": [
          "\"HOME\" in os.environ\n", 
          "os.environ.has_key(\"HOME\")\n", 
          "print os.environ.get('HOME','/home/username/')\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 15, 
        "id": 4907002, 
        "snippets": [
          "import os\nprint os.environ\n"
        ]
      }
    ], 
    "title": "Access environment variables from Python"
  }, 
  {
    "accepted_answer_post_id": 1186847, 
    "id": 1186789, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 150, 
        "id": 1186847, 
        "snippets": [
          "def some_func():\n    print 'in test 1, unproductive'\n\nif __name__ == '__main__':\n    # test1.py executed as script\n    # do something\n    some_func()\n", 
          "import test1\n\ndef service_func():\n    print 'service func'\n\nif __name__ == '__main__':\n    # service.py executed as script\n    # do something\n    service_func()\n    test1.some_func()\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 83, 
        "id": 1186818, 
        "snippets": [
          "execfile(\"test2.py\")\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 36, 
        "id": 11230471, 
        "snippets": [
          "print \"test1.py\"\n", 
          "import subprocess\n\nsubprocess.call(\"test1.py\", shell=True)\n"
        ]
      }
    ], 
    "title": "What is the best way to call a Python script from another Python script?"
  }, 
  {
    "accepted_answer_post_id": 2407405, 
    "id": 2407398, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 198, 
        "id": 2407405, 
        "snippets": [
          ">>> list_a = [1, 2, 3, 4]\n>>> list_b = [5, 6, 7, 8]\n>>> zip(list_a, list_b)\n[(1, 5), (2, 6), (3, 7), (4, 8)]\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 53, 
        "id": 5146593, 
        "snippets": []
      }, 
      {
        "rank": 2, 
        "score": 8, 
        "id": 2407425, 
        "snippets": []
      }
    ], 
    "title": "How to merge lists into a list of tuples in Python?"
  }, 
  {
    "accepted_answer_post_id": 364599, 
    "id": 364519, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 114, 
        "id": 364599, 
        "snippets": [
          ">>> d = {\"x\":2, \"h\":15, \"a\":2222}\n>>> it = iter(sorted(d.iteritems()))\n>>> it.next()\n('a', 2222)\n>>> it.next()\n('h', 15)\n>>> it.next()\n('x', 2)\n>>>\n", 
          ">>> d = {\"x\":2, \"h\":15, \"a\":2222}\n>>> for key, value in sorted(d.iteritems()):\n>>>     print(key, value)\n('a', 2222)\n('h', 15)\n('x', 2)\n>>>\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 71, 
        "id": 364521, 
        "snippets": [
          "return sorted(dict.iteritems())\n", 
          "return iter(sorted(dict.iteritems()))\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 35, 
        "id": 364588, 
        "snippets": [
          "foo = {\n    'a':    1,\n    'b':    2,\n    'c':    3,\n    }\n\nprint foo\n>>> {'a': 1, 'c': 3, 'b': 2}\n\nprint foo.items()\n>>> [('a', 1), ('c', 3), ('b', 2)]\n\nprint sorted(foo.items())\n>>> [('a', 1), ('b', 2), ('c', 3)]\n", 
          "for k,v in sorted(foo.items()):\n    print k, v\n", 
          "for k in sorted(foo.keys()):\n    print k, foo[k]\n"
        ]
      }
    ], 
    "title": "In Python, how do I iterate over a dictionary in sorted order?"
  }, 
  {
    "accepted_answer_post_id": 1038845, 
    "id": 1038824, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 268, 
        "id": 1038845, 
        "snippets": [
          "url = 'abcdc.com'\nif url.endswith('.com'):\n    url = url[:-4]\n", 
          "import re\nurl = 'abcdc.com'\nurl = re.sub('\\.com$', '', url)\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 42, 
        "id": 2393022, 
        "snippets": [
          "url = 'abcdc.com'\nprint url.replace('.com','')\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 27, 
        "id": 1038999, 
        "snippets": [
          "def strip_end(text, suffix):\n    if not text.endswith(suffix):\n        return text\n    return text[:len(text)-len(suffix)]\n"
        ]
      }
    ], 
    "title": "How do I remove a substring from the end of a string in Python?"
  }, 
  {
    "accepted_answer_post_id": 19602990, 
    "id": 19602931, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 114, 
        "id": 19602990, 
        "snippets": [
          "import urllib\n\ntestfile = urllib.URLopener()\ntestfile.retrieve(\"http://randomsite.com/file.gz\", \"file.gz\")\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 66, 
        "id": 19603003, 
        "snippets": [
          "import urllib\nurllib.urlretrieve (\"http://randomsite.com/file.gz\", \"file.gz\")\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 21, 
        "id": 25827767, 
        "snippets": [
          "import wget\n\nfile_url = 'http://johndoe.com/download.zip'\n\nfile_name = wget.download(file_url)\n"
        ]
      }
    ], 
    "title": "Basic http file downloading and saving to disk in python?"
  }, 
  {
    "accepted_answer_post_id": 4588654, 
    "id": 4588628, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 97, 
        "id": 4588654, 
        "snippets": [
          ">>> x = numpy.array([1,0,2,0,3,0,4,5,6,7,8])\n>>> numpy.where(x == 0)[0]\narray([1, 3, 5])\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 16, 
        "id": 4588744, 
        "snippets": [
          ">>> a = np.asarray([0,1,2,3,4])\n>>> a == 0 # or whatver\narray([ True, False, False, False, False], dtype=bool)\n"
        ]
      }, 
      {
        "rank": 2, 
        "score": 5, 
        "id": 24553551, 
        "snippets": [
          ">>> x = numpy.array([1,0,2,0,3,0,4,5,6,7,8])\n\n>>> x==0\narray([False, True, False, True, False, True, False, False, False, False, False], dtype=bool)\n\n>>> numpy.nonzero(x==0)[0]\narray([1, 3, 5])\n"
        ]
      }
    ], 
    "title": "Find indices of elements equal to zero from numpy array"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 16387069, 
    "answer_posts": [
      {
        "rank": 0, 
        "score": 16, 
        "id": 16387154, 
        "snippets": [
          "Image.open(picture.jpg)\nImg.show\n", 
          "from PIL import Image\n\n#...\n\nimg = Image.open('picture.jpg')\nimg.show()\n"
        ]
      }, 
      {
        "rank": 1, 
        "score": 0, 
        "id": 16388415, 
        "snippets": [
          "if location == a2:\n    img = Image.open(\"picture.jpg\")\n    Img.show\n"
        ]
      }
    ], 
    "title": "Open images? Python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 19077029, 
    "answer_posts": [
      {
        "snippets": [
          "import numpy as np\nnp.concatenate( [ np.array( [ [1,2], [2,3] ] ), np.array( [ [3],[4] ] ) ] , axis = 1)\n", 
          "np.hstack( [ np.array( [ [1,2], [2,3] ] ), np.array( [ [3],[4] ] ) ] )\n", 
          "a - np.array( [ [1,2,3], [2,3,4] ] )\na1= a[:,:1]\na2= a[:,2:]\nnp.hstack([a1,a2])\n", 
          "def remove_column( a, i ):\n    return np.hstack( [a[:,:i], a[:,(i+1):] ] )\n", 
          ">>> remove_column(a, 1)\narray([[1, 3],\n       [2, 4]])\n>>> remove_column(a, 0)\narray([[2, 3],\n       [3, 4]])\n", 
          "np.delete(a, 1, 1)\n", 
          "np.delete(a, [column1, columne2, ..., columnK], 1)\n"
        ], 
        "score": 5, 
        "id": 19077136, 
        "rank": 0
      }
    ], 
    "title": "How can I merge 2 column in python"
  }, 
  {
    "accepted_answer_post_id": 28910914, 
    "id": 28910851, 
    "answer_posts": [
      {
        "snippets": [
          "df[['parks', 'playgrounds', 'sports']].apply(lambda x: x.astype('category'))\n", 
          "df[df.select_dtypes(['object']).columns] = df.select_dtypes(['object']).apply(lambda x: x.astype('category'))\n"
        ], 
        "score": 0, 
        "id": 41644154, 
        "rank": 0
      }
    ], 
    "title": "Python Pandas - Changing some column types to categories"
  }, 
  {
    "accepted_answer_post_id": 19750785, 
    "id": 19750763, 
    "answer_posts": [
      {
        "snippets": [
          ">>> s = \"keep, ignore, keep_this_too, ignore, keep_this_also, ignore\"\n>>> re.findall(r'([^,\\s]+)', s)\n['keep', 'ignore', 'keep_this_too', 'ignore', 'keep_this_also', 'ignore']\n>>> re.findall(r'([^,\\s]+)', s)[::2] # using slice to get every other matches.\n['keep', 'keep_this_too', 'keep_this_also']\n", 
          ">>> re.findall(r'([^,\\s]+)(?:,\\s*[^,\\s]+)?', s)\n['keep', 'keep_this_too', 'keep_this_also']\n"
        ], 
        "score": 2, 
        "id": 19750785, 
        "rank": 0
      }
    ], 
    "title": "Python Regex match every other word"
  }, 
  {
    "accepted_answer_post_id": 18526841, 
    "id": 18526809, 
    "answer_posts": [
      {
        "snippets": [
          "for ol in range(n):\n", 
          "for ol in range(n-1,-1,-1):\n", 
          "print string[::-1]\n"
        ], 
        "score": 3, 
        "id": 18526841, 
        "rank": 0
      }
    ], 
    "title": "code to reverse any given string in python using basic python operators"
  }, 
  {
    "accepted_answer_post_id": 12082349, 
    "id": 12082314, 
    "answer_posts": [
      {
        "snippets": [
          "urllib.quote_plus(\"http://earth.google.com/gallery/kmz/women_for_women.kmz?a=large\")\n", 
          "'http%3A%2F%2Fearth.google.com%2Fgallery%2Fkmz%2Fwomen_for_women.kmz%3Fa%3Dlarge'\n"
        ], 
        "score": 5, 
        "id": 12082349, 
        "rank": 0
      }
    ], 
    "title": "How to convert a url string to safe characters with python?"
  }, 
  {
    "accepted_answer_post_id": 429491, 
    "id": 429414, 
    "answer_posts": [
      {
        "snippets": [
          "a_list.count(k)\n", 
          "counts = dict((k, a_list.count(k)) for k in set(a_list))\n"
        ], 
        "score": 9, 
        "id": 429442, 
        "rank": 0
      }
    ], 
    "title": "what's the pythonic way to count the occurrence of an element in a list?"
  }, 
  {
    "accepted_answer_post_id": 20084821, 
    "id": 20084779, 
    "answer_posts": [], 
    "title": "TypeError: string indices must be integers while parsing JSON using Python?"
  }, 
  {
    "accepted_answer_post_id": 9571360, 
    "id": 9571151, 
    "answer_posts": [
      {
        "snippets": [
          ">>> x = ['Some strings.', 1, 2, 3, 'More strings!']\n>>> y = [unicode(i) for i in x]\n>>> y\n[u'Some strings.', u'1', u'2', u'3', u'More strings!']\n", 
          ">>> y = [unicode(i) if isinstance(i, basestring) else i for i in x]\n>>> y\n[u'Some strings.', 1, 2, 3, u'More strings!']\n", 
          "unicode(i, encoding='UTF-8')\n"
        ], 
        "score": 10, 
        "id": 9571197, 
        "rank": 0
      }
    ], 
    "title": "In Python, how do I convert a list of ints and strings to Unicode?"
  }, 
  {
    "accepted_answer_post_id": 22741538, 
    "id": 22741526, 
    "answer_posts": [
      {
        "snippets": [
          "' '.join(word[0] for word in word_list)\n", 
          ">>> word_list = [['obytay'], ['ikeslay'], ['ishay'], ['artway']]\n>>> print ' '.join(word[0] for word in word_list)\nobytay ikeslay ishay artway\n"
        ], 
        "score": 9, 
        "id": 22741538, 
        "rank": 0
      }
    ], 
    "title": "How do I turn a list of words into a sentence string?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 15670132, 
    "answer_posts": [
      {
        "snippets": [
          "a = np.empty((500, b.shape[0]))\n", 
          "for i in range(500):\n    a[i,:] = ...\n", 
          "In [1]: import numpy as np\n\nIn [2]: b = np.array([1,2,3])\n\nIn [3]: a = np.empty((500, b.shape[0]))\n\nIn [4]: a[:] = b\n\nIn [5]: a[0,:] == b\nOut[5]: array([ True,  True,  True], dtype=bool)\n"
        ], 
        "score": 1, 
        "id": 15670573, 
        "rank": 0
      }
    ], 
    "title": "adding rows in python to table"
  }, 
  {
    "accepted_answer_post_id": 23663113, 
    "id": 23541670, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import os\n>>> import signal\n>>> \n>>> def handler(signum, frame):\n...     print \"Forever is over!\"    \n...     raise Exception(\"end of time\")\n... \n>>> def loop_forever():\n...     import time\n...     while 1:\n...         print \"sec\"\n...         time.sleep(1)\n... \n>>> signal.signal(signal.SIGALRM, handler)\n0\n>>> signal.alarm(10)\n0\n>>> \n>>> try:\n...     loop_forever()\n... except Exception, exc:\n...     print exc\n... \nsec\nsec\nsec\nsec\nsec\nsec\nsec\nsec\nsec\nsec\nForever is over!\nend of time\n", 
          " >>> threading.Timer(5.0, lambda: print(\"toto\")).start()\n", 
          ">>> import time\n>>> import threading\n>>> l = threading.Lock()\n>>> threading.Timer(5.0, lambda l: l.acquire(), args=(l,)).start()\n>>> while not l.locked():\n...   print(\"sec\")\n...   time.sleep(1)\n... \nsec\nsec\nsec\nsec\nsec\n>>> \n"
        ], 
        "score": 3, 
        "id": 23541878, 
        "rank": 0
      }
    ], 
    "title": "How to timeout a statement"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 24523670, 
    "answer_posts": [
      {
        "snippets": [
          "from matplotlib.colors import LogNorm\nimport matplotlib.pyplot as plt\nfrom numpy.random import randn\n\n#normal distribution center at x=0 and y=5\nx = randn(100000)\ny = randn(100000)+5\n\nH, xedges, yedges, img = plt.hist2d(x, y, norm=LogNorm())\nextent = [yedges[0], yedges[-1], xedges[0], xedges[-1]]\nfig = plt.figure()\nax = fig.add_subplot(1, 1, 1)\nim = ax.imshow(H, cmap=plt.cm.jet, extent=extent, norm=LogNorm())\nfig.colorbar(im, ax=ax)\nplt.show()\n"
        ], 
        "score": 2, 
        "id": 24524250, 
        "rank": 0
      }
    ], 
    "title": "How do I use colorbar with hist2d in matplotlib.pyplot?"
  }, 
  {
    "accepted_answer_post_id": 11978051, 
    "id": 11893414, 
    "answer_posts": [
      {
        "snippets": [
          "from scipy.cluster.hierarchy import linkage\nfrom scipy.cluster.hierarchy import dendrogram\nfrom scipy.spatial.distance import pdist\nimport matplotlib\nfrom matplotlib import pyplot as plt\nimport numpy as np\nfrom numpy import arange\n\nfig = plt.figure(figsize=(5,7))\nax1 = plt.subplot(2, 1, 1)\ncm = matplotlib.cm.Blues\nX = np.random.random([5,5])\npmat = pdist(X, \"euclidean\")\nlinkmat = linkage(pmat)\ndendrogram(linkmat)\nx0,x1 = ax1.get_xlim()\ny0,y1 = ax1.get_ylim()\nax1.set_aspect((x1-x0)/(y1-y0))\nplt.subplot(2, 1, 2, aspect=1)\nlabels = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\nY = np.random.random([6,6])\nplt.xticks(arange(0.5, 7.5, 1))\nplt.gca().set_xticklabels(labels)\nplt.pcolor(Y)\nplt.colorbar()\n", 
          "class ColorBarLocator(object):\n    def __init__(self, pax, pad=5, width=10):\n        self.pax = pax\n        self.pad = pad\n        self.width = width\n\n    def __call__(self, ax, renderer):\n        x, y, w, h = self.pax.get_position().bounds\n        fig = self.pax.get_figure()\n        inv_trans = fig.transFigure.inverted()\n        pad, _ = inv_trans.transform([self.pad, 0])\n        width, _ = inv_trans.transform([self.width, 0])\n        return [x+w+pad, y, width, h]\n\ncax = fig.add_axes([0,0,0,0], axes_locator=ColorBarLocator(ax2))\nplt.colorbar(cax = cax)\n"
        ], 
        "score": 10, 
        "id": 11894123, 
        "rank": 0
      }
    ], 
    "title": "how to make square subplots in matplotlib with heatmaps?"
  }, 
  {
    "accepted_answer_post_id": 17997791, 
    "id": 17956589, 
    "answer_posts": [
      {
        "snippets": [
          "def extract_data_one():\n    for item in sites:\n        os.chdir(r\"\\\\svr-dc\\ftp site\\%s\\Daily\" % item)\n        subprocess.call(['7z', 'e', 'data1.zip', '*.*'])\n"
        ], 
        "score": 0, 
        "id": 17997791, 
        "rank": 0
      }
    ], 
    "title": "7z will not find archive using subprocess"
  }, 
  {
    "accepted_answer_post_id": 40823642, 
    "id": 40822700, 
    "answer_posts": [
      {
        "snippets": [
          "import json, re\n\nd = [\"('colA':'datA1', 'colB':'datB1', 'colC':'datC1')\",\n \"('colA':'datA2', 'colB':'datB2', 'colC':'datC2')\",\n \"('colA':'datAn', 'colB':'datBn', 'colC':'datCn')\"]\n\ntry:\n    l = [json.loads('{' + re.sub(r'\\'', '\"', s).strip('()') + '}') for s in d]\n    print(l)\nexcept json.decoder.JSONDecodeError as err:\n    print('JSONDecodeError: ', err)\n", 
          "[{'colC': 'datC1', 'colA': 'datA1', 'colB': 'datB1'}, {'colC': 'datC2', 'colA': 'datA2', 'colB': 'datB2'}, {'colC': 'datCn', 'colA': 'datAn', 'colB': 'datBn'}]\n"
        ], 
        "score": 2, 
        "id": 40823023, 
        "rank": 0
      }
    ], 
    "title": "How to convert a list of strings to list of dictionaries in python?"
  }, 
  {
    "accepted_answer_post_id": 3152236, 
    "id": 3152151, 
    "answer_posts": [
      {
        "snippets": [
          "r = re.search(tagname + '\\[.+?@(?P<ip>\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})', line)\n", 
          "r = re.search(tagname + r'\\[.+?@(?P<ip>(?:\\d{1,3}\\.?){4})', line)\n", 
          "r = re.findall('(?P<tag>\\S+)\\[.+?@(?P<ip>(?:\\d{1,3}\\.?){4})', line)\n", 
          "r = dict((m.group(\"tag\"), m.group(\"ip\")) for m in re.finditer('(?P<tag>\\S+)\\[.+?@(?P<ip>(?:\\d{1,3}\\.?){4})', line))\n", 
          "r = {(m.group(\"tag\"), m.group(\"ip\")) for m in re.finditer('(?P<tag>\\S+)\\[.+?@(?P<ip>(?:\\d{1,3}\\.?){4})', line)}\n"
        ], 
        "score": 2, 
        "id": 3152254, 
        "rank": 0
      }
    ], 
    "title": "What kind of regex would I use to match this?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 10144851, 
    "answer_posts": [
      {
        "snippets": [
          "from twisted.web import server, resource\nfrom twisted.internet import reactor\n\nbannedIPs = [\"127.0.0.1\"]\n\nclass HelloResource(resource.Resource):\n    isLeaf = True\n    numberRequests = 0\n\n    def render_GET(self, request):\n        clientIP = request.getClientIP()\n\n        if clientIP in bannedIPs:\n            return \"you are banned\"\n\n        self.numberRequests += 1\n        request.setHeader(\"content-type\", \"text/plain\")\n        return \"I am request #\" + str(self.numberRequests) + \"\\n\"\n\nreactor.listenTCP(8080, server.Site(HelloResource()))\nreactor.run()\n"
        ], 
        "score": 1, 
        "id": 10163177, 
        "rank": 0
      }
    ], 
    "title": "Twisted - kick specific client"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 35308828, 
    "answer_posts": [
      {
        "snippets": [
          "add = list(add) + list(raw_input(\"Enter movie name: \"))\n", 
          "movies.append(raw_input(\"Enter movie name: \"))\n", 
          "import sys, random\n\n# Movie_List is now here\nmovies = []\n\naddmovie = raw_input(\"Type 'a' to add a title, 'b' to pick a movie or '/' to quit: \")\n while addmovie == 'a' or addmovie == '/' or addmovie == 'b':\n    if addmovie == 'a':\n        movies.append(raw_input(\"Enter movie name: \"))\n    elif addmovie == '/':\n        print 'Goodbye.'\n        sys.exit()\n    elif addmovie == 'b':\n        break\n    addmovie = raw_input(\"Type 'a' to add a title, 'b' to pick a movie or '/' to quit: \")\n\n# random choice\nrandom_movie = random.choice(movies)\nprint random_movie\n"
        ], 
        "score": 1, 
        "id": 35320735, 
        "rank": 0
      }
    ], 
    "title": "How do I select a random string from a list in Python?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 28822809, 
    "answer_posts": [
      {
        "snippets": [
          "import tkinter\nfrom tkinter import *\n\ndef playGame():\n    frame.quit\n    gameMenu()\n\n\ndef gameMenu():\n    b = mainMenu(root)\n\n    topFrame = Frame(root)\n    topFrame.pack()\n    bottomFrame = Frame(root)\n    bottomFrame.pack(side = BOTTOM)\n    photo = PhotoImage(file = \"piano.png\")\n    label = Label(root, image = photo)\n    label.pack()\n\nroot=Tk()\nframe = Frame(root)\nframe.pack()\n\nquitButton = Button(frame, text = \"Quit\", command = frame.quit)\nquitButton.pack(side = LEFT)\n\nproceedButton = Button(frame, text = \"Play\", command = playGame)\nproceedButton.pack(side = LEFT)\n\nroot.mainloop()\n", 
          "from tkinter import *\n\nmaster = Tk() #Declaring of main window\n\ndef ProceedButtonCommand(mainframe, master): #Command to attach to proceed button\n    mainframe.destroy()\n    DrawSecondScreen(master) #This line is what lets the command tied to the button call up the second screen\n\ndef QuitButtonCommand(master):\n    master.destroy()\n\ndef DrawFirstScreen(master):\n    mainframe = Frame(master) #This is a way to semi-cheat when drawing new screens, destroying a frame below master frame clears everything from the screen without having to redraw the window, giving the illusion of one seamless transition\n    ProceedButton = Button(mainframe, text=\"Proceed\", command=lambda: ProceedButtonCommand(mainframe, master)) #Lambda just allows you to pass variables with the command\n    QuitButton = Button(mainframe, text = \"Quit\", command=lambda: QuitButtonCommand(master))\n    mainframe.pack()\n    ProceedButton.pack()\n    QuitButton.pack()\n\ndef DrawSecondScreen(master):\n    mainframe = Frame(master)\n    Label1 = Label(mainframe, text=\"Temp\")\n    mainframe.pack()\n    Label1.pack()\n\nDrawFirstScreen(master)\nmaster.mainloop() #The mainloop handles all the events that occur in a tkinter window, from button pressing to the commands that a button runs, very important\n"
        ], 
        "score": 0, 
        "id": 28879350, 
        "rank": 0
      }
    ], 
    "title": "How to make a button open a new window?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 11922012, 
    "answer_posts": [
      {
        "snippets": [
          "import requests\n\ntry:\n    r = requests.get(\"http://www.example.com\")\n    # Raise an exception in case of \"bad\"\n    # status code (non-200 response)\n    r.raise_for_status()\n    print r.headers\nexcept Exception as e:\n    print e.message\n", 
          "{'connection': 'close',\n 'content-encoding': 'gzip',\n 'content-length': '1162',\n 'content-type': 'text/html; charset=UTF-8',\n 'date': 'Sun, 12 Aug 2012 12:49:44 GMT',\n 'last-modified': 'Wed, 09 Feb 2011 17:13:15 GMT',\n 'server': 'Apache/2.2.3 (CentOS)',\n 'vary': 'Accept-Encoding'}\n"
        ], 
        "score": 1, 
        "id": 11922315, 
        "rank": 0
      }
    ], 
    "title": "Python HttpConnection - write request headers to file"
  }, 
  {
    "accepted_answer_post_id": 23528128, 
    "id": 23527887, 
    "answer_posts": [
      {
        "snippets": [
          "print wb.get_sheet_names()\n", 
          "ws = wb.worksheets[0]\n"
        ], 
        "score": 24, 
        "id": 23528128, 
        "rank": 0
      }
    ], 
    "title": "getting sheet names from openpyxl"
  }, 
  {
    "accepted_answer_post_id": 3142769, 
    "id": 3142012, 
    "answer_posts": [
      {
        "snippets": [
          ">>> exist = {u'title': 2, u'actual bitrate': 4, u'id': 1, u'game slot': 0, u'Suggested Bitrate': 3}\n>>> l = [1.0, u'GOLD_Spider Solitaire', u'Spider\\\\nSolitaire', 120000.0, 120000.0]\n>>> dict((k, l[v]) for k, v in exist.iteritems())\n{u'Suggested Bitrate': 120000.0, u'game slot': 1.0, u'actual bitrate': 120000.0, u'id': u'GOLD_Spider Solitaire', u'title': u'Spider\\\\nSolitaire'}\n", 
          ">>> {k: l[v] for k, v in exist.items()}\n{'Suggested Bitrate': 120000.0, 'game slot': 1.0, 'actual bitrate': 120000.0, 'id': 'GOLD_Spider Solitaire', 'title': 'Spider\\\\nSolitaire'}\n"
        ], 
        "score": 4, 
        "id": 3142769, 
        "rank": 0
      }
    ], 
    "title": "What's an elegant way to create a dictionary from another dictionary's keys and an array of values?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 15406507, 
    "answer_posts": [
      {
        "snippets": [
          "# Imports\nfrom django.conf.urls.static import static\nfrom django.conf.urls import handler404\nfrom django.conf.urls import patterns, include, url\nfrom yourapplication import views\n\n##\n# Handles the URLS calls\nurlpatterns = patterns('',\n    # url(r'^$', include('app.homepage.urls')),\n)\n\nhandler404 = views.error404\n", 
          "# Imports\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom django.template import Context, loader\n\n\n##\n# Handle 404 Errors\n# @param request WSGIRequest list with all HTTP Request\ndef error404(request):\n\n    # 1. Load models for this view\n    #from idgsupply.models import My404Method\n\n    # 2. Generate Content for this view\n    template = loader.get_template('404.htm')\n    context = Context({\n        'message': 'All: %s' % request,\n        })\n\n    # 3. Return Template for this view + Data\n    return HttpResponse(content=template.render(context), content_type='text/html; charset=utf-8', status=404)\n"
        ], 
        "score": 2, 
        "id": 16238766, 
        "rank": 0
      }
    ], 
    "title": "How to customize Page not found (404) in django?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 20902763, 
    "answer_posts": [
      {
        "snippets": [
          "import Tkinter as tk\n\nclass ImageViewer(tk.Frame):\n    def __init__(self, master):\n        tk.Frame.__init__(self, master, background=\"green\")\n\n        # for now, don't use images. This, so that we can get\n        # the basic structure working\n        self.im = None\n        self.tkim = None\n\n        # these three widgets make up our main layout\n        label = tk.Label(self, image=self.tkim, text=\"label\")\n        e = Enhance(self, self.im)\n        e1 = Enhance1(self, self.im)\n\n        # grid works as well as pack in this case, but requires a\n        # little more code. For that reason I prefer pack for very\n        # simple layouts such as this.\n        label.pack(side=\"bottom\", fill=\"both\", expand=True)\n        e.pack(side=\"left\", fill=\"both\", expand=True)\n        e1.pack(side=\"right\", fill=\"both\", expand=True)\n\n\nclass Enhance(tk.Frame):\n    def __init__(self, master, image):\n        # we will be operating on this image, so save a \n        # reference to it\n        self.image = image\n\n        # width, height, and color are only temporary, they\n        # make it easy to see the frames before they have\n        # any content\n        self.image = image\n        tk.Frame.__init__(self, master, background=\"bisque\", width=100, height=100)\n\nclass Enhance1(tk.Frame):\n    def __init__(self, master, image):\n        # we will be operating on this image, so save a \n        # reference to it\n        self.image = image\n\n        # width, height, and color are only temporary, they\n        # make it easy to see the frames before they have\n        # any content\n        tk.Frame.__init__(self, master, background=\"blue\", width=100, height=100)\n\nif __name__ == \"__main__\":\n    root = tk.Tk()\n    ImageViewer(root).pack(fill=\"both\", expand=True)\n    root.mainloop()\n"
        ], 
        "score": 0, 
        "id": 20907316, 
        "rank": 0
      }
    ], 
    "title": "python/tkinter - image viewer application"
  }, 
  {
    "accepted_answer_post_id": 7957116, 
    "id": 6643314, 
    "answer_posts": [
      {
        "snippets": [
          ">>> from django_orm.expressions import F\n>>> from niwi.models import TestModel\n>>> TestModel.objects.update(done=~F('done'))\n\n# SQL:\nUPDATE \"niwi_testmodel\" SET \"done\" = NOT \"niwi_testmodel\".\"done\"; args=()\n"
        ], 
        "score": 1, 
        "id": 7957116, 
        "rank": 0
      }
    ], 
    "title": "Toggle boolean fields from a Queryset using F objects"
  }, 
  {
    "accepted_answer_post_id": 16384126, 
    "id": 16384109, 
    "answer_posts": [
      {
        "snippets": [
          ">>> list(itertools.product([1, 5, 8], [0.5, 4]))\n[(1, 0.5), (1, 4), (5, 0.5), (5, 4), (8, 0.5), (8, 4)]\n", 
          "for x in itertools.product([1, 5, 8], [0.5, 4]):\n    # do stuff\n"
        ], 
        "score": 47, 
        "id": 16384126, 
        "rank": 0
      }
    ], 
    "title": "Iterate over all combinations of values in multiple lists in python"
  }, 
  {
    "accepted_answer_post_id": 22515072, 
    "id": 22515012, 
    "answer_posts": [
      {
        "snippets": [
          "element = driver.find_element_by_class_name('classname')\ndriver.execute_script(\"\"\"\nvar element = arguments[0];\nelement.parentNode.removeChild(element);\n\"\"\", element)\n", 
          "driver.execute_script(\"\"\"\nvar element = document.querySelector(\".classname\");\nif (element)\n    element.parentNode.removeChild(element);\n\"\"\")\n"
        ], 
        "score": 6, 
        "id": 22519967, 
        "rank": 0
      }
    ], 
    "title": "Python selenium, how can i delete an element?"
  }, 
  {
    "accepted_answer_post_id": 23248784, 
    "id": 23248435, 
    "answer_posts": [
      {
        "snippets": [
          "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\nax.plot(range(20))\nax.axvspan(8, 14, alpha=0.5, color='red')\n\nplt.show()\n", 
          "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\nax.plot(range(20))\nax.axvspan(8, 14, ymin=0.1, ymax=0.9, alpha=0.5, color='red')\n\nplt.show()\n"
        ], 
        "score": 45, 
        "id": 23248784, 
        "rank": 0
      }
    ], 
    "title": "FIll between two vertical lines in matplotlib"
  }, 
  {
    "accepted_answer_post_id": 7415355, 
    "id": 7415264, 
    "answer_posts": [
      {
        "snippets": [
          "button = tkinter.Button(root, text=\"Submit\", command=displayText())\n", 
          "button = tkinter.Button(root, text=\"Submit\", command=displayText)\n"
        ], 
        "score": 2, 
        "id": 7415355, 
        "rank": 0
      }
    ], 
    "title": "Python, Tkinter,How to change GUI based on buttonclick"
  }, 
  {
    "accepted_answer_post_id": 9921805, 
    "id": 9921109, 
    "answer_posts": [
      {
        "snippets": [
          "combinations = []\nfor a in xrange(11):\n    for b in xrange(11-a):\n        for c in xrange(11-a-b):\n            for d in xrange(11-a-b-c):\n                for e in xrange(11-a-b-c-d):\n                    for f in xrange(11-a-b-c-d-e):\n                        for g in xrange(11-a-b-c-d-e-f):\n                            for h in xrange(11-a-b-c-d-e-f-g):\n                                for i in xrange(11-a-b-c-d-e-f-g-h):\n                                    j = 10-a-b-c-d-e-f-g-h-i\n                                    combinations.append((a,b,c,d,e,f,g,h,i,j))\nprint len(combinations)\n"
        ], 
        "score": 5, 
        "id": 9921805, 
        "rank": 0
      }
    ], 
    "title": "Is there a more efficient way to find all combinations of 10 items in 10% increments?"
  }, 
  {
    "accepted_answer_post_id": 18527794, 
    "id": 18527763, 
    "answer_posts": [
      {
        "snippets": [
          "a = sum(word.endswith('ly') for line in f for word in line.split())\n", 
          "a = sum(1 for line in f for word in line.split() if word.endswith('ly'))\n", 
          "with open(\"unknown.txt\", 'r') as f:\n    total = lycount = 0\n    for line in f:\n        words = line.split()\n        total += len(words)\n        lycount += sum(1 for word in words if word.endswith('ly'))\n\ntry:\n    percentage = (lycount / total) * 100\n    print('{}% adverbs'.format(percentage))\nexcept ZeroDivisionError:\n    print('File is empty!')\n"
        ], 
        "score": 3, 
        "id": 18527794, 
        "rank": 0
      }
    ], 
    "title": "How do I check if a word ends with a certain string, from a file?"
  }, 
  {
    "accepted_answer_post_id": 11388712, 
    "id": 11388632, 
    "answer_posts": [
      {
        "snippets": [
          "from django.db import connection, transaction\ncursor = connection.cursor()\n\n# Data modifying operation - commit required\ncursor.execute(\"vacuum my_table\")\ntransaction.commit_unless_managed()\n", 
          "cursor.execute(\"PRAGMA auto_vacuum=FULL\")\n"
        ], 
        "score": 3, 
        "id": 11388712, 
        "rank": 0
      }
    ], 
    "title": "sqlite vacuum with django"
  }, 
  {
    "accepted_answer_post_id": 37396683, 
    "id": 37396264, 
    "answer_posts": [
      {
        "snippets": [
          "import pandas as pd\nimport numpy as np\n\nnp.random.seed([3,1415])\ndf = pd.DataFrame(np.random.rand(20, 2), columns=['A', 'B'])\n", 
          "(df.index.to_series() / 5).astype(int)\n", 
          "df.index[4::5]\n", 
          "# assign as variable because I'm going to use it more than once.\ns = (df.index.to_series() / 5).astype(int)\n\ndf.groupby(s).std().set_index(s.index[4::5])\n", 
          "           A         B\n4   0.198019  0.320451\n9   0.329750  0.408232\n14  0.293297  0.223991\n19  0.095633  0.376390\n", 
          "# assign what we've done above to df_down\ndf_down = df.groupby(s).std().set_index(s.index[4::5])\n\ndf_up = df_down.reindex(range(20)).bfill()\n", 
          "           A         B\n0   0.198019  0.320451\n1   0.198019  0.320451\n2   0.198019  0.320451\n3   0.198019  0.320451\n4   0.198019  0.320451\n5   0.329750  0.408232\n6   0.329750  0.408232\n7   0.329750  0.408232\n8   0.329750  0.408232\n9   0.329750  0.408232\n10  0.293297  0.223991\n11  0.293297  0.223991\n12  0.293297  0.223991\n13  0.293297  0.223991\n14  0.293297  0.223991\n15  0.095633  0.376390\n16  0.095633  0.376390\n17  0.095633  0.376390\n18  0.095633  0.376390\n19  0.095633  0.376390\n"
        ], 
        "score": 1, 
        "id": 37396683, 
        "rank": 0
      }
    ], 
    "title": "Pandas' equivalent of resample for integer index"
  }, 
  {
    "accepted_answer_post_id": 36463885, 
    "id": 36463687, 
    "answer_posts": [
      {
        "snippets": [
          "    ID64 = 76561197960265728 + (B * 2) + A\n    ID3 = (B * 2) + A\n    ID32 = STEAM_0:A:B\n", 
          "def to_steam64(s):\n    return ((b * 2) + a) + 76561197960265728\n", 
          "def from_steam64(sid):\n    y = int(sid) - 76561197960265728\n    x = y % 2 \n    return \"STEAM_0:{}:{}\".format(x, (y - x) // 2)\n"
        ], 
        "score": 1, 
        "id": 36472887, 
        "rank": 0
      }
    ], 
    "title": "How can I get a steamid 64 from a steamID in python"
  }, 
  {
    "accepted_answer_post_id": 33420511, 
    "id": 33420033, 
    "answer_posts": [
      {
        "snippets": [
          "dicom_file = os.path.join(\"/\",dirName,filename) \n", 
          "os.path.join(\"/\",\"directory\",\"file\")\n", 
          "os.path.join(\"directory\",\"file\")\n", 
          "import glob\n\nfiles_with_dcm = glob.glob(\"*.dcm\")\n", 
          "import glob\n\nfiles_with_dcm = glob.glob(\"/full/path/to/files/*.dcm\")\n", 
          "if exists:\n   try:\n      ds = dicom.read_file(dicom_file)\n   except InvalidDicomError as exc:\n      print \"something wrong with\", dicom_file\n"
        ], 
        "score": 3, 
        "id": 33420511, 
        "rank": 0
      }
    ], 
    "title": "Python, Opening files in loop (dicom)"
  }, 
  {
    "accepted_answer_post_id": 15821688, 
    "id": 15821613, 
    "answer_posts": [
      {
        "snippets": [
          "for seq in sequences:\n    lower_output.append(re.findall(\"[a-z]+\", seq)) # add substrings\n", 
          "for seq in sequences:\n    matches = re.finditer(\"[a-z]+\", seq) # List of Match objects.\n    lower_output.append([match.group(0) for match in matches]) # add substrings\n    lower_indx.append([match.start(0) for match in matches]) # add indices\n\nprint lower_output\n>>> [['defgdefgdefg'], ['wowhello', 'onemore'], []]\n\nprint lower_indx\n>>> [[9], [9, 23], []]\n"
        ], 
        "score": 2, 
        "id": 15821688, 
        "rank": 0
      }
    ], 
    "title": "Using regex to findall lowercase letters in string append to list. Python"
  }, 
  {
    "accepted_answer_post_id": 21292846, 
    "id": 21292763, 
    "answer_posts": [
      {
        "snippets": [
          "strsql = \"select * from student where SName='%s'\" % (check,)\n", 
          "strsql = \"select * from student where SName=?\"\ncur.execute(strsql, (check,))\n"
        ], 
        "score": 2, 
        "id": 21292846, 
        "rank": 0
      }
    ], 
    "title": "Python- How to compare strings between an access db and a variable?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 25458779, 
    "answer_posts": [
      {
        "snippets": [
          "value = timedelta(seconds=43880.6543)\n", 
          "value.total_seconds()\n", 
          "value = datetime(1900, 1, 1) + timedelta(days=43880.6543)\n# value will be February 2nd, 2020 in the afternoon\n"
        ], 
        "score": 7, 
        "id": 25460011, 
        "rank": 0
      }
    ], 
    "title": "How to convert float to timedelta seconds in python?"
  }, 
  {
    "accepted_answer_post_id": 28054943, 
    "id": 28054687, 
    "answer_posts": [
      {
        "snippets": [
          "self.line.installEventFilter(self)\n", 
          "event.pos()\n", 
          "class MyWindow(QWidget):\n    def __init__(self, *args):\n        QWidget.__init__(self, *args)\n\n    def actionFunct(self, argBool):\n        print 'actionFunct()', argBool\n\n    def buildGUI(self):\n        self.line=QLineEdit(self)\n        self.line.setText('My Line Edit')      \n        self.line.installEventFilter(self)\n\n        self.menu=QMenu(self.line)\n\n        for i in range(3):\n            actn=QAction('Action 0%s'%i, self.menu, checkable=True)\n            actn.triggered.connect(self.actionFunct)\n            self.menu.addAction(actn)\n\n        self.line.setContextMenuPolicy(Qt.CustomContextMenu)\n        self.line.connect(self.line, SIGNAL(\"customContextMenuRequested(QPoint)\" ), self.leftClicked)\n\n        self.line.cursorPositionChanged.connect(self.leftClicked)\n\n        layout=QVBoxLayout(self)\n        layout.addWidget(self.line)\n        self.setLayout(layout)\n\n\n    def eventFilter(self, widget, event):\n        print 'eventFilter', widget, event\n        if widget == self.line and isinstance(event, QMouseEvent) and event.buttons() & Qt.LeftButton:\n            self.leftClicked(event.pos())\n            return True\n        return False\n\n    def leftClicked(self, QPos):\n        print 'leftClicked', QPos\n        parentPosition = self.line.mapToGlobal(QPoint(0, 0))        \n        menuPosition = parentPosition + QPos\n\n        self.menu.move(menuPosition)\n        self.menu.show() \n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    w = MyWindow()\n    w.buildGUI()\n    w.show()\n    sys.exit(app.exec_())\n", 
          "current_mouse_cursor=QCursor.pos()\n", 
          "QtCore.QPoint(852, 595)\n", 
          "    self.menu.move(current_mouse_cursor)\n    self.menu.show() \n", 
          "from PyQt4.QtCore import *\nfrom PyQt4.QtGui import *\nimport sys\n\nclass MyWindow(QWidget):\n    def __init__(self, *args):\n        QWidget.__init__(self, *args)\n\n    def actionFunct(self, argBool):\n        print 'actionFunct()', argBool\n\n    def buildGUI(self):\n        self.line=QLineEdit(self)\n        self.line.setText('My Line Edit')      \n\n        self.menu=QMenu(self.line)\n\n        for i in range(3):\n\n            actn=QAction('Action 0%s'%i, self.menu, checkable=True)\n            actn.triggered.connect(self.actionFunct)\n            self.menu.addAction(actn)\n\n        self.line.setContextMenuPolicy(Qt.CustomContextMenu)\n        self.line.connect(self.line, SIGNAL(\"customContextMenuRequested(QPoint)\" ), self.rightClicked)\n\n        self.line.cursorPositionChanged.connect(self.leftClicked)\n\n        layout=QVBoxLayout(self)\n        layout.addWidget(self.line)\n        self.setLayout(layout)\n\n\n    def leftClicked(self, arg):\n        print 'leftClicked', arg, QCursor.pos()\n        self.menu.move(QCursor.pos())\n        self.menu.show() \n\n    def rightClicked(self, QPos):\n        print 'rightClicked', QPos\n        parentPosition = self.line.mapToGlobal(QPoint(0, 0))        \n        menuPosition = parentPosition + QPos\n\n        self.menu.move(menuPosition)\n        self.menu.show() \n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    w = MyWindow()\n    w.buildGUI()\n    w.show()\n    sys.exit(app.exec_())\n"
        ], 
        "score": 4, 
        "id": 28057169, 
        "rank": 0
      }
    ], 
    "title": "How to show QMenu on left click"
  }, 
  {
    "accepted_answer_post_id": 29800456, 
    "id": 29788809, 
    "answer_posts": [
      {
        "snippets": [
          "def RebuildProxy(func, token, serializer, kwds):\n    '''\n    Function used for unpickling proxy objects.\n\n    If possible the shared object is returned, or otherwise a proxy for it.\n    '''\n    server = getattr(process.current_process(), '_manager_server', None)\n\n    if server and server.address == token.address:\n        return server.id_to_obj[token.id][0] # This returns the referent\n    else:\n        incref = (\n            kwds.pop('incref', True) and\n            not getattr(process.current_process(), '_inheriting', False)\n            )\n        return func(token, serializer, incref=incref, **kwds) # This returns the Proxy\n", 
          "import multiprocessing.managers as m\nfrom multiprocessing import process\n\ndef RebuildProxyNoReferent(func, token, serializer, kwds):\n    '''\n    Function used for unpickling proxy objects.\n\n    The Proxy object is always returned.\n    '''\n    incref = (\n    kwds.pop('incref', True) and\n    not getattr(process.current_process(), '_inheriting', False)\n    )\n    return func(token, serializer, incref=incref, **kwds)\n\nm.RebuildProxy = RebuildProxyNoReferent  # Monkey-patch it\n\nclass Foo(object):\n\n    def __init__(self):\n        self.manager = MyManager()\n        self.manager.register('Bar', Bar)\n        self.manager.start()\n        self.bar = self.manager.Bar()\n        print(type(self.bar))\n        self.bar.set_proxy(self.bar)\n\n\nclass Bar(object):\n\n    def __init__(self):\n        self.proxy = None\n\n    def set_proxy(self, proxy):\n        print(\"got {}\".format(type(proxy)))\n        self.proxy = proxy\n\nclass MyManager(m.BaseManager):\n    pass\n\ntest = Foo()\n", 
          "import multiprocessing.managers as m\nfrom multiprocessing.managers import BaseProxy\nfrom multiprocessing import process\n\ndef RebuildProxyNoReferent(func, token, serializer, kwds):\n    '''\n    Function used for unpickling proxy objects.\n\n    If possible the shared object is returned, or otherwise a proxy for it.\n    '''\n    incref = (\n    kwds.pop('incref', True) and\n    not getattr(process.current_process(), '_inheriting', False)\n    )\n    return func(token, serializer, incref=incref, **kwds)\n\nclass MyProxy(BaseProxy):\n    _exposed_ = (\"set_proxy\",)\n    def set_proxy(self, arg):\n        self._callmethod('set_proxy', (arg,))\n\n    def __reduce__(self):\n        ret = super(MyProxy, self).__reduce__()\n        # RebuildProxy is the first item in the ret tuple.\n        # So lets replace it, just for our proxy.\n        ret = (RebuildProxyNoReferent,) + ret[1:]\n        return ret\n\nclass Foo(object):\n\n    def __init__(self):\n        self.manager = MyManager()\n        self.manager.register('Bar', Bar, MyProxy)\n        self.manager.start()\n        self.bar = self.manager.Bar()\n        print(type(self.bar))\n        self.bar.set_proxy(self.bar)\n"
        ], 
        "score": 1, 
        "id": 29800456, 
        "rank": 0
      }
    ], 
    "title": "Python: How to pass an Autoproxy object"
  }, 
  {
    "accepted_answer_post_id": 7637171, 
    "id": 7636963, 
    "answer_posts": [
      {
        "snippets": [
          "self.indices[2][5]\n", 
          "matching_keys = None\n\nfor i in range(self.order):\n    if keyWords[i] is not None:\n        if matching_keys is None:\n            matching_keys = self.indices[i][keyWords[i]]\n        else:\n            matching_keys &= self.indices[i][keyWords[i]]\n\nmatching_keys = list(matching_keys) if matching_keys else []\n"
        ], 
        "score": 4, 
        "id": 7637056, 
        "rank": 0
      }
    ], 
    "title": "Optimising partial dictionary key match"
  }, 
  {
    "accepted_answer_post_id": 8328780, 
    "id": 8328264, 
    "answer_posts": [
      {
        "snippets": [
          "import re\n", 
          "s = 'abcd<aaa>some thing <#^&*some more!#$@ </aaa> abcdefgasf <aaa>asfaf %^&*$saf  asf %$^ </aaa> <another tag> some text </another tag> <aaa>sfafaff#%%%^^</aaa>'\n", 
          "inside_tags = re.findall('<aaa>(.+?)</aaa>', s)\n", 
          "cleaned_contents = [ re.sub('[^\\w ]', '_' , content) for content in inside_tags ]\n", 
          "zipped = zip(inside_tags, cleaned_contents)\n", 
          "for old, new in zipped:\n    s = s.replace(old, new)\n"
        ], 
        "score": 2, 
        "id": 8328780, 
        "rank": 0
      }
    ], 
    "title": "replacing special characters in between the multiple substring in a string"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 20254289, 
    "answer_posts": [
      {
        "snippets": [
          "fig, (ax1, ax2) = plt.subplots(ncols=2)\n\nx = np.random.uniform(0, 1, 10)\ny = np.random.uniform(0, 1, 10)\n\n# Plot non-ordered points\nax1.plot(x, y, marker=\"o\", markerfacecolor=\"r\")\n\n# Order points by their x-value\nindexs_to_order_by = x.argsort()\nx_ordered = x[indexs_to_order_by]\ny_ordered = y[indexs_to_order_by]\n\nax2.plot(x_ordered, y_ordered, marker=\"o\", markerfacecolor=\"r\")\n"
        ], 
        "score": 5, 
        "id": 20261965, 
        "rank": 0
      }
    ], 
    "title": "Python Matplotlib lines in scatter plot"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 39423763, 
    "answer_posts": [
      {
        "snippets": [
          " f.closed\n", 
          "f.close()\n"
        ], 
        "score": 2, 
        "id": 39423793, 
        "rank": 0
      }
    ], 
    "title": "Delete a file after reading"
  }, 
  {
    "accepted_answer_post_id": 21122445, 
    "id": 21102293, 
    "answer_posts": [
      {
        "snippets": [
          "from kafka.client import KafkaClient\nfrom kafka.producer import SimpleProducer,KeyedProducer\nimport logging,sys\n\nclass KafkaLoggingHandler(logging.Handler):\n\n    def __init__(self, host, port, topic, key=None):\n        logging.Handler.__init__(self)\n        self.kafka_client = KafkaClient(host, port)\n        self.key = key\n        if key is None:\n            self.producer = SimpleProducer(self.kafka_client, topic)\n        else:\n            self.producer = KeyedProducer(self.kafka_client, topic)\n\n    def emit(self, record):\n        #drop kafka logging to avoid infinite recursion\n        if record.name == 'kafka':\n            return\n        try:\n            #use default formatting\n            msg = self.format(record)\n            #produce message\n            if self.key is None:\n                self.producer.send_messages(msg)\n            else:\n                self.producer.send(self.key, msg)\n        except:\n            import traceback\n            ei = sys.exc_info()\n            traceback.print_exception(ei[0], ei[1], ei[2], None, sys.stderr)\n            del ei\n\n    def close(self):\n        self.producer.stop()\n        logging.Handler.close(self)\n\nkh = KafkaLoggingHandler(\"localhost\", 9092, \"test_log\")\n#OR\n#kh = KafkaLoggingHandler(\"localhost\", 9092, \"test_log\", \"key1\")\n\nlogger = logging.getLogger(\"\")\nlogger.setLevel(logging.DEBUG)\nlogger.addHandler(kh)\nlogger.info(\"The %s boxing wizards jump %s\", 5, \"quickly\")\nlogger.debug(\"The quick brown %s jumps over the lazy %s\", \"fox\",  \"dog\")\ntry:\n    import math\n    math.exp(1000)\nexcept:\n    logger.exception(\"Problem with %s\", \"math.exp\")\n"
        ], 
        "score": 11, 
        "id": 21122445, 
        "rank": 0
      }
    ], 
    "title": "How to write to Kafka from Python logging module?"
  }, 
  {
    "accepted_answer_post_id": 32038024, 
    "id": 32038012, 
    "answer_posts": [
      {
        "snippets": [
          "import json\nout = json.load(file_object)\n", 
          "out = eval(file_object.read())\n", 
          "import ast\nout = ast.literal_eval(file_object.read())\n"
        ], 
        "score": 3, 
        "id": 32038024, 
        "rank": 0
      }
    ], 
    "title": "Reading from file into Python data structure"
  }, 
  {
    "accepted_answer_post_id": 37425431, 
    "id": 37424942, 
    "answer_posts": [
      {
        "snippets": [
          "from pyspark.sql.functions import col, avg, when\n\ndf = sc.parallelize([\n    (10, 0, 0), (20, 0, 0), (-1, 1, 0), (-1, 0, 1)\n]).toDF([\"age\", \"missing_age\", \"unknown_age\"])\n\navg_age = df.where(\n    (col(\"unknown_age\") != 1) & (col(\"missing_age\") != 1)\n).agg(avg(\"age\")).first()[0]\n\ndf.withColumn(\"age_imp\", when(\n    (col(\"unknown_age\") == 1) | (col(\"missing_age\") == 1), avg_age\n).otherwise(col(\"age\")))\n", 
          "df = sc.parallelize([\n    (10, 0, 0), (20, 0, 0), (None, 1, 0), (None, 0, 1)\n]).toDF([\"age\", \"missing_age\", \"unknown_age\"])\n\ndf.na.fill(df.na.drop().agg(avg(\"age\")).first()[0], [\"age\"])\n"
        ], 
        "score": 2, 
        "id": 37425431, 
        "rank": 0
      }
    ], 
    "title": "Pyspark Dataframe Imputations -- Replace Unknown & Missing Values with Column Mean based on specified condition"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 34125613, 
    "answer_posts": [
      {
        "snippets": [
          "_dict = {\n    \"PerezHilton\": {\n        \"name\": \"Perez Hilton\",\n        \"following\": [\n            \"tomCruise\",\n            \"katieH\",\n            \"NicoleKidman\"\n        ],\n        \"location\": \"Hollywood, California\",\n        \"web\": \"http://www.PerezH...\",\n        \"bio\": [\n            \"Perez Hilton is the creator and writer of one of the most famous websites\",\n            \"in the world. And he also loves music - a lot!\"\n        ]\n    },\n    \"tomCruise\": {\n        \"name\": \"Tom Cruise\",\n        \"following\": [\n            \"katieH\",\n            \"NicoleKidman\"\n        ],\n        \"location\": \"Los Angeles, CA\",\n        \"web\": \"http://www.tomcruise.com\",\n        \"bio\": [\n            \"Official TomCruise.com crew tweets. We love you guys!\",\n            \"Visit us at Facebook!\"\n        ]\n    }\n}    \n\ndef str_generator(key, value):\n    if isinstance(value, str):\n        return key +': ' + value\n    elif key == 'bio':\n        return key + ':\\n' + '\\n'.join(value)\n    else:\n        return key + ': ' + str(value)\n\n\na = \"\"\n\n\nfor key, value in _dict.items():\n    a += ('----------\\n' + key + '\\n')\n    for _key, _value in value.items():\n        a += (''.join(str_generator(_key, _value)) + '\\n')\n\n\nprint(a)\n", 
          "----------\ntomCruise\nlocation: Los Angeles, CA\nfollowing: ['katieH', 'NicoleKidman']\nname: Tom Cruise\nbio:\nOfficial TomCruise.com crew tweets. We love you guys!\nVisit us at Facebook!\nweb: http://www.tomcruise.com\n----------\nPerezHilton\nlocation: Hollywood, California\nfollowing: ['tomCruise', 'katieH', 'NicoleKidman']\nname: Perez Hilton\nbio:\nPerez Hilton is the creator and writer of one of the most famous websites\nin the world. And he also loves music - a lot!\nweb: http://www.PerezH...\n"
        ], 
        "score": 2, 
        "id": 34125826, 
        "rank": 0
      }
    ], 
    "title": "how to break a string or dictionary into multiple lines in python?"
  }, 
  {
    "accepted_answer_post_id": 1810121, 
    "id": 1810109, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import ast\n>>> print ast.literal_eval(\"(8, 12.25), (13, 15), (16.75, 18.5)\")\n((8, 12.25), (13, 15), (16.75, 18.5))\n"
        ], 
        "score": 19, 
        "id": 1810121, 
        "rank": 0
      }
    ], 
    "title": "Parsing a string which represents a list of tuples"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 29225008, 
    "answer_posts": [
      {
        "snippets": [
          ">>> \"\\xF0\\x9F\\x8C\\x80\".decode('utf8')\nu'\\U0001f300'\n", 
          "11110... 10...... 10...... 10......\n", 
          ">>> u''\nu'\\U0001f300'\n>>> unichr(0x1f300)\nu'\\U0001f300'\n>>> bin(0x1f300)\n'0b11111001100000000'\n", 
          "11110... 10...... 10...... 10......\n11110000 10011111 10001100 10000000\n", 
          ">>> 0b11110000100111111000110010000000\n4036988032\n>>> hex(4036988032)\n'0xf09f8c80'\n", 
          ">>> bin(0x1f300 - 0x10000)[2:].rjust(20, '0')\n'00001111001100000000'\n>>> _[:10], _[10:]\n('0000111100', '1100000000')\n>>> hex(0b0000111100 + 0xd800)\n'0xd83c'\n>>> hex(0b1100000000 + 0xdc00)\n'0xdf00'\n"
        ], 
        "score": 5, 
        "id": 29225126, 
        "rank": 0
      }
    ], 
    "title": "Escaping unicode strings in python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 13058758, 
    "answer_posts": [
      {
        "snippets": [
          "def Youare(master):\n    You_are = Toplevel(master)\n    #...\n\nmaster = Tk()\nYouare(master)\nmaster.mainloop()\n"
        ], 
        "score": 1, 
        "id": 13062273, 
        "rank": 0
      }
    ], 
    "title": "Buffer Tkinter window"
  }, 
  {
    "accepted_answer_post_id": 1614643, 
    "id": 1614613, 
    "answer_posts": [
      {
        "snippets": [
          "print b[(0,1,2)[0]], b[(0,1,2)[1]], b[(0,1,2)[2]]\n", 
          "print b[0], b[1], b[2]\n"
        ], 
        "score": 0, 
        "id": 1614642, 
        "rank": 0
      }
    ], 
    "title": "How does indexing a list with a tuple work?"
  }, 
  {
    "accepted_answer_post_id": 28079690, 
    "id": 28079670, 
    "answer_posts": [
      {
        "snippets": [
          "ListA = [(1,1),(1,2),(1,3),(1,4),(1,5)]\nListB = [(1,1),(2,1),(3,1)]\nprint(set(ListA).intersection(ListB))\nset([(1, 1)])\n", 
          "st_a = {(1, 1), (1, 2), (1, 3), (1, 4), (1, 5)}\nst_b = {(1, 1), (2, 1), (3, 1)}\nprint(st.intersection(st_b))\n", 
          "if st_a.intersection(st_b):\n     print(\"There is an overlap\")            \nelse:\n    print(\"There is no overlap\")\n"
        ], 
        "score": 6, 
        "id": 28079690, 
        "rank": 0
      }
    ], 
    "title": "How to check for common elements between two lists in python"
  }, 
  {
    "accepted_answer_post_id": 4005562, 
    "id": 4005507, 
    "answer_posts": [
      {
        "snippets": [
          "    >>> from pyftpdlib.authorizers import DummyAuthorizer\n>>> from pyftpdlib.handlers import FTPHandler\n>>> from pyftpdlib.servers import FTPServer\n>>>\n>>> authorizer = DummyAuthorizer()\n>>> authorizer.add_user(\"user\", \"12345\", \"/home/giampaolo\", perm=\"elradfmw\")\n>>> authorizer.add_anonymous(\"/home/nobody\")\n>>>\n>>> handler = FTPHandler\n>>> handler.authorizer = authorizer\n>>>\n>>> server = FTPServer((\"127.0.0.1\", 21), handler)\n>>> server.serve_forever()\n[I 13-02-19 10:55:42] >>> starting FTP server on 127.0.0.1:21 <<<\n[I 13-02-19 10:55:42] poller: <class 'pyftpdlib.ioloop.Epoll'>\n[I 13-02-19 10:55:42] masquerade (NAT) address: None\n[I 13-02-19 10:55:42] passive ports: None\n[I 13-02-19 10:55:42] use sendfile(2): True\n[I 13-02-19 10:55:45] 127.0.0.1:34178-[] FTP session opened (connect)\n[I 13-02-19 10:55:48] 127.0.0.1:34178-[user] USER 'user' logged in.\n[I 13-02-19 10:56:27] 127.0.0.1:34179-[user] RETR /home/giampaolo/.vimrc completed=1 bytes=1700 seconds=0.001\n[I 13-02-19 10:56:39] 127.0.0.1:34179-[user] FTP session closed (disconnect).\n"
        ], 
        "score": 2, 
        "id": 15476842, 
        "rank": 0
      }
    ], 
    "title": "Simple code for FTP Server in python"
  }, 
  {
    "accepted_answer_post_id": 22922252, 
    "id": 22922086, 
    "answer_posts": [
      {
        "snippets": [
          ">>> from collections import Counter\n>>> from itertools import repeat, chain\n>>> sum((Counter({tuple(i[:-1]): i[-1]}) for i in input), Counter())\nCounter({('a', 'b'): 3, ('a', 'c'): 1})\n", 
          ">>> [[a, b, n] for (a,b),n in _.items()]\n[['a', 'b', 3], ['a', 'c', 1]]\n"
        ], 
        "score": 2, 
        "id": 22922408, 
        "rank": 0
      }
    ], 
    "title": "Identify duplicates in a list of lists and sum up their last items"
  }, 
  {
    "accepted_answer_post_id": 28689375, 
    "id": 28688226, 
    "answer_posts": [
      {
        "snippets": [
          "#set up frame\ndf =pd.DataFrame({'Team Name':['x','y'], 'Nb of teammates':[2,1], 'Team Leader One':['Joe','Jack'],'Team Leader Two':['Joey',None]})\n", 
          "pd.melt(df,id_vars=['Team Name','Nb of teammates'],value_vars=['Team Leader One','Team Leader Two']).dropna()\n", 
          "   Team Name    Nb of teamates  variable            value\n0   x           2               Team Leader One     Joe\n1   y           1               Team Leader One     Jack\n2   x           2               Team Leader Two     Joey\n"
        ], 
        "score": 1, 
        "id": 28689375, 
        "rank": 0
      }
    ], 
    "title": "Python Pandas inserting new rows with colums values"
  }, 
  {
    "accepted_answer_post_id": 19413342, 
    "id": 19412828, 
    "answer_posts": [
      {
        "snippets": [
          ">>> a = [1.3, 2.1, 9999., 5., 3.7 ,6.6, 9999., 7.4, 9999., 3.5, 7, 1.2, 9999.]\n>>> sorted(set(a))[-2]\n7.4\n>>>\n", 
          ">>> from timeit import timeit\n>>> timeit(\"a=range(10000000);print sorted(set(a))[-2]\", number=10)\n9999998\n9999998\n9999998\n9999998\n9999998\n9999998\n9999998\n9999998\n9999998\n9999998\n34.327036257401424\n>>> # This is NPE's answer\n>>> timeit(\"a=range(10000000);maxa = max(a);print max(val for val in a if val != maxa)\", number=10)\n9999998\n9999998\n9999998\n9999998\n9999998\n9999998\n9999998\n9999998\n9999998\n9999998\n53.22811809880869\n>>>\n"
        ], 
        "score": 5, 
        "id": 19413342, 
        "rank": 0
      }
    ], 
    "title": "Find second largest element in list with repeated elements"
  }, 
  {
    "accepted_answer_post_id": 18926767, 
    "id": 18926758, 
    "answer_posts": [
      {
        "snippets": [
          "(os.stat(f).st_size, os.path.realpath(f))\n", 
          "result = []\nfor f in glob.glob('*.sh'):\n    item = (os.stat(f).st_size, os.path.realpath(f))\n    result.append(item)\n", 
          "[[os.stat(f).st_size, os.path.realpath(f)] for f in glob.glob('*.sh')]\n"
        ], 
        "score": 8, 
        "id": 18926767, 
        "rank": 0
      }
    ], 
    "title": "Python tuple instead of list"
  }, 
  {
    "accepted_answer_post_id": 11939238, 
    "id": 11939207, 
    "answer_posts": [
      {
        "snippets": [
          "new_data = {k: v for k, v in data.iteritems() if v[0] <= 30}\n", 
          "for k, v in data.items():\n    if v[0] > 30:\n        del data[k]\n"
        ], 
        "score": 14, 
        "id": 11939238, 
        "rank": 0
      }
    ], 
    "title": "deleting entries in a dictionary based on a condition"
  }, 
  {
    "accepted_answer_post_id": 24599315, 
    "id": 24599207, 
    "answer_posts": [
      {
        "snippets": [
          ">>> pairs = [('cheese', 'queso'), ('red', 'rojo'), ('school', 'escuela')]\n>>> pairs[]\n  File \"<stdin>\", line 1\n    pairs[]\n          ^\nSyntaxError: invalid syntax\n>>>\n", 
          ">>> pairs = [('cheese', 'queso'), ('red', 'rojo'), ('school', 'escuela')]\n>>> pairs[0]  # Remember that Python indexing starts at 0\n('cheese', 'queso')\n>>> pairs[1]\n('red', 'rojo')\n>>> pairs[2]\n('school', 'escuela')\n>>> len(pairs[0])  # Length of tuple at index 0\n2\n>>> len(pairs[1])  # Length of tuple at index 1\n2\n>>> len(pairs[2])  # Length of tuple at index 2\n2\n>>>\n"
        ], 
        "score": 1, 
        "id": 24599315, 
        "rank": 0
      }
    ], 
    "title": "How to find the length of tuple inside a list?"
  }, 
  {
    "accepted_answer_post_id": 33730589, 
    "id": 33729700, 
    "answer_posts": [
      {
        "snippets": [
          "import pymongo\nclient = pymongo.MongoClient()\ndb = client.test\ncollection = db.collection\n", 
          "collection.distinct('cust_id', {'city': 'Pittsburg'})\n", 
          "['0044234', '012345']\n", 
          ">>> cust_ids = set()\n>>> for element in collection.find({'city': 'Pittsburg'}):\n...     cust_ids.add(element['cust_id'])\n... \n>>> cust_ids\n{'0044234', '012345'}\n", 
          " >>> list(collection.aggregate([{'$match': {'city': 'Pittsburg'} }, {'$group': {'_id': None, 'cust_ids': {'$push': '$cust_id'}}}]))[0]['cust_ids']\n['0044234', '012345']\n", 
          ">>> from pprint import pprint\n>>> pipeline = [{'$group': {'_id': '$city', 'cust_ids': {'$addToSet': '$cust_id'}, 'count': {'$sum': 1}}}]\n>>> pprint(list(collection.aggregate(pipeline)))\n[{'_id': 'San Diego', 'count': 1, 'cust_ids': ['0097314']},\n {'_id': 'Pittsburg', 'count': 2, 'cust_ids': ['012345', '0044234']}]\n"
        ], 
        "score": 0, 
        "id": 33730589, 
        "rank": 0
      }
    ], 
    "title": "Passing variables onto a MongoDB Query"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 16257012, 
    "answer_posts": [
      {
        "snippets": [
          "str(journals[position]).rstrip()\n", 
          "str(journals[position])\n"
        ], 
        "score": 1, 
        "id": 16257033, 
        "rank": 0
      }
    ], 
    "title": "Print strings without full stop going onto next line in Python"
  }, 
  {
    "accepted_answer_post_id": 9534008, 
    "id": 9533507, 
    "answer_posts": [
      {
        "snippets": [
          "class MyAdminForm(forms.ModelForm):\n    new_field = forms.FileField()\n    # Rest of the form goes here\n"
        ], 
        "score": 2, 
        "id": 9534008, 
        "rank": 0
      }
    ], 
    "title": "Django - how to set forms.FileField name"
  }, 
  {
    "accepted_answer_post_id": 15034373, 
    "id": 15034151, 
    "answer_posts": [
      {
        "snippets": [
          "import os\nimport shutil\n\ndef copydirectorykut(src, dst):\n    os.chdir(dst)\n    list=os.listdir(src)\n    nom= src+'.txt'\n    fitx= open(nom, 'w')\n\n    for item in list:\n        fitx.write(\"%s\\n\" % item)\n\n    fitx.close()\n\n    f = open(nom,'r')\n    for line in f.readlines():\n        if \".\" in line:\n            shutil.copy(src+'/'+line[:-1],dst+'/'+line[:-1])\n        else:\n            if not os.path.exists(dst+'/'+line[:-1]):\n                os.makedirs(dst+'/'+line[:-1])\n                copydirectorykut(src+'/'+line[:-1],dst+'/'+line[:-1])\n            copydirectorykut(src+'/'+line[:-1],dst+'/'+line[:-1])\n    f.close()\n    os.remove(nom)\n    os.chdir('..')\n"
        ], 
        "score": -2, 
        "id": 38698619, 
        "rank": 0
      }
    ], 
    "title": "Copy directory contents into a directory with python"
  }, 
  {
    "accepted_answer_post_id": 39644647, 
    "id": 37986963, 
    "answer_posts": [
      {
        "snippets": [
          "memory = '10g'\npyspark_submit_args = ' --driver-memory ' + memory + ' pyspark-shell'\nos.environ[\"PYSPARK_SUBMIT_ARGS\"] = pyspark_submit_args\n"
        ], 
        "score": 3, 
        "id": 39644647, 
        "rank": 0
      }
    ], 
    "title": "Set driver's memory size programmatically in PySpark"
  }, 
  {
    "accepted_answer_post_id": 37859207, 
    "id": 37838526, 
    "answer_posts": [
      {
        "snippets": [
          "p4.run(\"dirs\", path+'*')\n", 
          "[{'dir': '//Depot/path/dirname1'}, {'dir': '//Depot/path/dirname2'}]\n", 
          "p4.run(\"files\", path+'*')\n", 
          "[{'rev': '1', 'time': '1465999632', 'action': 'add', 'type': 'text', 'depotFile': '//Depot/path/dirname1/filename.txt', 'change': '999999'}]\n"
        ], 
        "score": 3, 
        "id": 37859207, 
        "rank": 0
      }
    ], 
    "title": "How to read depot's folders structure by p4python without syncing?"
  }, 
  {
    "accepted_answer_post_id": 37193152, 
    "id": 37192942, 
    "answer_posts": [
      {
        "snippets": [
          "import re\nfrom datetime import datetime\n\ntext = \"Campaign on 01.11.2015\"\n\nmatch = re.search(r'\\d{2}.\\d{2}.\\d{4}', text)\ndate = datetime.strptime(match.group(), '%d.%m.%Y').date()\nprint str(date).replace(\"-\", \"\")\n20151101\n"
        ], 
        "score": 2, 
        "id": 37193152, 
        "rank": 0
      }
    ], 
    "title": "Extract date from string in python"
  }, 
  {
    "accepted_answer_post_id": 35175996, 
    "id": 35171721, 
    "answer_posts": [
      {
        "snippets": [
          "Matrix = [\n      [1, 2,3], \n      [3, 4,5],\n      [5,6,7]\n     ]\n", 
          "def ContinSubSeq(lst):\n  size=len(lst)\n  for start in range(size):\n    for end in range(start+1,size+1):\n      yield (start,end)\n\ndef getsubmat(mat,start_row,end_row,start_col,end_col):\n  return [i[start_col:end_col] for i in mat[start_row:end_row] ]\n\ndef get_all_sub_mat(mat):\n  rows = len(mat)\n  cols = len(mat[0])\n  for start_row,end_row in ContinSubSeq(list(range(rows))):\n    for start_col,end_col in ContinSubSeq(list(range(cols))):\n      yield getsubmat(mat,start_row,end_row,start_col,end_col)\n", 
          "for i in get_all_sub_mat(Matrix):\n  print i\n", 
          "def get_all_sub_mat(mat):\n    rows = len(mat)\n    cols = len(mat[0])\n    def ContinSubSeq(lst):\n        size=len(lst)\n        for start in range(size):\n            for end in range(start+1,size+1):\n                yield (start,end)\n    for start_row,end_row in ContinSubSeq(list(range(rows))):\n        for start_col,end_col in ContinSubSeq(list(range(cols))):\n            yield [i[start_col:end_col] for i in mat[start_row:end_row] ]\n"
        ], 
        "score": 2, 
        "id": 35175996, 
        "rank": 0
      }
    ], 
    "title": "Find all submatrices of a given matrix"
  }, 
  {
    "accepted_answer_post_id": 3556672, 
    "id": 3556613, 
    "answer_posts": [
      {
        "snippets": [
          "B[:2,:2] += A\n", 
          "C = B.copy()\nC[:2,:2] += A\n"
        ], 
        "score": 1, 
        "id": 3556672, 
        "rank": 0
      }
    ], 
    "title": "Adding an array in numpy at a specified location"
  }, 
  {
    "accepted_answer_post_id": 14972180, 
    "id": 14924721, 
    "answer_posts": [
      {
        "snippets": [
          "import random\nline = random.choice(open('data.txt').readlines())\n"
        ], 
        "score": 13, 
        "id": 14924739, 
        "rank": 0
      }
    ], 
    "title": "how to choose a random line from a text file"
  }, 
  {
    "accepted_answer_post_id": 22979217, 
    "id": 22979109, 
    "answer_posts": [
      {
        "snippets": [
          "In [11]: '61.245.160.0' < '61.245.175.255'\nOut[11]: True\n", 
          "In [12]: df[('61.245.160.0' < df.ip) & (df.ip < '61.245.175.255')]\n", 
          "In [13]: df.loc['61.245.160.0':'61.245.175.255']\n"
        ], 
        "score": 4, 
        "id": 22979217, 
        "rank": 0
      }
    ], 
    "title": "Filter Pandas DataFrame by ip address range"
  }, 
  {
    "accepted_answer_post_id": 19635622, 
    "id": 19635526, 
    "answer_posts": [
      {
        "snippets": [
          "thisone_pos = rr.find('JA=THISONE')\nrange_start = rr.rfind(\"JA=\", 0, thisone_pos) + 3\nrange_end = rr.find(';', range_start)\nprint rr[range_start:range_end]\n", 
          "re.findall(pattern, rr[::-1])\n"
        ], 
        "score": 3, 
        "id": 19635622, 
        "rank": 0
      }
    ], 
    "title": "Python regex - faster search"
  }, 
  {
    "accepted_answer_post_id": 1045182, 
    "id": 1045151, 
    "answer_posts": [
      {
        "snippets": [
          "a, b = b, b+a\n", 
          "t1 = b\nt2 = b+a\na = t1\nb = t2\n"
        ], 
        "score": 4, 
        "id": 1045174, 
        "rank": 0
      }
    ], 
    "title": "How to create Fibonacci Sequence in Java"
  }, 
  {
    "accepted_answer_post_id": 4152986, 
    "id": 4152963, 
    "answer_posts": [
      {
        "snippets": [
          "import sys\nprint sys.argv[0]\n"
        ], 
        "score": 71, 
        "id": 4152992, 
        "rank": 0
      }
    ], 
    "title": "Get the name of current script with Python"
  }, 
  {
    "accepted_answer_post_id": 2943520, 
    "id": 2943314, 
    "answer_posts": [
      {
        "snippets": [
          "from datetime import datetime\nthis_month = datetime.now().month\nHourEntries.objects.filter(date__month=this_month).aggregate(Sum(\"quantity\"))\n", 
          "HourEntries.objects.raw(\"select date_format(date, '%Y-%m') as month, sum(quantity) as hours from hourentries group by date_format(date, '%Y-%m') order by date;\")\n"
        ], 
        "score": 2, 
        "id": 2943520, 
        "rank": 0
      }
    ], 
    "title": "Django: Sum on an date attribute grouped by month/year"
  }, 
  {
    "accepted_answer_post_id": 2180257, 
    "id": 2180226, 
    "answer_posts": [
      {
        "snippets": [
          "import MySQLdb.cursors\nMySQLdb.connect(host='...', cursorclass=MySQLdb.cursors.DictCursor)\n"
        ], 
        "score": 50, 
        "id": 2180257, 
        "rank": 0
      }
    ], 
    "title": "Python: use mysqldb to import a MySQL table as a dictionary?"
  }, 
  {
    "accepted_answer_post_id": 8624624, 
    "id": 8624507, 
    "answer_posts": [
      {
        "snippets": [
          "class SomeListView(ListView):\n    model = Article\n    paginate_by = 100\n    template_name = \"app/template.html\"\n    context_object_name = \"articles\" # or use object_list\n\n    def get_queryset(self):\n        return Article.objects.order_by('-date')\n"
        ], 
        "score": 1, 
        "id": 8624552, 
        "rank": 0
      }
    ], 
    "title": "Django Paginate by Year"
  }, 
  {
    "accepted_answer_post_id": 25560797, 
    "id": 25560613, 
    "answer_posts": [
      {
        "snippets": [
          "from Tkinter import *\n\nroot = Tk()\n\nparentlist = ['one','two','three']\nl1 = Listbox()\nfor item in parentlist:\n    l1.insert(END, item)\n\nl1.grid(row=0, column=0)\nl2 = Listbox()\n\nl2.grid(row=0, column=1)\n\ndef onselect(event, test):\n    w = event.widget\n    index = w.curselection()[0]\n    print \"You selected: {0} and test variable is {1}\".format(index, test) \n    l2.insert(END, index ) # Instead of returning it, why not just insert it here?\n\nl1select = l1.bind('<<ListboxSelect>>',lambda event: onselect(event, 'Test'))\n\nroot.mainloop()\n"
        ], 
        "score": 1, 
        "id": 25560797, 
        "rank": 0
      }
    ], 
    "title": "Tkinter: How to dynamically insert items to another listbox?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 16121293, 
    "answer_posts": [
      {
        "snippets": [
          "import xml.etree.ElementTree as xmlParser\nxmlDoc = xmlParser.parse('path to your xml doc')\nrootElement = xmlDoc.getroot()\n\nfor element in rootElement.iter('description'):\n    element.tag = 'details'\n\n# Saving the xml\nxmlDoc.write('path to your new xml doc')\n"
        ], 
        "score": 4, 
        "id": 16121418, 
        "rank": 0
      }
    ], 
    "title": "Python for renaming XML elements"
  }, 
  {
    "accepted_answer_post_id": 25729636, 
    "id": 25729589, 
    "answer_posts": [
      {
        "snippets": [
          "html_content = str(listing)\n", 
          "html_content = listing.prettify()\n"
        ], 
        "score": 28, 
        "id": 25729636, 
        "rank": 0
      }
    ], 
    "title": "How to get HTML from a beautiful soup object"
  }, 
  {
    "accepted_answer_post_id": 2312184, 
    "id": 2310851, 
    "answer_posts": [
      {
        "snippets": [
          "pyplot.draw()\n", 
          "raw_input(\"Press enter when done...\")\n"
        ], 
        "score": 3, 
        "id": 2311326, 
        "rank": 0
      }
    ], 
    "title": "plotting lines without blocking execution"
  }, 
  {
    "accepted_answer_post_id": 36459411, 
    "id": 36458942, 
    "answer_posts": [
      {
        "snippets": [
          "import lxml.etree\nimport lxml.html\n\ndoc = lxml.html.fromstring(\"<html><body><p></body></html>\")\nbody = doc.find('body')\nbody.tag = \"body-not\"\nprint(lxml.etree.tostring(doc))\n", 
          "b'<html><body-not><p/></body-not></html>'\n"
        ], 
        "score": 4, 
        "id": 36459411, 
        "rank": 0
      }
    ], 
    "title": "How to rename a node with Python LXML?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 22000086, 
    "answer_posts": [
      {
        "snippets": [
          "import string\nclass NegativeParenFormatter(string.Formatter):\n    def format_field(self, value, format_spec):\n        try:\n            if value<0:\n                return \"(\" +  string.Formatter.format_field(self, -value, format_spec) + \")\"\n            else:\n                return string.Formatter.format_field(self, value, format_spec)\n        except:\n            string.Formatter.format_field(self, value, format_spec)\n\nf = NegativeParenFormatter()\nprint f.format(\"{0} is positive, {1} is negative, {2} is a string\", 3, -2, \"-4\")\n", 
          "'3 is positive, (2) is negative, -4 is a string'\n"
        ], 
        "score": 2, 
        "id": 22000817, 
        "rank": 0
      }
    ], 
    "title": "Python: format negative number with parentheses"
  }, 
  {
    "accepted_answer_post_id": 8625586, 
    "id": 5422613, 
    "answer_posts": [
      {
        "snippets": [
          "header = client.factory.create('HeaderNameInWSDL')\nheader.UserId = 'foo'\nheader.AccessToken = 'bar%n3'\nclient.set_options(soapheaders=header)\n"
        ], 
        "score": 1, 
        "id": 8625586, 
        "rank": 0
      }
    ], 
    "title": "Custom authentication in suds library (Python)"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 1413763, 
    "answer_posts": [
      {
        "snippets": [
          ">>> list(\"foobar\")\n['f', 'o', 'o', 'b', 'a', 'r']\n\n>>> ''.join(['f', 'o', 'o', 'b', 'a', 'r'])\n'foobar'\n"
        ], 
        "score": 1, 
        "id": 1413993, 
        "rank": 0
      }
    ], 
    "title": "python serialize string"
  }, 
  {
    "accepted_answer_post_id": 15799143, 
    "id": 15799012, 
    "answer_posts": [
      {
        "snippets": [
          "proc = subprocess.Popen(['./program_name', 'arg1', 'arg2', 'etc'], env=environ)\n", 
          "proc = subprocess.Popen('echo \"$MY_ENV_VAR\"', env=environ, shell=True)\n", 
          "proc = subprocess.Popen(['echo', os.path.expandvars('$MY_ENV_VAR')])\n", 
          "proc = subprocess.Popen(['echo', os.environ['MY_ENV_VAR']])\n"
        ], 
        "score": 2, 
        "id": 15799143, 
        "rank": 0
      }
    ], 
    "title": "How to get PID via subprocess.Popen with custom environment variable?"
  }, 
  {
    "accepted_answer_post_id": 29596252, 
    "id": 29595029, 
    "answer_posts": [
      {
        "snippets": [
          ">>> range(10,0)\n[]\n", 
          "   for i in reversed(range(0,size)):\n      for j in range(0,i+1):\n", 
          "python -i script.py\n"
        ], 
        "score": 0, 
        "id": 29595160, 
        "rank": 0
      }
    ], 
    "title": "Python for-loop to print a triangle"
  }, 
  {
    "accepted_answer_post_id": 18918049, 
    "id": 18916687, 
    "answer_posts": [
      {
        "snippets": [
          "if response.status_int == 404:\n    start_response('301 Redirect', [('Location', 'http://www.example.com/'),])\n    return []\nelse:\n    return response(environ, start_response)\n"
        ], 
        "score": 1, 
        "id": 18918049, 
        "rank": 0
      }
    ], 
    "title": "301 redirect in python middleware in google app engine"
  }, 
  {
    "accepted_answer_post_id": 854346, 
    "id": 854008, 
    "answer_posts": [
      {
        "snippets": [
          "import pymssql\nconn = pymssql.connect(host='SQL01', user='user', password='password', database='mydatabase')\ncur = conn.cursor()\ncur.execute('CREATE TABLE persons(id INT, name VARCHAR(100))')\n"
        ], 
        "score": 1, 
        "id": 854284, 
        "rank": 0
      }
    ], 
    "title": "Creating a SQL Server database from Python"
  }, 
  {
    "accepted_answer_post_id": 6649885, 
    "id": 6649589, 
    "answer_posts": [
      {
        "snippets": [
          "ld = [{'language': 'de', 'suggestion': 'fressen', 'comment': 'for animals'},\n{'language': 'de', 'suggestion': 'essen', 'comment': ''},\n{'language': 'fr', 'suggestion': 'manger', 'comment': ''},\n{'language': 'fr', 'suggestion': 'bouffer', 'comment': 'slang'}]\n\nlangs = {i['language'] for i in ld}\n\nd = []\n\nfor lang in langs:\n    d.append({\"language\": lang})\n    for key in ld[0].keys() - [\"language\"]:\n        d[-1][key] = [i[key] for i in ld if i[\"language\"] == lang]\n\nprint(d)\n", 
          "[{'comment': ['', 'slang'],\n  'language': 'fr',\n  'suggestion': ['manger', 'bouffer']},\n {'comment': ['for animals', ''],\n  'language': 'de',\n  'suggestion': ['fressen', 'essen']}]\n", 
          "d = {lang: \n        {i[\"suggestion\"]: i[\"comment\"]\n        for i in ld if i[\"language\"] == lang} \n    for lang in {i[\"language\"] for i in ld}}\n\nprint(d)\n", 
          "{'de': {'essen': '', 'fressen': 'for animals'},\n 'fr': {'bouffer': 'slang', 'manger': ''}}\n"
        ], 
        "score": 4, 
        "id": 6649885, 
        "rank": 0
      }
    ], 
    "title": "Transform dictionaries to a list of dictionaries according to their values"
  }, 
  {
    "accepted_answer_post_id": 6875235, 
    "id": 6874851, 
    "answer_posts": [
      {
        "snippets": [
          "float(row[2])\n", 
          "float(row[2].strip(\"'\\\"\"))\n"
        ], 
        "score": 0, 
        "id": 6875019, 
        "rank": 0
      }
    ], 
    "title": "integers when reading a csv file in python"
  }, 
  {
    "accepted_answer_post_id": 15578698, 
    "id": 15578628, 
    "answer_posts": [], 
    "title": "Inserting in order to a nested list"
  }, 
  {
    "accepted_answer_post_id": 29194859, 
    "id": 29185264, 
    "answer_posts": [
      {
        "snippets": [
          "def slicing(locationargument):\n    df.loc[locationargument]\n    do some stuff..\n    return something\n", 
          "def slicing(locationargumentstring):\n    df.loc[eval(locationargumentstring)]\n    do some stuff..\n    return something\n", 
          "getattr(df, \"loc[df['a']==5]\")\n", 
          "getattr(df, \"loc\")[eval(\"df['a']==5\")]\n", 
          "getattr(df, \"loc\")[df['a']==5]\n"
        ], 
        "score": 0, 
        "id": 29194859, 
        "rank": 0
      }
    ], 
    "title": "How do you slice a pandas dataframe as an argument in a function?"
  }, 
  {
    "accepted_answer_post_id": 12705513, 
    "id": 12705293, 
    "answer_posts": [
      {
        "snippets": [
          "([\\w][\\w]*'?\\w?)\n", 
          ">>> import re\n>>> s = \"John's mom went there, but he wasn't there. So she said: 'Where are you!!' 'A a'\"\n>>> re.compile(\"([\\w][\\w]*'?\\w?)\").findall(s)\n[\"John's\", 'mom', 'went', 'there', 'but', 'he', \"wasn't\", 'there', 'So', 'she', 'said', 'Where', 'are', 'you', 'A', \"a'\"]\n"
        ], 
        "score": 1, 
        "id": 16348820, 
        "rank": 0
      }
    ], 
    "title": "Regex to split words in Python"
  }, 
  {
    "accepted_answer_post_id": 13217010, 
    "id": 13214632, 
    "answer_posts": [
      {
        "snippets": [
          "class Server(QObject):\n    def __init__(self, parent=None):\n        QObject.__init__(self)\n\n    def incomingConnection(self, handle):\n        print \"incoming\"\n        self.client = Client(self)\n        self.client.SetSocket(handle)\n\n    def StartServer(self):\n        self.server = QTcpServer()\n        self.server.incomingConnection = self.incomingConnection\n        if self.server.listen(QHostAddress(\"0.0.0.0\"), 8888):\n            print \"Server is awake\"    \n        else:\n            print \"Server couldn't wake up\"\n"
        ], 
        "score": 1, 
        "id": 13217010, 
        "rank": 0
      }
    ], 
    "title": "PyQT4 Asynchronous QTcpServer (How to create event loop)"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 35426700, 
    "answer_posts": [
      {
        "snippets": [
          "from telegram import Updater\nimport logging\n\n# Enable logging\nlogging.basicConfig(\n        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n        level=logging.INFO)\n\nlogger = logging.getLogger(__name__)\n\n\n# Define a few command handlers. These usually take the two arguments bot and\n# update. Error handlers also receive the raised TelegramError object in error.\ndef start(bot, update):\n    bot.sendMessage(update.message.chat_id, text='Hi!')\n"
        ], 
        "score": 0, 
        "id": 35426914, 
        "rank": 0
      }
    ], 
    "title": "Send telegram from Raspberry Pi when button is pressed"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 2139377, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import struct\n>>> x = 0xa1a2a3a4\n>>> struct.unpack('4B', struct.pack('>I', x))\n(161, 162, 163, 164)\n"
        ], 
        "score": 10, 
        "id": 2141018, 
        "rank": 0
      }
    ], 
    "title": "breaking a 32-bit number into individual fields"
  }, 
  {
    "accepted_answer_post_id": 34732370, 
    "id": 34731589, 
    "answer_posts": [
      {
        "snippets": [
          "class Post(models.Model)\n    user = models.ForeignKey(User)\n    content = models.CharField(max_length=500)\n    ...\n\n    def __str__(self):\n        return self.user\n", 
          "def index_page(request):\n    logged_in_user = request.user\n    logged_in_user_posts = Post.objects.filter(user=user)\n\n    return render(request, 'index.html', {'posts': logged_in_user_posts})\n", 
          "<div>\n{% for post in posts %}\n\n    Username: {{ post.user.username }}\n    Post: {{ post.content }}\n\n    <br>\n\n{% endfor %}\n</div>\n"
        ], 
        "score": 0, 
        "id": 34732370, 
        "rank": 0
      }
    ], 
    "title": "how can I get all post of user's in django"
  }, 
  {
    "accepted_answer_post_id": 14226781, 
    "id": 14226763, 
    "answer_posts": [
      {
        "snippets": [
          "{\"test_id1\" : (resultValue, timeChecked)}\n", 
          "{\"test_id1\" : {\"resultValue\": resultValue, \"timeChecked\" : timeChecked }}\n"
        ], 
        "score": 0, 
        "id": 14226781, 
        "rank": 0
      }
    ], 
    "title": "python dictionary with two values for each key or class?"
  }, 
  {
    "accepted_answer_post_id": 8894180, 
    "id": 8894132, 
    "answer_posts": [
      {
        "snippets": [
          ">>> print '\\n'.join(' '.join(o) for o in a.items())\na value\nb another_value\n", 
          ">>> print '\\n'.join(map(' '.join, a.items()))\na value\nb another_value\n"
        ], 
        "score": 5, 
        "id": 8894173, 
        "rank": 0
      }
    ], 
    "title": "Python dict to user format string"
  }, 
  {
    "accepted_answer_post_id": 38346728, 
    "id": 38320008, 
    "answer_posts": [
      {
        "snippets": [
          "class ProductListAPIView(generics.ListAPIView):\n    def get_queryset(self):\n        return get_myobj()\nserializer_class = ProductSerializer\n", 
          "cache.set(cache_key, result, 60)\n", 
          "from django.views.decorators.cache import cache_page\n\nclass ProductListAPIView(generics.ListAPIView):\n    serializer_class = ProductSerializer\n\n    @cache_page(60)\n    def dispatch(self, *arg, **kwargs):\n        return super(ProductListAPIView, self).dispatch(*args, **kwargs)\n"
        ], 
        "score": 4, 
        "id": 38346728, 
        "rank": 0
      }
    ], 
    "title": "How to cache Django Rest Framework API calls?"
  }, 
  {
    "accepted_answer_post_id": 33030990, 
    "id": 33029071, 
    "answer_posts": [
      {
        "snippets": [
          "A = np.arange(16).reshape(4,4)\nprint np.ravel(A[row,:][:,column])\n", 
          "array([ 0,  2,  8, 10])\n"
        ], 
        "score": 1, 
        "id": 33030170, 
        "rank": 0
      }
    ], 
    "title": "How to select specific rows and columns in 2d array"
  }, 
  {
    "accepted_answer_post_id": 7942715, 
    "id": 7942589, 
    "answer_posts": [
      {
        "snippets": [
          "data = mysocket.recv(1024)\n", 
          "f = mysocket.makefile('rb')\ndata = f.read(1024)           # or any other file method call you need\n"
        ], 
        "score": 1, 
        "id": 7942647, 
        "rank": 0
      }
    ], 
    "title": "Client Not Receiving Data in Python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 4515226, 
    "answer_posts": [
      {
        "snippets": [
          "surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, 100, 100)\ncontext = cairo.Context(surface)\n# Draw something ...\n\nsurface.write_to_png('filename')\n"
        ], 
        "score": 4, 
        "id": 4515294, 
        "rank": 0
      }
    ], 
    "title": "Python + Cairo: How Do I Save a Drawing?"
  }, 
  {
    "accepted_answer_post_id": 2970757, 
    "id": 2969870, 
    "answer_posts": [
      {
        "snippets": [
          "import Tkinter as tk\n\nroot= tk.Tk()\n\nroot.title(\"wm min/max\")\n\n# this removes the maximize button\nroot.resizable(0,0)\n\n# # if on MS Windows, this might do the trick,\n# # but I wouldn't know:\n# root.attributes(toolwindow=1)\n\n# # for no window manager decorations at all:\n# root.overrideredirect(1)\n# # useful for something like a splash screen\n\nroot.mainloop()\n", 
          "toplevel.transient(1)\n"
        ], 
        "score": 18, 
        "id": 2970757, 
        "rank": 0
      }
    ], 
    "title": "Removing minimize/maximize buttons in Tkinter"
  }, 
  {
    "accepted_answer_post_id": 38784353, 
    "id": 38778758, 
    "answer_posts": [
      {
        "snippets": [
          "from dateutil.parser import parse # pip install python-dateutil\n\nraw = json.loads(raw)\nfor item in raw:\n    item['date_time'] = parse(item['date_time'])\n", 
          "return render_template('p.html', table=table)\n"
        ], 
        "score": 1, 
        "id": 38784353, 
        "rank": 0
      }
    ], 
    "title": "Trying to insert a table into jinja2 template from flask"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 18819721, 
    "answer_posts": [], 
    "title": "Calling nc/netcat in python with variable"
  }, 
  {
    "accepted_answer_post_id": 31985198, 
    "id": 31985132, 
    "answer_posts": [
      {
        "snippets": [
          ">>> datetime.datetime.strptime('2015 June 1','%Y %B %d')\ndatetime.datetime(2015, 6, 1, 0, 0)\n\n>>> datetime.datetime.strptime('2015 June 1','%Y %B %d').date()\ndatetime.date(2015, 6, 1)\n"
        ], 
        "score": 3, 
        "id": 31985198, 
        "rank": 0
      }
    ], 
    "title": "How to convert 2015 June 1 into date format in python"
  }, 
  {
    "accepted_answer_post_id": 23269582, 
    "id": 23269526, 
    "answer_posts": [
      {
        "snippets": [
          "name = 1\n", 
          "name = [1, 2, 3]\n", 
          "my_variable = 10 # set my_variable to 10, and use your brain\n"
        ], 
        "score": 2, 
        "id": 23269582, 
        "rank": 0
      }
    ], 
    "title": "Python set a variable not working"
  }, 
  {
    "accepted_answer_post_id": 1158002, 
    "id": 1157794, 
    "answer_posts": [
      {
        "snippets": [
          ">>> dt = time.strptime('2009-07-21', '%Y-%m-%d')\n>>> dt\n    time.struct_time(tm_year=2009, tm_mon=7, tm_mday=21, tm_hour=0, tm_min=0, tm_sec\n    =0, tm_wday=1, tm_yday=202, tm_isdst=-1)\n>>>\n", 
          ">>> time.strftime('%m/%d/%Y', dt)\n'07/21/2009'\n", 
          ">>> dt = datetime.datetime.strptime('2009-07-21', '%Y-%m-%d')\n>>> td = datetime.timedelta(days=20)\n>>> dt+td\ndatetime.datetime(2009, 8, 10, 0, 0)\n"
        ], 
        "score": 0, 
        "id": 1157838, 
        "rank": 0
      }
    ], 
    "title": "Creating DateTime from user inputted date"
  }, 
  {
    "accepted_answer_post_id": 5364017, 
    "id": 5359377, 
    "answer_posts": [
      {
        "snippets": [
          "import sys\nfrom PyQt4 import QtGui, QtCore\n\nclass TestSortFilterProxyModel(QtGui.QSortFilterProxyModel):\n    def __init__(self, parent=None):\n        super(TestSortFilterProxyModel, self).__init__(parent)\n        self.filter = ['folder0/file0', 'folder1/file1'];\n\n    def filterAcceptsRow(self, source_row, source_parent):\n        index0 = self.sourceModel().index(source_row, 0, source_parent)\n        filePath = self.sourceModel().filePath(index0) \n\n        for folder in self.filter:\n            if filePath.startsWith(folder) or QtCore.QString(folder).startsWith(filePath):\n                return True;        \n        return False    \n\nclass MainForm(QtGui.QMainWindow):\n    def __init__(self, parent=None):\n        super(MainForm, self).__init__(parent)\n\n        model = QtGui.QFileSystemModel(self)\n        model.setRootPath(QtCore.QDir.currentPath())\n\n        proxy = TestSortFilterProxyModel(self)\n        proxy.setSourceModel(model)     \n\n        self.view = QtGui.QTreeView()\n        self.view.setModel(proxy)\n\n        self.setCentralWidget(self.view)\n\ndef main():\n    app = QtGui.QApplication(sys.argv)\n    form = MainForm()\n    form.show()\n    app.exec_()\n\nif __name__ == '__main__':\n    main()\n"
        ], 
        "score": 1, 
        "id": 5364017, 
        "rank": 0
      }
    ], 
    "title": "PYQT files paths to tree"
  }, 
  {
    "accepted_answer_post_id": 6915291, 
    "id": 6914687, 
    "answer_posts": [
      {
        "snippets": [
          "send_mail('test email', 'hello world', to=['test@email.com'])\n", 
          "send_mail('test email', 'hello world', 'your@email.com', ['test@email.com'])\n"
        ], 
        "score": 17, 
        "id": 11590015, 
        "rank": 0
      }
    ], 
    "title": "Django sending email"
  }, 
  {
    "accepted_answer_post_id": 10176276, 
    "id": 10176226, 
    "answer_posts": [
      {
        "snippets": [
          "def my_decorator(param):\n    def actual_decorator(func):\n        print(\"Decorating function {}, with parameter {}\".format(func.__name__, param))\n        return function_wrapper(func)  # assume we defined a wrapper somewhere\n    return actual_decorator\n", 
          "def log_decorator(log_enabled):\n    def actual_decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            if log_enabled:\n                print(\"Calling Function: \" + func.__name__)\n            return func(*args, **kwargs)\n        return wrapper\n    return actual_decorator\n", 
          ">>> @log_decorator(True)\n... def f(x):\n...     return x+1\n...\n>>> f(4)\nCalling Function: f\n5\n"
        ], 
        "score": 88, 
        "id": 10176276, 
        "rank": 0
      }
    ], 
    "title": "How to pass extra arguments to python decorator?"
  }, 
  {
    "accepted_answer_post_id": 16266457, 
    "id": 16265132, 
    "answer_posts": [
      {
        "snippets": [
          "from mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nimport matplotlib.pyplot as plt\nfrom matplotlib.mlab import griddata\nimport numpy as np\nimport csv\n\ncolor_map = {'A':'r', 'B':'b', 'K':'k', 'C':'c'}\nshape_map = {'dia':'^', 'cir':'o', 'bu':'.'}\n\nwith open('/tmp/dist.txt','r') as in_file:\n    reader = csv.DictReader(in_file, delimiter=' ', skipinitialspace=True)\n    data = []\n    for r in reader:\n        data.append([float(r['col1']),\n                     float(r['col2']),\n                     float(r['col3']),\n                     color_map[r['col4']],\n                     shape_map[r['col5']]])\n", 
          "X, Y, Z, col, shape = zip(*data)\n\n\nfig = plt.figure()\nax = fig.add_subplot(111,projection='3d')\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('Z')\n\n\nax.scatter(X, Y, Z, c=col)\n", 
          "import collections\n\nby_shape = collections.defaultdict(list)\nfor d in data:\n    by_shape[d[4]].append(d[:4])\n\nfor key, val in by_shape.items():\n    X, Y, Z, col = zip(*val)\n    ax.scatter(X, Y, Z, c=col, marker=key)\n"
        ], 
        "score": 1, 
        "id": 16266457, 
        "rank": 0
      }
    ], 
    "title": "How to change shapes/colours for 3d points with matplot3d"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 25375794, 
    "answer_posts": [
      {
        "snippets": [
          "s = \"Hello world\"\nfor word in s.split():\n    print word[::-1],\n", 
          "print ' '.join(word[::-1] for word in s.split())\n"
        ], 
        "score": 2, 
        "id": 25375974, 
        "rank": 0
      }
    ], 
    "title": "How to reverse the order of letters in a string in python"
  }, 
  {
    "accepted_answer_post_id": 29654757, 
    "id": 29654628, 
    "answer_posts": [
      {
        "snippets": [
          ">>> np.vstack((a,b))\narray([[1, 2, 3, 4],\n       [5, 6, 7, 8]])\n", 
          ">>> np.row_stack((a,b))\narray([[1, 2, 3, 4],\n       [5, 6, 7, 8]])\n"
        ], 
        "score": 7, 
        "id": 29654757, 
        "rank": 0
      }
    ], 
    "title": "How to vertically concatenate two arrays in Python?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 23533435, 
    "answer_posts": [
      {
        "snippets": [
          "import json\ndef country(request):\n    country = NewTable.objects.filter(id=1).values()\n    return HttpResponse(json.dumps(country),content_type='application/json')\n"
        ], 
        "score": 1, 
        "id": 23535348, 
        "rank": 0
      }
    ], 
    "title": "Send Model Data through AJAX in Django"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 19428029, 
    "answer_posts": [
      {
        "snippets": [
          "numpy.correlate(a, v, mode='valid', old_behavior=False)[source]\n  Cross-correlation of two 1-dimensional sequences.\n  This function computes the correlation as generally defined in signal processing texts:\n     z[k] = sum_n a[n] * conj(v[n+k])\n  with a and v sequences being zero-padded where necessary and conj being the conjugate.\n", 
          "from scipy.stats.stats import pearsonr   \na = [1,4,6]\nb = [1,2,3]   \nprint pearsonr(a,b)\n", 
          "(0.99339926779878274, 0.073186395040328034)\n", 
          "import numpy\nprint numpy.corrcoef(a,b)\n", 
          "[[ 1.          0.99339927]\n [ 0.99339927  1.        ]]\n"
        ], 
        "score": 47, 
        "id": 19429478, 
        "rank": 0
      }
    ], 
    "title": "How to get correlation of two vectors in python"
  }, 
  {
    "accepted_answer_post_id": 25789440, 
    "id": 25789264, 
    "answer_posts": [
      {
        "snippets": [
          "df = pd.read_csv('log.csv',sep='\\t')\ndf = pd.DataFrame(df.groupby(['Country','Sub','Source']).size(),columns=['Count'])\n", 
          "                     Count\nCountry Sub Source        \nIN      3   source4      1\nUK      1   source3      1\nUS      1   source1      2\n        2   source2      1\n", 
          "df.to_excel('output.xls')\n"
        ], 
        "score": 0, 
        "id": 42665675, 
        "rank": 0
      }
    ], 
    "title": "Pandas DataFrameGroupBy export to Excel"
  }, 
  {
    "accepted_answer_post_id": 23685515, 
    "id": 23682851, 
    "answer_posts": [
      {
        "snippets": [
          "In [12]: np.random.seed(1234)\n\nIn [13]: df = pd.DataFrame(data=randint(-10, high=20, size=(len(idx),2)), index=idx)\n", 
          "In [14]: df.index.get_loc('2014-05-30')\nOut[14]: array([12933])\n\nIn [15]: df.iloc[12933]\nOut[15]: \n0    18\n1     8\nName: 2014-05-30 00:00:00, dtype: int64\n", 
          "In [16]: df.loc['2014-05-30']\nOut[16]: \n0    18\n1     8\nName: 2014-05-30 00:00:00, dtype: int64\n"
        ], 
        "score": 1, 
        "id": 23685515, 
        "rank": 0
      }
    ], 
    "title": "Find row corresponding to timestamp in pandas DataFrame"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 6009589, 
    "answer_posts": [
      {
        "snippets": [
          "any(not isinstance(x, int) for x in l)\n", 
          ">>> any(not isinstance(x, int) for x in [0,12.])\nTrue\n>>> any(not isinstance(x, int) for x in [0,12])\nFalse\n", 
          "all(isinstance(x,int) for x in l)\n"
        ], 
        "score": 4, 
        "id": 6009643, 
        "rank": 0
      }
    ], 
    "title": "How to test if every item in a list of type 'int'?"
  }, 
  {
    "accepted_answer_post_id": 35445891, 
    "id": 35443289, 
    "answer_posts": [
      {
        "snippets": [
          "app_conf = {'/': {'request.dispatch': d}}\ncherrypy.config.update({\n    'global': {\n       'engine.autoreload.on' : False\n     }\n })\ncherrypy.tree.mount(root=None, config=app_conf)\n", 
          " cherrypy.config.update({\n     'global': {\n        'environment' : 'production'\n      }\n })\n"
        ], 
        "score": 2, 
        "id": 35445891, 
        "rank": 0
      }
    ], 
    "title": "Prevent CherryPy from automatically reloading"
  }, 
  {
    "accepted_answer_post_id": 28398811, 
    "id": 28398758, 
    "answer_posts": [
      {
        "snippets": [
          "d.setdefault(name,[]).append(scores)\nif len(d[name])>3:\n    del d[name][0]\n"
        ], 
        "score": 1, 
        "id": 28398811, 
        "rank": 0
      }
    ], 
    "title": "How to only store 3 values for a key in a dictionary? Python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 19470435, 
    "answer_posts": [
      {
        "snippets": [
          "attributes = {\n    'a': 12,\n    'b': 'there-is-a-value-here',\n    'greet': (lambda self: print(\"Hi, my a is {}\".format(self.a)))\n}\nSomeCoolType = type(\"SomeCoolType\", (), attributes)\nsomeCoolInstance = SomeCoolType()\nsomeCoolInstance.greet() # this prints \"Hi, my a is 12\"\n", 
          "d = json.loads(json_data)\nT = type(\"JSON\", (), d)\njson_object = T()\n", 
          "json_object = type(\"JSON\", (), json.loads(json_data))()\n", 
          "def to_object(dictionary):\n    for key, value in dictionary.items():\n        if isinstance(value, dict): dictionary[key] = value\n    return type(\"JSON\", (), dictionary)\n\njson_object = to_object(json.loads(json_data))\n"
        ], 
        "score": 0, 
        "id": 19470887, 
        "rank": 0
      }
    ], 
    "title": "Load JSON in python as actual object, not a dict"
  }, 
  {
    "accepted_answer_post_id": 19255117, 
    "id": 19255012, 
    "answer_posts": [
      {
        "snippets": [
          "   output_list = [hex(ord(c)) for c in ''.join(myData)]\n", 
          ">>> myData = ['a', '\\x65', 'B', '\\x66\\x69', 'C']\n>>> [hex(ord(c)) for c in ''.join(myData)]\n['0x61', '0x65', '0x42', '0x66', '0x69', '0x43']\n"
        ], 
        "score": 1, 
        "id": 19255117, 
        "rank": 0
      }
    ], 
    "title": "How do you convert a list of characters and bytes into a list of pure bytes?"
  }, 
  {
    "accepted_answer_post_id": 11765010, 
    "id": 11764963, 
    "answer_posts": [
      {
        "snippets": [
          ">>> the_string = \"New Cars, Used Cars, Car Reviews, Car Finance Advice - Cars.com\"\n>>> re.sub(r'(car)', r'<b>\\1</b>', the_string, flags=re.I)\n'New <b>Car</b>s, Used <b>Car</b>s, <b>Car</b> Reviews, <b>Car</b> Finance Advice - <b>Car</b>s.com'\n"
        ], 
        "score": 4, 
        "id": 11765010, 
        "rank": 0
      }
    ], 
    "title": "Bold searched text that is contained in a string with Python"
  }, 
  {
    "accepted_answer_post_id": 20154411, 
    "id": 20136763, 
    "answer_posts": [
      {
        "snippets": [
          "plot '-', '-'\n2\n4\n6\ne\n10\n12\n14\ne\n", 
          "#!/usr/bin/env python\nimport subprocess\n\ngnuplot = subprocess.Popen([\"gnuplot\"], stdin=subprocess.PIPE)\n\ngp_wrt = gnuplot.stdin.write\n\ngp_wrt(\"set terminal pngcairo\\n\")\ngp_wrt(\"set output 'test.png'\\n\")\ngp_wrt(\"set datafile separator ','\\n\")\ngp_wrt(\"plot '-' with lines title 'mytitle',\\\n'-' with lines title 'other title'\\n\")\nfor i in range(11):\n    gp_wrt(\"{},{}\\n\".format(i, i**2))\ngp_wrt(\"e\\n\")\n\nfor i in range(11):\n    gp_wrt(\"{},{}\\n\".format(i, (0.5*i)**2))\ngp_wrt(\"e\\n\")\n", 
          "gnuplot.stdin.write(\"plot '-' u 1:2 t 'aa',\\\n    '' u 1:3 t 'aa in',\\\n    '' u 1:4 t 'bb',\\\n    '' u 1:5 t 'bb in',\\\n    '' u 1:6 t 'cc',\\\n    '' u 1:7 t 'cc in',\\\n    '' u 1:8 t 'dd',\\\n    '' u 1:9 t 'dd in',\\\n    '' u 1:10 t 'ee';\\n\")\n\nfor i in range(10):\n    for dataElement in data:\n        gnuplot.stdin.write(\"%s,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i\\n\" % dataElement[:])\n    gnuplot.stdin.write(\"e\\n\")\n", 
          "gnuplot.stdin.write(\"plot '-' u 1:2 t 'aa',\\\n    '' u 1:2 t 'aa in',\\\n    '' u 1:2 t 'bb',\\\n    '' u 1:2 t 'bb in',\\\n    '' u 1:2 t 'cc',\\\n    '' u 1:2 t 'cc in',\\\n    '' u 1:2 t 'dd',\\\n    '' u 1:2 t 'dd in',\\\n    '' u 1:2 t 'ee';\\n\")\n\nfor i in range(10):\n    for dataElement in data:\n        gnuplot.stdin.write(\"%s,%i\\n\" % (dataElement[0], dataElement[i])\n    gnuplot.stdin.write(\"e\\n\")\n"
        ], 
        "score": 2, 
        "id": 20139240, 
        "rank": 0
      }
    ], 
    "title": "GNUplot stdin, how to plot multiple lines?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 10201008, 
    "answer_posts": [
      {
        "snippets": [
          "file.seek(0)\n", 
          "file.readlines()\n"
        ], 
        "score": 4, 
        "id": 10201032, 
        "rank": 0
      }
    ], 
    "title": "using readlines twice in a row in Python"
  }, 
  {
    "accepted_answer_post_id": 25240775, 
    "id": 25239132, 
    "answer_posts": [
      {
        "snippets": [
          "doc = etree.parse(zip_file.open(file))\n", 
          "for filename in zip_file.namelist():\n    if filename.endswith('/'):\n        # skip directory names\n        continue\n", 
          "zip_file.writestr(filename, resultfile)\n"
        ], 
        "score": 2, 
        "id": 25240775, 
        "rank": 0
      }
    ], 
    "title": "Accessing files inside folders in a zipfile"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 32333870, 
    "answer_posts": [
      {
        "snippets": [
          "import import cartopy.crs as ccrs\n\ndef scale_bar(ax, length, location=(0.5, 0.05), linewidth=3):\n    \"\"\"\n    ax is the axes to draw the scalebar on.\n    location is center of the scalebar in axis coordinates ie. 0.5 is the middle of the plot\n    length is the length of the scalebar in km.\n    linewidth is the thickness of the scalebar.\n    \"\"\"\n    #Projection in metres, need to change this to suit your own figure\n    utm = ccrs.UTM(36)\n    #Get the extent of the plotted area in coordinates in metres\n    x0, x1, y0, y1 = ax.get_extent(utm)\n    #Turn the specified scalebar location into coordinates in metres\n    sbcx, sbcy = x0 + (x1 - x0) * location[0], y0 + (y1 - y0) * location[1]\n    #Generate the x coordinate for the ends of the scalebar\n    bar_xs = [sbcx - length * 500, sbcx + length * 500]\n    #Plot the scalebar\n    ax.plot(bar_xs, [sbcy, sbcy], transform=utm, color='k', linewidth=linewidth)\n    #Plot the scalebar label\n    ax.text(sbcx, sbcy, str(length) + ' km', transform=utm,\n            horizontalalignment='center', verticalalignment='bottom')\n", 
          "import matplotlib.pyplot as plt\n\nax = plt.axes(projection=ccrs.Mercator())\nplt.title('Cyprus')\nax.set_extent([31, 35.5, 34, 36], ccrs.Geodetic())\nax.coastlines(resolution='10m')\n\nscale_bar(ax, 100)\n\nplt.show()\n"
        ], 
        "score": 2, 
        "id": 35705477, 
        "rank": 0
      }
    ], 
    "title": "How can I show a km ruler on a cartopy / matplotlib plot?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 37967151, 
    "answer_posts": [
      {
        "snippets": [
          "import pandas as pd\ndata = pd.read_csv('bus.csv',sep = ';')\n", 
          "data_bus1 = data[data.BusID == 1]\n", 
          "data_bus1[['Modename','Value','day']].groupby(['ModeName','day'],as_index = False).mean()\n", 
          "data[['BusID','ModeName','Value','day']].groupby(['BusID','ModeName','day'],as_index = False).mean()\n"
        ], 
        "score": 1, 
        "id": 37968120, 
        "rank": 0
      }
    ], 
    "title": "plot the relationship between two variables with pandas"
  }, 
  {
    "accepted_answer_post_id": 27179609, 
    "id": 27177870, 
    "answer_posts": [
      {
        "snippets": [
          "dataInSocket, _, _ = socket.select.select([sock], [], [])\nif dataInSocket:\n    data, addr = sock.recvfrom(MAX_MESS_LEN)\n    thread.start_new_thread(message_handler, (data, addr,))\n"
        ], 
        "score": 0, 
        "id": 27179609, 
        "rank": 0
      }
    ], 
    "title": "How can I interrupt a recvfrom() call in Python with keyboard?"
  }, 
  {
    "accepted_answer_post_id": 3555220, 
    "id": 3156264, 
    "answer_posts": [
      {
        "snippets": [
          ">>> from fs.memoryfs import MemoryFS\n>>> from fs.expose import fuse\n>>> fs = MemoryFS()\n>>> mp = fuse.mount(fs,\"/mnt/my-memory-fs\")\n>>> mp.unmount()\n"
        ], 
        "score": 3, 
        "id": 3555220, 
        "rank": 0
      }
    ], 
    "title": "unmount fuse fs from python script"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 21669632, 
    "answer_posts": [
      {
        "snippets": [
          "$ brew install ffmpeg\n", 
          "import cv2\n\nvid = cv2.VideoCapture(\"test.wmv\")\n\nwhile True:\n    vid.grab()\n\n    retval, image = vid.retrieve()\n\n    if not retval:\n        break\n\n    cv2.imshow(\"Test\", image)\n    cv2.waitKey(1)\n"
        ], 
        "score": 0, 
        "id": 21726930, 
        "rank": 0
      }
    ], 
    "title": "How do I open .wmv files with OpenCV on Mac?"
  }, 
  {
    "accepted_answer_post_id": 21277929, 
    "id": 21277887, 
    "answer_posts": [
      {
        "snippets": [
          "# to swap the keys and values:\nnew_map = dict (zip(my_dict.values(),my_dict.keys()))\n", 
          "df.state = df.state.map(new_map)\n", 
          "In [12]:\n\ndf = pd.DataFrame({\n 'state':['California', 'California', 'Texas', 'Nevada', 'Texas'],\n 'var':[100,200,300,400, 500]\n})\n\ndf\nOut[12]:\n        state  var\n0  California  100\n1  California  200\n2       Texas  300\n3      Nevada  400\n4       Texas  500\n\n[5 rows x 2 columns]\n", 
          "my_dict = {'CA': 'California', 'NV': 'Nevada', 'TX': 'Texas'}\n", 
          "new_dict = dict(zip(my_dict.values(), my_dict.keys()))\n", 
          "In [13]:\n\ndf.state = df.state.map(new_dict)\ndf\nOut[13]:\n  state  var\n0    CA  100\n1    CA  200\n2    TX  300\n3    NV  400\n4    TX  500\n\n[5 rows x 2 columns]\n", 
          "In [19]:\n\ndf = pd.DataFrame({\n 'state':['California', 'California', 'Texas', 'Nevada', 'Texas', 'New York'],\n 'var':[100,200,300,400, 500, 600]\n})\ndf\nOut[19]:\n        state  var\n0  California  100\n1  California  200\n2       Texas  300\n3      Nevada  400\n4       Texas  500\n5    New York  600\n\n[6 rows x 2 columns]\n", 
          "In [25]:\n\ndf.state = df.state.map(lambda x: new_dict.get(x))\ndf\nOut[25]:\n  state  var\n0    CA  100\n1    CA  200\n2    TX  300\n3    NV  400\n4    TX  500\n5  None  600\n\n[6 rows x 2 columns]\n"
        ], 
        "score": 3, 
        "id": 21277929, 
        "rank": 0
      }
    ], 
    "title": "How to encode a categorical variable (series) in the data frame in Python?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 16227113, 
    "answer_posts": [
      {
        "snippets": [
          "import glob\n\nfor file in glob.glob('*.txt'):  #choose files will be found in this case anything.txt\n    with open(file) as f:\n        #code...\n", 
          "import glob\nimport itertools\n\nfor file in list(glob.glob('*.txt')):\n    with open(file) as f:\n        with open('badphrases_%s' % file,'w+') as bad_list:\n            text = f.read().split() #get all the words\n            bad_list.write('\\n'.join(( ' '.join(text[i:i+6]) for i in range(0,len(text)-5,1) )))\n", 
          "I ate a potato and it\nate a potato and it was\na potato and it was good.\n", 
          "for file in list(glob.glob('*.txt')):\n", 
          "list(glob.glob('*.txt'))\n", 
          "for_stmt ::=  \"for\" target_list \"in\" expression_list \":\" suite\n              [\"else\" \":\" suite]\n", 
          "for i in range(10):\n    pass\nelse:\n    print(\"No errors!\")\n", 
          ">>> \nNo errors!\n", 
          "for i in range(10):\n    break\nelse:\n    print(\"No errors!\")\n", 
          "with open('badphrases_%s' % file,'w+') as bad_list:\n", 
          "text = f.read().split()\n", 
          "bad_list.write('\\n'.join(( ' '.join(text[i:i+6]) for i in range(0,len(text)-5,1) )))\n", 
          "( ' '.join(text[i:i+6]) for i in range(0,len(text)-5,1) )\n"
        ], 
        "score": 0, 
        "id": 16227171, 
        "rank": 0
      }
    ], 
    "title": "Iterating Through a Folder of Files"
  }, 
  {
    "accepted_answer_post_id": 18149395, 
    "id": 18148226, 
    "answer_posts": [
      {
        "snippets": [
          "conn.cursor().execute(\"{call sp_rename(?,?,?)}\",('xro_zips_import.CityAliasName', 'City', 'COLUMN'))\nconn.commit()\n"
        ], 
        "score": 1, 
        "id": 18149395, 
        "rank": 0
      }
    ], 
    "title": "Change Column Name"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 3651589, 
    "answer_posts": [
      {
        "snippets": [
          "from BeautifulSoup import BeautifulSoup\nhtml = \"\"\"<div id=\"header\">\n<h1></h1>\n<p>\nlocalhost OpenWrt Backfire<br />\nLoad: 0.00 0.00 0.00<br />\nHostname: localhost\n</p>\n</div>\"\"\"\nsoup = BeautifulSoup(html)\nfor each in soup.findAll(name = 'p'):\n    print each\n"
        ], 
        "score": 4, 
        "id": 3651789, 
        "rank": 0
      }
    ], 
    "title": "regexp python with parsing html page"
  }, 
  {
    "accepted_answer_post_id": 11141206, 
    "id": 11140628, 
    "answer_posts": [
      {
        "snippets": [
          "from django.db.models import Count\n\nusers = User.objects.annotate(num_followers=Count('to_users')).order_by('-num_followers')\n", 
          "from django.contrib.auth.models import User\nfrom django.db import models\n\nclass Relationship(models.Model):\n    from_user = models.ForeignKey(User, related_name='from_users')\n    to_user = models.ForeignKey(User, related_name='to_users')\n", 
          ">>> from so.models import *\n>>> from django.contrib.auth.models import User\n>>> u1 = User()\n>>> u1.username='user1'\n>>> u1.save()\n>>> u2 = User()\n>>> u2.username='user2'\n>>> u2.save()\n>>> u3=User()\n>>> u3.username='user3'\n>>> u3.save()\n>>> # so we have 3 users now\n>>> r1 = Relationship()\n>>> r1.from_user=u1\n>>> r1.to_user=u2\n>>> r1.save()\n>>> r2=Relationship()\n>>> r2.from_user=u1\n>>> r2.to_user=u3\n>>> r2.save()\n>>> r3=Relationship()\n>>> r3.from_user=u2\n>>> r3.to_user=u3\n>>> r3.save()\n>>> rels = Relationship.objects.all()\n>>> rels.count()\n3\n>>> # we have 3 relationships: user1 follows user2, user1 follows user3, user2 follows user3\n>>> users = User.objects.annotate(num_followers=Count('to_users')).order_by('-num_followers')\n>>> for user in users:\n>>>     print user.username, user.num_followers\nuser3 2\nuser2 1\nuser1 0\n"
        ], 
        "score": 1, 
        "id": 11141206, 
        "rank": 0
      }
    ], 
    "title": "Django - access foreign key data in an annotated query"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 19182963, 
    "answer_posts": [
      {
        "snippets": [
          "global firstevent\n", 
          "firstevent = 0\ndef modify():\n    firstevent = 1\n", 
          "firstevent = 0\ndef modify():\n    global firstevent\n    firstevent = 1\n"
        ], 
        "score": 10, 
        "id": 19183117, 
        "rank": 0
      }
    ], 
    "title": "Global variable and python flask"
  }, 
  {
    "accepted_answer_post_id": 18747057, 
    "id": 18746721, 
    "answer_posts": [
      {
        "snippets": [
          "In [11]: p\nOut[11]: \n       V1    V2\nB C            \nc e  1870  1911\n  f  1887   816\nd e   230    25\n  f  1890  1055\n\nIn [12]: g = p.groupby(level='B')\n", 
          "In [13]: g['V2'].apply(lambda s: s.astype(float) / s.sum())\nOut[13]: \nB  C\nc  e    0.700770\n   f    0.299230\nd  e    0.023148\n   f    0.976852\ndtype: float64\n", 
          "In [14]: p['PercentOfB'] = g['V2'].apply(lambda s: s.astype(float) / s.sum())\n\nIn [15]: p\nOut[15]: \n       V1    V2  PercentOfB\nB C                        \nc e  1870  1911    0.700770\n  f  1887   816    0.299230\nd e   230    25    0.023148\n  f  1890  1055    0.976852\n", 
          "In [21]: c\nOut[21]: \nB  C\nc  e    1911\n   f     816\nName: c, dtype: int64\n", 
          "In [22]: c.sum()\nOut[22]: 2727\n", 
          "In [23]: c / c.sum()\nOut[23]: \nB  C\nc  e    0\n   f    0\nName: c, dtype: int64\n", 
          "In [24]: c.astype(float) / c.sum()\nOut[24]: \nB  C\nc  e    0.70077\n   f    0.29923\nName: c, dtype: float64\n", 
          "a = []\ndef f(x):\n    a.append(x)\n    return x\n\ng['v2'].apply(f)\n\nc = a[0]\n"
        ], 
        "score": 5, 
        "id": 18747057, 
        "rank": 0
      }
    ], 
    "title": "Getting percentage of another Column in Pandas Pivot Table"
  }, 
  {
    "accepted_answer_post_id": 24801979, 
    "id": 24800628, 
    "answer_posts": [
      {
        "snippets": [
          "lats = [radians(coord[0]) for coord in coords]\nlongs = [radians(coord[1]) for coord in coords]\n"
        ], 
        "score": 1, 
        "id": 24800971, 
        "rank": 0
      }
    ], 
    "title": "How would I apply the python map function to an multidimensional array"
  }, 
  {
    "accepted_answer_post_id": 11454370, 
    "id": 11454029, 
    "answer_posts": [
      {
        "snippets": [
          "line = re.sub('[|+ ]','',lines)\nline = re.sub('-','',line, 1)\n"
        ], 
        "score": 1, 
        "id": 11454240, 
        "rank": 0
      }
    ], 
    "title": "python: removing first instance of a specific character using regex"
  }, 
  {
    "accepted_answer_post_id": 35413257, 
    "id": 35411414, 
    "answer_posts": [
      {
        "snippets": [
          "import pandas as pd\n\ndf = pd.read_csv('stuff.csv', delimiter=',', index_col='year').T.plot();\n"
        ], 
        "score": 1, 
        "id": 35411880, 
        "rank": 0
      }
    ], 
    "title": "Efficiently ploting a table in csv format using Python"
  }, 
  {
    "accepted_answer_post_id": 6081043, 
    "id": 6081008, 
    "answer_posts": [
      {
        "snippets": [
          "import numpy\na = numpy.asarray([ [1,2,3], [4,5,6], [7,8,9] ])\nnumpy.savetxt(\"foo.csv\", a, delimiter=\",\")\n"
        ], 
        "score": 334, 
        "id": 6081043, 
        "rank": 0
      }
    ], 
    "title": "Dump a NumPy array into a csv file"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 36931963, 
    "answer_posts": [
      {
        "snippets": [
          "import pandas as pd\n\narray_1 = ['foo', 'bar', 'i', 'j']\narray_2 = [1, 2, 3, 4]\nyour_dict = {       # do not use `dict` to name a variable\n    'Kalibrierwerte': array_1,\n    'Messwerte': array_2,\n}\n\n# convert `dict` to `pandas.DataFrame` and save to csv file\nd = pd.DataFrame(your_dict)\nd.to_csv('output.csv')\n"
        ], 
        "score": 0, 
        "id": 36932287, 
        "rank": 0
      }
    ], 
    "title": "Python write dictionary into excel"
  }, 
  {
    "accepted_answer_post_id": 25188022, 
    "id": 25175613, 
    "answer_posts": [
      {
        "snippets": [
          "    Entry(f1, width=50, textvariable=file_path).grid(row=0,column=1,padx=2,pady=2,sticky='we',columnspan=25)\n", 
          "entry = Entry(f1, width=50, textvariable=file_path)\nentry.grid(row=0,column=1,padx=2,pady=2,sticky='we',columnspan=25)\n", 
          "entry.delete(0, END)\nentry.insert(0, file_path)\n"
        ], 
        "score": 3, 
        "id": 25188022, 
        "rank": 0
      }
    ], 
    "title": "How to Show File Path with Browse Button in Python / Tkinter"
  }, 
  {
    "accepted_answer_post_id": 28146422, 
    "id": 28145763, 
    "answer_posts": [
      {
        "snippets": [
          "from datetime import datetime\n\na = '2015-01-28 03:00:00'\nprint datetime.strptime(a[:10], '%Y-%m-%d')\n"
        ], 
        "score": 0, 
        "id": 28145837, 
        "rank": 0
      }
    ], 
    "title": "Python convert datetime string to date"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 17281335, 
    "answer_posts": [
      {
        "snippets": [
          "import csv, sqlite3\n\ncon = sqlite3.connect(\":memory:\")\ncur = con.cursor()\ncur.execute(\"CREATE TABLE t (col1, col2);\")\n\nwith open('data.csv','rb') as fin:\n    dr = csv.reader(fin)\n    dicts = ({'col1': line[0], 'col2': line[1]} for line in dr)\n    to_db = ((i['col1'], i['col2']) for i in dicts)\n\ncur.executemany(\"INSERT INTO t (col1, col2) VALUES (?, ?);\", to_db)\ncon.commit()\n"
        ], 
        "score": 1, 
        "id": 17283812, 
        "rank": 0
      }
    ], 
    "title": "Python, converting CSV file to SQL table"
  }, 
  {
    "accepted_answer_post_id": 28622586, 
    "id": 28622414, 
    "answer_posts": [
      {
        "snippets": [
          "message.html = open('emailHTML.html').read()\n", 
          "message.attachments = [('emailHTML.html', open('emailHTML.html').read())]\n"
        ], 
        "score": 4, 
        "id": 28622559, 
        "rank": 0
      }
    ], 
    "title": "Send HTML email in Appengine [PYTHON] using HTML file"
  }, 
  {
    "accepted_answer_post_id": 29404758, 
    "id": 29404700, 
    "answer_posts": [
      {
        "snippets": [
          "#!/usr/bin/env python\nfrom subprocess import Popen, PIPE\n\nmessage = \"Lo! I am up on an ox.\"\nPopen(['cat'], stdin=PIPE, \n      universal_newlines=True).communicate(input=message)\n"
        ], 
        "score": 1, 
        "id": 29437855, 
        "rank": 0
      }
    ], 
    "title": "From a python3 script, how to I pipe a string into a bash program?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 3904289, 
    "answer_posts": [
      {
        "snippets": [
          "MyNewArray = zeros(12, dtype='S10,f4,f4,f4')\n", 
          "MyNewArray['f0']\n"
        ], 
        "score": 5, 
        "id": 3905672, 
        "rank": 0
      }
    ], 
    "title": "Change dtype of a single column in a 2d numpy array"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 28337942, 
    "answer_posts": [
      {
        "snippets": [
          "i.find_elements_by_xpath('//div[@class=\"_4w5j\"]/span//u')[0].text\n\ni.find_elements_by_xpath('//a/abbr')[0].get_attribute('title')\n"
        ], 
        "score": 0, 
        "id": 28338455, 
        "rank": 0
      }
    ], 
    "title": "python : selenium need parameter text using Xpath"
  }, 
  {
    "accepted_answer_post_id": 24440949, 
    "id": 24440870, 
    "answer_posts": [
      {
        "snippets": [
          "with open('file.txt', 'r') as f:\n    f = f.read().splitlines()\nlines = [x for x in f if x and not x.strip().startswith('!')]\n", 
          "for line in lines:\n    print(line)\n", 
          "use constants\nimplicit none\ncomplex(kind=double), intent(inout) :: A\ncomplex(kind=double), intent(in) :: Q\ninteger, intent(in):: order,case_type,choice, comp_coeff\ncomplex(kind=double), dimension(0:MAX_),intent(out) :: D_m\ninteger, intent(out):: k_max\ncomplex(kind=double),intent(out):: norm\npi=acos(-one)\nG_2=cmplx(zero,zero,double)\nG_1=cmplx(zero,zero,double )\nFL=D1mach(2)\n"
        ], 
        "score": 1, 
        "id": 24440949, 
        "rank": 0
      }
    ], 
    "title": "How to store each line of a text file into a python list excluding comments"
  }, 
  {
    "accepted_answer_post_id": 10383836, 
    "id": 10383763, 
    "answer_posts": [
      {
        "snippets": [
          "config.add_route('home','/')\nconfig.add_route('home1','home/')\n", 
          "config.add_view(yourview, route_name='home')\nconfig.add_view(yourview, route_name='home1')\n", 
          "@view_config(route_name='home')\n@view_config(route_name='home1') \ndef your_method(request):\n   ..... \n"
        ], 
        "score": 20, 
        "id": 10383836, 
        "rank": 0
      }
    ], 
    "title": "Map different URLs to same view"
  }, 
  {
    "accepted_answer_post_id": 33816797, 
    "id": 33816670, 
    "answer_posts": [
      {
        "snippets": [
          "from StringIO import StringIO\nimport urllib2\nimport bz2\n\n# Get zip file from website\nurl = \"http://www.7-zip.org/a/7z920.tar.bz2\"  # just an example bz2 file\n\narchive = StringIO()\n\n# in case the request fails (e.g. 404, 500), this will raise\n# a `urllib2.HTTPError`\nurl_data = urllib2.urlopen(url)\n\narchive.write(url_data.read())\n\n# will print how much compressed data you have buffered.\nprint \"Length of file:\", archive.tell()\n\n# important!... make sure to reset the file descriptor read position\n# to the start of the file.\narchive.seek(0)\n\n# Extract the training data\ndata = bz2.decompress(archive.read())\n\n# Write to csv\noutput_file = open('output_file', 'w')\noutput_file.write(data)\n"
        ], 
        "score": 0, 
        "id": 33816797, 
        "rank": 0
      }
    ], 
    "title": "Extracting bz2 file with single file in memory"
  }, 
  {
    "accepted_answer_post_id": 15173081, 
    "id": 15173071, 
    "answer_posts": [
      {
        "snippets": [
          "d.update({k.upper(): v.upper() for k, v in d.iteritems()})\n", 
          "d.update({k.upper(): v.upper() for k, v in d.items()})\n", 
          "d.update([(k.upper(), v.upper()) for k, v in d.iteritems()])\n"
        ], 
        "score": 5, 
        "id": 15173081, 
        "rank": 0
      }
    ], 
    "title": "Populating a dictionary with upper case values of the keys already present in the dictionary"
  }, 
  {
    "accepted_answer_post_id": 27847545, 
    "id": 27846942, 
    "answer_posts": [
      {
        "snippets": [
          "import csv\nwith open('eggs.csv', 'wb') as csvfile:\n    spamwriter = csv.writer(csvfile, delimiter=' ',\n                        quotechar='|', quoting=csv.QUOTE_MINIMAL)\n    spamwriter.writerow(['Spam'] * 5 + ['Baked Beans'])\n    spamwriter.writerow(['Spam', 'Lovely Spam', 'Wonderful Spam'])\n"
        ], 
        "score": 1, 
        "id": 27848966, 
        "rank": 0
      }
    ], 
    "title": "Python extract data from xml and save it to excel"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 31363071, 
    "answer_posts": [
      {
        "snippets": [
          "l311 = [\n    dict(\n        DriverFirstName=last_edited_user,\n        DriverLastName='Aguilar',\n        LastUpdatedBy='SANSTAR1',\n        DACType=dar_item_1,\n        Type='Dead Animal Removal',\n        Name=dar_uid_1,\n        DACItemCount=dar_qyt_1),\n    dict(\n        DriverFirstName=last_edited_user,\n        DriverLastName='Aguilar',\n        LastUpdatedBy='SANSTAR1',\n        DACType=dar_item_2,\n        Type='Dead Animal Removal',\n        Name=dar_uid_2,\n        DACItemCount=dar_qyt_2),\n    dict(\n        DriverFirstName=last_edited_user,\n        DriverLastName='Aguilar',\n        LastUpdatedBy='SANSTAR1',\n        DACType=dar_item_3,\n        Type='Dead Animal Removal',\n        Name=dar_uid_3,\n        DACItemCount=dar_qyt_3),\n    # ...\n]\n\nfor d in l311:\n    if not d['Name'].strip() and d['DACItemCount'] < 0:\n        del d['Name']\n        del d['DACItemCount']\n"
        ], 
        "score": 0, 
        "id": 31363358, 
        "rank": 0
      }
    ], 
    "title": "How to remove empty key/value pairs from JSON in Python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 14304628, 
    "answer_posts": [
      {
        "snippets": [
          "a, b, c = input('Type in a command').split()\n", 
          "try:\n    a, b, c = input('Type in a command').split()\nexcept ValueError:\n    print('Invalid input. Please enter a, b and c')\n"
        ], 
        "score": 2, 
        "id": 14304687, 
        "rank": 0
      }
    ], 
    "title": "Is there a way to assign multiple variables for one input box - Python"
  }, 
  {
    "accepted_answer_post_id": 19257867, 
    "id": 18433071, 
    "answer_posts": [
      {
        "snippets": [
          "from celery import Celery\ncelery = Celery()\ncelery.config_from_object('celeryconfig')\ncelery.send_task('tasks.add', (2,2))\n"
        ], 
        "score": 23, 
        "id": 19257867, 
        "rank": 0
      }
    ], 
    "title": "Celery - How to send task from remote machine?"
  }, 
  {
    "accepted_answer_post_id": 1885188, 
    "id": 1885113, 
    "answer_posts": [
      {
        "snippets": [
          "# current directory containing cgi-bin directory with scripts in\n# subclass CGIHTTPRequestHandler and override cgi_directories to change this\n#\nos.chdir('/path/to/htdocs')\n\nBaseHTTPServer.HTTPServer(('',80), CGIHTTPServer.CGIHTTPRequestHandler).serve_forever()\n"
        ], 
        "score": 1, 
        "id": 1885188, 
        "rank": 0
      }
    ], 
    "title": "Liteweight CGI Server to use on local machine to serve KML to Google Earth via Python or similar?"
  }, 
  {
    "accepted_answer_post_id": 36948883, 
    "id": 36948870, 
    "answer_posts": [
      {
        "snippets": [
          "a = collections.defaultdict(str)\n", 
          "a = collections.defaultdict(lambda: 'initial')\n"
        ], 
        "score": 3, 
        "id": 36948883, 
        "rank": 0
      }
    ], 
    "title": "Python defaultdict with string as type of value"
  }, 
  {
    "accepted_answer_post_id": 37198007, 
    "id": 37196264, 
    "answer_posts": [
      {
        "snippets": [
          "import matplotlib.pyplot as plt\nfrom matplotlib.gridspec import GridSpec\n\nfig = plt.figure()\ngs = GridSpec(2, 3, width_ratios=[10, 1, 1], height_ratios=[1, 10])\n", 
          "big_ax = fig.add_subplot(gs[1,0]) # bottom left\ntop_ax = fig.add_subplot(gs[0,0]) # top left\nright_ax = fig.add_subplot(gs[1,1]) # bottom center\ncbar_ax = fig.add_subplot(gs[1,2]) # bottom right\n", 
          "im = plt.imread('/path/to/image.png')\n# Plot your heatmap on big_ax and colorbar on cbar_ax\nheatmap = big_ax.imshow(np.random.rand(10, 10), aspect='auto', origin='lower')\ncbar = fig.colorbar(heatmap, cax=cbar_ax)\n\n# Show your images on top_ax and right_ax\ntop_ax.imshow(im, aspect='auto')\n\n# need to rotate my image. \n# you may not have to if you have two different images\nfrom scipy import ndimage \nright_ax.imshow(ndimage.rotate(im, 90), aspect='auto')\n\n# Clean up the image axes (remove ticks, etc.)\nright_ax.set_axis_off()\ntop_ax.set_axis_off()\n\n# remove spacing between axes\nfig.subplots_adjust(wspace=0.05, hspace=0.05)\n", 
          "from matplotlib.patches import Rectangle\nfrom matplotlib.collections import PatchCollection\n\n# draw the black line\ntop_ax.axhline(0, color='k', zorder=-1)\n\n# box x-coords and text labels\nboxes = zip(np.arange(0.1, 1, 0.2), np.arange(0.2, 1, 0.2))\nbox_text = ('A1', 'B1', 'B2', 'A2')\n# color indicators for boxes\ncolors = (0, 1, 1, 0)\n# construct Rects\npatches = [Rectangle(xy=(x0, -1), width=(x1-x0), height=2) for x0,x1 in boxes]\np = PatchCollection(patches, cmap='jet')\n# this maps the colors in [0,1] to the cmap above\np.set_array(np.array(colors))\ntop_ax.add_collection(p)\n\n# add text\n[top_ax.text((x0+x1)/2., 1.2, text, ha='center') \n    for (x0,x1), text in zip(boxes, box_text)]\n\n# adjust ylims\ntop_ax.set_ylim(-2, 2)\n", 
          "right_ax.axvline(0, color='k', zorder=-1)\n\npatches = [Rectangle(xy=(-1, y0), width=2, height=(y1-y0)) for y0, y1 in boxes]\np = PatchCollection(patches, cmap='jet')\np.set_array(np.array(colors))\nright_ax.add_collection(p)\n\n[right_ax.text(1.2, (y0+y1)/2., text, va='center') \n    for (y0, y1), text in zip(boxes, box_text)]\nright_ax.set_xlim(-2,2)\n"
        ], 
        "score": 5, 
        "id": 37198007, 
        "rank": 0
      }
    ], 
    "title": "How to plot heat map with matplotlib?"
  }, 
  {
    "accepted_answer_post_id": 26942086, 
    "id": 26941207, 
    "answer_posts": [
      {
        "snippets": [
          "import numpy as np\nfrom scipy import sparse\ndata = \"\"\"0 234 345\n0 236 \n0 345 365 465\n0 12 35 379\"\"\"\n\ncolumn_list = []\nfor line in data.split(\"\\n\"):\n    values = [int(x) for x in line.strip().split()[1:]]\n    column_list.append(values)\nlengths = [len(row) for row in column_list]\ncols = np.concatenate(column_list)\nrows = np.repeat(np.arange(len(column_list)), lengths)\nm = sparse.coo_matrix((np.ones_like(rows), (rows, cols)))\n", 
          "np.where(m.toarray())\n", 
          "(array([0, 0, 1, 2, 2, 2, 3, 3, 3]),\n array([234, 345, 236, 345, 365, 465,  12,  35, 379]))\n"
        ], 
        "score": 3, 
        "id": 26942086, 
        "rank": 0
      }
    ], 
    "title": "How to manually create a sparse matrix in Python"
  }, 
  {
    "accepted_answer_post_id": 25691188, 
    "id": 25690851, 
    "answer_posts": [
      {
        "snippets": [
          "json_source = \"\"\"\n    ... your text data from above ...\n\"\"\"\n\nimport re\nBADCOMMA = re.compile(r',\\s+\\]')\njson_source = BADCOMMA.sub(']', json_source)\n\nBADIDENTIFIER = re.compile(r'\\s+name:\\s*')\njson_source = BADIDENTIFIER.sub('\"name\":', json_source)\n", 
          "import json\ndata = json.loads(json_source)\n\ndata['stuff'].sort(key=lambda item: item['number'], reverse=True)\n", 
          "from pprint import pprint\npprint(data)\n", 
          "{u'stuff': [{u'identifier': u'Pdfms',\n             u'name': [u'Fast', u'Guard', u'Named'],\n             u'number': 117900},\n            {u'identifier': u'Tsdsad',\n             u'name': [u'frfer', u'niddsi'],\n             u'number': 11300},\n            {u'identifier': u'Unnamed', u'name': [u'Fast'], u'number': 660}]}\n"
        ], 
        "score": 2, 
        "id": 25691188, 
        "rank": 0
      }
    ], 
    "title": "Python - Sorting in ascending order in a txt file"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 22341526, 
    "answer_posts": [
      {
        "snippets": [
          "class ComboDelegate(QtGui.QItemDelegate):\n    \"\"\"\n    A delegate that places a fully functioning QComboBox in every\n    cell of the column to which it's applied\n    \"\"\"\n    def __init__(self, parent, options):\n\n        QtGui.QItemDelegate.__init__(self, parent)\n        self.options = options\n\n    def createEditor(self, parent, option, index):\n        combo = QtGui.QComboBox(parent)\n        combo.addItems(self.options)\n        self.connect(combo, QtCore.SIGNAL(\"currentIndexChanged(int)\"), self, QtCore.SLOT(\"currentIndexChanged()\"))\n        return combo\n\n    def setEditorData(self, editor, index):\n        editor.blockSignals(True)\n        editor.setCurrentIndex(editor.currentIndex())\n        editor.blockSignals(False)\n\n    def setModelData(self, editor, model, index):\n        model.setData(index, editor.itemText(editor.currentIndex()))\n\n    #@QtCore.pyqtSlot()\n    def currentIndexChanged(self):\n        self.commitData.emit(self.sender())\n", 
          "    self.Table = QtGui.QTableWidget(parent)\n    # ... other columns before\n    # ...\n    item = QtGui.QTableWidgetItem(\"DATATYPE\")\n    self.Table.setHorizontalHeaderItem(3, item)\n    self.Table.horizontalHeaderItem(3).setWhatsThis(\"DATATYPE\")\n    self.DataType = ComboDelegate(self.MemoryTable, DataTypeOptions)\n    self.Table.setItemDelegateForColumn(3,self.DataType)\n"
        ], 
        "score": 1, 
        "id": 24023348, 
        "rank": 0
      }
    ], 
    "title": "Pyside example with an expandable table with deligates"
  }, 
  {
    "accepted_answer_post_id": 33409560, 
    "id": 33409207, 
    "answer_posts": [
      {
        "snippets": [
          "def test(w, sli):\n    exec('s = \"{}\"{}'.format(w, sli))\n    return s\n", 
          "def test(w,sli):\n    s = \"'{0}'{1}\".format(w,sli)\n    s = eval(s)\n    return s\n"
        ], 
        "score": 3, 
        "id": 33409560, 
        "rank": 0
      }
    ], 
    "title": "How to return value from exec in function?"
  }, 
  {
    "accepted_answer_post_id": 28704691, 
    "id": 28704526, 
    "answer_posts": [
      {
        "snippets": [
          "dict(islice(mydict.iteritems(), 0, 2))\n", 
          "# Python 2.x\ndict(mydict.items()[0:2])\n\n# Python 3.x\ndict(list(mydict.items())[0:2])\n"
        ], 
        "score": 12, 
        "id": 28704691, 
        "rank": 0
      }
    ], 
    "title": "In Python how to obtain a partial view of a dict?"
  }, 
  {
    "accepted_answer_post_id": 3040454, 
    "id": 3040335, 
    "answer_posts": [
      {
        "snippets": [
          "conditions = {\n\"condition1\": [\"sample1\", \"sample2\", \"sample3\"],\n\"condition2\": [\"sample4\", \"sample5\", \"sample6\"],\n...}\n", 
          ">>> conditions[\"condition1\"]+conditions[\"condition2\"]\n['sample1', 'sample2', 'sample3', 'sample4', 'sample5', 'sample6']\n", 
          "from collections import OrderedDict\nconditions = OrderedDict([\n[\"condition1\", [\"sample1\", \"sample2\", \"sample3\"]],\n[\"condition2\", [\"sample4\", \"sample5\", \"sample6\"]]\n])\n", 
          ">>> import itertools\n>>> [item for item in itertools.chain(*conditions.values())]\n['sample1', 'sample2', 'sample3', 'sample4', 'sample5', 'sample6']\n"
        ], 
        "score": 6, 
        "id": 3040378, 
        "rank": 0
      }
    ], 
    "title": "finding elements in python association lists efficiently"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 20674086, 
    "answer_posts": [
      {
        "snippets": [
          "def save(self, request=False, *args, **kwargs):\n    self.slug = slugify(self.name)\n\n    if request and request.FILES.get('image',False):\n        self.create_thumbnail()\n\n    super(College, self).save(*args, **kwargs)\n", 
          "if self.pk is not None \n"
        ], 
        "score": 3, 
        "id": 20674903, 
        "rank": 0
      }
    ], 
    "title": "Overiding save for just one field in Django"
  }, 
  {
    "accepted_answer_post_id": 17177485, 
    "id": 17177109, 
    "answer_posts": [
      {
        "snippets": [
          "import xmltodict\n\nmessage = \"\"\"<?xml version=\"1.0\"?><note><to>Tove</to><from>Jani</from><heading>Reminder</heading><body>Don't forget me this weekend!</body></note>\"\"\"\nprint xmltodict.parse(message)['note']\n", 
          "OrderedDict([(u'to', u'Tove'), (u'from', u'Jani'), (u'heading', u'Reminder'), (u'body', u\"Don't forget me this weekend!\")])\n", 
          "print dict(xmltodict.parse(message)['note'])\n", 
          "{u'body': u\"Don't forget me this weekend!\", u'to': u'Tove', u'from': u'Jani', u'heading': u'Reminder'}\n"
        ], 
        "score": 14, 
        "id": 17177485, 
        "rank": 0
      }
    ], 
    "title": "convert xml to python dict"
  }, 
  {
    "accepted_answer_post_id": 20364522, 
    "id": 20364414, 
    "answer_posts": [
      {
        "snippets": [
          "q = Queue([1,2,3])\nq1 = None\nq==q1\n", 
          "q = Queue([1,2,3])\nq == None\n", 
          "def __eq__(self, other):\n    return self.container.__eq__(other.container)\n", 
          "self.container.__eq__(None.container)\n", 
          "'NoneType' object has no attribute 'container'\n", 
          "return other is not None and self.container.__eq__(other.container)\n", 
          "q = Queue([1,2,3])\nq == 1\n>>> AttributeError: 'int' object has no attribute 'container'\n", 
          "return other is not None and type(self) == type(other) and self.container.__eq__(other.container)\n", 
          "return type(self) == type(other) and self.container.__eq__(other.container)\n", 
          "return type(self) == type(other) and self.container == other.container\n", 
          "def __eq__(self, other):\n    try:\n        return self.container == other.container\n    except AttributeError:\n        return False    # There is no 'container' attribute, so can't be equal\n    except:\n        raise           # Another error occured, better pay it forward\n", 
          "return hasattr(other, 'container') and self.container == other.container\n"
        ], 
        "score": 1, 
        "id": 20364522, 
        "rank": 0
      }
    ], 
    "title": "how to compare for equality for None objects in custom class in python?"
  }, 
  {
    "accepted_answer_post_id": 28134071, 
    "id": 28134033, 
    "answer_posts": [
      {
        "snippets": [
          ">>> numpy.random.choice((1,-1), p=[0.2, 0.8])\n-1\n", 
          "import numpy as np\n", 
          "from scipy import *   # <-- don't do this! \n"
        ], 
        "score": 2, 
        "id": 28134071, 
        "rank": 0
      }
    ], 
    "title": "Generating numbers with unequal probability"
  }, 
  {
    "accepted_answer_post_id": 24959645, 
    "id": 24959589, 
    "answer_posts": [
      {
        "snippets": [
          "myTable.__table__.columns\n", 
          "myTable.__table__.c\n", 
          "[column.key for column in myTable.__table__.columns]\n"
        ], 
        "score": 3, 
        "id": 24959645, 
        "rank": 0
      }
    ], 
    "title": "get table columns from sqlAlchemy table model"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 11938109, 
    "answer_posts": [
      {
        "snippets": [
          "class MyThread(threading.Thread):\n\n    def __init__(self):\n        super(MyThread, self).__init__()\n        self._stop_req = False\n\n    def run(self):\n        while not self._stop_req:\n            pass\n            # processing\n\n        # clean up before exiting\n\n    def stop(self):\n        # triggers the threading event\n        self._stop_req = True;\n\ndef main():\n    # set up the processing thread\n    processing_thread = MyThread()\n    processing_thread.start()\n\n    # do other things\n\n    # stop the thread and wait for it to exit\n    processing_thread.stop()\n    processing_thread.join()\n\nif __name__ == \"__main__\":\n    main()\n"
        ], 
        "score": 5, 
        "id": 11940400, 
        "rank": 0
      }
    ], 
    "title": "How do I stop a Python process instantly from a Tkinter window?"
  }, 
  {
    "accepted_answer_post_id": 17478866, 
    "id": 17478779, 
    "answer_posts": [
      {
        "snippets": [
          "x,y = zip(*s)\nplt.scatter(x,y)\n", 
          "plt.scatter(*zip(*a))\n"
        ], 
        "score": 11, 
        "id": 17478866, 
        "rank": 0
      }
    ], 
    "title": "Make scatter plot from set of points in tuples"
  }, 
  {
    "accepted_answer_post_id": 31633621, 
    "id": 31633507, 
    "answer_posts": [
      {
        "snippets": [
          "import matplotlib.pyplot as plt\nimport numpy as np   \n\nfrac_val = 0.1\nfor x in np.arange(0.1, 1, 0.2):\n\n    arrow_props = dict(fc='k', ec='k', frac=frac_val, headwidth=10, width=2,\n                       shrink=0.1)\n\n    text = '%d%%' % (frac_val * 100)\n\n    plt.annotate(text, xy=(x, 0.9), xytext=(x, 0.2), ha='center',\n                 arrowprops=arrow_props)\n\n    frac_val += 0.1\n\nplt.show()\n"
        ], 
        "score": 1, 
        "id": 31633621, 
        "rank": 0
      }
    ], 
    "title": "How to make arrow headlength longer in matplotlib?"
  }, 
  {
    "accepted_answer_post_id": 21742235, 
    "id": 21700113, 
    "answer_posts": [
      {
        "snippets": [
          "from eve import Eve\napp = Eve()\n\n@app.route(\"/x\")\ndef hello():\n    return \"Hello World!\"\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n"
        ], 
        "score": 20, 
        "id": 21742235, 
        "rank": 0
      }
    ], 
    "title": "EVE - define custom flask controllers"
  }, 
  {
    "accepted_answer_post_id": 3781773, 
    "id": 3781670, 
    "answer_posts": [
      {
        "snippets": [
          "class CustomText(tk.Text):\n    '''A text widget with a new method, highlight_pattern()\n\n    example:\n\n    text = CustomText()\n    text.tag_configure(\"red\", foreground=\"#ff0000\")\n    text.highlight_pattern(\"this should be red\", \"red\")\n\n    The highlight_pattern method is a simplified python\n    version of the tcl code at http://wiki.tcl.tk/3246\n    '''\n    def __init__(self, *args, **kwargs):\n        tk.Text.__init__(self, *args, **kwargs)\n\n    def highlight_pattern(self, pattern, tag, start=\"1.0\", end=\"end\",\n                          regexp=False):\n        '''Apply the given tag to all text that matches the given pattern\n\n        If 'regexp' is set to True, pattern will be treated as a regular\n        expression according to Tcl's regular expression syntax.\n        '''\n\n        start = self.index(start)\n        end = self.index(end)\n        self.mark_set(\"matchStart\", start)\n        self.mark_set(\"matchEnd\", start)\n        self.mark_set(\"searchLimit\", end)\n\n        count = tk.IntVar()\n        while True:\n            index = self.search(pattern, \"matchEnd\",\"searchLimit\",\n                                count=count, regexp=regexp)\n            if index == \"\": break\n            if count.get() == 0: break # degenerate pattern which matches zero-length strings\n            self.mark_set(\"matchStart\", index)\n            self.mark_set(\"matchEnd\", \"%s+%sc\" % (index, count.get()))\n            self.tag_add(tag, \"matchStart\", \"matchEnd\")\n"
        ], 
        "score": 27, 
        "id": 3781773, 
        "rank": 0
      }
    ], 
    "title": "How to highlight text in a tkinter Text widget"
  }, 
  {
    "accepted_answer_post_id": 12574811, 
    "id": 12574700, 
    "answer_posts": [
      {
        "snippets": [
          "file1.write('1\\n2\\n3\\n4\\n5')\nfile2.write('0,2\\n1,3\\n2,4\\n3,5\\n4,6')\n", 
          "file1.close()\nfile2.close()\n", 
          "print repr(answer), repr(correct)\n", 
          "Number: 4\n\n\nSurrounding numbers?3,5\n(3, 5) '3,5\\n'\n\nNope, It's 3,5\n\nHit enter to try a new one...\n"
        ], 
        "score": 0, 
        "id": 12574811, 
        "rank": 0
      }
    ], 
    "title": "how to turn readlines into a string... perhaps?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 1668963, 
    "answer_posts": [
      {
        "snippets": [
          "DATETIME(year, month, day, hour, minute, second)\nDATETIME('YYYY-MM-DD HH:MM:SS')\nDATE(year, month, day)\nDATE('YYYY-MM-DD')\nTIME(hour, minute, second)\nTIME('HH:MM:SS')\n", 
          "\"WHERE client_email =:1 AND date > DATE(:2) AND date <= DATE(:3) AND application_id =:4\", \"some_email\", \"2009-02-03\", \"2009-11-04\", \"foo\"\n"
        ], 
        "score": 1, 
        "id": 12701918, 
        "rank": 0
      }
    ], 
    "title": "Filtering by dates in Google App Engine's Datastore"
  }, 
  {
    "accepted_answer_post_id": 11520163, 
    "id": 11520012, 
    "answer_posts": [
      {
        "snippets": [
          "ctypes.POINTER(ctypes.POINTER(ctypes.c_int))\n", 
          "ctypes.c_int * width * height\n", 
          "m.data = (ctypes.c_int * width * height)()\n", 
          "m.data = new int[width][height];\n", 
          "m.data = (int**) malloc(sizeof(int) * width * height)\n"
        ], 
        "score": 1, 
        "id": 11520163, 
        "rank": 0
      }
    ], 
    "title": "python ctypes how to map int**"
  }, 
  {
    "accepted_answer_post_id": 7457318, 
    "id": 7456758, 
    "answer_posts": [
      {
        "snippets": [
          "# -*- coding: utf-8 -*-\nimport sys\n\ndata = open(sys.argv[1])\nline = 0\nfor l in data:\n    line += 1\n    char = 0\n    for s in list(unicode(l,'utf-8')):\n        char += 1\n        try:\n            s.encode('ascii')\n        except:\n            print 'Non ASCII character at line:%s char:%s' % (line,char)\n"
        ], 
        "score": 3, 
        "id": 7457318, 
        "rank": 0
      }
    ], 
    "title": "How to find a non-ascii byte in my code?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 15647687, 
    "answer_posts": [
      {
        "snippets": [
          "#elem = driver.find_element_by_name('Graphics')\nelem = driver.find_elements_by_tag_name('TextView')[5]\n", 
          "for elem in driver.find_elements_by_tag_name('TextView'):\n    if elem.text == \"Graphics\":\n        break\nelse:\n    print(\"Could not find desired item\")\n"
        ], 
        "score": 2, 
        "id": 15650929, 
        "rank": 0
      }
    ], 
    "title": "Enumerate all elements in Selenium Python bindings for Appium"
  }, 
  {
    "accepted_answer_post_id": 9852301, 
    "id": 9852226, 
    "answer_posts": [
      {
        "snippets": [
          "import argparse\n\nparser = argparse.ArgumentParser()\nparser.add_argument('-t', nargs='+', type=str)\n\n# If no argument is given to parse_args() then the argument strings of\n# the program are taken from sys.argv. And be sure not to pass in\n# sys.argv[0] if you specify them instead supply sys.argv[1:].\nargs = parser.parse_args()\n\nprint(args.t)\n", 
          "['00:00:30', '00:10:00']\n"
        ], 
        "score": 3, 
        "id": 9852301, 
        "rank": 0
      }
    ], 
    "title": "python argparse with time format"
  }, 
  {
    "accepted_answer_post_id": 18501448, 
    "id": 18501335, 
    "answer_posts": [
      {
        "snippets": [
          "list(itertools.product([-1,1], repeat=4))\n", 
          "list((i,j,k,l) for i in (-1,1) for j in (-1,1) for k in (-1,1) for l in (-1,1))\n"
        ], 
        "score": 3, 
        "id": 18501369, 
        "rank": 0
      }
    ], 
    "title": "Trying to find all combinations of a 2-state vector (in python)"
  }, 
  {
    "accepted_answer_post_id": 17216107, 
    "id": 17216033, 
    "answer_posts": [
      {
        "snippets": [
          " list1 = [x for x in list1 if not x in list2] + [x for x in list1 if x in list2]\n", 
          "['sony', 'samsung', 'apple', 'toshiba', 'cant recall', 'dont know', 'no answer']\n"
        ], 
        "score": 3, 
        "id": 17216107, 
        "rank": 0
      }
    ], 
    "title": "Python - Always append certain strings to the end of a list"
  }, 
  {
    "accepted_answer_post_id": 3275327, 
    "id": 3275293, 
    "answer_posts": [
      {
        "snippets": [
          "setup(console=['__main__.py'], options={\"py2exe\":{\"includes\":[\"sip\"]}})\n", 
          "setup(windows=['__main__.py'], options={\"py2exe\":{\"includes\":[\"sip\"]}})\n"
        ], 
        "score": 26, 
        "id": 3275327, 
        "rank": 0
      }
    ], 
    "title": "Hiding console window of Python GUI app with py2exe"
  }, 
  {
    "accepted_answer_post_id": 9212587, 
    "id": 9210589, 
    "answer_posts": [
      {
        "snippets": [
          "import gevent\nfrom gevent.queue import *\nimport time\nimport random\n\nq = JoinableQueue()\nworkers = []\nproducers = []\n\ndef do_work(wid, value):\n    gevent.sleep(random.randint(0,2))\n    print 'Task', value, 'done', wid\n\ndef worker(wid):\n    while True:\n        item = q.get()\n        try:\n            print \"Got item %s\" % item\n            do_work(wid, item)\n        finally:\n            print \"No more items\"\n            q.task_done()\n\n\ndef producer():\n    while True:\n        item = random.randint(1, 11)\n        if item == 10:\n            print \"Signal Received\"\n            return\n        else:\n            print \"Added item %s\" % item\n            q.put(item)\n\n\nproducer()\n\nfor i in range(4):\n    workers.append(gevent.spawn(worker, random.randint(1, 100000)))\n"
        ], 
        "score": 0, 
        "id": 34157728, 
        "rank": 0
      }
    ], 
    "title": "How can I implement a multi-producer, multi-consumer paradigm in Gevent?"
  }, 
  {
    "accepted_answer_post_id": 31826470, 
    "id": 31826335, 
    "answer_posts": [
      {
        "snippets": [
          "import base64\nimport cStringIO\n\nbuffer = cStringIO.StringIO()\nimage.save(buffer, format=\"JPEG\")\nimg_str = base64.b64encode(buffer.getvalue())\n"
        ], 
        "score": 16, 
        "id": 31826470, 
        "rank": 0
      }
    ], 
    "title": "How to convert PIL Image.image object to base64 string?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 16849109, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import re\n>>> strs = \"c1309, IF1306, v1309, p1209, a1309, mo1309\"\n>>> re.sub(r'\\d','',strs)\n'c, IF, v, p, a, mo'\n", 
          ">>> re.sub(r'\\d+','',strs)\n'c, IF, v, p, a, mo'\n", 
          ">>> strs = \"c1309, IF1306, v1309, p1209, a1309, mo1309\"*10**5\n\n>>> %timeit re.sub(r'\\d','',strs)\n1 loops, best of 3: 1.23 s per loop\n\n>>> %timeit re.sub(r'\\d+','',strs)\n1 loops, best of 3: 480 ms per loop\n\n>>> %timeit ''.join([c for c in strs if not c.isdigit()])\n1 loops, best of 3: 1.07 s per loop\n\n#winner\n>>> %timeit from string import digits;strs.translate(None, digits)\n10 loops, best of 3: 20.4 ms per loop\n"
        ], 
        "score": 27, 
        "id": 16849119, 
        "rank": 0
      }
    ], 
    "title": "Strip out numbers from a string"
  }, 
  {
    "accepted_answer_post_id": 7045677, 
    "id": 7045264, 
    "answer_posts": [
      {
        "snippets": [
          "from PIL import ImageGrab\nim = ImageGrab.grabclipboard()\nim.save('somefile.png','PNG')\n"
        ], 
        "score": 11, 
        "id": 7045677, 
        "rank": 0
      }
    ], 
    "title": "How do I read a jpg or png from the windows clipboard in python and vice versa?"
  }, 
  {
    "accepted_answer_post_id": 33657952, 
    "id": 33657809, 
    "answer_posts": [
      {
        "snippets": [
          ">>> df['weight'] = df['dist'] / df.groupby('ind')['dist'].transform('sum')\n>>> df['weight']\n0    0.357143\n1    0.416667\n2    0.250000\n3    0.285714\n4    0.583333\n5    0.285714\n6    0.714286\n7    0.107143\nName: weight, dtype: float64\n", 
          ">>> df['wcas'], df['wdiff'] = (df[n] * df['weight'] for n in ('cas', 'diff'))\n>>> df.groupby('ind')[['wcas', 'wdiff']].sum()\n         wcas     wdiff\nind                    \ng    6.714286  2.785714\nla   3.107143  4.882143\np    3.750000  2.558333\n", 
          ">>> backup = df.copy()     # make a backup copy to mutate in place\n>>> cols = df.columns[:2]  # cas, diff\n>>> df[cols] = df['weight'].values[:, None] * df[cols]\n>>> df.groupby('ind')[cols].sum()\n          cas      diff\nind                    \ng    6.714286  2.785714\nla   3.107143  4.882143\np    3.750000  2.558333\n"
        ], 
        "score": 4, 
        "id": 33657952, 
        "rank": 0
      }
    ], 
    "title": "Calculate weighted average with pandas dataframe"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 35653721, 
    "answer_posts": [
      {
        "snippets": [
          "import pyodbc\nimport pandas as pd\nimport os\ndef IDW_to_df(conn, quarter, file_name,sql_statement, *columns):\n    cursor = conn.cursor()\n    cursor.execute(sql_statement)\n    Dict = {}\n    for column in columns:            \n        Dict[column]=[]\n    while 1:\n        row = cursor.fetchone()\n        if not row:\n            break\n        x = 0\n        for column in columns:\n            Dict[column].append(row[x])\n            x += 1\n    df = pd.DataFrame(Dict)\n    os.makedirs('H:/Q{0}'.format(quarter))\n    df.to_csv('H:/Q{0}/{1}.csv'.format(quarter,file_name))\n    return df   \n"
        ], 
        "score": 0, 
        "id": 35654214, 
        "rank": 0
      }
    ], 
    "title": "Creating New Folder/Directory in Python/Pandas"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 8729071, 
    "answer_posts": [
      {
        "snippets": [
          "import smtplib\nfrom email.mime.text import MIMEText\n\ns = smtplib.SMTP('smtp.uk.xensource.com')\ns.set_debuglevel(1)\nmsg = MIMEText(\"\"\"body\"\"\")\nsender = 'me@example.com'\nrecipients = ['john.doe@example.com', 'john.smith@example.co.uk']\nmsg['Subject'] = \"subject line\"\nmsg['From'] = sender\nmsg['To'] = \", \".join(recipients)\ns.sendmail(msg.get('From'), recipients, msg.as_string())\n"
        ], 
        "score": 4, 
        "id": 12422904, 
        "rank": 0
      }
    ], 
    "title": "Is there any way to add multiple receivers in Python SMTPlib?"
  }, 
  {
    "accepted_answer_post_id": 17153791, 
    "id": 17153779, 
    "answer_posts": [
      {
        "snippets": [
          "print \"If there was a birth every 7 seconds, there would be: \",births,\"births\"\n", 
          ">>> print \"foo\",\"bar\",\"spam\"\nfoo bar spam\n", 
          "print \"If there was a birth every 7 seconds, there would be: {} births\".format(births)\n", 
          ">>> print \"{:d} {:03d} {:>20f}\".format(1,2,1.1)\n1 002             1.100000\n  ^^^\n  0's padded to 2\n", 
          ">>> births = 4\n>>> print \"If there was a birth every 7 seconds, there would be: \",births,\"births\"\nIf there was a birth every 7 seconds, there would be:  4 births\n\n#formatting\n>>> print \"If there was a birth every 7 seconds, there would be: {} births\".format(births)\nIf there was a birth every 7 seconds, there would be: 4 births\n"
        ], 
        "score": 54, 
        "id": 17153791, 
        "rank": 0
      }
    ], 
    "title": "How can I print variable and string on same line in Python?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 858109, 
    "answer_posts": [
      {
        "snippets": [
          ">>> [\"item 1\", \"blah\", \"item 3\"].index(\"blah\")\n1\n>>> [\"item 1\", \"item 2\", \"blah\"].index(\"blah\")\n2\n", 
          ">>> [\"item 1\", \"item 2\", \"item 3\"].index(\"not found\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: list.index(x): x not in list\n", 
          ">>> \"not found\" in [\"item 1\", \"blah\", \"item 3\"]\nFalse\n>>> \"item 3\" in [\"item 1\", \"blah\", \"item 3\"]\nTrue\n", 
          "\"x\" in mylist\n", 
          "found = False\nfor cur in mylist:\n    if cur == \"x\":\n        found = True\n"
        ], 
        "score": 9, 
        "id": 858121, 
        "rank": 0
      }
    ], 
    "title": "List Element without iteration"
  }, 
  {
    "accepted_answer_post_id": 16496631, 
    "id": 16475632, 
    "answer_posts": [
      {
        "snippets": [
          "for button in buttonslist: \n    button.connect(\"clicked\",button_function)\n"
        ], 
        "score": 2, 
        "id": 16496631, 
        "rank": 0
      }
    ], 
    "title": "Multiple buttons to call same function in python Gtk"
  }, 
  {
    "accepted_answer_post_id": 7558849, 
    "id": 7558758, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import urllib\n>>> raw = '%C3%BE%C3%A6%C3%B0%C3%B6'\n>>> urllib.unquote(raw)\n'\\xc3\\xbe\\xc3\\xa6\\xc3\\xb0\\xc3\\xb6'\n>>> unicode(urllib.unquote(raw), 'utf-8')\nu'\\xfe\\xe6\\xf0\\xf6'\n", 
          ">>> len('\\xC3')         # this is a hex escape, only one character\n1\n>>> len(r'\\xC3')        # this is four characters, '\\', 'x', 'C', '3'\n4\n>>> r'\\xC3' == '\\\\xC3'  # raw strings escape backslashes\nTrue\n", 
          "raw_uni = re.sub('%(\\w{2})', lambda m: chr(int(m.group(1), 16)), raw)\n"
        ], 
        "score": 3, 
        "id": 7558849, 
        "rank": 0
      }
    ], 
    "title": "wsgi - processing unicode characters from post"
  }, 
  {
    "accepted_answer_post_id": 17688727, 
    "id": 17688264, 
    "answer_posts": [
      {
        "snippets": [
          "from django.db.models import Count\ntests.objects.annotate(Count('tat'))\n"
        ], 
        "score": 0, 
        "id": 17688727, 
        "rank": 0
      }
    ], 
    "title": "Django INNER JOIN with GROUP BY queryset"
  }, 
  {
    "accepted_answer_post_id": 26414451, 
    "id": 26414132, 
    "answer_posts": [
      {
        "snippets": [
          "def save(self, *args, **kwargs):\n\n    Email.objects.filter(content_type__pk=self.content_type.id, object_id=self.object_id, main=True).update(main=False)\n\n    self.main = True\n    super(Email, self).save(*args, **kwargs)\n"
        ], 
        "score": 1, 
        "id": 26414451, 
        "rank": 0
      }
    ], 
    "title": "DJANGO Update field of all objects in a table on save"
  }, 
  {
    "accepted_answer_post_id": 25347195, 
    "id": 25345700, 
    "answer_posts": [
      {
        "snippets": [
          "cursor.execute(\"SELECT a, b, c FROM some_table\")\nfor (a_value, b_value, c_value) in cursor:\n    # do stuff...\n"
        ], 
        "score": 2, 
        "id": 25347195, 
        "rank": 0
      }
    ], 
    "title": "Python MySQLdb: Iterating over a cursor"
  }, 
  {
    "accepted_answer_post_id": 6365523, 
    "id": 6364226, 
    "answer_posts": [
      {
        "snippets": [
          "import codecs\nnfoText = codecs.open('something.nfo', 'r', 'cp437').read()\n"
        ], 
        "score": 0, 
        "id": 6365523, 
        "rank": 0
      }
    ], 
    "title": "Converting an NFO to PNG with Python and PIL"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 33427870, 
    "answer_posts": [
      {
        "snippets": [
          "            from selenium import webdriver\n            from lxml.html import tostring,fromstring\n            import time\n            import csv\n\n            myfile = open('demo_detail.csv', 'wb')\n            wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)\n            driver=webdriver.Chrome('./chromedriver.exe')\n            csv_heading=[\"\",\"\",\"BIB\",\"NAME\",\"CATEGORY\",\"RANK\",\"GENDER PLACE\",\"CAT. PLACE\",\"GUN TIME\",\"SPLIT NAME\",\"SPLIT DISTANCE\",\"SPLIT TIME\",\"PACE\",\"DISTANCE\",\"RACE TIME\",\"OVERALL (/814)\",\"GENDER (/431)\",\"CATEGORY (/38)\",\"TIME OF DAY\"]\n            wr.writerow(csv_heading)\n            count=0\n            try:\n                url=\"https://www.sportstats.ca/display-results.xhtml?raceid=4886\"\n                driver.get(url)\n                table_tr=driver.find_elements_by_xpath(\"//table[@class='results overview-result']/tbody/tr[@role='row']\")\n                for tr in table_tr:\n                    lst=[]\n                    count=count+1\n                    table_td=tr.find_elements_by_tag_name(\"td\")\n                    for td in table_td:\n                        lst.append(td.text)\n\n                    table_td[1].find_element_by_tag_name(\"div\").click()\n                    time.sleep(5)\n                    table=driver.find_elements_by_xpath(\"//div[@class='ui-datatable ui-widget']\")\n                    for demo_tr in driver.find_elements_by_xpath(\"//tr[@class='ui-expanded-row-content ui-widget-content view-details']/td/div/div/table/tbody/tr\"):\n                        for demo_td in demo_tr.find_elements_by_tag_name(\"td\"):\n                            lst.append(demo_td.text)\n                    wr.writerow(lst)\n                    table_td[1].find_element_by_tag_name(\"div\").click()\n                    time.sleep(5)\n                    print count\n                time.sleep(5)\n                driver.quit()\n            except Exception as e:\n                print e\n                driver.quit()\n"
        ], 
        "score": 0, 
        "id": 33707606, 
        "rank": 0
      }
    ], 
    "title": "Python Selenium Scrape Hidden Data"
  }, 
  {
    "accepted_answer_post_id": 1450154, 
    "id": 1450132, 
    "answer_posts": [
      {
        "snippets": [
          "proxy = urllib2.ProxyHandler({'http': '127.0.0.1'})\nopener = urllib2.build_opener(proxy)\nurllib2.install_opener(opener)\nurllib2.urlopen('http://www.google.com')\n"
        ], 
        "score": 114, 
        "id": 1450154, 
        "rank": 0
      }
    ], 
    "title": "Proxy with urllib2"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 1022264, 
    "answer_posts": [
      {
        "snippets": [
          ">>> [i.capitalize() for i in s.split('-')]\n['These', 'Three_words']\n", 
          ">>> [i for i in s.split('_')]\n['These-Three', 'words']\n"
        ], 
        "score": 6, 
        "id": 1022288, 
        "rank": 0
      }
    ], 
    "title": "Python behavior of string in loop"
  }, 
  {
    "accepted_answer_post_id": 17043256, 
    "id": 17043207, 
    "answer_posts": [
      {
        "snippets": [
          ">>> from collections import Counter\n>>> d =Counter()\n>>> d.update({'key1':10,'key2':14,'key3':47})\n>>> d['key1'] += 20\n>>> d['key4'] += 50  # Also works for keys that are not present\n>>> d\nCounter({'key4': 50, 'key3': 47, 'key1': 30, 'key2': 14})\n", 
          ">>> d1 = Counter({'key4': 50, 'key3': 4})\n#You can add two counters\n>>> d.update(d1)\n>>> d\nCounter({'key4': 100, 'key3': 51, 'key1': 30, 'key2': 14})\n", 
          ">>> d.most_common()\n[('key4', 100), ('key3', 51), ('key1', 30), ('key2', 14)]\n", 
          ">>> keys = [ random.randint(0,1000) for _ in xrange(10**4)]\n>>> def dd():                             \n    d = defaultdict(int)\n    for k in keys:\n        d[k] += 10\n...         \n>>> def count():                             \n    d = Counter()\n    for k in keys:\n        d[k] += 10\n...         \n>>> def simple_dict():\n...     d = {}\n...     for k in keys:\n...         d[k] = d.get(k,0) + 10\n...         \n>>> %timeit dd()\n100 loops, best of 3: 3.47 ms per loop\n>>> %timeit count()\n100 loops, best of 3: 10.1 ms per loop\n>>> %timeit simple_dict()\n100 loops, best of 3: 5.01 ms per loop\n"
        ], 
        "score": 5, 
        "id": 17043256, 
        "rank": 0
      }
    ], 
    "title": "Sum values in a Python dict?"
  }, 
  {
    "accepted_answer_post_id": 17508825, 
    "id": 17508794, 
    "answer_posts": [
      {
        "snippets": [
          "# s is a socket.socket object\ns.shutdown(socket.SHUT_RDWR)\ns.close()\n", 
          "s.send(data, flags=socket.MSG_OOB | socket.MSG_DONTROUTE)\n"
        ], 
        "score": 2, 
        "id": 17508825, 
        "rank": 0
      }
    ], 
    "title": "Socket flags how to use them with Python"
  }, 
  {
    "accepted_answer_post_id": 27700375, 
    "id": 27698377, 
    "answer_posts": [
      {
        "snippets": [
          "params = {'mathtext.default': 'regular' }          \nplt.rcParams.update(params)\n", 
          "plt.rcParams.update({'mathtext.default':  'regular' })\n", 
          "import numpy as np\nfrom matplotlib import pyplot as plt\n\nx = np.linspace(1, 10, 40)\ny = x**2\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nparams = {'mathtext.default': 'regular' }          \nplt.rcParams.update(params)\nax.set_xlabel('$x_{my text}$')\nax.set_ylabel('$y_i$')\nax.plot(x, y)\nax.grid()\nplt.show()\n"
        ], 
        "score": 11, 
        "id": 27708102, 
        "rank": 0
      }
    ], 
    "title": "How do I make sans serif superscript or subscript text in matplotlib?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 32067809, 
    "answer_posts": [
      {
        "snippets": [
          "import matplotlib.pyplot as plt\nx = range(255)\ny = range(255)\n# color = range(255)  not needed?\nplt.scatter(x, y, c='black')\n"
        ], 
        "score": 3, 
        "id": 32067981, 
        "rank": 0
      }
    ], 
    "title": "Black points in scatter plot"
  }, 
  {
    "accepted_answer_post_id": 852481, 
    "id": 852414, 
    "answer_posts": [
      {
        "snippets": [
          "values = [1,2,3]\n\n# Turn list of values into list of Q objects\nqueries = [Q(pk=value) for value in values]\n\n# Take one Q object from the list\nquery = queries.pop()\n\n# Or the Q object with the ones remaining in the list\nfor item in queries:\n    query |= item\n\n# Query the model\nArticle.objects.filter(query)\n"
        ], 
        "score": 83, 
        "id": 852481, 
        "rank": 0
      }
    ], 
    "title": "How to dynamically compose an OR query filter in Django?"
  }, 
  {
    "accepted_answer_post_id": 27802281, 
    "id": 27802109, 
    "answer_posts": [
      {
        "snippets": [
          "import numpy as np\n\ndef normalize_column(A, col):\n    A[:,col] = (A[:,col] - np.min(A[:,col])) / (np.max(A[:,col]) - np.min(A[:,col]))\n\nif __name__ == '__main__':\n    A = np.matrix([[1,2,3], [4,5,6], [7,8,9]], dtype=float)\n    normalize_column(A, 1)\n    print (A)\n", 
          "[[ 1.   0.   3. ]\n [ 4.   0.5  6. ]\n [ 7.   1.   9. ]]\n", 
          "np.ptp(A,0)[0,col]\n"
        ], 
        "score": 2, 
        "id": 27802281, 
        "rank": 0
      }
    ], 
    "title": "column-wise normalization (scaling) of arrays"
  }, 
  {
    "accepted_answer_post_id": 36371942, 
    "id": 36369870, 
    "answer_posts": [
      {
        "snippets": [
          "from sklearn.feature_extraction.text import TfidfVectorizer\ncorpus = ['Saya benci awak',\n          'Saya cinta awak',\n          'Saya x happy awak',\n          'Saya geram awak',\n          'Saya taubat awak']\n\n# HERE YOU DO YOUR MAGIC: you open your file and load the list of STOP WORDS\nstop_words = [unicode(x.strip(), 'utf-8') for x in open('stopword.txt','r').read().split('\\n')]\n\nvectorizer = TfidfVectorizer(analyzer='word', stop_words = stop_words)\nX = vectorizer.fit_transform(corpus)\nidf = vectorizer.idf_\nprint dict(zip(vectorizer.get_feature_names(), idf))\n", 
          "{u'taubat': 2.09861228866811, u'happy': 2.09861228866811, u'cinta': 2.09861228866811, u'benci': 2.09861228866811, u'geram': 2.09861228866811}\n", 
          "{u'benci': 2.09861228866811, u'taubat': 2.09861228866811, u'saya': 1.0, u'awak': 1.0, u'geram': 2.09861228866811, u'cinta': 2.09861228866811, u'happy': 2.09861228866811}\n"
        ], 
        "score": 0, 
        "id": 36371942, 
        "rank": 0
      }
    ], 
    "title": "Sklearn - How to add custom stopword list from txt file"
  }, 
  {
    "accepted_answer_post_id": 30578183, 
    "id": 30576628, 
    "answer_posts": [
      {
        "snippets": [
          "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\n\nfig=plt.figure(figsize=(15,5.5))\nax1=plt.subplot2grid((1,3),(0,0))\nax2=plt.subplot2grid((1,3),(0,1))\nax3=plt.subplot2grid((1,3),(0,2))\n\nimage=np.random.random_integers(1,10,size=(100,100))\nim = ax1.imshow(image,interpolation=\"none\",aspect='equal')\n\ndivider = make_axes_locatable(ax1)\ncax = divider.append_axes(\"bottom\",size=\"5%\",pad=0.7)\ncbar=fig.colorbar(im,cax=cax,orientation=u'horizontal')\n\nx=np.linspace(0,1)\nax2.plot(x,x**2)\nax3.plot(x,x**3)\n\nplt.show()\n"
        ], 
        "score": 3, 
        "id": 30578183, 
        "rank": 0
      }
    ], 
    "title": "matplotlib change size of subplots"
  }, 
  {
    "accepted_answer_post_id": 16630260, 
    "id": 16630071, 
    "answer_posts": [
      {
        "snippets": [
          "ids = []\nfor tweet in tweets:\n    if 'id_str' in tweet:\n        ids.append(tweet['id_str'])\n", 
          "ids = [tweet['id_str'] for tweet in tweets if 'id_str' in tweet]\n"
        ], 
        "score": 1, 
        "id": 16630260, 
        "rank": 0
      }
    ], 
    "title": "extract tweets from a text file (python)"
  }, 
  {
    "accepted_answer_post_id": 36957034, 
    "id": 36951763, 
    "answer_posts": [
      {
        "snippets": [
          "import Queue\nimport threading, time\n\nclass MyThread(threading.Thread):\n    def __init__(self, theQueue=None):\n        threading.Thread.__init__(self)        \n        self.theQueue=theQueue\n\n    def run(self):\n        while True:\n            thing=self.theQueue.get()\n            self.process(thing) \n            self.theQueue.task_done()\n\n    def process(self, thing):\n        time.sleep(1)\n        print 'processing %s'%thing\n\nqueue=Queue.Queue()\nTHINGS = ['Thing%02d'%i for i in range(101)]\nAVAILABLE_CPUS=3\n\nfor OneOf in range(AVAILABLE_CPUS):\n    thread=MyThread(theQueue=queue)\n    thread.start() # thread started. But since there are no tasks in Queue yet it is just waiting.\n\nfor thing in THINGS:       \n    queue.put(thing) # as soon as task in added here one of available Threads picks it up\n"
        ], 
        "score": 1, 
        "id": 36957034, 
        "rank": 0
      }
    ], 
    "title": "How to limit the number of Threads"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 39583264, 
    "answer_posts": [
      {
        "snippets": [
          "In [388]: df\nOut[388]:\n   A         B\n0  1  (AAAAA)2\n1  2    (BCA)1\n2  3     (CA)5\n3  4     (DD)8\n4  5    (ED)15\n\nIn [389]: df.B = df.B.str.replace(r'[\\(\\)\\d]+', '')\n\nIn [390]: df\nOut[390]:\n   A      B\n0  1  AAAAA\n1  2    BCA\n2  3     CA\n3  4     DD\n4  5     ED\n", 
          "In [401]: df['B'].str.extract(r'.*?([A-Za-z]+).*?', expand=True)\nOut[401]:\n       0\n0  AAAAA\n1    BCA\n2     CA\n3     DD\n4     ED\n"
        ], 
        "score": 4, 
        "id": 39583276, 
        "rank": 0
      }
    ], 
    "title": "Pandas: strip numbers and parenthesis from string"
  }, 
  {
    "accepted_answer_post_id": 15603809, 
    "id": 15603628, 
    "answer_posts": [
      {
        "snippets": [
          "import hashlib,binascii\nhash = hashlib.new('md4', \"password\".encode('utf-16le')).digest()\nprint binascii.hexlify(hash)\n"
        ], 
        "score": 3, 
        "id": 15603809, 
        "rank": 0
      }
    ], 
    "title": "How to calculate NTLM hash in python?"
  }, 
  {
    "accepted_answer_post_id": 4726192, 
    "id": 4722794, 
    "answer_posts": [
      {
        "snippets": [
          "from xml.etree import ElementTree as ET\ntree = ET.parse('file.xml')\nprint tree.find('//{http://www.opengis.net/gml}lowerCorner').text\nprint tree.find('//{http://www.opengis.net/gml}upperCorner').text\n", 
          "137796 483752\n138178 484222\n", 
          "{http://www.kadaster.nl/schemas/klic/20080722/leveringsinfo}Pngformaat/{http://www.kadaster.nl/schemas/klic/20080722/leveringsinfo}OmsluitendeRechthoek/{http://www.opengis.net/gml}Envelope/{http://www.opengis.net/gml}upperCorner\n"
        ], 
        "score": 8, 
        "id": 4726192, 
        "rank": 0
      }
    ], 
    "title": "Parsing an XML file using Element Tree"
  }, 
  {
    "accepted_answer_post_id": 29041046, 
    "id": 28979794, 
    "answer_posts": [
      {
        "snippets": [
          "df[df == 1].stack().index.tolist()\n", 
          "[(1, 'a'), (2, 'b'), (3, 'b')]\n"
        ], 
        "score": 5, 
        "id": 28979980, 
        "rank": 0
      }
    ], 
    "title": "Python pandas: Getting the locations of a value in dataframe"
  }, 
  {
    "accepted_answer_post_id": 19845780, 
    "id": 19845132, 
    "answer_posts": [
      {
        "snippets": [
          "a = [x1, x2, x3]\nb = [y1, y2, y3]\nc = ['g^', 'g-', 'g+']\n", 
          "[(x1, y1, 'g^'), (x2, y2, 'g-'), (x3, y3, 'g+')]\n", 
          "list_of_tuples = zip(a, b, c)\ndenormalized = [x for tup in list_of_tuples for x in tup]\nplot(*denormalized)\n", 
          "[x1, y2, 'g^', x2, y2, 'g-', x3, y3, 'g+']\n", 
          "denormalized = []\nfor tup in list_of_tuples:\n    for x in tup:\n        denormalized.append(x)\n"
        ], 
        "score": 1, 
        "id": 19845780, 
        "rank": 0
      }
    ], 
    "title": "Passing variable length parameters to a function in python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 17334507, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import datetime\n>>> str(datetime.timedelta(0, 175, 941041))\n'0:02:55.941041'\n"
        ], 
        "score": 1, 
        "id": 17334543, 
        "rank": 0
      }
    ], 
    "title": "How to change timedelta into time duration in Python?"
  }, 
  {
    "accepted_answer_post_id": 19261306, 
    "id": 19261132, 
    "answer_posts": [
      {
        "snippets": [
          "CREATE TABLE whois (Rid, Names);\n", 
          "CREATE TABLE whois (Rid);\nCREATE TABLE whois_names (Rid, Name, FOREIGN KEY(Rid) REFERENCES whois(Rid);\n", 
          "tt = [(rid,(\"billy\",\"jim\"))]\nfor rid, names in tt:\n    c.execute('INSERT INTO whois VALUES (?)', (rid,))\n    for name in names:\n        c.execute('INSERT INTO whois_names VALUES (?, ?)', (rid, name))\n", 
          "c.executemany('INSERT INTO whois VALUES (?)', (rid for rid, names in tt))\nc.executemany('INSERT INTO whois_names VALUES (?, ?),\n              (rid, name for rid, names in tt for name in names))\n"
        ], 
        "score": 1, 
        "id": 19261306, 
        "rank": 0
      }
    ], 
    "title": "Add list to sqlite database"
  }, 
  {
    "accepted_answer_post_id": 6301823, 
    "id": 6301700, 
    "answer_posts": [], 
    "title": "Get specifics elements of a xml output in python"
  }, 
  {
    "accepted_answer_post_id": 45832, 
    "id": 45507, 
    "answer_posts": [
      {
        "snippets": [
          "from PIL import Image\nfilename = r'logo.png'\nimg = Image.open(filename)\nimg.save('logo.ico')\n", 
          "icon_sizes = [(16,16), (32, 32), (48, 48), (64,64)]\nimg.save('logo.ico', sizes=icon_sizes)\n"
        ], 
        "score": 5, 
        "id": 36168447, 
        "rank": 0
      }
    ], 
    "title": "Is there a Python library for generating .ico files?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 17262226, 
    "answer_posts": [
      {
        "snippets": [
          "{\n  \"shares\": {\n    \"count\": 4435\n  }, \n  \"id\": \"80329313253_10151690351363254\", \n  \"created_time\": \"2013-06-19T18:02:31+0000\"\n}\n", 
          "fb.request(path='/80329313253_10151690351363254', args={'fields': 'shares'})\n"
        ], 
        "score": 1, 
        "id": 17262397, 
        "rank": 0
      }
    ], 
    "title": "Python/Facebook-SDk How to get shares count for a photo posted on a page"
  }, 
  {
    "accepted_answer_post_id": 5084192, 
    "id": 5083763, 
    "answer_posts": [
      {
        "snippets": [
          "import matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\n\nf = plt.figure()\n\ngs = gridspec.GridSpec(1, 2,width_ratios=[2,1])\n\nax1 = plt.subplot(gs[0])\nax2 = plt.subplot(gs[1])\n\nplt.show()\n"
        ], 
        "score": 33, 
        "id": 5084061, 
        "rank": 0
      }
    ], 
    "title": "Python/Matplotlib - Change the relative size of a subplot"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 17106526, 
    "answer_posts": [
      {
        "snippets": [
          "void setup() {\n    Serial.begin(9600);\n    Serial.println('READY');\n    Serial.flush();\n    char ch1 = 0, ch2 = 0;\n    char incomingByte = 0;\n    while (ch1 != 'O' && ch2 != 'K') {\n        ch1 = Serial.read();\n        if (ch1 == 'O' && ch2 == 'K')\n            break;\n        ch2 = Serial.read();\n    }\n}\n", 
          "with serial.Serial('/dev/tty.usbserial-AH01LLHS',9600) as s:\n    s.flush()\n    ready = \"\"\n    while ready != \"READY\":\n        ready = s.readline()\n        s.flush()\n    while True:\n        # ... you stuff\n"
        ], 
        "score": 0, 
        "id": 17113422, 
        "rank": 0
      }
    ], 
    "title": "Writing data to arduino python"
  }, 
  {
    "accepted_answer_post_id": 24854457, 
    "id": 24853632, 
    "answer_posts": [
      {
        "snippets": [
          "with open('data.csv', 'r') as f:\n    data = [i.split(\",\") for i in f.read().split()]\n    print data\n", 
          "[['A', 'B', 'C', 'D'],\n ['1', '2', '3', '4'],\n ['W', 'X', 'Y', 'Z'],\n ['5', '6', '7', '8']]\n"
        ], 
        "score": 1, 
        "id": 24853669, 
        "rank": 0
      }
    ], 
    "title": "How to load a CSV into IPython notebook"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 26163113, 
    "answer_posts": [
      {
        "snippets": [
          "import sys, os\npaths = ['C:\\test1', 'C:\\test2', 'C:\\test3']\nfor path in paths:\n    if path not in sys.path:\n        sys.path.append(path)\n", 
          "import sys, os\npath = os.path.dirname(os.path.abspath(__file__))\nif path not in sys.path:\n    sys.path.append(path)\n", 
          "WSGIScriptAlias /scripts \"C:/web/wsgi_scripts/main.py\"\nWSGICallableObject app\n\n<Directory \"C:/web/wsgi_scripts\">\n<Files main.py>\nRequire all granted\n</Files>\n</Directory>\n"
        ], 
        "score": 0, 
        "id": 39112840, 
        "rank": 0
      }
    ], 
    "title": "mod_wsgi WSGIPythonPath multiple paths on Windows"
  }, 
  {
    "accepted_answer_post_id": 29320778, 
    "id": 29320132, 
    "answer_posts": [
      {
        "snippets": [
          "if randomnumber == 0:\n    layout.addWidget(self.Correctanswer)\n    layout.addWidget(self.Incorrectans1)\n    layout.addWidget(self.Incorrectans2)\n    layout.addWidget(self.Incorrectans3)\n", 
          "choices = [self.Correctanswer, self.Incorrectans1, self.Incorrectans2, self.Incorrectans3]\nfor q in range(4):\n    layout.addWidget(random.sample(choices, 1))\n", 
          "def provideWrongAnswers(self, number):\n    return random.sample(self.allWrongAnswersPool, number)\n", 
          "In [7]: choices = range(1,11)\nIn [9]: random.sample(choices, 3)  # returns a different order of choices each time\nOut[9]: [1, 7, 3]\nIn [10]: random.sample(choices, 3)\nOut[10]: [6, 9, 3]\nIn [11]: random.sample(choices, 3)\nOut[11]: [5, 4, 2]\nIn [12]: random.sample(choices, 3)\nOut[12]: [3, 6, 1]\nIn [13]: random.sample(choices, 3)\nOut[13]: [10, 8, 3]\nIn [14]: random.sample(choices, 3)\nOut[14]: [1, 7, 2]\nIn [15]: random.sample(choices, 3)\nOut[15]: [9, 7, 3]\n"
        ], 
        "score": 3, 
        "id": 29320778, 
        "rank": 0
      }
    ], 
    "title": "How to randomize the order of radio buttons in pyqt"
  }, 
  {
    "accepted_answer_post_id": 5621382, 
    "id": 5619226, 
    "answer_posts": [
      {
        "snippets": [
          "class phonebook:\n    def __init__ (self):\n        self.allphones = {}  # Empty dictionary\n\n    def adddata(self, pername, perphone):\n        self.allphones[pername] = perphone\n\n# test code\nbook = phonebook()\nbook.adddata('joe', 121212)\nbook.adddata('bob', 129459)\n\nprint book.allphones\n", 
          "{'bob': 129459, 'joe': 121212}\n"
        ], 
        "score": 3, 
        "id": 5619498, 
        "rank": 0
      }
    ], 
    "title": "Keeps only one entry instead of appending to the dictionary"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 29661132, 
    "answer_posts": [
      {
        "snippets": [
          "all(int(c) < 2 for c in str(n))\n", 
          ">>> all(int(c) < 2 for c in str(1011))\nTrue\n>>> all(int(c) < 2 for c in str(1211))\nFalse\n"
        ], 
        "score": 3, 
        "id": 29661285, 
        "rank": 0
      }
    ], 
    "title": "How do I check if each digit of a number is less than 2? (python)"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 19612942, 
    "answer_posts": [
      {
        "snippets": [
          "$.get('submit',\n        dat,\n        function(data, status, request) {\n            if (status = 'success'){\n                console.log(status);\n               $(\"body\").append(\"<iframe src='\" + request.getResponseHeader('redirect')+ \"' style='display: none;' ></iframe>\");\n            }\n            else \n                alert(\"There is an exception on server side while submitting the response!\");\n\n        }, \n        'xml'); \n", 
          "  headers = {'content-type': 'application/json', 'charset':'UTF-8'}\n  r = requests.post(url, data=json.dumps(jsonstring), headers=headers)\n  response = make_response(r.text)\n  response.headers[\"Content-Type\"] = 'application/xml'\n  response.headers.add(\"redirect\", request.url)\n  response.headers[\"Content-Disposition\"] = 'attachment; filename=\"exportChecklists.xml\"'\n\n  return response\n"
        ], 
        "score": 0, 
        "id": 19623405, 
        "rank": 0
      }
    ], 
    "title": "Google App Engine and Flask: Serving Files"
  }, 
  {
    "accepted_answer_post_id": 17194229, 
    "id": 17194109, 
    "answer_posts": [
      {
        "snippets": [
          "x = ['1.34511','0.0234','-0.0890'] \ny = ['0.0987', '0.8763', '-0.0762']\n\nx = np.array(x, dtype=np.float32)\ny = np.array(y, dtype=np.float32)\n\nplt.plot(x,y)\n", 
          "x = ['1.34511','0.0234','-0.0890'] \ny = ['0.0987', '0.8763', '-0.0762']\n\nx = [float(val) for val in x]\ny = [float(val) for val in y]\n\nplt.plot(x,y)\n"
        ], 
        "score": 3, 
        "id": 17194229, 
        "rank": 0
      }
    ], 
    "title": "Plot numerical string values in matplotlib"
  }, 
  {
    "accepted_answer_post_id": 10010624, 
    "id": 10010589, 
    "answer_posts": [
      {
        "snippets": [
          "print \"{:g}\".format(1.0)\n", 
          "print \"%g\" % 1.0\n"
        ], 
        "score": 5, 
        "id": 10010624, 
        "rank": 0
      }
    ], 
    "title": "Python and Floats - Print only the Whole Number"
  }, 
  {
    "accepted_answer_post_id": 15437604, 
    "id": 15437589, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import string\n>>> s.translate(None,string.ascii_lowercase)\n'FOOFOOOBAR'\n"
        ], 
        "score": 17, 
        "id": 15437604, 
        "rank": 0
      }
    ], 
    "title": "fast way to remove lowercase substrings from string?"
  }, 
  {
    "accepted_answer_post_id": 9532410, 
    "id": 9532264, 
    "answer_posts": [
      {
        "snippets": [
          "import threading\n\nclass print_out(threading.Thread):\n\n    def __init__ (self, m1, m2):\n        threading.Thread.__init__(self)\n        self.m1 = m1\n        self.m2 = m2\n\n    def run(self):\n        print self.m1\n        print self.m2\n        print \"\\n\"\n\nthreads = []\nfor num in range(0, 10):\n    thread = print_out('a', 'b')\n    thread.start()\n    threads.append(thread)\n\nfor thread in threads:\n    thread.join()\n"
        ], 
        "score": 8, 
        "id": 9532410, 
        "rank": 0
      }
    ], 
    "title": "How to use multiple threads"
  }, 
  {
    "accepted_answer_post_id": 10970122, 
    "id": 10969113, 
    "answer_posts": [
      {
        "snippets": [
          "imshow(z, origin='lower', extent=[-4,4,-1,1], aspect=4)\n", 
          "plot(x[:]*4, z[50, :])\n", 
          "xticks(xticks()[0], [str(t*4) for t in xticks()[0]])\n"
        ], 
        "score": 10, 
        "id": 10970122, 
        "rank": 0
      }
    ], 
    "title": "How do I change the scale of imshow in matplotlib without stretching the image?"
  }, 
  {
    "accepted_answer_post_id": 8130991, 
    "id": 8130828, 
    "answer_posts": [
      {
        "snippets": [
          "import re\n\ntext = '''<document docid=1>\nPreliminary Report-International Algebraic Language\nPerlis, A. J. & Samelson,K.\nCACM December, 1958\n</document>'''\n\npattern = r'<document docid=(\\d+)>(.*?)</document>'\nprint re.findall(pattern, text, re.DOTALL)\n"
        ], 
        "score": 4, 
        "id": 8130881, 
        "rank": 0
      }
    ], 
    "title": "parse xml like document with regex"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 8888628, 
    "answer_posts": [
      {
        "snippets": [
          "#all unicode characters from 0x0000 - 0x0020 (33 total) are bad and will be replaced by \"\" (empty string)\nfor line in fileinput.input(xmlInputFileLocation, inplace=1):\n    for pos in range(0,len(line)):\n        if unichr(line[pos]) < 32:\n            line[pos] = None\n    print u''.join([c for c in line if c])\n"
        ], 
        "score": 6, 
        "id": 8890364, 
        "rank": 0
      }
    ], 
    "title": "How should I deal with an XMLSyntaxError in Python's lxml while parsing a large XML file?"
  }, 
  {
    "accepted_answer_post_id": 9055705, 
    "id": 9055687, 
    "answer_posts": [
      {
        "snippets": [
          "newlist = sorted(input, key=lambda k: (k['age'], k['name'])) \n", 
          "In [13]: input = [{'name':'Homer', 'age':39}, {'name':'Bart', 'age':10}, {'name':'Milhouse', 'age':10}, {'name': 'Mr. Burns', 'age': 104}]\n\nIn [14]: sorted(input, key=lambda k: (k['age'], k['name']))\nOut[14]: \n[{'age': 10, 'name': 'Bart'},\n {'age': 10, 'name': 'Milhouse'},\n {'age': 39, 'name': 'Homer'},\n {'age': 104, 'name': 'Mr. Burns'}]\n", 
          "In [19]: sorted(input, key=operator.itemgetter('age','name'))\nOut[19]: \n[{'age': 10, 'name': 'Bart'},\n {'age': 10, 'name': 'Milhouse'},\n {'age': 39, 'name': 'Homer'},\n {'age': 104, 'name': 'Mr. Burns'}]\n"
        ], 
        "score": 4, 
        "id": 9055705, 
        "rank": 0
      }
    ], 
    "title": "How do I sort a list of dictionaries by more than one element"
  }, 
  {
    "accepted_answer_post_id": 21198941, 
    "id": 21198887, 
    "answer_posts": [
      {
        "snippets": [
          "In [6]: m = np.ma.masked_array([1, 2, 3, 4], mask=[False, False, True, False])\n\nIn [7]: m\nOut[7]: \nmasked_array(data = [1 2 -- 4],\n             mask = [False False  True False],\n       fill_value = 999999)\n\nIn [8]: m.count()\nOut[8]: 3\n", 
          "In [16]: m.mask\nOut[16]: array([False, False,  True, False], dtype=bool)\n", 
          "In [18]: not m.mask.all()\nOut[18]: True\n", 
          "In [23]: b = np.ma.masked_array([1, 2, 3, 4], mask=[True, True, True, True])\nIn [24]: b\nOut[24]: \nmasked_array(data = [-- -- -- --],\n             mask = [ True  True  True  True],\n       fill_value = 999999)\n", 
          "In [26]: not b.mask.all()\nOut[26]: False\n", 
          "In [72]: x = np.random.randint(0,3,size=1000)\n", 
          "In [73]: mx = np.ma.masked_array(x, mask=x==0)\n\nIn [74]: mx.count()\nOut[74]: 680\n", 
          "In [75]: %timeit mx.count()\n100000 loops, best of 3: 10.4 us per loop\n\nIn [76]: %timeit not mx.mask.all()\n100000 loops, best of 3: 3.37 us per loop\n"
        ], 
        "score": 6, 
        "id": 21198941, 
        "rank": 0
      }
    ], 
    "title": "Most efficient way to determine if a numpy masked array contains any non-masked values?"
  }, 
  {
    "accepted_answer_post_id": 13324026, 
    "id": 13323851, 
    "answer_posts": [
      {
        "snippets": [
          "list1 = ['black', 'red', 'yellow']\n", 
          "print(len([w for w in list2 if w in list1]))\n"
        ], 
        "score": 0, 
        "id": 13323960, 
        "rank": 0
      }
    ], 
    "title": "Python 3 - counting matches in two lists (including duplicates)"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 9300226, 
    "answer_posts": [
      {
        "snippets": [
          "res[field0] += [field1, field2]\n", 
          "res[field0].append((field1, field2))\n", 
          "for key in sorted(res):\n    for pair in sorted(res[key]):\n        print '{0} {pair[0]} {pair[1]}'.format(key, pair=pair)\n"
        ], 
        "score": 1, 
        "id": 9300536, 
        "rank": 0
      }
    ], 
    "title": "List of lists value in dictionary?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 10768507, 
    "answer_posts": [
      {
        "snippets": [
          "from subprocess import Popen\n\nclass TestApp(object):\n    app = None\n\n    def start(self):\n        self.app = Popen(['your command'])\n\n    def stop(self):\n        self.app.terminate()\n", 
          "app1 = TestApp()\napp1.start()\napp2 = TestApp()\napp2.start()\n#do something here\napp1.stop()\napp2.stop()\n#do more here\n"
        ], 
        "score": 0, 
        "id": 10768526, 
        "rank": 0
      }
    ], 
    "title": "Terminate subprocess in Python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 9363670, 
    "answer_posts": [
      {
        "snippets": [
          "In [1]: d = {\n   ...:     \"2010\": [2],\n   ...:     \"2009\": [4,7],\n   ...:     \"1989\": [8]\n   ...: }\n\nIn [2]: from collections import OrderedDict\n\nIn [5]: OrderedDict(sorted(d.items(), key=lambda (k,v):len(v), reverse=True))\nOut[5]: OrderedDict([('2009', [4, 7]), ('2010', [2]), ('1989', [8])])\n", 
          "In [7]: dict((k,v) for k,v in d.items() if len(v) > 1)\nOut[7]: {'2009': [4, 7]}\n"
        ], 
        "score": 2, 
        "id": 9363751, 
        "rank": 0
      }
    ], 
    "title": "Sort dictionary by number of values under each key"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 14959507, 
    "answer_posts": [
      {
        "snippets": [
          ">>> subprocess.call([\"ls\", \"-l\"])\n0\n\n>>> subprocess.call(\"exit 1\", shell=True)\n1\n"
        ], 
        "score": 1, 
        "id": 14959577, 
        "rank": 0
      }
    ], 
    "title": "How to give a command line command from python?"
  }, 
  {
    "accepted_answer_post_id": 21170291, 
    "id": 7589012, 
    "answer_posts": [
      {
        "snippets": [
          "vis = np.concatenate((img1, img2), axis=0)\n", 
          "vis = np.concatenate((img1, img2), axis=1)\n", 
          "import cv2\nimport numpy as np\nimg = cv2.imread('img.png')\nvis = np.concatenate((img1, img2), axis=1)\ncv2.imwrite('out.png', vis)\n"
        ], 
        "score": 25, 
        "id": 21170291, 
        "rank": 0
      }
    ], 
    "title": "Combining Two Images with OpenCV"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 35104033, 
    "answer_posts": [
      {
        "snippets": [
          "import subprocess\nsubprocess.check_call('netsh.exe advfirewall set publicprofile state off')\n"
        ], 
        "score": 0, 
        "id": 35154121, 
        "rank": 0
      }
    ], 
    "title": "How to disable Windows Firewall using python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 8371887, 
    "answer_posts": [
      {
        "snippets": [
          "import itertools\n\nlst = [1, 2, 3]\ncombs = []\n\nfor i in xrange(1, len(lst)+1):\n    combs.append(i)\n    els = [list(x) for x in itertools.combinations(lst, i)]\n    combs.append(els)\n", 
          "[1, [[1], [2], [3]], 2, [[1, 2], [1, 3], [2, 3]], 3, [[1, 2, 3]]]\n", 
          "import itertools\n\nlst = [1, 2, 3]\ncombs = []\n\nfor i in xrange(1, len(lst)+1):\n    els = [list(x) for x in itertools.combinations(lst, i)]\n    combs.extend(els)\n", 
          "[[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n"
        ], 
        "score": 31, 
        "id": 8371891, 
        "rank": 0
      }
    ], 
    "title": "Making all possible combinations of a list in python"
  }, 
  {
    "accepted_answer_post_id": 19872717, 
    "id": 19872700, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import numpy as np\n>>> OLD = np.array([1,4,7,2,5,8,3,6,9])\n>>> OLD.reshape((3, 3), order='F')\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n"
        ], 
        "score": 3, 
        "id": 19872717, 
        "rank": 0
      }
    ], 
    "title": "rearrange the array elements using numpy in python"
  }, 
  {
    "accepted_answer_post_id": 13478240, 
    "id": 13477942, 
    "answer_posts": [
      {
        "snippets": [
          "\"\".join(yourstring.split('-')) \n", 
          "\"\".join(test.split('-', 3))\n", 
          "temp = test.split('-')\nnumbers, alpha = \"\".join(temp[:-1]), temp[-1]\n"
        ], 
        "score": 0, 
        "id": 13478077, 
        "rank": 0
      }
    ], 
    "title": "python string array sorting"
  }, 
  {
    "accepted_answer_post_id": 30294172, 
    "id": 30293071, 
    "answer_posts": [
      {
        "snippets": [
          "from itertools import groupby\n\nN = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5]\n\nprint([list(j) for i, j in groupby(N)])\n", 
          "[[1], [2, 2], [3, 3, 3], [4, 4, 4, 4], [5, 5, 5, 5, 5]]\n"
        ], 
        "score": 17, 
        "id": 30293132, 
        "rank": 0
      }
    ], 
    "title": "Python - Find same values in a list and group together a new list"
  }, 
  {
    "accepted_answer_post_id": 32399504, 
    "id": 32399132, 
    "answer_posts": [
      {
        "snippets": [
          "pd.options.display.float_format = '{:.23g}'.format\n", 
          "import pandas as pd\n\npd.options.display.float_format = '{:.23g}'.format\n\ndf_fill = pd.DataFrame({'col1':[ 5987.8866699999998672865, 52215.5966699999989941716, \n                                201.8966700000000003001, 3.8199999999999998401]})\n\n#                       col1\n# 0 5987.8866699999998672865\n# 1 52215.596669999998994172\n# 2 201.89667000000000030013\n# 3 3.8199999999999998401279\n\nprint(df_fill['col1'].round(5))\n# 0   5987.8866699999998672865\n# 1   52215.596669999998994172\n# 2   201.89667000000000030013\n# 3   3.8199999999999998401279\n# Name: col1, dtype: float64\n", 
          "pd.options.display.float_format = '{:.5f}'.format\n", 
          "print(df_fill['col1'].round(5))\n", 
          "0    5987.88667\n1   52215.59667\n2     201.89667\n3       3.82000\nName: col1, dtype: float64\n"
        ], 
        "score": 4, 
        "id": 32399504, 
        "rank": 0
      }
    ], 
    "title": "Round pandas data frame/series"
  }, 
  {
    "accepted_answer_post_id": 10281141, 
    "id": 10280963, 
    "answer_posts": [
      {
        "snippets": [
          "import glob\nresults = [open(f) for f in glob.glob(\"*.data\")]\nsep = \",\"\n# Uncomment if your Excel formats decimal numbers like 3,14 instead of 3.14\n# sep = \";\"\n\nwith open(\"res.csv\", 'w') as fout:\n    for row in range(21):\n        iterator = (f.readline().strip().replace(\"\\t\", sep) for f in results)\n        line = sep.join(iterator)\n        fout.write(\"{0}\\n\".format(line))\n"
        ], 
        "score": 8, 
        "id": 10281141, 
        "rank": 0
      }
    ], 
    "title": "Python- Read from Multiple Files"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 16577507, 
    "answer_posts": [
      {
        "snippets": [
          "with open('file.txt', 'w') as f:\n    for n in range(20):\n        f.write(str(n) + '\\n')\n"
        ], 
        "score": 1, 
        "id": 16577530, 
        "rank": 0
      }
    ], 
    "title": "Python write in the same line of file"
  }, 
  {
    "accepted_answer_post_id": 6181784, 
    "id": 6181763, 
    "answer_posts": [
      {
        "snippets": [
          "import re\n\nmystr = 'This is a string, with words!'\nwordList = re.sub(\"[^\\w]\", \" \",  mystr).split()\n", 
          "re.sub(pattern, repl, string, count=0, flags=0)\n"
        ], 
        "score": 34, 
        "id": 6181784, 
        "rank": 0
      }
    ], 
    "title": "Converting a String to a List of Words?"
  }, 
  {
    "accepted_answer_post_id": 20903553, 
    "id": 20903071, 
    "answer_posts": [
      {
        "snippets": [
          "df[[col for col in df.columns if \"Vibration\" in col]]\n", 
          "df.filter(like=\"Vibration\")\n", 
          "df.filter(regex='Ecc|Vibration')\n"
        ], 
        "score": 5, 
        "id": 20903553, 
        "rank": 0
      }
    ], 
    "title": "Create a subset of a DataFrame dependant on column name"
  }, 
  {
    "accepted_answer_post_id": 24037972, 
    "id": 24037507, 
    "answer_posts": [
      {
        "snippets": [
          "mydf['Cigarettes'] = mydf['Cigarettes'].str.replace(' ', '')\n", 
          "mydf['CigarNum'] = mydf['Cigarettes'].apply(numcigar.get).astype(float)\n", 
          "mydf['CigarNum'] = mydf['Cigarettes'].replace(numcigar)\n# now convert the types\nmydf['CigarNum'] = mydf['CigarNum'].convert_objects(convert_numeric=True)\n", 
          "numcigar = {\"Never\":0.0 ,\"1-5 Cigarettes/day\" :1.0,\"10-20 Cigarettes/day\":4.0}\n", 
          "mydf['CigarNum'] = pd.to_numeric(mydf['CigarNum'], errors='coerce')\n"
        ], 
        "score": 20, 
        "id": 24037972, 
        "rank": 0
      }
    ], 
    "title": "Converting string objects to int/float using pandas"
  }, 
  {
    "accepted_answer_post_id": 8330284, 
    "id": 8330207, 
    "answer_posts": [
      {
        "snippets": [
          "lst = [\"dog\", \"cat\" ,\"boy\", \"cat\", \"car\", \"bus\"]\npairs = zip(lst, lst[1:])     # [(\"dog\", \"cat\"), (\"cat\", \"boy\"), ...]\nd = {}\nfor k,v in pairs:\n    d.setdefault(k, [])    # Set e.g. d[\"dog\"] to [] if there is no d[\"dog\"] yet\n    d[k].append(v)\n"
        ], 
        "score": 7, 
        "id": 8330284, 
        "rank": 0
      }
    ], 
    "title": "python: creating a dictionary"
  }, 
  {
    "accepted_answer_post_id": 36693893, 
    "id": 36693794, 
    "answer_posts": [
      {
        "snippets": [
          "myList = ['a' ,'b' , 'c' , 'd' , 'e']\n\nmy_dict = {}\n\nfor idx, val in enumerate(myList): \n    my_dict[\"v{}\".format(idx)] = val\n", 
          "{'v0': 'a', 'v1': 'b', 'v2': 'c', 'v3': 'd', 'v4': 'e'}\n", 
          "print(my_dict['v3']) # outputs d\n", 
          "print('\\n'.join(my_dict.values()))\n", 
          "a\nb\nc\nd\ne\n"
        ], 
        "score": 3, 
        "id": 36693893, 
        "rank": 0
      }
    ], 
    "title": "Save for loop result in variable"
  }, 
  {
    "accepted_answer_post_id": 26398382, 
    "id": 26398289, 
    "answer_posts": [
      {
        "snippets": [
          "f = open('image.jpg','wb')\nf.write(data)\nf.close()\n", 
          "with open('image.jpg','wb') as f:\n    f.write(data)\n"
        ], 
        "score": 1, 
        "id": 26398382, 
        "rank": 0
      }
    ], 
    "title": "Bytestring to Image in python"
  }, 
  {
    "accepted_answer_post_id": 27341877, 
    "id": 27341763, 
    "answer_posts": [
      {
        "snippets": [
          "owner = models.ForeignKey(User, related_name=\"owners_friend\")\n", 
          "@login_required(login_url='/yourloginurl/')\ndef save_newfriend(request):\n   owner = request.user\n   # process friend_form_data       \n   new_friend = owner.owners_friend.create(friend=friend_form_data)\n"
        ], 
        "score": 1, 
        "id": 27341877, 
        "rank": 0
      }
    ], 
    "title": "Django models, how to set object owner while saving"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 20312942, 
    "answer_posts": [
      {
        "snippets": [
          "for i in range(2):\n    print \"Hello World!\",\n", 
          "print \"Hello World! \" * 2 #Added space in the string\n", 
          "print \" \".join([\"Hello World!\"] * 2)\n"
        ], 
        "score": 1, 
        "id": 20312945, 
        "rank": 0
      }
    ], 
    "title": "How do i print a variable multiple times with each variable on a new line in python?"
  }, 
  {
    "accepted_answer_post_id": 2335734, 
    "id": 2335721, 
    "answer_posts": [
      {
        "snippets": [
          "import win32gui\nhwnd = win32gui.GetForegroundWindow()\nwin32gui.MoveWindow(hwnd, 0, 0, 500, 500, True)\n"
        ], 
        "score": 7, 
        "id": 2335734, 
        "rank": 0
      }
    ], 
    "title": "How can I get the window focused on Windows and re-size it?"
  }, 
  {
    "accepted_answer_post_id": 4403361, 
    "id": 4403289, 
    "answer_posts": [
      {
        "snippets": [
          "import urllib\nurllib.urlretrieve(\"http://www.example.com/songs/mp3.mp3\", \"/home/download/mp3.mp3\")\n"
        ], 
        "score": 15, 
        "id": 4403361, 
        "rank": 0
      }
    ], 
    "title": "How to Download Files using Python?"
  }, 
  {
    "accepted_answer_post_id": 23520083, 
    "id": 23519779, 
    "answer_posts": [
      {
        "snippets": [
          ">>> tree.getroot().xpath(\n...     \"//li[@epub:type = 'footnote']\", \n...     namespaces={'epub':'http://www.idpf.org/2007/ops'}\n...     )\n", 
          ">>> tree.getroot().xpath(\n...     \"//xhtml:li[@epub:type = 'footnote']\", \n...     namespaces={'epub':'http://www.idpf.org/2007/ops', 'xhtml': 'http://www.w3.org/1999/xhtml'}\n...     )\n"
        ], 
        "score": 4, 
        "id": 23520083, 
        "rank": 0
      }
    ], 
    "title": "XPath to namespaced XML in Python?"
  }, 
  {
    "accepted_answer_post_id": 23792308, 
    "id": 23792033, 
    "answer_posts": [
      {
        "snippets": [
          ">>> product_df['month_num'] = product_df.groupby('product_desc').cumcount()\n>>> product_df\n\n  product_desc activity_month  prod_count    pct_ch  month_num\n0    product_a     2014-01-01          53       NaN          0\n3    product_a     2014-02-01          52 -0.018868          1\n6    product_a     2014-03-01          50 -0.038462          2\n1    product_b     2014-01-01          44       NaN          0\n4    product_b     2014-02-01          43 -0.022727          1\n7    product_b     2014-03-01          41 -0.046512          2\n2    product_c     2014-01-01          36       NaN          0\n5    product_c     2014-02-01          35 -0.027778          1\n8    product_c     2014-03-01          34 -0.028571          2\n", 
          ">>> product_df['month_num'] = product_df.groupby('product_desc').cumcount() + 1\n\n  product_desc activity_month  prod_count    pct_ch  month_num\n0    product_a     2014-01-01          53       NaN          1\n3    product_a     2014-02-01          52 -0.018868          2\n6    product_a     2014-03-01          50 -0.038462          3\n1    product_b     2014-01-01          44       NaN          1\n4    product_b     2014-02-01          43 -0.022727          2\n7    product_b     2014-03-01          41 -0.046512          3\n2    product_c     2014-01-01          36       NaN          1\n5    product_c     2014-02-01          35 -0.027778          2\n8    product_c     2014-03-01          34 -0.028571          3\n"
        ], 
        "score": 2, 
        "id": 23792308, 
        "rank": 0
      }
    ], 
    "title": "How to increment a row count in groupby in DataFrame"
  }, 
  {
    "accepted_answer_post_id": 7985075, 
    "id": 7984809, 
    "answer_posts": [
      {
        "snippets": [
          ">>> from collections import Counter\n>>> words = 'the quick brown fox jumped over the lazy dog'.split()\n>>> Counter(map(len, words))\nCounter({3: 4, 4: 2, 5: 2, 6: 1})\n", 
          "stripped_list = 'the quick brown fox jumped over the lazy dog'.split()\n\ntally = [0] * 20\nprint tally #original tally\n\nfor i in stripped_list:\n    length_word = len(i)\n    tally[length_word] += 1\nprint tally\n"
        ], 
        "score": 2, 
        "id": 7985037, 
        "rank": 0
      }
    ], 
    "title": "Appending a list that tallies the length of words"
  }, 
  {
    "accepted_answer_post_id": 8685873, 
    "id": 8685809, 
    "answer_posts": [
      {
        "snippets": [
          "with open('my_file.csv', 'w') as f:\n    [f.write('{0},{1}\\n'.format(key, value)) for key, value in my_dict.items()]\n"
        ], 
        "score": 6, 
        "id": 19739263, 
        "rank": 0
      }
    ], 
    "title": "Python: Writing a dictionary to a csv file with one line for every 'key: value'"
  }, 
  {
    "accepted_answer_post_id": 26434675, 
    "id": 26434613, 
    "answer_posts": [
      {
        "snippets": [
          "i = 0\nwhile True:\n    i = s.find(sub, i)\n    if i == -1:\n        break\n    do_stuff_with(s, i)\n", 
          "for match in re.finditer(pattern, s):\n    do_stuff_with(match)\n", 
          "match = re.search(pattern, s[index:])\n", 
          "match = re.search('.{%d}%s' % (index, pattern), s)\n", 
          ".{3}(abc)\n"
        ], 
        "score": 2, 
        "id": 26434675, 
        "rank": 0
      }
    ], 
    "title": "How do I use re.search starting from a certain index in the string?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 32155589, 
    "answer_posts": [
      {
        "snippets": [
          "with open('C:/Windows/System32/drivers/etc/hosts', 'a') as f:\n    f.write('127.127.127.127 static.ak.connect.facebook.com\\n')\n"
        ], 
        "score": 0, 
        "id": 32157681, 
        "rank": 0
      }
    ], 
    "title": "Edit a file as administrator in Python"
  }, 
  {
    "accepted_answer_post_id": 25522341, 
    "id": 7436132, 
    "answer_posts": [
      {
        "snippets": [
          "hiddenimports=[\"mysql\"],\n", 
          "a = Analysis([os.path.join(HOMEPATH,'support/_mountzlib.py'), os.path.join(HOMEPATH,'support/useUnicode.py'), 'icinga.py'],\n         pathex=['/home/user/projects/icinga_python/releases/v2.1'], hiddenimports=[\"mysql\"],)\n"
        ], 
        "score": 0, 
        "id": 41869771, 
        "rank": 0
      }
    ], 
    "title": "pyinstaller, spec file, ImportError: No module named 'blah'"
  }, 
  {
    "accepted_answer_post_id": 24816066, 
    "id": 24815963, 
    "answer_posts": [
      {
        "snippets": [
          ">>> a_list = [[12411.0, 31937.0, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.15, 0.1, 0.15, 0.2, 0.1, 0.15, 0.15, 0.15, 0.15], [12411.0, 31937.0, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]]\n>>> result = [a + b for a, b in zip(*a_list)]\n>>> result[:2] = a_list[0][:2]\n>>> result\n[12411.0, 31937.0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.25, 0.2, 0.25, 0.30000000000000004, 0.2, 0.25, 0.25, 0.25, 0.25]\n", 
          "[a + b for a, b in zip(*a_list)]\n", 
          "result[:2] = a_list[0][:2]\n", 
          ">>> a_list = [[12411.0, 31937.0, 0.1, 0.1], [12411.3, 31937.0, 0.1, 0.1]]\n", 
          "all([True if list(a)[1:] == list(a)[:-1] else False for a in list(zip(*a_list))[:2]])\n", 
          "a_list = [[12411.0, 31937.0, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.15, 0.1, 0.15, 0.2, 0.1, 0.15, 0.15, 0.15, 0.15], [12411.0, 31937.0, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]]\ncheck = all([True if list(a)[1:] == list(a)[:-1] else False for a in list(zip(*a_list))[:2]])\nresult = []\nif check:\n    result = [a + b for a, b in zip(*a_list)]\n    result[:2] = a_list[0][:2]\nelse:\n    # whatever the behavior should be.\n"
        ], 
        "score": 2, 
        "id": 24816023, 
        "rank": 0
      }
    ], 
    "title": "Python: Adding list values to each other in a list of lists"
  }, 
  {
    "accepted_answer_post_id": 17814538, 
    "id": 17814314, 
    "answer_posts": [
      {
        "snippets": [
          "for col_name in ['col2','col3']:\n    plt = figure() #This gives you a new figure to plot in\n    x_min = min(df['col1'].min(), df[col_name].min())\n    x_max = max(df['col1'].max(), df[col_name].max())\n    plt.xlim([x_min,x_max])\n    plt.ylim([x_min,x_max])\n    plt.axes().set_aspect('equal')\n    plt.scatter(df['col1'], df[col_name])\n"
        ], 
        "score": 2, 
        "id": 17814538, 
        "rank": 0
      }
    ], 
    "title": "How to plot more than one image with matplotlib?"
  }, 
  {
    "accepted_answer_post_id": 6589588, 
    "id": 6589414, 
    "answer_posts": [
      {
        "snippets": [
          "cursor.execute('INSERT INTO media_files (%s) VALUES (%%s, %%s, %%s, %%s,   ...)' % ','.join(fieldlist), valuelist)\n", 
          "sql = 'INSERT INTO media_files (%s) VALUES (%%s, %%s, %%s, %%s,   ...)' % ','.join(fieldlist)\ncursor.execute(sql, valuelist)\n"
        ], 
        "score": 3, 
        "id": 6589588, 
        "rank": 0
      }
    ], 
    "title": "MySQL Dynamic Query Statement in Python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 32969828, 
    "answer_posts": [
      {
        "snippets": [
          "lines=[]\nwith open('filename', \"r\") as f:\n    for i, line in enumerate(x.split('\\n')):\n        if i>=3 and i<=5:\n            lines.append([int(y) for y in line.split()])\n\nlines = np.array(lines)\nprint type(lines)\n"
        ], 
        "score": 2, 
        "id": 32973710, 
        "rank": 0
      }
    ], 
    "title": "Read specific lines from text file as numpy array"
  }, 
  {
    "accepted_answer_post_id": 13894822, 
    "id": 13894809, 
    "answer_posts": [
      {
        "snippets": [
          "# List of strings: ['1', '-3', '10', ...]\nnumbers = A.split()\n\nprint len(numbers)\n", 
          "# List of numbers: [1, -3, 10, ...]\nnumbers = [int(n) for n in A.split()]\n"
        ], 
        "score": 5, 
        "id": 13894822, 
        "rank": 0
      }
    ], 
    "title": "length of list in python?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 7604071, 
    "answer_posts": [
      {
        "snippets": [
          "In [15]: x= range(5)\nIn [16]: y = [10, 23, 12, 45, 32]\nIn [17]: color = ['r', 'b', 'y', 'g', 'c']\nIn [18]: lines = bar(x, y, color=color)\n", 
          "In [19]: lines      \nOut[19]:\n[<matplotlib.patches.Rectangle object at 0x02\n <matplotlib.patches.Rectangle object at 0x02\n <matplotlib.patches.Rectangle object at 0x02\n <matplotlib.patches.Rectangle object at 0x02\n <matplotlib.patches.Rectangle object at 0x02\n", 
          "In [20]: lines[0].set_color('c')    #changes from original red to cyan\n"
        ], 
        "score": 2, 
        "id": 8241330, 
        "rank": 0
      }
    ], 
    "title": "Multi-Coloured bars in matplotlib"
  }, 
  {
    "accepted_answer_post_id": 35492941, 
    "id": 35491870, 
    "answer_posts": [
      {
        "snippets": [
          "browser = webdriver.Firefox()\ninput_box = b.find_element_by_name(\"address-search-box\")\ninput_box.send_keys('328 West 91st Street')\ntime.sleep(3)\n", 
          "browser.find_element_by_name(\"search-result-1\").click()\n"
        ], 
        "score": 1, 
        "id": 35492941, 
        "rank": 0
      }
    ], 
    "title": "How to input a text field which is autopopulating in Python Selenium"
  }, 
  {
    "accepted_answer_post_id": 10267406, 
    "id": 10267132, 
    "answer_posts": [
      {
        "snippets": [
          "panel.SetSizerAndFit(grid)\n", 
          "    #panel.CreateStatusBar()\n    vSizer.Add(grid, 0, wx.ALL, 5)\n    panel.SetSizerAndFit(grid)\n    self.CreateStatusBar()\n    self.SetInitialSize()\n    self.Show(True)\n"
        ], 
        "score": 1, 
        "id": 10267406, 
        "rank": 0
      }
    ], 
    "title": "Grid and Sizers in wxPython"
  }, 
  {
    "accepted_answer_post_id": 36672501, 
    "id": 36441335, 
    "answer_posts": [
      {
        "snippets": [
          "f = open(filename)\n", 
          "for i in range(13):  # skip the first 13 lines that are useless for the columns definition\n    f.readline()  # use the resulting string for metadata extraction\n", 
          "pandas.read_csv(f, sep=\",\") \n"
        ], 
        "score": 1, 
        "id": 36461799, 
        "rank": 0
      }
    ], 
    "title": "Reading in header information from csv file using Pandas"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 33483670, 
    "answer_posts": [
      {
        "snippets": [
          "grouped = s.groupby(s)\n", 
          "grouped = s.groupby(lambda x: s[x])\n"
        ], 
        "score": 10, 
        "id": 39247824, 
        "rank": 0
      }
    ], 
    "title": "How to group a Series by values in pandas?"
  }, 
  {
    "accepted_answer_post_id": 23173127, 
    "id": 23172293, 
    "answer_posts": [
      {
        "snippets": [
          "\\b[0-9]+(?:\\.[0-9]+)?\\b\n", 
          "import re\nNewickTree = ['(BMNH833953:0.16529463651919140688,(((BMNH833883:0.22945757727367316336,(BMNH724182a:0.18028180766761139897,(BMNH724182b:0.21469677818346077913,BMNH724082:0.54350916483644962085):0.00654573856803835914):0.04530853441176059537):0.02416511342888815264,(((BMNH794142:0.21236619242575086042,(BMNH743008:0.13421900772403019819,BMNH724591:0.14957653992840658219):0.02592135486124686958):0.02477670174791116522,BMNH703458a:0.22983459269245612444):0.00000328449424529074,BMNH703458b:0.29776257618061197086):0.09881729077887969892):0.02257522897558370684,BMNH833928:0.21599133163597591945):0.02365043128986757739,BMNH724053:0.16069861523756587274):0.0;']\n\npattern = re.compile(r\"\\b[0-9]+(?:\\.[0-9]+)?\\b\")\n\nfor tree in NewickTree:\n    branch_lengths = pattern.findall(tree)\n    # Do stuff to the list branch_lengths\n    print(branch_lengths)\n", 
          "['0.16529463651919140688', '0.22945757727367316336', '0.18028180766761139897',\n '0.21469677818346077913', '0.54350916483644962085', '0.00654573856803835914', \n '0.04530853441176059537', '0.02416511342888815264', '0.21236619242575086042',\n '0.13421900772403019819', '0.14957653992840658219', '0.02592135486124686958', \n '0.02477670174791116522', '0.22983459269245612444', '0.00000328449424529074',\n '0.29776257618061197086', '0.09881729077887969892', '0.02257522897558370684',\n '0.21599133163597591945', '0.02365043128986757739', '0.16069861523756587274',\n '0.0']\n"
        ], 
        "score": 2, 
        "id": 23173127, 
        "rank": 0
      }
    ], 
    "title": "Use Python to extract Branch Lengths from Newick Format"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 35672809, 
    "answer_posts": [
      {
        "snippets": [
          ".../\n    test/\n        01.txt\n        02.txt\n        03.txt\n        04.txt\n        05.txt\n        06.txt\n        07.txt\n        08.txt\n        09.txt\n        10.txt\n        random_file.py\n        this_shouldnt_be_here.sh\n", 
          ">>> import os             \n>>> all_files = os.listdir(\"test/\")   # imagine you're one directory above test dir\n>>> print(all_files)  # won't necessarily be sorted\n['08.txt', '02.txt', '09.txt', '04.txt', '05.txt', '06.txt', '07.txt', '03.txt', '06.txt', '01.txt', 'this_shouldnt_be_here.sh', '10.txt', 'random_file.py']\n", 
          ">>> txt_files = filter(lambda x: x[-4:] == '.txt', all_files)\n>>> print(txt_files)  # only text files\n['08.txt', '02.txt', '09.txt', '04.txt', '05.txt', '06.txt', '07.txt', '03.txt', '06.txt', '01.txt', '10.txt']\n", 
          ">>> import glob\n>>> txt_files = glob.glob(\"test/*.txt\")\n['test/08.txt', 'test/02.txt', 'test/09.txt', 'test/04.txt', 'test/05.txt', 'test/06.txt', 'test/07.txt', 'test/03.txt', 'test/06.txt', 'test/01.txt', 'test/10.txt']\n", 
          ">>> glob.glob('./*.txt')\n['./08.txt', './02.txt', './09.txt', ... ]\n", 
          ">>> glob.glob(\"*.txt\")  # already in directory containing the text files\n['08.txt', '02.txt', '09.txt', ... ]\n", 
          "fd = open(filename, mode)\nfd.method  # could be write(), read(), readline(), etc...\nfd.close()\n", 
          "with open(filename, mode) as fd:\n    fd.method\n", 
          ">>> def read_first_line(file):\n...     with open(file, 'rt') as fd:\n...         first_line = fd.readline()\n...     return first_line\n...\n>>> output_strings = map(read_first_line, txt_files)  # apply read first line function all text files\n>>> print(output_strings)\n['08\\n', '02\\n', '09\\n', '04\\n', '05\\n', '06\\n', '07\\n', '03\\n', '06\\n', '01\\n', '10\\n']\n", 
          ">>> output_content = \"\".join(sorted(output_strings))  # sort join the output strings without separators\n>>> output_content  # as a string\n'01\\n02\\n03\\n04\\n05\\n06\\n07\\n08\\n09\\n10\\n'\n>>> print(output_content)  # print as formatted\n01\n02\n03\n04\n05\n06\n07\n08\n09\n10\n", 
          ">>> with open('outfile.txt', 'wt') as fd:\n...    fd.write(output_content)\n...\n", 
          ">>> with open('outfile.txt', 'rt') as fd:\n...    print fd.readlines()\n...\n['01\\n', '02\\n', '03\\n', '04\\n', '05\\n', '06\\n', '07\\n', '08\\n', '09\\n', '10\\n']\n", 
          "import glob\n\ndef read_first_line(file):\n    \"\"\"Gets the first line from a file.\n\n    Returns\n    -------\n    str\n        the first line text of the input file\n    \"\"\"\n    with open(file, 'rt') as fd:\n        first_line = fd.readline()\n    return first_line\n\ndef merge_per_folder(folder_path, output_filename):\n    \"\"\"Merges first lines of text files in one folder, and\n    writes combined lines into new output file\n\n    Parameters\n    ----------\n    folder_path : str\n        String representation of the folder path containing the text files.\n    output_filename : str\n        Name of the output file the merged lines will be written to.\n    \"\"\"\n    # make sure there's a slash to the folder path \n    folder_path += \"\" if folder_path[-1] == \"/\" else \"/\"\n    # get all text files\n    txt_files = glob.glob(folder_path + \"*.txt\")\n    # get first lines; map to each text file (sorted)\n    output_strings = map(read_first_line, sorted(txt_files))\n    output_content = \"\".join(output_strings)\n    # write to file\n    with open(folder_path + output_filename, 'wt') as outfile:\n        outfile.write(output_content)\n"
        ], 
        "score": 2, 
        "id": 35674591, 
        "rank": 0
      }
    ], 
    "title": "how to read a list of txt files in a folder in python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 9481870, 
    "answer_posts": [
      {
        "snippets": [
          "my_dict = {d[\"slug\"]: d for d in a}\n", 
          "my_dict = dict((d[\"slug\"], d) for d in a)\n"
        ], 
        "score": 18, 
        "id": 9481895, 
        "rank": 0
      }
    ], 
    "title": "Python - create dictionary from list of dictionaries"
  }, 
  {
    "accepted_answer_post_id": 14110955, 
    "id": 14110721, 
    "answer_posts": [
      {
        "snippets": [
          "import pandas as pd\nimport io\n\ntext = '''\\\nSTK_ID RPT_Date sales cash\n000568 20120930 80.093 57.488\n000596 20120930 32.585 26.177\n000799 20120930 14.784 8.157\n'''\n\ndf = pd.read_csv(io.BytesIO(text), delimiter = ' ', \n                 converters = {0:str})\ndf.set_index(['STK_ID','RPT_Date'], inplace = True)\n", 
          "index = df.index\nnames = index.names\nindex = [('000999','20121231')] + df.index.tolist()[1:]\ndf.index = pd.MultiIndex.from_tuples(index, names = names)\nprint(df)\n#                   sales    cash\n# STK_ID RPT_Date                \n# 000999 20121231  80.093  57.488\n# 000596 20120930  32.585  26.177\n# 000799 20120930  14.784   8.157\n", 
          "df.reset_index(inplace = True)\ndf.ix[0, ['STK_ID', 'RPT_Date']] = ('000999','20121231')\ndf.set_index(['STK_ID','RPT_Date'], inplace = True)\nprint(df)\n\n#                   sales    cash\n# STK_ID RPT_Date                \n# 000999 20121231  80.093  57.488\n# 000596 20120930  32.585  26.177\n# 000799 20120930  14.784   8.157\n", 
          "In [2]: %timeit reassign_index(df)\n10000 loops, best of 3: 158 us per loop\n\nIn [3]: %timeit reassign_columns(df)\n1000 loops, best of 3: 843 us per loop\n"
        ], 
        "score": 15, 
        "id": 14110955, 
        "rank": 0
      }
    ], 
    "title": "How to change Pandas dataframe index value?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 28614012, 
    "answer_posts": [
      {
        "snippets": [
          "import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndf = pd.DataFrame(columns=['x','y','data_value'])\ndf['x'] = [1,2,1,2]\ndf['y'] = [1,1,2,2]\ndf['data_value'] = [1,2,3,4]\n\nprint(df) # so you see what's going on\n\ndf2 = pd.DataFrame(columns=df['x'].unique(), index = df['y'].unique())\n\nprint(df2) # so you see what's going on\n\n# making x columns and y rows\nfor i in df2.index:\n    for j in df2.columns:\n        df2.ix[i,j] = (df[(df['y']==i) & (df['x']==j)]['data_value']).values[0]\n\nprint(df2)\n", 
          "plt.imshow(np.array(df2.astype(float)))\nplt.show()\n"
        ], 
        "score": 0, 
        "id": 28614400, 
        "rank": 0
      }
    ], 
    "title": "python matplotlib plot xy data pairs as image"
  }, 
  {
    "accepted_answer_post_id": 33745496, 
    "id": 33745033, 
    "answer_posts": [
      {
        "snippets": [
          "for line in inputfile:\n  line = line.strip() #remove whitespace before and after\n  if line[0:6] == 'DeltaE':\n    #then we have a line like: DeltaE =    13.5423 | TDMI^2 = 0.6670E-01, Intensity =  6553.\n    deltae = float(line.split('|')[0].strip().split('=')[1].strip())\n    intensity = float(line.split('|')[1].strip().split(',')[1].strip().split('=')[1].strip())\n\n    print deltae, ',', intensity\n", 
          "    deltae = float(line.split('|')[0].strip().split('=')[1].strip())\n", 
          "    temp = line.split('|')[0].strip() #temp=\"DeltaE =    13.5423\"\n    temp = temp.split('=')[1].strip() #temp is now \"13.5423\"\n    deltae = float(temp) #convert string to float.\n"
        ], 
        "score": 1, 
        "id": 33745496, 
        "rank": 0
      }
    ], 
    "title": "How to read specific line in python and print data to text file or console window?"
  }, 
  {
    "accepted_answer_post_id": 8303261, 
    "id": 8302942, 
    "answer_posts": [
      {
        "snippets": [
          "t.forward(60)\n", 
          "for a in range(4):\n    t.forward(60)\n    t.left(90)\n", 
          "for col in range(8):\n    for row in range(8):\n        # draw a square here\n"
        ], 
        "score": 7, 
        "id": 8303261, 
        "rank": 0
      }
    ], 
    "title": "How can I draw a bunch of squares?"
  }, 
  {
    "accepted_answer_post_id": 19159426, 
    "id": 19159226, 
    "answer_posts": [
      {
        "snippets": [
          "url(r'thanks/(?P<id>\\d+)/$, 'thank_you', name='thank_you')\n", 
          "if form.is_valid():\n    docrequest = form.save()\n    return HttpResponseRedirect(reverse('thank_you', kwargs={'id': docrequest.id}))\n", 
          "def thank_you(request, id):\n\n    docrequest = DocumentRequest.objects.get(pk=id)\n    return render_to_response('thankyou.html',\n                              {'docrequest' : docrequest },                            \n                              context_instance=RequestContext(request))\n", 
          "    docrequest = form.save()\n    request.session['docrequest_id'] = docrequest.id\n", 
          "def thank_you(request):\n    if not 'docrequest_id' in request.session:\n        return HttpResponseForbidden    \n    docrequest = DocumentRequest.objects.get(request.session['docrequest_id'])\n"
        ], 
        "score": 1, 
        "id": 19159426, 
        "rank": 0
      }
    ], 
    "title": "Passing form data from my view to thank you page"
  }, 
  {
    "accepted_answer_post_id": 25778900, 
    "id": 25778870, 
    "answer_posts": [], 
    "title": "Get full path for a file in python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 29053132, 
    "answer_posts": [
      {
        "snippets": [
          "import numpy as np\nimport pylab as plt\n\nA = np.random.random((10,10))\n\nplt.subplot(121)\nplt.imshow(A,interpolation='nearest')\n\ncb = plt.colorbar()\noldlabels = cb.ax.get_yticklabels()\nprint(map(lambda x: x.get_text(),oldlabels))\nnewlabels = map(lambda x: str(2 * float(x.get_text())), oldlabels)\nprint(newlabels)\ncb.ax.set_yticklabels(newlabels)\nplt.show()\n"
        ], 
        "score": 0, 
        "id": 29065830, 
        "rank": 0
      }
    ], 
    "title": "manipulate tick labels on a colorbar"
  }, 
  {
    "accepted_answer_post_id": 33468555, 
    "id": 33468226, 
    "answer_posts": [
      {
        "snippets": [
          "for x, y in zip(x_acc, y_acc):\n  t.goto(x, y)\n"
        ], 
        "score": 0, 
        "id": 33468555, 
        "rank": 0
      }
    ], 
    "title": "Turtle draws a curve"
  }, 
  {
    "accepted_answer_post_id": 25870401, 
    "id": 25869700, 
    "answer_posts": [
      {
        "snippets": [
          "+ myproj\n  - manage.py\n  + app\n    - __init__.py\n    - settings.py\n    - urls.py\n    + static     <-- notice the static directory.\n    + templates\n", 
          "STATICFILES_DIRS = (\n    os.path.join(BASE_DIR, \"static\")\n)\n", 
          "if settings.DEBUG:\n    urlpatterns += staticfiles_urlpatterns()\n"
        ], 
        "score": 1, 
        "id": 25870401, 
        "rank": 0
      }
    ], 
    "title": "Get the path of \"static\" folder in django automatically"
  }, 
  {
    "accepted_answer_post_id": 15591801, 
    "id": 15591758, 
    "answer_posts": [
      {
        "snippets": [
          "cur.execute(\"DROP TABLE IF EXISTS anzahlids\")\ncur.execute(\"CREATE TABLE anzahlids (tweetid INT)\")\n\nsome_ids = [ 1, 2, 3, 4, 5]\ncur.execute(\"INSERT INTO anzahlids (tweetid) VALUES (%s)\",\n            (len(some_ids),))\ncnx.commit()\n"
        ], 
        "score": 3, 
        "id": 17543662, 
        "rank": 0
      }
    ], 
    "title": "Python mysql connector insert with %s"
  }, 
  {
    "accepted_answer_post_id": 35115548, 
    "id": 35109113, 
    "answer_posts": [
      {
        "snippets": [
          "In [1]: import numpy as np\n        from sklearn.preprocessing import normalize\n\n        # Values as floats or normalize raises a type error\n        X1 = np.array([\n                      [1., 0., 0., 4., 15.],\n                      [1., 0., 0., 3., 7.],\n                      [0., 1., 0., 5., 9.],\n                      [0., 0., 1., 4., 15.],\n                      ])\n\nIn [2]: X1[:, [3,4]] # last two columns\nOut[2]: array([[  4.,  15.],\n               [  3.,   7.],\n               [  5.,   9.],\n               [  4.,  15.]])\n", 
          "In [3]: X2 = normalize(X1[:, [3,4]], axis=0) #axis=0 for column-wise\n        X2\nOut[3]: array([[ 0.49236596,  0.6228411 ],\n               [ 0.36927447,  0.29065918],\n               [ 0.61545745,  0.37370466],\n               [ 0.49236596,  0.6228411 ]])\n", 
          "In [4]: np.concatenate(( X1[:,[0,1,2]], X2), axis=1)\nOut[4]: array([[ 1.        ,  0.        ,  0.        ,  0.49236596,  0.6228411 ],\n               [ 1.        ,  0.        ,  0.        ,  0.36927447,  0.29065918],\n               [ 0.        ,  1.        ,  0.        ,  0.61545745,  0.37370466],\n               [ 0.        ,  0.        ,  1.        ,  0.49236596,  0.6228411 ]])\n"
        ], 
        "score": 2, 
        "id": 35115548, 
        "rank": 0
      }
    ], 
    "title": "How to normalize only certain columns in scikit-learn?"
  }, 
  {
    "accepted_answer_post_id": 514045, 
    "id": 514029, 
    "answer_posts": [
      {
        "snippets": [
          "import re \ns = \"name[id]\"\nre.find(r\"\\[(.*?)\\]\", s).group(1) # = 'id'\n", 
          "\"i,split,on commas\".split(',') # = ['i', 'split', 'on commas']\n", 
          "import re\ns = \"name[id]\"\n\n# split by either a '[' or a ']'\nre.split('\\[|\\]', s) # = ['name', 'id', '']\n"
        ], 
        "score": 13, 
        "id": 514045, 
        "rank": 0
      }
    ], 
    "title": "How to split a string by using [] in Python"
  }, 
  {
    "accepted_answer_post_id": 12882918, 
    "id": 12882794, 
    "answer_posts": [
      {
        "snippets": [
          "import matplotlib.pyplot as plt\nimport numpy as np\nsin = np.sin\ncos = np.cos\npi = np.pi\n\ndef delete(event):\n    artist = event.artist\n    artist.remove()\n    event.canvas.draw()\n\nfig = plt.figure()\nax = fig.add_subplot(111)\n\nx = np.linspace(0, 2*pi, 50)\ny = 2*sin(x)\nz = 2*cos(x)\nline1, = ax.plot(x,y)\nline2, = ax.plot(x,z)\nfor artist in [line1, line2]:\n    artist.set_picker(5)\nfig.canvas.mpl_connect('pick_event', delete)\n\nplt.show()\n"
        ], 
        "score": 2, 
        "id": 12882918, 
        "rank": 0
      }
    ], 
    "title": "Removing a certain part of a figure in matplotlib"
  }, 
  {
    "accepted_answer_post_id": 16539382, 
    "id": 16504029, 
    "answer_posts": [
      {
        "snippets": [
          "   def edit_kmz(kmz,output,image):\n\n        ##Read the doc.kml file in the kmz and rewrite the doc.kml file\n\n        zf = zipfile.ZipFile(kmz)\n        temp = r'tempfolder\\doc.kml'\n        for line in zf.read(\"doc.kml\").split(\"\\n\"):\n            with open(temp,'a') as wf: #Create the doc.kml\n                if \"</body>\" in line:\n                    wf.write(\"</body>\\n<img src='files/Ovr0.png' width = 750 height=500</img>\\n\") \n                else:\n                    wf.write('%s\\n'%(line))\n        zf.close()\n\n        ##Rezip the file\n\n        zf = zipfile.ZipFile(output,'a')\n        zf.write(image,arcname='files/Ovr0.png') ##Relative Path to the Image\n        zf.write(temp,arcname='doc.kml') ##Add revised doc.kml file\n        zf.close()\n"
        ], 
        "score": 2, 
        "id": 16539382, 
        "rank": 0
      }
    ], 
    "title": "Python: embed images in kmz"
  }, 
  {
    "accepted_answer_post_id": 192365, 
    "id": 192109, 
    "answer_posts": [
      {
        "snippets": [
          "from pprint import pprint\npprint (vars(your_object))\n"
        ], 
        "score": 527, 
        "id": 193539, 
        "rank": 0
      }
    ], 
    "title": "Is there a function in Python to print all the current properties and values of an object?"
  }, 
  {
    "accepted_answer_post_id": 14629488, 
    "id": 14627809, 
    "answer_posts": [
      {
        "snippets": [
          "require 'socket'\n\nr_socket, p_socket = Socket.pair(:UNIX, :DGRAM, 0)\n\npid = Process.spawn('python', 'p.py', p_socket.fileno.to_s,\n                    { :close_others => false })\n\n# Close the python end (we're not using it on the Ruby side)\np_socket.close\n\n# Wait for some data\nputs r_socket.gets\n\n# Wait for finish\nProcess.waitpid(pid)\n", 
          "import sys\nimport socket\n\np_fd     = int(sys.argv[1])\np_socket = socket.fromfd(p_fd, socket.AF_UNIX, socket.SOCK_DGRAM)\n\np_socket.send(\"Hello world\\n\")\n", 
          "> ruby p.rb\nHello world\n"
        ], 
        "score": 5, 
        "id": 14629488, 
        "rank": 0
      }
    ], 
    "title": "How to use Unix Socket to communicate between ruby and Python"
  }, 
  {
    "accepted_answer_post_id": 19317315, 
    "id": 19314589, 
    "answer_posts": [
      {
        "snippets": [
          "wcounts, xedges, yedges = np.histogram2d(x, y, weights=w)\n", 
          "extent = xedges[0], xedges[-1], yedges[0], yedges[-1]\nimshow(wcounts, extent=extent, alpha=0.5)\n", 
          "hexbin(x, y, C=w, alpha=0.5)\n", 
          "# remember that for n bins there are n+1 bin edges\nx_edges = np.linspace(0, 100, 101)\ny_edges = np.linspace(0, 75, 76)\n\nwcounts = np.histogram2d(x, y, weights=w, bins=(x_edges, y_edges))[0]\n"
        ], 
        "score": 1, 
        "id": 19317315, 
        "rank": 0
      }
    ], 
    "title": "Generate Weight Map in Color with MatPlotLib?"
  }, 
  {
    "accepted_answer_post_id": 4246537, 
    "id": 4246377, 
    "answer_posts": [
      {
        "snippets": [
          "__import__('shutil').copy(__import__('sys').argv[1], __import__('sys').argv[2])\n", 
          "open(__import__('sys').argv[2], \"w\").write(open(__import__('sys').argv[1]).read())\n", 
          "from sys import argv\nopen(argv[1],'w').write(open(argv[2]).read())\n", 
          "import sys\nwith open(sys.argv[1]) as src, open(sys.argv[2]) as dest:\n    for line in src:\n        dest.write(line)\n"
        ], 
        "score": 9, 
        "id": 4246537, 
        "rank": 0
      }
    ], 
    "title": "In python, how could I make this three line code into a one line code?"
  }, 
  {
    "accepted_answer_post_id": 37869704, 
    "id": 6475314, 
    "answer_posts": [
      {
        "snippets": [
          ">>> numbers = [12, 34, 1, 4, 4, 67, 37, 9, 0, 81]\n", 
          "result = []\nfor index in range(len(numbers)):\n    if numbers[index] > 5:\n        result.append(numbers[index])\nprint result  #Prints [12, 34, 67, 37, 9, 81]\n", 
          "result = []\nfor number in numbers:\n    if number > 5:\n        result.append(number)\nprint result  #Prints [12, 34, 67, 37, 9, 81]\n", 
          "result = [number for number in numbers if number > 5]\n", 
          "[function(number) for number in numbers if condition(number)]\n", 
          "result = filter(lambda x: x > 5, numbers)\n", 
          "result = map(function, filter(condition, numbers)) #result is a list in Py2\n"
        ], 
        "score": 10, 
        "id": 37869704, 
        "rank": 0
      }
    ], 
    "title": "Python for-in loop preceded by a variable"
  }, 
  {
    "accepted_answer_post_id": 26282869, 
    "id": 26282033, 
    "answer_posts": [
      {
        "snippets": [
          "import numpy as np\n\nA = np.random.rand(5)\nB = np.random.rand(5)\n\nprint \"A:\", A\nprint \"B:\", B\n", 
          "A: [ 0.66926369  0.63547359  0.5294013   0.65333154  0.63912645]\nB: [ 0.17207719  0.26638423  0.55176735  0.05251388  0.90012135]\n", 
          "print \"standard deviation of A:\", np.std(A)\nprint \"standard deviation of B:\", np.std(B)\n", 
          "standard deviation of A: 0.0494162021651\nstandard deviation of B: 0.304319034639\n", 
          "print \"difference:\", A - B\nprint \"SAD:\", np.sum(np.abs(A - B))\nprint \"SSD:\", np.sum(np.square(A - B))\nprint \"correlation:\", np.corrcoef(np.array((A, B)))[0, 1]\n", 
          "difference: [ 0.4971865   0.36908937 -0.02236605  0.60081766 -0.2609949 ]\nSAD: 1.75045448355\nSSD: 0.813021824351\ncorrelation: -0.38247081\n"
        ], 
        "score": 2, 
        "id": 26282869, 
        "rank": 0
      }
    ], 
    "title": "How do I calculate standard deviation of two arrays in python?"
  }, 
  {
    "accepted_answer_post_id": 22166814, 
    "id": 22163113, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import numpy as np\n>>> from scipy.linalg import solve\n>>> \n>>> A = np.random.random((3, 3))\n>>> b = np.random.random(3)\n>>> \n>>> x = solve(A, b)\n>>> x\narray([ 0.98323512,  0.0205734 ,  0.06424613])\n>>> \n>>> np.dot(A, x) - b\narray([ 0.,  0.,  0.])\n"
        ], 
        "score": 7, 
        "id": 22166814, 
        "rank": 0
      }
    ], 
    "title": "Matrix multiplication, solve Ax = b solve for x"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 21798086, 
    "answer_posts": [
      {
        "snippets": [
          "clues = f.readlines()\n", 
          "words.replace(z[1], z[0])\n"
        ], 
        "score": 0, 
        "id": 21798219, 
        "rank": 0
      }
    ], 
    "title": "Locating a character in one text file, and replacing it with a character from another"
  }, 
  {
    "accepted_answer_post_id": 23480347, 
    "id": 23480113, 
    "answer_posts": [
      {
        "snippets": [
          "parser.add_argument('--same',\n                    help='Find those in List1 that are the same in List2',\n                    action='store_true')\n", 
          "args = parser.parse_args()\n\nif args.same:\n   # ...\n", 
          "data1 = set(l.rstrip() for l in args.infile1)\n"
        ], 
        "score": 3, 
        "id": 23480347, 
        "rank": 0
      }
    ], 
    "title": "Opening two files using argparse"
  }, 
  {
    "accepted_answer_post_id": 2682075, 
    "id": 2682012, 
    "answer_posts": [
      {
        "snippets": [
          "map(do_something, a_list_of_objects)\n", 
          " do_something(a)\n do_something(b)\n do_something(c)\n ...\n", 
          "  for obj in a_list_of_objects:\n       do_something(obj)\n", 
          "  [ do_something(x) for x in a_list_of_objects ]\n", 
          "map(lambda x: x.method_call(), a_list_of_objects)\n", 
          "[ x.method_call() for x in a_list_of_objects ]\n"
        ], 
        "score": 13, 
        "id": 6588258, 
        "rank": 0
      }
    ], 
    "title": "How to call same method for a list of objects?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 21801507, 
    "answer_posts": [
      {
        "snippets": [
          "df = df.fillna(0)           # assigns df to a new dataframe\n", 
          "df.fillna(0, inplace=True)  # modifies df inplace \n"
        ], 
        "score": 7, 
        "id": 21801542, 
        "rank": 0
      }
    ], 
    "title": "Cannot Fill NaN with zeros in a Pandas Dataframe"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 2584589, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import glob\n>>> glob.glob(\"D:\\\\bluetooth\\*.jpg\")\n['D:\\\\bluetooth\\\\Image1475.jpg',  'D:\\\\bluetooth\\\\Image1514.jpg']\n", 
          ">>> import glob\n>>> glob.glob('./[0-9].*')\n['./1.gif', './2.txt']\n>>> glob.glob('*.gif')\n['1.gif', 'card.gif']\n>>> glob.glob('?.gif')\n['1.gif']\n"
        ], 
        "score": 8, 
        "id": 2584674, 
        "rank": 0
      }
    ], 
    "title": "Search jpeg files using python"
  }, 
  {
    "accepted_answer_post_id": 36324538, 
    "id": 36324314, 
    "answer_posts": [
      {
        "snippets": [
          "import glob\nfor result in glob.iglob('/path/to/one/*/dir/and/*/and/*'):\n    find('myFile.txt', result)\n", 
          "def find(filename, path):\n  for root, dirs, files in os.walk(path):\n    if filename in files:\n      print(os.path.join(root, filename))\n", 
          "def find(filename, path):\n  for root, dirs, files in os.walk(path):\n    if filename in files:\n      yield os.path.join(root, filename)\n", 
          "for filename in find(needle, haystack):\n  print(filename)\n"
        ], 
        "score": 2, 
        "id": 36324538, 
        "rank": 0
      }
    ], 
    "title": "os.walk a path with wildcard"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 6422700, 
    "answer_posts": [
      {
        "snippets": [
          ">>> myList = [1, 2, 3, 100, 5]\n>>> [i[0] for i in sorted(enumerate(myList), key=lambda x:x[1])]\n[0, 1, 2, 4, 3]\n", 
          "[(0, 1), (1, 2), (2, 3), (3, 100), (4, 5)]\n"
        ], 
        "score": 72, 
        "id": 6422754, 
        "rank": 0
      }
    ], 
    "title": "How to get indices of a sorted array in Python"
  }, 
  {
    "accepted_answer_post_id": 7641175, 
    "id": 7632589, 
    "answer_posts": [
      {
        "snippets": [
          "def convertMp4ToMp3(mp4f, mp3f, odir, kbps, callback=None, efsize=None):\n    \"\"\"\n    mp4f:     mp4 file\n    mp3f:     mp3 file\n    odir:     output directory\n    kbps:     quality in kbps, ex: 320000\n    callback: callback() to recieve progress\n    efsize:   estimated file size, if there is will callback() with %\n    Important:\n    communicate() blocks until the child process returns, so the rest of the lines \n    in your loop will only get executed after the child process has finished running. \n    Reading from stderr will block too, unless you read character by character like here.\n    \"\"\"\n    cmdf = \"ffmpeg -i \"+ odir+mp4f +\" -f mp3 -ab \"+ str(kbps) +\" -vn \"+ odir+mp3f\n    lineAfterCarriage = ''\n\n    print deleteFile(odir + mp3f)\n\n    child = subprocess.Popen(cmdf, shell=True, stderr=subprocess.PIPE)\n\n    while True:\n        char = child.stderr.read(1)\n        if char == '' and child.poll() != None:\n            break\n        if char != '':\n            # simple print to console\n#             sys.stdout.write(char)\n#             sys.stdout.flush()\n            lineAfterCarriage += char\n            if char == '\\r':\n                if callback:\n                    size = int(extractFFmpegFileSize(lineAfterCarriage)[0])\n                    # kb to bytes\n                    size *= 1024\n                    if efsize:\n                        callback(size, efsize)\n                lineAfterCarriage = ''\n", 
          "def executeShellCommand(cmd):\n    p = Popen(cmd , shell=True, stdout=PIPE, stderr=PIPE)\n    out, err = p.communicate()\n    return out.rstrip(), err.rstrip(), p.returncode\n\ndef getFFmpegFileDurationInSeconds(filename):\n    cmd = \"ffmpeg -i \"+ filename +\" 2>&1 | grep 'Duration' | cut -d ' ' -f 4 | sed s/,//\"\n    time = executeShellCommand(cmd)[0]\n    h = int(time[0:2])\n    m = int(time[3:5])\n    s = int(time[6:8])\n    ms = int(time[9:11])\n    ts = (h * 60 * 60) + (m * 60) + s + (ms/60)\n    return ts\n\ndef estimateFFmpegMp4toMp3NewFileSizeInBytes(duration, kbps):\n    \"\"\"\n    * Very close but not exact.\n    duration: current file duration in seconds\n    kbps: quality in kbps, ex: 320000\n    Ex:\n        estim.:    12,200,000\n        real:      12,215,118\n    \"\"\"\n    return ((kbps * duration) / 8)\n", 
          "# get new mp3 estimated size\nsecs = utls.getFFmpegFileDurationInSeconds(filename)\nefsize = utls.estimateFFmpegMp4toMp3NewFileSizeInBytes(secs, 320000)\nprint efsize\n\nutls.convertMp4ToMp3(\"AwesomeKoalaBeat.mp4\", \"AwesomeKoalaBeat.mp3\",\n                \"../../tmp/\", 320000, utls.callbackPrint, efsize)\n"
        ], 
        "score": 2, 
        "id": 20927411, 
        "rank": 0
      }
    ], 
    "title": "Getting realtime output from ffmpeg to be used in progress bar (PyQt4, stdout)"
  }, 
  {
    "accepted_answer_post_id": 8474692, 
    "id": 8474670, 
    "answer_posts": [
      {
        "snippets": [
          "datetime.datetime.combine(datetime.date(2011, 01, 01), datetime.time(10, 23))\n", 
          "datetime.datetime(2011, 1, 1, 10, 23)\n"
        ], 
        "score": 167, 
        "id": 8474692, 
        "rank": 0
      }
    ], 
    "title": "Pythonic way to add datetime.date and datetime.time objects"
  }, 
  {
    "accepted_answer_post_id": 32012129, 
    "id": 32012012, 
    "answer_posts": [
      {
        "snippets": [
          "grouper = df.groupby([pd.TimeGrouper('1H'), 'Location'])\n", 
          "grouper['Event'].count()\n#                      Location\n# 2014-08-25 21:00:00  HK          1\n#                      LDN         1\n# 2014-08-25 22:00:00  LDN         2\n# Name: Event, dtype: int64\n", 
          "grouper['Event'].count().unstack()\n# Out[49]: \n# Location             HK  LDN\n# 2014-08-25 21:00:00   1    1\n# 2014-08-25 22:00:00 NaN    2\n", 
          "grouper = df.groupby([pd.TimeGrouper('1H'), 'Location'])\nresult = grouper['Event'].count().unstack('Location').fillna(0)\n", 
          "Location             HK  LDN\n2014-08-25 21:00:00   1    1\n2014-08-25 22:00:00   0    2\n"
        ], 
        "score": 13, 
        "id": 32012129, 
        "rank": 0
      }
    ], 
    "title": "Pandas: resample timeseries with groupby"
  }, 
  {
    "accepted_answer_post_id": 347175, 
    "id": 347109, 
    "answer_posts": [
      {
        "snippets": [
          "import unittest\nclass TestCase1(unittest.TestCase):\n    def check_something(self, param1):\n        self.assertTrue(param1)\n\ndef _add_test(name, param1):\n    def test_method(self):\n        self.check_something(param1)\n    setattr(TestCase1, 'test_'+name, test_method)\n    test_method.__name__ = 'test_'+name\n\nfor i in range(0, 3):\n    _add_test(str(i), False)\n"
        ], 
        "score": 5, 
        "id": 1974927, 
        "rank": 0
      }
    ], 
    "title": "How do I concisely implement multiple similar unit tests in the Python unittest framework?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 35663226, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import glob\n>>> glob.glob(r'parse_[0-9]*d_[0-9][0-9]a.txt')\n['parse_20d_90a.txt', 'parse_1d_30a.txt', 'parse_10d_60a.txt']\n"
        ], 
        "score": 1, 
        "id": 35663369, 
        "rank": 0
      }
    ], 
    "title": "Opening multiple files using loop in python"
  }, 
  {
    "accepted_answer_post_id": 32020452, 
    "id": 32020029, 
    "answer_posts": [
      {
        "snippets": [
          "import wx\n\nclass MenuCallback(wx.Frame):\n\n    def __init__(self, *args, **kwds):\n        self.frame=wx.Frame.__init__(self, *args, **kwds)\n        self.menubar = wx.MenuBar()\n#        self.statusbar = wx.StatusBar(self-1)\n        self.CreateStatusBar()\n        self.SetStatusText(\"Demonstration of wxPython\")\n        menu1 = wx.Menu()\n        menu_item_1 = menu1.Append(wx.ID_OPEN, \"&File\")\n        menu_item_2 = menu1.Append(wx.ID_EXIT, \"&Exit...\")\n    #Build a list of things via another function or just a declaration\n        self.list_of_things = [\"Thing No 1\", \"Thing No 2\", \"Thing No 3\"]\n        list_used = wx.Menu()\n        thing_count = 101\n\n        for thing in self.list_of_things:\n            t1 = wx.MenuItem(list_used, thing_count, thing)\n            list_used.AppendItem(t1)\n            thing_count +=1\n\n        thing_end = wx.MenuItem(list_used,199,'End of List')\n        list_used.AppendItem(thing_end)\n\n        menu1.AppendMenu(wx.ID_FILE,'&Things',list_used)\n        menu1.SetHelpString(wx.ID_FILE, 'Select from the list of things')\n\n        self.menubar.Append(menu1, \"&File\")\n        self.SetMenuBar(self.menubar)\n    # Create bindings for the Thing list\n        i_count = 101\n        for i in self.list_of_things:\n            self.Bind(wx.EVT_MENU, self.OnThingOpen, id=i_count)\n            i_count = i_count + 1\n        self.Bind(wx.EVT_MENU, self.OnThingEnd, id=199)\n        self.Bind(wx.EVT_MENU, self.OnClose, id=wx.ID_EXIT)\n        self.Show(True)\n\n    def OnThingOpen(self, event):\n        id_selected = event.GetId()\n        obj = event.GetEventObject()\n        print \"Option =\", id_selected\n        print obj.GetLabel(id_selected)\n        print \"From the range:\"\n        for i in range(obj.MenuItemCount):\n            print \"\\t\\t\", obj.MenuItems[i].GetLabel()\n\n    def OnThingEnd(self, event):\n        pass\n\n    def OnClose(self, event):\n        self.Close()\n\nif __name__ == '__main__':\n    app = wx.App()\n    MC=MenuCallback(parent=None, id=-1)\n    app.MainLoop()\n"
        ], 
        "score": 0, 
        "id": 32095835, 
        "rank": 0
      }
    ], 
    "title": "How to get selected menu item in wxPython?"
  }, 
  {
    "accepted_answer_post_id": 13846808, 
    "id": 13840289, 
    "answer_posts": [
      {
        "snippets": [
          "from PyQt4 import QtGui, QtCore\n\nclass Window(QtGui.QWidget):\n    def __init__(self):\n        QtGui.QWidget.__init__(self)\n        layout = QtGui.QVBoxLayout(self)\n        layout.setMargin(15)\n        layout.setSpacing(10)\n        for text in 'One Two Three Four Five'.split():\n            layout.addWidget(QtGui.QPushButton(text, self))\n        self.rubberband = QtGui.QRubberBand(\n            QtGui.QRubberBand.Rectangle, self)\n        self.setMouseTracking(True)\n\n    def mousePressEvent(self, event):\n        self.origin = event.pos()\n        self.rubberband.setGeometry(\n            QtCore.QRect(self.origin, QtCore.QSize()))\n        self.rubberband.show()\n        QtGui.QWidget.mousePressEvent(self, event)\n\n    def mouseMoveEvent(self, event):\n        if self.rubberband.isVisible():\n            self.rubberband.setGeometry(\n                QtCore.QRect(self.origin, event.pos()).normalized())\n        QtGui.QWidget.mouseMoveEvent(self, event)\n\n    def mouseReleaseEvent(self, event):\n        if self.rubberband.isVisible():\n            self.rubberband.hide()\n            selected = []\n            rect = self.rubberband.geometry()\n            for child in self.findChildren(QtGui.QPushButton):\n                if rect.intersects(child.geometry()):\n                    selected.append(child)\n            print 'Selection Contains:\\n ',\n            if selected:\n                print '  '.join(\n                    'Button: %s\\n' % child.text() for child in selected)\n            else:\n                print ' Nothing\\n'\n        QtGui.QWidget.mouseReleaseEvent(self, event)\n\nif __name__ == '__main__':\n\n    import sys\n    app = QtGui.QApplication(sys.argv)\n    window = Window()\n    window.show()\n    sys.exit(app.exec_())\n"
        ], 
        "score": 8, 
        "id": 13846808, 
        "rank": 0
      }
    ], 
    "title": "How to use QRubberBand with QRect Class in PyQt?"
  }, 
  {
    "accepted_answer_post_id": 15909748, 
    "id": 15909293, 
    "answer_posts": [
      {
        "snippets": [
          "plt.scatter(millionspins, millions, c='b', marker='+')\n", 
          "plt.grid(True, which='both')\n", 
          "import matplotlib.pyplot as plt\nimport numpy as np\nN = 100\nmillionspins = np.random.randint(10000000, size=N)\nmillions = np.random.randint(10000000, size=N)\naverageiterations = millionspins.mean()\n\nplt.scatter(millionspins, millions, marker='+')\nplt.axvline([averageiterations], color='r')\n\nplt.xlabel(\"Number of spins\")\nplt.ylabel(\"Bank\")\n\nplt.xlim(0,max(millionspins))\nplt.ylim(1000000,max(millions))\n\nplt.grid(True, which='both')\nplt.show()\n"
        ], 
        "score": 1, 
        "id": 15909738, 
        "rank": 0
      }
    ], 
    "title": "Axis plotting in python - matplotlib"
  }, 
  {
    "accepted_answer_post_id": 32128564, 
    "id": 32126758, 
    "answer_posts": [
      {
        "snippets": [
          "points = []\nfor line in file:\n    x,y = eval(line)\n    points.append((x,y))\nresult = np.array(points)\n"
        ], 
        "score": 1, 
        "id": 32128564, 
        "rank": 0
      }
    ], 
    "title": "Fastest way to create a numpy array from text file"
  }, 
  {
    "accepted_answer_post_id": 22929585, 
    "id": 22929264, 
    "answer_posts": [
      {
        "snippets": [
          "def walk_tree(path):\n    for root, dirs, files in os.walk(path):\n        for dir in dirs:\n            yield root, dir\n", 
          "def is_a_match(dirparent, dirname):\n    return os.path.basename(dirparent) == \"test\" and \\\n    dirname.startswith(\"vvl\") and dirname.endswith(\"cpp\")\n", 
          "def iter_targets(path):\n    for dirparent, dirname in walk_tree(path):\n        if is_a_match(dirparent, dirname):\n            yield os.path.join(dirparent, dirname)\n"
        ], 
        "score": 1, 
        "id": 22929585, 
        "rank": 0
      }
    ], 
    "title": "Python code to search a folder(not file) inside another folder"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 35536670, 
    "answer_posts": [
      {
        "snippets": [
          "with open('Hello.DAT','rb') as f:\n    data = f.read()  \n    print(\" \".join(\"{:02x}\".format(c) for c in data))\n"
        ], 
        "score": 6, 
        "id": 35536716, 
        "rank": 0
      }
    ], 
    "title": "How to convert \"ASCII\" to \"hex\" in python"
  }, 
  {
    "accepted_answer_post_id": 19063131, 
    "id": 19063086, 
    "answer_posts": [
      {
        "snippets": [
          "class ngram(dict):\n    \"\"\"Based on perl's autovivification feature.\"\"\"\n    def __getitem__(self, item):\n        try:\n            return super(ngram, self).__getitem__(item)\n        except KeyError:\n            value = self[item] = type(self)()\n            return value\n", 
          "from collections import defaultdict\nclass ngram(defaultdict):\n    def __init__(self):\n        super(ngram, self).__init__(ngram)\n", 
          ">>> trigram = ngram()\n>>> trigram['two']['three']['four'] = 4\n>>> trigram\n{'two': {'three': {'four': 4}}}\n>>> a['two']\n{'three': {'four': 4}}\n>>> a['two']['three']\n{'four': 4}\n>>> a['two']['three']['four']\n4\n", 
          ">>> a = ngram()\n>>> a['two']['three']['four'] = 4\n>>> a\ndefaultdict(<class '__main__.ngram'>, {'two': defaultdict(<class '__main__.ngram'>, {'three': defaultdict(<class '__main__.ngram'>, {'four': 4})})})\n"
        ], 
        "score": 4, 
        "id": 19063396, 
        "rank": 0
      }
    ], 
    "title": "How to create a dictionary of dictionaries of dictionaries in Python"
  }, 
  {
    "accepted_answer_post_id": 24611310, 
    "id": 998314, 
    "answer_posts": [
      {
        "snippets": [
          "sys.argv[1]\n", 
          "for i in range(int(sys.argv[1])):\n"
        ], 
        "score": 6, 
        "id": 998344, 
        "rank": 0
      }
    ], 
    "title": "Unable to have a command line parameter in Python"
  }, 
  {
    "accepted_answer_post_id": 36333864, 
    "id": 36333507, 
    "answer_posts": [
      {
        "snippets": [
          "if fill_value is not None:\n    table = table.fillna(value=fill_value, downcast='infer')\n", 
          "In [78]: df.fillna('', downcast='infer')\nOut[78]:\n    car_id car_name  car_order    car_rank\n0  Trabant  Trabant          2   111111317\n1    Buick    Buick          1  1111112324\n2    Dodge    Dodge         14  1111112324\n", 
          "In [48]: df.fillna('', downcast='infer').dtypes\nOut[48]:\ncar_id       object\ncar_name     object\ncar_order     int64\ncar_rank      int64\ndtype: object\n", 
          "In [81]: df.pivot_table(index=['car_id', 'car_order'], columns=['car_name'], values=['car_rank'],dropna=True, fill_value='')\nOut[81]:\n                       car_rank\ncar_name                  Buick         Dodge      Trabant\ncar_id  car_order\nBuick   1         1111112324.00\nDodge   14                      1111112324.50\nTrabant 2                                     111111317.29\n"
        ], 
        "score": 4, 
        "id": 36333864, 
        "rank": 0
      }
    ], 
    "title": "Pandas Pivot table converts float to int"
  }, 
  {
    "accepted_answer_post_id": 32427177, 
    "id": 32424670, 
    "answer_posts": [
      {
        "snippets": [
          "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.set_aspect('equal')\n\nu = np.linspace(0, 2 * np.pi, 100)\nv = np.linspace(0, np.pi, 100)\n\nx = 1 * np.outer(np.cos(u), np.sin(v))\ny = 1 * np.outer(np.sin(u), np.sin(v))\nz = 1 * np.outer(np.ones(np.size(u)), np.cos(v))\n#for i in range(2):\n#    ax.plot_surface(x+random.randint(-5,5), y+random.randint(-5,5), z+random.randint(-5,5),  rstride=4, cstride=4, color='b', linewidth=0, alpha=0.5)\nelev = 10.0\nrot = 80.0 / 180 * np.pi\nax.plot_surface(x, y, z,  rstride=4, cstride=4, color='b', linewidth=0, alpha=0.5)\n#calculate vectors for \"vertical\" circle\na = np.array([-np.sin(elev / 180 * np.pi), 0, np.cos(elev / 180 * np.pi)])\nb = np.array([0, 1, 0])\nb = b * np.cos(rot) + np.cross(a, b) * np.sin(rot) + a * np.dot(a, b) * (1 - np.cos(rot))\nax.plot(np.sin(u),np.cos(u),0,color='k', linestyle = 'dashed')\nhoriz_front = np.linspace(0, np.pi, 100)\nax.plot(np.sin(horiz_front),np.cos(horiz_front),0,color='k')\nvert_front = np.linspace(np.pi / 2, 3 * np.pi / 2, 100)\nax.plot(a[0] * np.sin(u) + b[0] * np.cos(u), b[1] * np.cos(u), a[2] * np.sin(u) + b[2] * np.cos(u),color='k', linestyle = 'dashed')\nax.plot(a[0] * np.sin(vert_front) + b[0] * np.cos(vert_front), b[1] * np.cos(vert_front), a[2] * np.sin(vert_front) + b[2] * np.cos(vert_front),color='k')\n\nax.view_init(elev = elev, azim = 0)\n\n\nplt.show()\n"
        ], 
        "score": 2, 
        "id": 32427177, 
        "rank": 0
      }
    ], 
    "title": "python matplotlib: drawing 3D sphere with circumferences"
  }, 
  {
    "accepted_answer_post_id": 30968978, 
    "id": 30958670, 
    "answer_posts": [
      {
        "snippets": [
          " df = pd.DataFrame({'A':['string1','string2','string3'],\n                 'B':['StringA','StringB','StringC']})\n", 
          "             A        B\n    0  string1  StringA\n    1  string2  StringB\n    2  string3  StringC\n", 
          "to_replace = {'string1':'replace1','StringC':'replaceC'}\n", 
          " df.replace(to_replace)\n          A         B\n0  replace1   StringA\n1   string2   StringB\n2   string3  replaceC\n"
        ], 
        "score": 1, 
        "id": 30958772, 
        "rank": 0
      }
    ], 
    "title": "Pandas map to DataFrame from dictionary"
  }, 
  {
    "accepted_answer_post_id": 29636604, 
    "id": 29378763, 
    "answer_posts": [
      {
        "snippets": [
          "s3_client = boto3.client('s3')\nopen('hello.txt').write('Hello, world!')\n\n# Upload the file to S3\ns3_client.upload_file('hello.txt', 'MyBucket', 'hello-remote.txt')\n\n# Download the file from S3\ns3_client.download_file('MyBucket', 'hello-remote.txt', 'hello2.txt')\nprint(open('hello2.txt').read())\n"
        ], 
        "score": 86, 
        "id": 29636604, 
        "rank": 0
      }
    ], 
    "title": "How to save S3 object to a file using boto3"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 31407207, 
    "answer_posts": [
      {
        "snippets": [
          "labels = []\nfor item in items:\n    label = item[0]\n    plt.plot(item[1][0], item[1][1], 'o', c=colors[item], label=str(label))\nplt.legend()\n"
        ], 
        "score": 2, 
        "id": 31407957, 
        "rank": 0
      }
    ], 
    "title": "matplotlib set color of legend"
  }, 
  {
    "accepted_answer_post_id": 19683794, 
    "id": 19683779, 
    "answer_posts": [
      {
        "snippets": [
          "myList = [\"name1\", \"name2\", \"name3\"]\nsubprocess.Popen([\"python\", \"script.py\"] + myList)\n"
        ], 
        "score": 14, 
        "id": 19683794, 
        "rank": 0
      }
    ], 
    "title": "subprocess.Popen : how to pass a list as argument"
  }, 
  {
    "accepted_answer_post_id": 33765599, 
    "id": 33764314, 
    "answer_posts": [
      {
        "snippets": [
          "class AddCarSerializer(serializers.Serializer):\n    # add username custom field\n    username = serializers.CharField()\n    car = CarSerializer()\n\n    class Meta():\n        fields = (\n            'username',\n            'car'\n        )\n\n    def create(self, validated_data):\n        \"\"\" Add car to an user\n        \"\"\"\n        tmp_car = validated_data.pop('car')\n            user = User.objects.get(username=validated_data['username'])\n        car = Car.objects.create(\n            user=user,\n            model=tmp_car['model'],\n            color=tmp_car['color'],\n            seats=tmp_car['seats'],\n        )\n\n        return car\n", 
          "class AddCarForUser(APIView):\n\n    def put(self, request):\n        serializer = AddCarSerializer(data = request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(status=status.HTTP_201_CREATED)\n        return Response(status=status.HTTP_400_BAD_REQUEST)\n", 
          "class Car(models.Model):\n    user = models.ForeignKey(User, related_name='cars')\n    model = models.CharField(max_length=50)\n    color = models.CharField(max_length=20)\n    year = models.IntegerField(null=True)\n    seats = models.IntegerField()\n"
        ], 
        "score": 2, 
        "id": 33765599, 
        "rank": 0
      }
    ], 
    "title": "How can I add a car to a user with Django Rest Framework"
  }, 
  {
    "accepted_answer_post_id": 4510463, 
    "id": 4510435, 
    "answer_posts": [
      {
        "snippets": [
          "response = urllib.request.urlopen(url)\nencoding = response.headers.get_content_charset()\n", 
          "encoding = response.headers.get_content_charset(failobj=\"utf-8\")\n"
        ], 
        "score": 2, 
        "id": 24372670, 
        "rank": 0
      }
    ], 
    "title": "What is a nice, reliable short way to get the charset of a webpage?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 31928942, 
    "answer_posts": [
      {
        "snippets": [
          "s.cookies.update(cookie)\n", 
          "session.get(url, cookies=cookie)\n"
        ], 
        "score": 2, 
        "id": 31928969, 
        "rank": 0
      }
    ], 
    "title": "Trying to load cookie into requests session from dictionary"
  }, 
  {
    "accepted_answer_post_id": 9886658, 
    "id": 9886589, 
    "answer_posts": [
      {
        "snippets": [
          "A = numpy.array((X, Y, Z), dtype=float)\n", 
          ">>> import numpy\n\n>>> x = [0, 0, 0, 0]\n>>> y = [3, 4, 4, 3]\n>>> z = [3, 4, 3, 4]\n\n>>> A = numpy.array((x, y, z), dtype=float)\n>>> A\narray([[ 0., 0., 0., 0.],\n       [ 3., 4., 4., 3.],\n       [ 3., 4., 3., 4.]])\n>>> A.shape\n(3L, 4L)\n"
        ], 
        "score": 4, 
        "id": 9886658, 
        "rank": 0
      }
    ], 
    "title": "How to convert 3 lists into 1 3D Numpy array"
  }, 
  {
    "accepted_answer_post_id": 16204942, 
    "id": 11669335, 
    "answer_posts": [
      {
        "snippets": [
          "\"\"\"Functions for getting memory usage of Windows processes.\"\"\"\n\n__all__ = ['get_current_process', 'get_memory_info', 'get_memory_usage']\n\nimport ctypes\nfrom ctypes import wintypes\n\nGetCurrentProcess = ctypes.windll.kernel32.GetCurrentProcess\nGetCurrentProcess.argtypes = []\nGetCurrentProcess.restype = wintypes.HANDLE\n\nSIZE_T = ctypes.c_size_t\n\nclass PROCESS_MEMORY_COUNTERS_EX(ctypes.Structure):\n    _fields_ = [\n        ('cb', wintypes.DWORD),\n        ('PageFaultCount', wintypes.DWORD),\n        ('PeakWorkingSetSize', SIZE_T),\n        ('WorkingSetSize', SIZE_T),\n        ('QuotaPeakPagedPoolUsage', SIZE_T),\n        ('QuotaPagedPoolUsage', SIZE_T),\n        ('QuotaPeakNonPagedPoolUsage', SIZE_T),\n        ('QuotaNonPagedPoolUsage', SIZE_T),\n        ('PagefileUsage', SIZE_T),\n        ('PeakPagefileUsage', SIZE_T),\n        ('PrivateUsage', SIZE_T),\n    ]\n\nGetProcessMemoryInfo = ctypes.windll.psapi.GetProcessMemoryInfo\nGetProcessMemoryInfo.argtypes = [\n    wintypes.HANDLE,\n    ctypes.POINTER(PROCESS_MEMORY_COUNTERS_EX),\n    wintypes.DWORD,\n]\nGetProcessMemoryInfo.restype = wintypes.BOOL\n\ndef get_current_process():\n    \"\"\"Return handle to current process.\"\"\"\n    return GetCurrentProcess()\n\ndef get_memory_info(process=None):\n    \"\"\"Return Win32 process memory counters structure as a dict.\"\"\"\n    if process is None:\n        process = get_current_process()\n    counters = PROCESS_MEMORY_COUNTERS_EX()\n    ret = GetProcessMemoryInfo(process, ctypes.byref(counters),\n                               ctypes.sizeof(counters))\n    if not ret:\n        raise ctypes.WinError()\n    info = dict((name, getattr(counters, name))\n                for name, _ in counters._fields_)\n    return info\n\ndef get_memory_usage(process=None):\n    \"\"\"Return this process's memory usage in bytes.\"\"\"\n    info = get_memory_info(process=process)\n    return info['PrivateUsage']\n\nif __name__ == '__main__':\n    import pprint\n    pprint.pprint(get_memory_info())\n"
        ], 
        "score": 1, 
        "id": 16204942, 
        "rank": 0
      }
    ], 
    "title": "How to get PrivateUsage memory value from python on win7x64"
  }, 
  {
    "accepted_answer_post_id": 8712838, 
    "id": 8711794, 
    "answer_posts": [
      {
        "snippets": [
          "from itertools import groupby\ndef group(items, key, subs_name):\n    return [{\n        key: g,\n        subs_name: [dict((k, v) for k, v in s.iteritems() if k != key)\n            for s in sub]\n    } for g, sub in groupby(sorted(items, key=lambda item: item[key]),\n        lambda item: item[key])]\n", 
          "[{'foo': g['foo'], 'bars': group(g['bars'], \"bar\", \"bazs\")} for g in group(x,\n     \"foo\", \"bars\")]\n"
        ], 
        "score": 0, 
        "id": 8712653, 
        "rank": 0
      }
    ], 
    "title": "Generic way to create nested dictionary from flat list in python"
  }, 
  {
    "accepted_answer_post_id": 6104313, 
    "id": 6104289, 
    "answer_posts": [
      {
        "snippets": [
          "p.stdin.write('a\\n')\np.stdin.write('b\\n')\n"
        ], 
        "score": 6, 
        "id": 6104313, 
        "rank": 0
      }
    ], 
    "title": "How can I communicate between two python scripts?"
  }, 
  {
    "accepted_answer_post_id": 27129000, 
    "id": 27128851, 
    "answer_posts": [
      {
        "snippets": [
          "os.system('cowsay {}'.format(word))\n", 
          "os.system('cowsay ' + word)\n"
        ], 
        "score": 3, 
        "id": 27128866, 
        "rank": 0
      }
    ], 
    "title": "How to use python variable in os.system?"
  }, 
  {
    "accepted_answer_post_id": 13447291, 
    "id": 13447226, 
    "answer_posts": [
      {
        "snippets": [
          "collections.Counter(itertools.chain(*a.keys()))\n", 
          "collections.Counter(itertools.chain.from_iterable(a.keys()))\n"
        ], 
        "score": 9, 
        "id": 13447279, 
        "rank": 0
      }
    ], 
    "title": "Count how many times a part of a key appears in a dictionary python"
  }, 
  {
    "accepted_answer_post_id": 32379591, 
    "id": 32379264, 
    "answer_posts": [
      {
        "snippets": [
          "import os \ncwd = os.path.dirname(os.path.abspath(__file__)) \ntext_file = open(os.path.join(cwd, \"folderName\", \"textFile.txt\"), \"w\")\n"
        ], 
        "score": 0, 
        "id": 32379591, 
        "rank": 0
      }
    ], 
    "title": "Creating a text file using a python script that runs in background on Raspberry Pi"
  }, 
  {
    "accepted_answer_post_id": 31856595, 
    "id": 31855632, 
    "answer_posts": [
      {
        "snippets": [
          "class Product(scrapy.Item):\n    name = scrapy.Field()\n\n\ni = Product(name='foo)\nprint dict(i)\n", 
          "vars(p)\np.__dict__\n", 
          "vars(p)['_values']\np.__dict__['_values']\n"
        ], 
        "score": 2, 
        "id": 31856595, 
        "rank": 0
      }
    ], 
    "title": "How to get a dict from scrapy item?"
  }, 
  {
    "accepted_answer_post_id": 10900355, 
    "id": 10900207, 
    "answer_posts": [
      {
        "snippets": [
          "from collections import defaultdict\nsums = defaultdict(lambda: 0)\n", 
          "sums['a'] += 1.\n"
        ], 
        "score": 1, 
        "id": 25930084, 
        "rank": 0
      }
    ], 
    "title": "any way to tackle float Counter values in python"
  }, 
  {
    "accepted_answer_post_id": 24262811, 
    "id": 24262589, 
    "answer_posts": [
      {
        "snippets": [
          "#coding=utf-8\n\nfrom cx_Freeze import setup, Executable\n\nincludes = [\"atexit\"] \n\nbuildOptions = dict(\n    create_shared_zip=False,\n    append_script_to_exe=True,\n    includes=includes\n)\n\nexecutables = [\n    Executable(\n        script='main.py',\n        targetName='projectname.exe',\n        base=\"Win32GUI\" # THIS ONE IS IMPORTANT FOR GUI APPLICATION\n    )\n]\n\nsetup(\n    name=\"ProjectName\",\n    version=\"1.0\",\n    description=\"\",\n    options=dict(build_exe=buildOptions),\n    executables=executables\n)\n"
        ], 
        "score": 4, 
        "id": 24262811, 
        "rank": 0
      }
    ], 
    "title": "Converting python files and PyQt into a windows executable?"
  }, 
  {
    "accepted_answer_post_id": 27471158, 
    "id": 27471109, 
    "answer_posts": [
      {
        "snippets": [
          "import sys\n\nwhile True:\n    new_item = input(\"> \")\n    if new_item == \"Yes\" or new_item == \"yes\":\n        break\n    elif new_item == \"no\":\n        sys.exit()\n"
        ], 
        "score": 0, 
        "id": 27471205, 
        "rank": 0
      }
    ], 
    "title": "how to kill a program in python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 8098779, 
    "answer_posts": [
      {
        "snippets": [
          "x = [[3,1,0],[1,2,3],[3,2,0],[3,1,1]]\nx.sort(reverse = True)\nprint(x)\n"
        ], 
        "score": 8, 
        "id": 8098808, 
        "rank": 0
      }
    ], 
    "title": "Sort list of lists by multiple values in Python"
  }, 
  {
    "accepted_answer_post_id": 20177346, 
    "id": 20177086, 
    "answer_posts": [
      {
        "snippets": [
          "'{\"shorts\": [\"cat\", \"dog\", \"fox\"], \"longs\": \"supercalifragilisticexpialidocious\", \"mosts\": [\"dog\", \"fox\"], \"count\": 13, \"avglen\": \"5.6923076923076925\", \"cat\": 3, \"dog\": 4, \"fox\": 4, \"frogger\": 1, \"supercalifragilisticexpialidocious\": 1}'\n", 
          "import json\nf = open('my_file.txt','r')\nmy_dictionary = json.loads(f.read())\nf.close()\n\nprint my_dictionary\n", 
          "{u'count': 13, u'shorts': [u'cat', u'dog', u'fox'], u'longs': u'supercalifragilisticexpialidocious', u'mosts': [u'dog', u'fox'], u'supercalifragilisticexpialidocious': 1, u'fox': 4, u'dog': 4, u'cat': 3, u'avglen': u'5.6923076923076925', u'frogger': 1}\n"
        ], 
        "score": 0, 
        "id": 20177236, 
        "rank": 0
      }
    ], 
    "title": "How to delete unwanted quotation marks in dictionary"
  }, 
  {
    "accepted_answer_post_id": 2372219, 
    "id": 2371779, 
    "answer_posts": [
      {
        "snippets": [
          "    row = ['0x14', '0xb6', '0xa1', '0x0', '0xa1', '0x0']\n    as_hex = ''.join(byte[2:].zfill(2) for byte in row)\n  # as_hex = '14b6a100a100'\n    bytes = buffer(as_hex.decode('hex'))\n\n    cur.execute(\"INSERT INTO mylog (binaryfield) VALUES (%(bytes)s)\", \n                {'bytes': bytes})\n", 
          "    cur.execute(\"SELECT binaryfield FROM mylog\")\n    res = cur.fetchone()\n    my_data = str(res[4:]).encode('hex')\n"
        ], 
        "score": 2, 
        "id": 2372219, 
        "rank": 0
      }
    ], 
    "title": "Importing bytea field into PostgreSQL database via psycopg2"
  }, 
  {
    "accepted_answer_post_id": 2353067, 
    "id": 2352870, 
    "answer_posts": [
      {
        "snippets": [
          "from subprocess import Popen, PIPE\nproc = Popen('ls', shell=True, stdout=PIPE)\nproc.wait()\nproc.communicate()\n"
        ], 
        "score": 3, 
        "id": 2353067, 
        "rank": 0
      }
    ], 
    "title": "Running a python script from webpy"
  }, 
  {
    "accepted_answer_post_id": 31846379, 
    "id": 31841071, 
    "answer_posts": [
      {
        "snippets": [
          "inkscape -D -A myoutputfile.pdf  myinputfile.whatever\n", 
          "subprocess.call(['inkscape', '-D', '-A', outfn, inpfn])\n", 
          "import sys\nimport os\n# Do all files except the program name\nfor inpfn in sys.argv[1:]:\n    # Name result files 'resized_<oldname>.pdf'\n    # and put them in current directory\n    shortname = os.path.basename(inpfname).rsplit('.',1)[0]\n    outfn = 'resized_%s.pdf' % shortname\n    subprocess.call(['inkscape', '-D', '-A', outfn, inpfn])\n"
        ], 
        "score": 1, 
        "id": 31846379, 
        "rank": 0
      }
    ], 
    "title": "Inkscape extension in Python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 20353033, 
    "answer_posts": [
      {
        "snippets": [
          "def getItemLevel(item):\n  return item.getElementsByTagName(\"title\")[0].data\n\nnewlist = sorted(itemlist, key=getItemLevel)\n"
        ], 
        "score": 0, 
        "id": 20353612, 
        "rank": 0
      }
    ], 
    "title": "how to sort XML data in given order in Python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 16064071, 
    "answer_posts": [
      {
        "snippets": [
          ">>> '${0:.2f}'.format(15.5)\n'$15.50'\n", 
          ">>>'$%.2f' % 15.5\n'$15.50'\n", 
          "print(\"\\nSo, your total bill including a 20% tip would be: ${0:.2f}\".format(high_total))\n"
        ], 
        "score": 2, 
        "id": 16064182, 
        "rank": 0
      }
    ], 
    "title": "How to set two decimal places in output"
  }, 
  {
    "accepted_answer_post_id": 8384685, 
    "id": 8376335, 
    "answer_posts": [
      {
        "snippets": [
          "import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import rc\n\n# activate latex text rendering\nrc('text', usetex=True)\n\nx = np.arange(10)\ny = np.random.random(10)\nz = np.random.random(10)\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nax.plot(x, y, label = r\"This is \\textbf{line 1}\")\nax.plot(x, z, label = r\"This is \\textit{line 2}\")\nax.legend()\nplt.show()\n"
        ], 
        "score": 15, 
        "id": 8384685, 
        "rank": 0
      }
    ], 
    "title": "Styling part of label in legend in matplotlib"
  }, 
  {
    "accepted_answer_post_id": 11399232, 
    "id": 11399033, 
    "answer_posts": [
      {
        "snippets": [
          "from sqlalchemy.ext.declarative import declarative_base, declared_attr\nfrom sqlalchemy import create_engine, Integer, Column, \\\n                    String, ForeignKey, Table\nfrom sqlalchemy.orm import Session, relationship\n\nclass Base(object):\n    \"\"\"Base class which provides automated table name\n    and surrogate primary key column.\n\n    \"\"\"\n    @declared_attr\n    def __tablename__(cls):\n        return cls.__name__.lower()\n    id = Column(Integer, primary_key=True)\nBase = declarative_base(cls=Base)\n\nclass Target(Base):\n    pass\n\nclass RefTargetMixin(object):\n    @declared_attr\n    def targets(cls):\n        target_association = Table(\n            \"%s_targets\" % cls.__tablename__,\n            cls.metadata,\n            Column(\"target_id\", ForeignKey(\"target.id\"),\n                                primary_key=True),\n            Column(\"%s_id\" % cls.__tablename__,\n                                ForeignKey(\"%s.id\" % cls.__tablename__),\n                                primary_key=True),\n        )\n        return relationship(Target, secondary=target_association)\n\nclass Customer(RefTargetMixin, Base):\n    name = Column(String)\n\nclass Supplier(RefTargetMixin, Base):\n    company_name = Column(String)\n\nengine = create_engine('sqlite://', echo=True)\nBase.metadata.create_all(engine)\n\nsession = Session(engine)\n\nsession.add_all([\n    Customer(\n        name='customer 1',\n        targets=[\n            Target(),\n            Target()\n        ]\n    ),\n    Supplier(\n        company_name=\"Ace Hammers\",\n        targets=[\n            Target(),\n        ]\n    ),\n])\n\nsession.commit()\n\nfor customer in session.query(Customer):\n    for target in customer.targets:\n        print target\n"
        ], 
        "score": 4, 
        "id": 11437630, 
        "rank": 0
      }
    ], 
    "title": "SQLAlchemy inheritance with relationship is None in instantiated object"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 26953132, 
    "answer_posts": [
      {
        "snippets": [
          "import calendar\nprint (calendar.isleap(1900))\n"
        ], 
        "score": 1, 
        "id": 26953331, 
        "rank": 0
      }
    ], 
    "title": "how to calculate the number of days in leap year"
  }, 
  {
    "accepted_answer_post_id": 14813733, 
    "id": 14813289, 
    "answer_posts": [
      {
        "snippets": [
          "import pandas as pd\npd.DataFrame(preprocessing.scale(data), index = data.index, columns = data.columns) \n"
        ], 
        "score": 12, 
        "id": 14814282, 
        "rank": 0
      }
    ], 
    "title": "Keep pandas structure with numpy/scikit functions"
  }, 
  {
    "accepted_answer_post_id": 28009562, 
    "id": 27895113, 
    "answer_posts": [
      {
        "snippets": [
          "#Method 1\nset_ser = serial.Serial(port=\"COM1\", baudrate=9600, parity = serial.PARITY_NONE, stopbits=serial.STOPBITS_ONE, bytesize = serial.EIGHTBITS, timeout=1)\n", 
          "#Method 2\nset_ser = serial.Serial()\nset_ser.port=\"COM1\"\nset_ser.baudrate=9600\nset_ser.parity = serial.PARITY_NONE\nset_ser.stopbits=serial.STOPBITS_ONE\nset_ser.bytesize = serial.EIGHTBITS\nset_ser.timeout=1\n", 
          "set_ser.write(temp1.encode('utf-8'))\n", 
          "def mSend():\n  global set_ser, a\n  set_ser = serial.Serial()\n  set_ser.port=\"COM1\"\n  set_ser.baudrate=9600\n  set_ser.parity = serial.PARITY_NONE\n  set_ser.stopbits=serial.STOPBITS_ONE\n  set_ser.bytesize = serial.EIGHTBITS\n  set_ser.timeout=1\n  print ('Open: ' + set_ser.portstr)\n  a = 0\n  while a==0:\n    temp = input('write open\\r\\r')\n    if (temp == \"open\"):\n      set_ser.close()\n      set_ser.open()\n      while set_ser.isOpen():\n        temp1 = input('Type what you want to send, hit enter:\\r\\n')\n        set_ser.write(temp1.encode('utf-8'))\n        if (temp1 == \"close\"):\n          set_ser.close()\n          print ('\\n\\nClosed')\n          a = 1\n    elif (temp == \"close\"):\n      set_ser.close()\n      a = 1\n    else:\n      print ('unless you write open or close you can not move')\n"
        ], 
        "score": 4, 
        "id": 28009562, 
        "rank": 0
      }
    ], 
    "title": "How to Fix TypeError: an integer is required in python 3.4, pyserial 2.7 virtual serial port"
  }, 
  {
    "accepted_answer_post_id": 730235, 
    "id": 730207, 
    "answer_posts": [
      {
        "snippets": [
          "class Foo(models.Model):\n    foo = models.ForeignKey(Bar, to_field='bar')\n"
        ], 
        "score": 47, 
        "id": 2000016, 
        "rank": 0
      }
    ], 
    "title": "Django Model set foreign key to a field of another Model"
  }, 
  {
    "accepted_answer_post_id": 28309913, 
    "id": 28309828, 
    "answer_posts": [
      {
        "snippets": [
          ">>> table.index.get_loc(\"row3\")\n2\n>>> table.iloc[table.index.get_loc(\"row3\")]\ncol1     8\ncol2     9\ncol3    10\ncol4    11\nName: row3, dtype: int64\n>>> table.loc[\"row3\"]\ncol1     8\ncol2     9\ncol3    10\ncol4    11\nName: row3, dtype: int64\n"
        ], 
        "score": 3, 
        "id": 28309913, 
        "rank": 0
      }
    ], 
    "title": "How do I find the position of a value in a pandas.DataFrame?"
  }, 
  {
    "accepted_answer_post_id": 20881474, 
    "id": 18910113, 
    "answer_posts": [
      {
        "snippets": [
          "from win32com.client.gencache import EnsureDispatch\n\nxl = EnsureDispatch (\"Excel.Application\")\nxl.Visible = True\nwb = xl.Workbooks.Open(r'c:\\temp\\test.xlsx')\nsht = wb.Worksheets(1)\nsht.Cells(1,1).Value = \"yeah this works\"\n"
        ], 
        "score": 0, 
        "id": 18913062, 
        "rank": 0
      }
    ], 
    "title": "how to create com objects using python"
  }, 
  {
    "accepted_answer_post_id": 8424955, 
    "id": 8424942, 
    "answer_posts": [
      {
        "snippets": [
          "new_dict = dict()\n", 
          "new_dict = {}\n"
        ], 
        "score": 276, 
        "id": 8424955, 
        "rank": 0
      }
    ], 
    "title": "Creating a new dict in Python"
  }, 
  {
    "accepted_answer_post_id": 24138279, 
    "id": 24138226, 
    "answer_posts": [
      {
        "snippets": [
          "words = len(line.split())\n", 
          ">>> 'it may work'.split()\n['it', 'may', 'work']\n>>> len('it may work'.split())\n3\n"
        ], 
        "score": 4, 
        "id": 24138260, 
        "rank": 0
      }
    ], 
    "title": "How to count and print the number of words in each line in a file?"
  }, 
  {
    "accepted_answer_post_id": 29744408, 
    "id": 29742526, 
    "answer_posts": [
      {
        "snippets": [
          "values.append(unicode(sheet.cell(row,col).value))\n", 
          "if \" \" in sheet.cell(row,col):\n    values.append(str(sheet.cell(row,col).value.split(\" \")))\nelse:\n    values.append(str(sheet.cell(row,col)))\n", 
          "from collections import Counter\nimport string\nwords = Counter(word.lower().strip(string.punctuation) for word in values)\n"
        ], 
        "score": 1, 
        "id": 29744408, 
        "rank": 0
      }
    ], 
    "title": "Count number of occurences of specific words in Excel sheet using python & xlrd"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 9018109, 
    "answer_posts": [
      {
        "snippets": [
          "import os\nimport subprocess\nwith open('query.txt', 'r') as f:\n    for line in f:\n        line = line.rstrip() # remove trailing whitespace such as '\\n'\n        subprocess.call(['/bin/grep', line, 'my2.txt'])\n"
        ], 
        "score": 5, 
        "id": 9018183, 
        "rank": 0
      }
    ], 
    "title": "Using grep in python"
  }, 
  {
    "accepted_answer_post_id": 18219864, 
    "id": 18219779, 
    "answer_posts": [
      {
        "snippets": [
          "import sqlite3\n\npersons = [\n    (\"Hugo\", \"Boss\"),\n    (\"Calvin\", \"Klein\")\n]\n\ncon = sqlite3.connect(\":memory:\")\n\n# Create the table\ncon.execute(\"create table person(firstname, lastname)\")\n\n# Fill the table\ncon.executemany(\"insert into person(firstname, lastname) values (?,?)\", persons)\n"
        ], 
        "score": 18, 
        "id": 32239587, 
        "rank": 0
      }
    ], 
    "title": "Bulk insert huge data into SQLite using Python"
  }, 
  {
    "accepted_answer_post_id": 28399322, 
    "id": 28375264, 
    "answer_posts": [
      {
        "snippets": [
          "figure = Figure()\ncanvas = FigureCanvasWxAgg(self, wx.ID_ANY, figure)\naxes = figure.add_subplot(111, projection=\"3d\")\nplotSizer = wx.BoxSizer(wx.VERTICAL)\nplotSizer.Add(self, canvas, proportion=1, flag=wx.EXPAND)\nplotPanel = wx.Panel(self, wx.ID_ANY, size=DEFAULT_PLOT_SIZE)\nplotPanel.SetSizer(plotSizer)\n"
        ], 
        "score": 0, 
        "id": 28399322, 
        "rank": 0
      }
    ], 
    "title": "How to use mouse to rotate matplotlib 3D plots in wxPython?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 12615963, 
    "answer_posts": [
      {
        "snippets": [
          "def send(data):\n    try:\n        ser.write(data)\n    except Exception as e:\n        print \"Couldn't send data to serial port: %s\" % str(e)\n    else:\n        try:\n            data = ser.read(1)\n        except Exception as e:\n            print \"Couldn't read data from serial port: %s\" % str(e)\n        else:\n            if data:  # If data = None, timeout occurr\n                n = ser.inWaiting()\n                if n > 0: data += ser.read(n)\n                return data\n"
        ], 
        "score": 1, 
        "id": 15601697, 
        "rank": 0
      }
    ], 
    "title": "communication with modem using pyserial"
  }, 
  {
    "accepted_answer_post_id": 23201536, 
    "id": 23201414, 
    "answer_posts": [
      {
        "snippets": [
          "indices = [i for i, s in enumerate(p) if ('1','2') == (s[1],s[2])]\n", 
          ">>> '2' in ['5', '1', '2', '20']\nTrue\n>>> ('1', '2') in ['5', '1', '2', '20']\nFalse\n>>> ['1', '2'] in ['5', '1', '2', '20']\nFalse\n"
        ], 
        "score": 0, 
        "id": 23201536, 
        "rank": 0
      }
    ], 
    "title": "Return index position in array based on a partial string in Python"
  }, 
  {
    "accepted_answer_post_id": 252100, 
    "id": 250700, 
    "answer_posts": [
      {
        "snippets": [
          "import pexpect\nchild = pexpect.spawn ('sudo mod -p -c noresource -u dtt -Q')\nchild.expect ('First question:')\nchild.sendline ('Y')\nchild.expect ('Second question:')\nchild.sendline ('Yup')\n"
        ], 
        "score": 4, 
        "id": 252100, 
        "rank": 0
      }
    ], 
    "title": "Is it possible to communicate with a sub subprocess with subprocess.Popen?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 32296887, 
    "answer_posts": [
      {
        "snippets": [
          "lst = [9,7,43,2,4,7,8,5,4]\nprint( sorted( [(x,i) for (i,x) in enumerate(lst)], reverse=True )[:3] )\n", 
          "lst = [9,7,43,2,4,7,8,5,4]\nranks = sorted( [(x,i) for (i,x) in enumerate(lst)], reverse=True )\nvalues = []\nposns = []\nfor x,i in ranks:\n    if x not in values:\n        values.append( x )\n        posns.append( i )\n        if len(values) == 3:\n            break\nprint zip( values, posns )\n"
        ], 
        "score": 3, 
        "id": 32297039, 
        "rank": 0
      }
    ], 
    "title": "How to find the 1st, 2nd, 3rd highest values in a list in Python"
  }, 
  {
    "accepted_answer_post_id": 29509144, 
    "id": 29509113, 
    "answer_posts": [
      {
        "snippets": [
          "p = []\na = ['s', 'l', 'y']\nfor s in a:\n    p.append(('size',  s))\n\nprint(p)\n", 
          "[('size', 's'), ('size', 'l'), ('size', 'y')]\n"
        ], 
        "score": 1, 
        "id": 29509144, 
        "rank": 0
      }
    ], 
    "title": "Converting an array to hash in python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 2106207, 
    "answer_posts": [
      {
        "snippets": [
          "# look for term anywhere within title\nterm= term.replace('=', '==').replace('%', '=%').replace('_', '=_')\nsql= \"SELECT * FROM things WHERE description LIKE %(like)s ESCAPE '='\"\ncursor.execute(sql, dict(like= '%'+term+'%'))\n"
        ], 
        "score": 22, 
        "id": 2106443, 
        "rank": 0
      }
    ], 
    "title": "Escape SQL \"LIKE\" value for Postgres with psycopg2"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 20868613, 
    "answer_posts": [
      {
        "snippets": [
          "import matplotlib.pyplot as plt\nfig = plt.figure(frameon=False)\nfig.set_size_inches(width,height)\n"
        ], 
        "score": 0, 
        "id": 20874260, 
        "rank": 0
      }
    ], 
    "title": "Change resolution of Matplotlib Figure window when saving plot?"
  }, 
  {
    "accepted_answer_post_id": 1547628, 
    "id": 1547526, 
    "answer_posts": [
      {
        "snippets": [
          "def execute_with_context_manager(man):\n    def decorator(f):\n        target = man.__enter__()\n        exc = True\n        try:\n            try:\n                f(target)\n            except:\n                exc = False\n                if not man.__exit__(*sys.exc_info()):\n                    raise\n        finally:\n            if exc:\n                man.__exit__(None, None, None)\n        return None\n    return decorator\n\n@execute_with_context_manager(open(\"/etc/motd\"))\ndef inside(motd_file):\n    for line in motd_file:\n        print line,\n", 
          "with bar() as foo:\n    do_something_with(foo)\n    do_something_else_with(foo)\n    # etc...\n", 
          "@execute_with_context_manager( bar() )\ndef dummyname( foo ):\n    do_something_with(foo)\n    do_something_else_with(foo)\n    # etc...\n"
        ], 
        "score": 4, 
        "id": 1547559, 
        "rank": 0
      }
    ], 
    "title": "Improvizing a drop-in replacement for the \"with\" statement for Python 2.4"
  }, 
  {
    "accepted_answer_post_id": 31863595, 
    "id": 31862293, 
    "answer_posts": [
      {
        "snippets": [
          "IPYTHON=1 /path/to/bin/pyspark\n", 
          "export IPYTHON=1\n/path/to/bin/pyspark\n", 
          "PYSPARK_DRIVER_PYTHON=ipython /path/to/bin/pyspark\n", 
          "export PYSPARK_DRIVER_PYTHON=ipython\n/path/to/bin/pyspark\n"
        ], 
        "score": 11, 
        "id": 31863595, 
        "rank": 0
      }
    ], 
    "title": "How to load IPython shell with PySpark"
  }, 
  {
    "accepted_answer_post_id": 27046840, 
    "id": 27046828, 
    "answer_posts": [
      {
        "snippets": [
          ">>> ints = [5,3,6,1]\n>>> sorted(ints, reverse=True)\n[6, 5, 3, 1]\n", 
          ">>> x1 = 5\n>>> x2 = 3\n>>> x3 = 6\n>>> x4 = 1\n>>> sorted([x1, x2, x3, x4], reverse=True)\n[6, 5, 3, 1]\n"
        ], 
        "score": 2, 
        "id": 27046840, 
        "rank": 0
      }
    ], 
    "title": "Sorting Variables in Python?"
  }, 
  {
    "accepted_answer_post_id": 2978212, 
    "id": 2977779, 
    "answer_posts": [
      {
        "snippets": [
          "data='''\\\n<root>\n<node1>\n  <node2 a1=\"x1\"> ... </node2>\n  <node2 a1=\"x2\"> ... </node2>\n  <node2 a1=\"x1\"> ... </node2>\n</node1>\n</root>\n'''\ndoc = lxml.etree.XML(data)\ne=doc.find('node1')\nchild = lxml.etree.Element(\"node3\",attrib={'a1':'x3'})\nchild.text='...'\ne.insert(1,child)\nprint(lxml.etree.tostring(doc))\n", 
          "<root>\n    <node1>\n      <node2 a1=\"x1\"> ... </node2>\n      <node3 a1=\"x3\">...</node3><node2 a1=\"x2\"> ... </node2>\n      <node2 a1=\"x1\"> ... </node2>\n    </node1>\n    </root>\n"
        ], 
        "score": 4, 
        "id": 2978212, 
        "rank": 0
      }
    ], 
    "title": "add xml node to xml file with python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 15365507, 
    "answer_posts": [
      {
        "snippets": [
          "finalArray = []\n", 
          "print ''.join(finalArray)\n", 
          "def stringEncrypter(A):\n    length = len(A)\n    finalArray = []\n\n    if length%2 == 0:\n            firstArray=[]*(length/2)\n            secondArray=[]*(length/2)\n    else:\n            firstArray=[]*((length+1)/2)\n            secondArray=[]*((length-1)/2)\n\n    for x in range(0, length-1):\n            if x%2 == 0:\n                    firstArray.append(A[x:x+1])\n                    secondArray.append(A[x+1:x+2])\n    finalArray.extend(firstArray)\n    finalArray.extend(secondArray)\n\n    print ''.join(finalArray)\n"
        ], 
        "score": 2, 
        "id": 15365534, 
        "rank": 0
      }
    ], 
    "title": "How do i make this list into a string in python?"
  }, 
  {
    "accepted_answer_post_id": 10290674, 
    "id": 10290507, 
    "answer_posts": [
      {
        "snippets": [
          "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\"\n\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://www.w3.org/MarkUp/SCHEMA/xhtml11.xsd\"\n  xml:lang=\"en\">\n  <head>            \n    <title>Document Title</title>\n  </head>\n  <body>\n  </body>\n</html>\n", 
          ">>> doc = etree.parse(open('foo.html'))\n>>> doc.xpath('//title')\n[]\n", 
          ">>> doc.xpath('//html:title',\n...   namespaces={'html': 'http://www.w3.org/1999/xhtml'})\n[<Element {http://www.w3.org/1999/xhtml}title at 0x1087910>]\n", 
          ">>> titleIter = etree.iterparse(StringIO(str), \n...   tag='{http://www.w3.org/1999/xhtml}title')\n>>> list(titleIter)\n[(u'end', <Element {http://www.w3.org/1999/xhtml}title at 0x7fddb7c4b8c0>)]\n"
        ], 
        "score": 2, 
        "id": 10290674, 
        "rank": 0
      }
    ], 
    "title": "Grabbing <title> tag with lxml's iterparse"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 35744613, 
    "answer_posts": [
      {
        "snippets": [
          "import xlrd\n\nworkbook = xlrd.open_workbook(\"filelocation.xlsx\")\nsheet = workbook.sheet_by_index(0)\n\nfor rowx in range(sheet.nrows):\n    cols = sheet.row_values(rowx)\n    print(cols)\n"
        ], 
        "score": 4, 
        "id": 35745283, 
        "rank": 0
      }
    ], 
    "title": "Read in .xlsx with csv module in python"
  }, 
  {
    "accepted_answer_post_id": 19560932, 
    "id": 19546507, 
    "answer_posts": [
      {
        "snippets": [
          "In [721]: x.groupby('ID1').apply(lambda df: (df['ID2'].irow(0), df['score'].irow(0)))\nOut[721]:\nID1\n6073165338_1    (6073165338, 100)\ndtype: object\n", 
          "In [720]: x.groupby('ID1').apply(lambda df: pd.Series({'c1':df['ID2'].irow(0), 'c2':df['score'].irow(0)}))\nOut[720]:\n                  c1   c2\nID1\n6073165338_1  6073165338  100\n"
        ], 
        "score": 0, 
        "id": 19551260, 
        "rank": 0
      }
    ], 
    "title": "Outputting a DataFrame instead of Series from a multiple return value groupby-apply operation"
  }, 
  {
    "accepted_answer_post_id": 6015847, 
    "id": 6015721, 
    "answer_posts": [
      {
        "snippets": [
          ">>> path = \"/home/user/puppet/modules/impuls-test/templates\"\n>>> os.path.normpath(os.path.join(path, \"..\"))\n'/home/user/puppet/modules/impuls-test'\n"
        ], 
        "score": 3, 
        "id": 7961099, 
        "rank": 0
      }
    ], 
    "title": "Getting a specific parent folder with Python"
  }, 
  {
    "accepted_answer_post_id": 20552951, 
    "id": 20552507, 
    "answer_posts": [], 
    "title": "how to print dictionary as defined"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 11599226, 
    "answer_posts": [
      {
        "snippets": [
          "''.join(chr(int(bin_text[i:i+8], 2)) for i in xrange(0, len(bin_text), 8))\n", 
          "''.join('{:08b}'.format(ord(c)) for c in 'hello')\n"
        ], 
        "score": 11, 
        "id": 11599702, 
        "rank": 0
      }
    ], 
    "title": "How to convert binary string to ascii string in python?"
  }, 
  {
    "accepted_answer_post_id": 28718812, 
    "id": 28718700, 
    "answer_posts": [
      {
        "snippets": [
          "d = {x: [v for u,v in data if u == x] for x,y in data}\n", 
          "d = {}\nfor x,y in data:\n    d.setdefault(x, []).append(y)\n", 
          "groups = itertools.groupby(sorted(data), key=lambda x: x[0])\nd = {k: [g[1] for g in group] for k, group in groups}\n"
        ], 
        "score": 6, 
        "id": 28718812, 
        "rank": 0
      }
    ], 
    "title": "Python 2.7: Appending to a list value of a dictionary key"
  }, 
  {
    "accepted_answer_post_id": 17601574, 
    "id": 17601435, 
    "answer_posts": [
      {
        "snippets": [
          "wshell = win32com.client.Dispatch(\"WScript.Shell\")\nwshell.SendKeys(\"foo\")\n", 
          "def sendkey(hwnd, keycode):\n    win32api.PostMessage(hwnd, win32con.WM_CHAR, keycode, 0)\n"
        ], 
        "score": 1, 
        "id": 17601574, 
        "rank": 0
      }
    ], 
    "title": "Enter number inside textbox on website"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 34744613, 
    "answer_posts": [
      {
        "snippets": [
          "import datetime\n\nstart = \"09:35:23\"\nend = \"10:23:00\"\nstart_dt = datetime.datetime.strptime(start, '%H:%M:%S')\nend_dt = datetime.datetime.strptime(end, '%H:%M:%S')\ndiff = (end_dt - start_dt)\nprint(diff)\n", 
          "datetime.timedelta(0, 2857)\n"
        ], 
        "score": 0, 
        "id": 34744654, 
        "rank": 0
      }
    ], 
    "title": "subtracting two times in python"
  }, 
  {
    "accepted_answer_post_id": 17049888, 
    "id": 17049794, 
    "answer_posts": [
      {
        "snippets": [
          "data = [['a','2'],['a','1'],['b','3'],['c','2'],['b','1'],['a','1'],['b','1'],['c','2'],['b','3'],['b','1']]\nresult = {}\nfor key, value in data:\n    result.setdefault(key, []).append(value)\n", 
          ">>> result\n{'a': ['2', '1', '1'], 'c': ['2', '2'], 'b': ['3', '1', '1', '3', '1']}\n"
        ], 
        "score": 10, 
        "id": 17049888, 
        "rank": 0
      }
    ], 
    "title": "Python list to dict"
  }, 
  {
    "accepted_answer_post_id": 9915718, 
    "id": 9915507, 
    "answer_posts": [
      {
        "snippets": [
          "str('filepath_here')\n", 
          ">>> import re\n>>> re.escape('filepath_with_bad_characters!//%')\n'filepath\\\\_with\\\\_bad\\\\_characters\\\\!\\\\/\\\\/\\\\%'\n"
        ], 
        "score": 1, 
        "id": 9915718, 
        "rank": 0
      }
    ], 
    "title": "Escape filenames for applescript"
  }, 
  {
    "accepted_answer_post_id": 22842411, 
    "id": 22842289, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import random\n>>> random.sample(range(1, 100), 3)\n[77, 52, 45]\n", 
          ">>> try:\n...   random.sample(range(1, 2), 3)\n... except ValueError:\n...   print('Sample size exceeded population size.')\n... \nSample size exceeded population size\n"
        ], 
        "score": 92, 
        "id": 22842411, 
        "rank": 0
      }
    ], 
    "title": "Generate 'n' unique random numbers within a range"
  }, 
  {
    "accepted_answer_post_id": 9227796, 
    "id": 9227335, 
    "answer_posts": [
      {
        "snippets": [
          "sign_trans = str.maketrans({'$': '', ' ':''})\ndot_trans = str.maketrans({'.': '', ',': ''})\n\ndef convert(num, sign_trans=sign_trans, dot_trans=dot_trans):\n    num = num.translate(sign_trans)\n    num = num[:-3].translate(dot_trans) + num[-3:]\n    return float(num.replace(',', '.'))\n", 
          ">>> for n in nums:\n...     print(convert(n))\n...\n22000.76\n22000.76\n22000.76\n1022000.76\n-1022000.76\n1022000.0\n22000.76\n22000.76\n"
        ], 
        "score": 0, 
        "id": 9227806, 
        "rank": 0
      }
    ], 
    "title": "Parse a string to floats with different separators"
  }, 
  {
    "accepted_answer_post_id": 28005939, 
    "id": 28005700, 
    "answer_posts": [
      {
        "snippets": [
          "def rec_fac(n):\n    if n == 1:\n        return n\n    else:\n        return eval('n*rec_fac(n-1)')\n", 
          "def rec_fac(n):\n    if n == 1:\n        return 1\n    else:\n        return sum([n for i in range(rec_fac(n-1))])\n"
        ], 
        "score": 1, 
        "id": 28005939, 
        "rank": 0
      }
    ], 
    "title": "How can I make a \"Recursive Factorial\" without using multiplication?"
  }, 
  {
    "accepted_answer_post_id": 13039085, 
    "id": 13038963, 
    "answer_posts": [
      {
        "snippets": [
          "x[:3] + (i,) + x[3:]\n", 
          ">>> x = (1, 'Cat', 200, 3.2)\n>>> x[:3] + (0,) + x[3:]\n(1, 'Cat', 200, 0, 3.2)\n"
        ], 
        "score": 2, 
        "id": 13038997, 
        "rank": 0
      }
    ], 
    "title": "Python: Inserting counts in a list of tuples"
  }, 
  {
    "accepted_answer_post_id": 16173851, 
    "id": 16173809, 
    "answer_posts": [
      {
        "snippets": [
          "print(\"Randy's phone # is {0[Randy][phone]}\".format(people))\n", 
          "print(\"Randy's phone # is {Randy[phone]}\".format(**people))\n", 
          "print(\"Randy's phone # is {}\".format(people['Randy']['phone']))\n", 
          "print(\"Randy's phone # is %s\" % people['Randy']['phone'])\n"
        ], 
        "score": 23, 
        "id": 16173851, 
        "rank": 0
      }
    ], 
    "title": "Accessing nested dictionary items in Python"
  }, 
  {
    "accepted_answer_post_id": 11462335, 
    "id": 11462314, 
    "answer_posts": [], 
    "title": "Python Alternatives to Global Variables"
  }, 
  {
    "accepted_answer_post_id": 17365399, 
    "id": 17365289, 
    "answer_posts": [
      {
        "snippets": [
          "from cStringIO import StringIO\nfrom flask import make_response\n\nfrom somewhere import generate_wav_file  # TODO your code here\n\n@app.route('/path')\ndef view_method():\n\n    buf = StringIO()\n\n    # generate_wav_file should take a file as parameter and write a wav in it\n    generate_wav_file(buf) \n\n    response = make_response(buf.getvalue())\n    buf.close()\n    response.headers['Content-Type'] = 'audio/wav'\n    response.headers['Content-Disposition'] = 'attachment; filename=sound.wav'\n    return response\n", 
          "from flask import send_file\n\n@app.route('/path')\ndef view_method():\n     path_to_file = \"/test.wav\"\n\n     return send_file(\n         path_to_file, \n         mimetype=\"audio/wav\", \n         as_attachment=True, \n         attachment_filename=\"test.wav\")\n"
        ], 
        "score": 2, 
        "id": 17365399, 
        "rank": 0
      }
    ], 
    "title": "How to send audio wav file generated at the server to client browser?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 17075071, 
    "answer_posts": [
      {
        "snippets": [
          "{ k:v for k,v in vars(myObject).items() if not k.startswith('_') }\n", 
          "def list_public_attributes(input_var):\n    return [k for k, v in vars(input_var).items() if\n            not (k.startswith('_') or callable(v))]\n"
        ], 
        "score": 0, 
        "id": 31640664, 
        "rank": 0
      }
    ], 
    "title": "Is there a Python method to access all non-private and non-builtin attributes of a class?"
  }, 
  {
    "accepted_answer_post_id": 5003468, 
    "id": 5003226, 
    "answer_posts": [
      {
        "snippets": [
          "import MODULE, os\npath = os.path.dirname(MODULE.__file__)\n"
        ], 
        "score": 11, 
        "id": 5003468, 
        "rank": 0
      }
    ], 
    "title": "How to get path of a python module ( not sys.executable )"
  }, 
  {
    "accepted_answer_post_id": 13355891, 
    "id": 13355828, 
    "answer_posts": [
      {
        "snippets": [
          "def grocerylist(foods):  \n  with open(foods) as f:\n    line = f.readline()\n    items = []\n    while line:\n      items.append(line.rstrip())\n      line = f.readline()\n    newlist = [[]]\n    for item in a:\n      if not x: newlist.append([])\n      else: newlist[-1].append(x)\n    return newlist\n", 
          "[['milk', 'cheese'], ['bread', 'hotdog buns'], ['chicken', 'tuna', 'burgers']]\n"
        ], 
        "score": 2, 
        "id": 13356329, 
        "rank": 0
      }
    ], 
    "title": "Python list building"
  }, 
  {
    "accepted_answer_post_id": 797167, 
    "id": 797132, 
    "answer_posts": [
      {
        "snippets": [
          ">>> t = 'a' 'bcd'\n>>> t\n'abcd'\n", 
          ">>> print '%5s' % ':%2s' % ':'\n", 
          ">>> print ('%5s' % ':%2s') % ':'\n", 
          ">>> print ' :%2s' % ':'\n : :\n"
        ], 
        "score": 9, 
        "id": 797167, 
        "rank": 0
      }
    ], 
    "title": "string formatting"
  }, 
  {
    "accepted_answer_post_id": 14351623, 
    "id": 14349289, 
    "answer_posts": [
      {
        "snippets": [
          "ax.format_coord = lambda x, y: ''\n", 
          "scale_val = 1\nax.format_coord = lambda x, y: 'r=%d,c=%d' % (scale_val * int(x + .5), \n                                             scale_val * int(y + .5))\n", 
          "def imshow(img, scale_val=1, ax=None, *args, **kwargs):\n    if ax is None:\n         ax = plt.gca()\n    im = ax.imshow(img, *args, **kwargs)\n    ax.format_coord = lambda x, y: 'r=%d,c=%d' % (scale_val * int(x + .5), \n                                             scale_val * int(y + .5))\n    ax.figure.canvas.draw()\n    return im\n"
        ], 
        "score": 8, 
        "id": 14351623, 
        "rank": 0
      }
    ], 
    "title": "In a matplotlib figure window (with imshow), how can I remove, hide, or redefine the displayed position of the mouse?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 16923589, 
    "answer_posts": [
      {
        "snippets": [
          "import re\nPARCEL_ID = re.sub(r'[-/ ]', '', PARCEL_ID)\n"
        ], 
        "score": 0, 
        "id": 16923993, 
        "rank": 0
      }
    ], 
    "title": "find and replace characters in a particular column in a table using python"
  }, 
  {
    "accepted_answer_post_id": 11502621, 
    "id": 11502113, 
    "answer_posts": [
      {
        "snippets": [
          "file_pb2._TEST.values_by_number[1].name\n", 
          "file_pb2._TEST.values_by_name['ONE'].number\n", 
          "file_pb2.Test.Name(1)\nfile_pb2.Test.Value('One')\n"
        ], 
        "score": 17, 
        "id": 11502621, 
        "rank": 0
      }
    ], 
    "title": "How to get top-level protobuf enum value name by number in python?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 7542794, 
    "answer_posts": [
      {
        "snippets": [
          "def pairUp(iterable):\n    \"\"\"\n        [1,2,3,4,5,6] -> [(1,2),(3,4),(5,6)]\n    \"\"\"\n    sequence = iter(iterable)\n    for a in sequence:\n        try:\n            b = next(sequence)\n        except StopIteration:\n            raise Exception('tried to pair-up %s, but has odd number of items' % str(iterable))\n        yield (a,b)\n", 
          ">>> list(pairUp(range(0)))    \n[]\n\n>>> list(pairUp(range(1)))\nException: tried to pair-up [0], but has odd number of items\n\n>>> list(pairUp(range(2)))\n[(0, 1)]\n\n>>> list(pairUp(range(3)))\nException: tried to pair-up [0, 1, 2], but has odd number of items\n\n>>> list(pairUp(range(4)))\n[(0, 1), (2, 3)]\n\n>>> list(pairUp(range(5)))\nException: tried to pair-up [0, 1, 2, 3, 4], but has odd number of items\n", 
          "zip(sequence[::2], sequence[1::2])\n# does not check for odd number of elements\n"
        ], 
        "score": 0, 
        "id": 7548256, 
        "rank": 0
      }
    ], 
    "title": "Grouping lists within lists in Python 3"
  }, 
  {
    "accepted_answer_post_id": 33645221, 
    "id": 33643763, 
    "answer_posts": [
      {
        "snippets": [
          "import pandas as pd\nimport numpy as np\nimport random\n\ndf1=pd.DataFrame.from_items([('A', [1, 2, 3]), ('B', [4, 5, 6])])\n", 
          "df1['Birth'] = df1.apply(lambda x: random.randrange(1905,1995, len(df1)),axis=1)\n", 
          "   A  B  Birth\n0  1  4   1980\n1  2  5   1947\n2  3  6   1965\n", 
          "a_variable = random.randrange(1905,1995, len(df1))\n#a_variable = 1974\ndf1['Birth'] = a_variable\n"
        ], 
        "score": 1, 
        "id": 33643848, 
        "rank": 0
      }
    ], 
    "title": "Using Python how do I generate a random number within a range for each row in Pandas dataframe?"
  }, 
  {
    "accepted_answer_post_id": 5262397, 
    "id": 5262264, 
    "answer_posts": [
      {
        "snippets": [
          "class C:\n    def func1(self):\n     self.var1 = \"something\"\n\n    def func2(self):\n     print self.var1\n\nfoo = C()\nfoo.func1()\nfoo.func2()\n"
        ], 
        "score": 5, 
        "id": 5262397, 
        "rank": 0
      }
    ], 
    "title": "Learning Python: print variable inside a function from another function"
  }, 
  {
    "accepted_answer_post_id": 35959345, 
    "id": 35953794, 
    "answer_posts": [
      {
        "snippets": [
          "plt.fill(Router*rs[:,0], Router*rs[:,1],'blue')\nplt.fill(Rinner*rs[:,0], Rinner*rs[:,1],'white')\nplt.plot([0], [0], 'oy', ms=100)\n", 
          "Rsaturn = 0.018\nrs0 = np.array([[np.cos(phi), np.sin(phi), 0.] for phi in np.linspace(0., 2*np.pi, 100)])\nplt.fill(Rsaturn*rs0[:,0], Rsaturn*rs0[:,1],'yellow')\nplt.axis('equal')\n", 
          "import numpy as np\nimport matplotlib.pyplot as plt\nphi = 0.5\ntheta = 1.2\nRphi = np.array([[np.cos(phi), -np.sin(phi), 0.], [np.sin(phi), np.cos(phi), 0.], [0.,0.,1.]])\nRtheta = np.array([[1.,0.,0.], [0., np.cos(theta), -np.sin(theta)], [0., np.sin(theta), np.cos(theta)]])\nR = np.dot(Rphi, Rtheta) \nRouter = 0.06\nRinner = 0.04\nRsaturn = 0.018\n\n#rs0 = np.array([[np.cos(phi), np.sin(phi), 0.] for phi in np.linspace(0., 2*np.pi, 100)])\nphivec1 = np.linspace(0., np.pi, 50)\nphivec2 = np.linspace(np.pi,2*np.pi, 50)\nrs1 = np.array([np.cos(phivec1), np.sin(phivec1), np.zeros_like(phivec1)]).T  # first half arc\nrs2 = np.array([np.cos(phivec2), np.sin(phivec2), np.zeros_like(phivec2)]).T  # second half arc\nrs0 = np.concatenate((rs1,rs2),axis=0)  # full arc for Saturn\nrs1 = np.dot(rs1, R.T)  # rotate\nrs2 = np.dot(rs2, R.T)  # rotate\n\n# draw foreground\nsemiring1 = np.concatenate((Router*rs1[:,:2],Rinner*rs1[::-1,:2]),axis=0)\nplt.fill(semiring1[:,0], semiring1[:,1],'blue',edgecolor='none')\n# draw Saturn\nplt.fill(Rsaturn*rs0[:,0], Rsaturn*rs0[:,1],'yellow')\n# draw foreground\nsemiring2 = np.concatenate((Router*rs2[:,:2],Rinner*rs2[::-1,:2]),axis=0)\nplt.fill(semiring2[:,0], semiring2[:,1],'blue',edgecolor='none')\nplt.axis('equal')\n"
        ], 
        "score": 4, 
        "id": 35959345, 
        "rank": 0
      }
    ], 
    "title": "How to fill between two rings with matplotlib"
  }, 
  {
    "accepted_answer_post_id": 36738743, 
    "id": 36721132, 
    "answer_posts": [
      {
        "snippets": [
          "def first_message():\n    payload = json.dumps({\n        \"state\":{\n            \"reported\":{\n                \"this_thing_is_alive\":True,\n                \"color\":{\n                    \"r\":255,\n                    \"g\":1,\n                    \"b\":255\n                }\n            }\n        }\n    })\n\n    mqttc.publish(\"$aws/things/thirdthing/shadow/update\", payload)\n"
        ], 
        "score": 1, 
        "id": 36738743, 
        "rank": 0
      }
    ], 
    "title": "How to troubleshoot mqtt and AWS iot"
  }, 
  {
    "accepted_answer_post_id": 16786600, 
    "id": 373335, 
    "answer_posts": [
      {
        "snippets": [
          "import schedule\nimport time\n\ndef job():\n    print(\"I'm working...\")\n\nschedule.every(10).minutes.do(job)\nschedule.every().hour.do(job)\nschedule.every().day.at(\"10:30\").do(job)\n\nwhile 1:\n    schedule.run_pending()\n    time.sleep(1)\n"
        ], 
        "score": 189, 
        "id": 16786600, 
        "rank": 0
      }
    ], 
    "title": "How do I get a Cron like scheduler in Python?"
  }, 
  {
    "accepted_answer_post_id": 15147009, 
    "id": 7853628, 
    "answer_posts": [
      {
        "snippets": [
          "import cv2\nfrom cv2 import cv\n\nmethod = cv.CV_TM_SQDIFF_NORMED\n\n# Read the images from the file\nsmall_image = cv2.imread('small_image.png')\nlarge_image = cv2.imread('large_image.jpeg')\n\nresult = cv2.matchTemplate(small_image, large_image, method)\n\n# We want the minimum squared difference\nmn,_,mnLoc,_ = cv2.minMaxLoc(result)\n\n# Draw the rectangle:\n# Extract the coordinates of our best match\nMPx,MPy = mnLoc\n\n# Step 2: Get the size of the template. This is the same size as the match.\ntrows,tcols = small_image.shape[:2]\n\n# Step 3: Draw the rectangle on large_image\ncv2.rectangle(large_image, (MPx,MPy),(MPx+tcols,MPy+trows),(0,0,255),2)\n\n# Display the original image with the rectangle around the match.\ncv2.imshow('output',large_image)\n\n# The image is only displayed if we call this\ncv2.waitKey(0)\n"
        ], 
        "score": 11, 
        "id": 15147009, 
        "rank": 0
      }
    ], 
    "title": "How do I find an image contained within an image?"
  }, 
  {
    "accepted_answer_post_id": 21441406, 
    "id": 21439226, 
    "answer_posts": [
      {
        "snippets": [
          "import csv\nwith open(\"output.csv\",\"w\",newline='') as f:\n    output = csv.writer(f) \n    for line in csv.reader(open(\"input.csv\")):\n        for item in line[2:]:\n\n            #to skip empty cells\n            if not item.strip():\n                continue\n\n            item = item.split(\":\")\n            print([line[1]+item[0],item[1].rstrip(\"%\")])\n            output.writerow([line[1]+item[0],item[1].rstrip(\"%\")])\n", 
          "with open(\"output.csv\",\"wb\") as f:\n"
        ], 
        "score": 1, 
        "id": 21441406, 
        "rank": 0
      }
    ], 
    "title": "Data parsing/importing, formatting and exporting using python-2.7"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 18620008, 
    "answer_posts": [
      {
        "snippets": [
          "# image is the pointer that points to the pointer that points to the image being currently used\nimage1 = pygame.image.load('left.png')\nimage2 = pygame.image.load('right.png')\nimage = image1\n", 
          "screen.blit(image, position)\n"
        ], 
        "score": 1, 
        "id": 18620141, 
        "rank": 0
      }
    ], 
    "title": "How to change a sprite image in python based on mouse direction"
  }, 
  {
    "accepted_answer_post_id": 14423816, 
    "id": 14423794, 
    "answer_posts": [
      {
        "snippets": [
          "def scanl(data):\n    '''\n    returns list of successive reduced values from the list (see haskell foldl)\n    '''\n    return [0] + [sum(data[:(k+1)]) for (k,v) in enumerate(data)]\n\n\n>>> scanl(range(1,11))\n", 
          "[0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55]\n"
        ], 
        "score": 1, 
        "id": 24503765, 
        "rank": 0
      }
    ], 
    "title": "Equivalent of Haskell scanl in python"
  }, 
  {
    "accepted_answer_post_id": 7873893, 
    "id": 7873828, 
    "answer_posts": [
      {
        "snippets": [
          "import time\n\n\nmydate = datetime.date(2010, 1, 12) + datetime.timedelta(days = 3)\ntime.mktime(mydate.timetuple())\n", 
          "a = datetime.datetime(2010, 1, 12) + datetime.timedelta(days = 3)\nb = datetime.datetime.now()\n\na < b \na > b \na == b \n"
        ], 
        "score": 8, 
        "id": 7873893, 
        "rank": 0
      }
    ], 
    "title": "How to convert date to timestamp using Python?"
  }, 
  {
    "accepted_answer_post_id": 19202567, 
    "id": 19202314, 
    "answer_posts": [
      {
        "snippets": [
          "import paramiko\n\ndef put_file(machinename, username, dirname, filename, data):\n    ssh = paramiko.SSHClient()\n    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n    ssh.connect(machinename, username=username)\n    sftp = ssh.open_sftp()\n    try:\n        sftp.mkdir(dirname)\n    except IOError:\n        pass\n    f = sftp.open(dirname + '/' + filename, 'w')\n    f.write(data)\n    f.close()\n    ssh.close()\n\n\ndata = 'This is arbitrary data\\n'.encode('ascii')\nput_file('v13', 'rob', '/tmp/dir', 'file.bin', data)\n"
        ], 
        "score": 9, 
        "id": 19202764, 
        "rank": 0
      }
    ], 
    "title": "In Python, how to write a string to a file on a remote machine?"
  }, 
  {
    "accepted_answer_post_id": 10359458, 
    "id": 10359435, 
    "answer_posts": [
      {
        "snippets": [
          ">>> a = (100, 0)\n>>> b = (50, 50)\n>>> tuple(i > j for i, j in zip(a,b))\n(True, False)\n>>> all(i > j for i, j in zip(a,b))\nFalse\n"
        ], 
        "score": 1, 
        "id": 10359471, 
        "rank": 0
      }
    ], 
    "title": "Comparing all elements of two tuples (with all() functionality)"
  }, 
  {
    "accepted_answer_post_id": 30910237, 
    "id": 30907851, 
    "answer_posts": [
      {
        "snippets": [
          "from Tkinter import *\nimport ttk\n\nmaster = Tk()\n\nvariable = StringVar(master)\nvariable.set(\"one\") # default value\n\nw = ttk.Combobox(master, textvariable=variable, values=[\"Carrier 19EX 4667kW/6.16COP/Vanes\", \"Carrier 19EX 4997kW/6.40COP/Vanes\", \"Carrier 19EX 5148kW/6.34COP/Vanes\", \"Carrier 19EX 5208kW/6.88COP/Vanes\", \"Carrier 19FA 5651kW/5.50COP/Vanes\", \"Carrier 19XL 1674kW/7.89COP/Vanes\", \"Carrier 19XL 1779kW/6.18COP/Vanes\", \"Carrier 19XL 1797kW/5.69COP/Vanes\", \"Carrier 19XL 1871kW/6.49COP/Vanes\", \"Carrier 19XL 2057kW/6.05COP/Vanes\", \"Carrier 19XR 1076kW/5.52COP/Vanes\", \"Carrier 19XR 1143kW/6.57COP/VSD\", \"Carrier 19XR 1157kW/5.62COP/VSD\", \"Carrier 19XR 1196kW/6.50COP/Vanes\", \"Carrier 19XR 1213kW/7.78COP/Vanes\", \"Carrier 19XR 1234kW/5.39COP/VSD\", \"Carrier 19XR 1259kW/6.26COP/Vanes\", \"Carrier 19XR 1284kW/6.20COP/Vanes\", \"Carrier 19XR 1294kW/7.61COP/Vanes\", \"Carrier 19XR 1350kW/7.90COP/VSD\", \"Carrier 19XR 1403kW/7.09COP/VSD\", \"Carrier 19XR 1407kW/6.04COP/VSD\", \"Carrier 19XR 1410kW/8.54COP/VSD\", \"Carrier 19XR 1558kW/5.81COP/VSD\", \"Carrier 19XR 1586kW/5.53COP/VSD\", \"Carrier 19XR 1635kW/6.36COP/Vanes\", \"Carrier 19XR 1656kW/8.24COP/VSD\", \"Carrier 19XR 1723kW/8.32COP/VSD\", \"Carrier 19XR 1727kW/9.04COP/Vanes\", \"Carrier 19XR 1758kW/5.86COP/VSD\", \"Carrier 19XR 1776kW/8.00COP/Vanes\", \"Carrier 19XR 1801kW/6.34COP/VSD\", \"Carrier 19XR 2391kW/6.44COP/VSD\", \"Carrier 19XR 2391kW/6.77COP/Vanes\", \"Carrier 19XR 742kW/5.42COP/VSD\", \"Carrier 19XR 823kW/6.28COP/Vanes\", \"Carrier 19XR 869kW/5.57COP/VSD\", \"Carrier 19XR 897kW/6.23COP/VSD\", \"Carrier 19XR 897kW/6.50COP/Vanes\", \"Carrier 19XR 897kW/7.23COP/VSD\", \"Carrier 23XL 1062kW/5.50COP/Valve\", \"Carrier 23XL 1108kW/6.92COP/Valve\", \"Carrier 23XL 1196kW/6.39COP/Valve\", \"Carrier 23XL 686kW/5.91COP/Valve\", \"Carrier 23XL 724kW/6.04COP/Vanes\", \"Carrier 23XL 830kW/6.97COP/Valve\", \"Carrier 23XL 862kW/6.11COP/Valve\", \"Carrier 23XL 862kW/6.84COP/Valve\", \"Carrier 23XL 865kW/6.05COP/Valve\", \"Carrier 30RB100 336.5kW/2.8COP\", \"Carrier 30RB110 371kW/2.8COP\", \"Carrier 30RB120 416.4kW/2.8COP\", \"Carrier 30RB130 447.7kW/2.8COP\", \"Carrier 30RB150 507.8kW/2.8COP\", \"Carrier 30RB160 538kW/2.9COP\", \"Carrier 30RB170 585.5kW/2.8COP\", \"Carrier 30RB190 662.9kW/2.8COP\", \"Carrier 30RB210 710kW/2.9COP\", \"Carrier 30RB225 753.3kW/2.8COP\", \"Carrier 30RB250 836.2kW/2.8COP\", \"Carrier 30RB275 915kW/2.8COP\", \"Carrier 30RB300 993.8kW/2.8COP\", \"Carrier 30RB315 1076.1kW/2.9COP\", \"Carrier 30RB330 1123.6kW/2.8COP\", \"Carrier 30RB345 1170.7kW/2.8COP\", \"Carrier 30RB360 1248.4kW/2.8COP\", \"Carrier 30RB390 1325.8kW/2.8COP\", \"Carrier 30RB90 303.8kW/2.9COP\", \"Carrier 30XA100 330.1kW/3.1COP\", \"Carrier 30XA110 359.9kW/3COP\", \"Carrier 30XA120 389kW/3COP\", \"Carrier 30XA140 466.7kW/3.1COP\", \"Carrier 30XA160 535.1kW/3.1COP\", \"Carrier 30XA180 601.9kW/3.1COP\", \"Carrier 30XA200 681.7kW/3.1COP\", \"Carrier 30XA220 743.7kW/3.1COP\", \"Carrier 30XA240 801.6kW/3COP\", \"Carrier 30XA260 881.7kW/3.1COP\", \"Carrier 30XA280 943.4kW/3.1COP\", \"Carrier 30XA300 1010.2kW/3.1COP\", \"Carrier 30XA325 1077.4kW/3.1COP\", \"Carrier 30XA350 1138.7kW/3COP\", \"Carrier 30XA400 1348kW/3COP\", \"Carrier 30XA450 1499.5kW/2.9COP\", \"Carrier 30XA500 1609.4kW/2.9COP\", \"Carrier 30XA80 265.5kW/2.9COP\", \"Carrier 30XA90 297.8kW/3.1COP\", \"DOE-2 Centrifugal/5.50COP\", \"DOE-2 Reciprocating/3.67COP\", \"McQuay AGZ010BS 34.5kW/2.67COP\", \"McQuay AGZ013BS 47.1kW/2.67COP\", \"McQuay AGZ017BS 54.5kW/2.67COP\", \"McQuay AGZ020BS 71kW/2.67COP\", \"McQuay AGZ025BS 78.1kW/2.67COP\", \"McQuay AGZ025D 96kW/2.81COP\", \"McQuay AGZ029BS 95.7kW/2.67COP\", \"McQuay AGZ030D 111.1kW/2.81COP\", \"McQuay AGZ034BS 117.1kW/2.61COP\", \"McQuay AGZ035D 122.7kW/2.93COP\", \"McQuay AGZ040D 133.3kW/2.96COP\", \"McQuay AGZ045D 149.8kW/3.02COP\", \"McQuay AGZ050D 169.2kW/2.96COP\", \"McQuay AGZ055D 181.5kW/2.93COP\", \"McQuay AGZ060D 197.3kW/2.87COP\", \"McQuay AGZ065D 204.3kW/3.02COP\", \"McQuay AGZ070D 225.4kW/2.84COP\", \"McQuay AGZ075D 257.1kW/2.93COP\", \"McQuay AGZ080D 285.2kW/2.87COP\", \"McQuay AGZ090D 313.7kW/2.87COP\", \"McQuay AGZ100D 351kW/2.81COP\", \"McQuay AGZ110D 373.1kW/2.87COP\", \"McQuay AGZ125D 411.8kW/2.87COP\", \"McQuay AGZ130D 455.8kW/2.81COP\", \"McQuay AGZ140D 479kW/2.99COP\", \"McQuay AGZ160D 539.1kW/2.93COP\", \"McQuay AGZ180D 605.6kW/2.81COP\", \"McQuay AGZ190D 633.4kW/2.96COP\", \"McQuay PEH 1030kW/8.58COP/Vanes\", \"McQuay PEH 1104kW/8.00COP/Vanes\", \"McQuay PEH 1231kW/6.18COP/Vanes\", \"McQuay PEH 1635kW/7.47COP/Vanes\", \"McQuay PEH 1895kW/6.42COP/Vanes\", \"McQuay PEH 1934kW/6.01COP/Vanes\", \"McQuay PEH 703kW/7.03COP/Vanes\", \"McQuay PEH 819kW/8.11COP/Vanes\", \"McQuay PFH 1407kW/6.60COP/Vanes\", \"McQuay PFH 2043kW/8.44COP/Vanes\", \"McQuay PFH 2124kW/6.03COP/Vanes\", \"McQuay PFH 2462kW/6.67COP/Vanes\", \"McQuay PFH 3165kW/6.48COP/Vanes\", \"McQuay PFH 4020kW/7.35COP/Vanes\", \"McQuay PFH 932kW/5.09COP/Vanes\", \"McQuay WDC 1973kW/6.28COP/Vanes\", \"McQuay WSC 1519kW/7.10COP/Vanes\", \"McQuay WSC 1751kW/6.73COP/Vanes\", \"McQuay WSC 471kW/5.89COP/Vanes\", \"McQuay WSC 816kW/6.74COP/Vanes\", \"Multistack MS 172kW/3.67COP/None\", \"Trane CGAM100 337.6kW/3.11COP\", \"Trane CGAM110 367.2kW/3.02COP\"])\nw.pack()\n\nmaster.mainloop()\n"
        ], 
        "score": 2, 
        "id": 30910237, 
        "rank": 0
      }
    ], 
    "title": "how to attatch scrollbar to dropdown list in tkinter?"
  }, 
  {
    "accepted_answer_post_id": 19826727, 
    "id": 19805763, 
    "answer_posts": [
      {
        "snippets": [
          "@app.route('/post/user',methods=['POST','GET'])\ndef saveuser():\n data = json.loads(request.data)\n firstname = data['firstname']\n newuser = User(firstname,lastname,email,password)\n\n db.session.add(newuser)\n db.session.commit()\n"
        ], 
        "score": 0, 
        "id": 19806364, 
        "rank": 0
      }
    ], 
    "title": "Getting Form data with Flask"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 14484809, 
    "answer_posts": [
      {
        "snippets": [
          "import Tkinter\n\ndef list_click(event):\n    w = event.widget\n    index = w.nearest(event.y)\n    w._selection = index\n\ndef list_motion(event):\n    w = event.widget\n    if w._selection is None:\n        return\n    index = w.curselection()[0]\n    w._var.swap(index, w._selection)\n    w._selection = index\n\ndef list_clear(event):\n    event.widget._selection = None\n\nroot = Tkinter.Tk()\n\nv = ListVar(values=('one', 'two', 'three', 'four'))\nv.append('a list entry')\n\nlistbox = Tkinter.Listbox(listvar=v)\nlistbox.pack()\n\nlistbox._selection = None\nlistbox._var = v\nlistbox.bind('<1>', list_click)\nlistbox.bind('<B1-Motion>', list_motion)\nlistbox.bind('<ButtonRelease-1>', list_clear)\n\nroot.mainloop()\n", 
          "class ListVar(Tkinter.Variable):\n    def __init__(self, master=None, name=None, **kwargs):\n        Tkinter.Variable.__init__(self, master, kwargs.get('values'), name)\n\n    def set(self, values):\n        self._tk.call('set', self._name, values)\n\n    def set_index(self, index, value):\n        self._tk.call('lset', self._name, index, value)\n\n    def get_index(self, index):\n        return self._tk.eval('lindex $%s %d' % (self._name, index))\n\n    def get(self, start=None, end=None):\n        if start is None and end is None:\n            res = self._tk.eval('lrange $%s 0 end' % self._name)\n        elif end is None:\n            res = self._tk.eval('lrange $%s %d end' % (self._name, start))\n        else:\n            res = self._tk.eval('lrange $%s %d %d' % (self._name, start, end))\n        return self._tk.splitlist(res)\n\n    def swap(self, a, b):\n        if a != b:\n            tmp = self.get_index(a)\n            self.set_index(a, self.get_index(b))\n            self.set_index(b, tmp)\n\n    def append(self, value):\n        self._tk.eval('lappend %s {%s}' % (self._name, value))\n"
        ], 
        "score": 0, 
        "id": 14489646, 
        "rank": 0
      }
    ], 
    "title": "Python / Tkinter listbox troubles"
  }, 
  {
    "accepted_answer_post_id": 12751728, 
    "id": 12751687, 
    "answer_posts": [
      {
        "snippets": [
          "def writeshort(txt):\n    wordlist = []\n    for item in txt:\n        if len(item) > 4:\n            continue\n        wordlist += [item] # or wordlist.append(item) as in your first snippet\n    return wordlist\n", 
          "[word for word in txt if len(word) <= 4]\n"
        ], 
        "score": 5, 
        "id": 12751728, 
        "rank": 0
      }
    ], 
    "title": "Python - Print only words with less than five characters"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 17295589, 
    "answer_posts": [
      {
        "snippets": [
          "import matplotlib\nfrom matplotlib.patches import Wedge\nimport matplotlib.pyplot as plt\n\nfig=plt.figure()\nax=fig.add_subplot(111) \n\nfov = Wedge((.2,.2), 0.6, 30, 60, color=\"r\", alpha=0.5)\n\nax.add_artist(fov)\n\nplt.show()\n"
        ], 
        "score": 6, 
        "id": 17295958, 
        "rank": 0
      }
    ], 
    "title": "how to draw a colored sector using python?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 14508809, 
    "answer_posts": [
      {
        "snippets": [
          "import subprocess\nsubprocess.call([\"C:\\\\WINDOWS\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\", \". \\\"./SamplePowershell\\\";\", \"&hello\"])\n", 
          "Function addOne($intIN)\n{\n    Write-Host ($intIN + 1)\n}\n", 
          "import subprocess\nsubprocess.call([\"C:\\\\WINDOWS\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\", \". \\\"./SamplePowershell\\\";\", \"&addOne(10)\"])\n", 
          "PowerShell sample says hello.\n11\n"
        ], 
        "score": 14, 
        "id": 14554665, 
        "rank": 0
      }
    ], 
    "title": "Run PowerShell function from Python script"
  }, 
  {
    "accepted_answer_post_id": 13293182, 
    "id": 13291942, 
    "answer_posts": [
      {
        "snippets": [
          "import numpy as np\nfrom matplotlib import pyplot as plt\n\nN=1000\nx = np.linspace(-.5,1.5,num=N)\nxshift = x-0.5\nBz = 30*np.exp(-xshift**8/0.00125)*np.sin(xshift*2.*np.pi)\nNp = 30*np.exp(-xshift**10/0.00125)+5\nVx = 200*np.exp(-xshift**10/0.00125)+400\n\nfig = plt.figure()\n\n#list of tuples of the form `(data, label)`    \ndata_list = [(Bz,\"B_z\"),(Vx,\"V_x\"),(Np,\"N_p\")]\n\nleft = .15\nheight = .2\nwidth = .7\nbottom = .0\naxes_ticks = []\naxes = []\nfor i,(data,lab) in enumerate(data_list,1):\n    ax = fig.add_subplot(len(data_list),1,i)\n    bottom += height\n    ax.set_position((left, bottom, width, height))\n\n    ax.set_ylabel(\"$\\mathrm{%s}$\"%lab)\n    axes_ticks.append(ax.get_xaxis().get_ticklocs())\n    ax.get_xaxis().set_ticks([])\n    ax.plot(x,data)\n    axes.append(ax)\nelse:\n    #Reset default tick labels here on ax\n    axes[0].get_xaxis().set_ticks(axes_ticks[0])\n\n\nplt.show()\n"
        ], 
        "score": 1, 
        "id": 13293182, 
        "rank": 0
      }
    ], 
    "title": "Reset default axis tics on matplotlib subplot"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 42294109, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import numpy as np\n>>> a = np.array([[10,10]],dtype=np.uint8)\n>>> b = np.array([[11,11]],dtype=np.uint8)\n>>> a - b\narray([[255, 255]], dtype=uint8)\n", 
          ">>> cv2.absdiff(a,b)\narray([[1, 1]], dtype=uint8)\n"
        ], 
        "score": 0, 
        "id": 42301120, 
        "rank": 0
      }
    ], 
    "title": "Remove background of the image using opencv Python"
  }, 
  {
    "accepted_answer_post_id": 26896942, 
    "id": 26896687, 
    "answer_posts": [
      {
        "snippets": [
          "def locate_columns(a, b, offset=0):\n    \"\"\"Locate `a` as a sublist of `b`.\n\n    Yields all possible lists of `len(a)` indices such that `a` can be read\n    from `b` at those indices.\n    \"\"\"\n    if not a:\n        yield []\n    else:\n        positions = (offset + i for (i, e) in enumerate(b[offset:])\n                     if e == a[0])\n        for position in positions:\n            for tail_cols in locate_columns(a[1:], b, position + 1):\n                yield [position] + tail_cols\n\n\ndef locate_submatrix(a, b, offset=0, cols=None):\n    \"\"\"Locate `a` as a submatrix of `b`.\n\n    Yields all possible pairs of (row_indices, column_indices) such that\n    `a` is the projection of `b` on those indices.\n    \"\"\"\n    if not a:\n        yield [], cols\n    else:\n        for j, row in enumerate(b[offset:]):\n            if cols:\n                if all(e == f for e, f in zip(a[0], [row[c] for c in cols])):\n                    for r, c in locate_submatrix(a[1:], b, offset + j + 1, cols):\n                        yield [offset + j] + r, c\n            else:\n                for cols in locate_columns(a[0], row):\n                    for r, c in locate_submatrix(a[1:], b, offset + j + 1, cols):\n                        yield [offset + j] + r, c\n\nB = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15], [16,17,18,19,20]]\nA = [[6,8], [16,18]]\n\nfor loc in locate_submatrix(A, B):\n    print loc\n", 
          "([1, 3], [0, 2])\n"
        ], 
        "score": 10, 
        "id": 26896942, 
        "rank": 0
      }
    ], 
    "title": "Is there a way to find out if A is a submatrix of B?"
  }, 
  {
    "accepted_answer_post_id": 3059319, 
    "id": 3059151, 
    "answer_posts": [
      {
        "snippets": [
          "re.sub(r'(?<=foo: \")[^\"]+(?=\")', 'pears', s)\n", 
          "re.sub(r'(?<=foo: \")(\\\\\"|[^\"])+(?=\")', 'pears', s)\n", 
          ">>> s = 'foo: \"apples \\\\\\\"and\\\\\\\" more apples\", bar: \"oranges\"'\n>>> print s\nfoo: \"apples \\\"and\\\" more apples\", bar: \"oranges\"\n>>> print   re.sub(r'(?<=foo: \")(\\\\\"|[^\"])+(?=\")', 'pears', s)\nfoo: \"pears\", bar: \"oranges\"\n"
        ], 
        "score": 0, 
        "id": 3059330, 
        "rank": 0
      }
    ], 
    "title": "How to substitute into a regular expression group in Python"
  }, 
  {
    "accepted_answer_post_id": 29550458, 
    "id": 29550414, 
    "answer_posts": [
      {
        "snippets": [
          "In [13]: df = pd.DataFrame({'a':[1,2], 'b':[(1,2), (3,4)]})\n\nIn [14]: df\nOut[14]:\n   a       b\n0  1  (1, 2)\n1  2  (3, 4)\n\nIn [16]: df['b'].apply(pd.Series)\nOut[16]:\n   0  1\n0  1  2\n1  3  4\n\nIn [17]: df[['b1', 'b2']] = df['b'].apply(pd.Series)\n\nIn [18]: df\nOut[18]:\n   a       b  b1  b2\n0  1  (1, 2)   1   2\n1  2  (3, 4)   3   4\n"
        ], 
        "score": 22, 
        "id": 29550458, 
        "rank": 0
      }
    ], 
    "title": "how to split column of tuples in pandas dataframe?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 10683029, 
    "answer_posts": [
      {
        "snippets": [
          "from itertools import ifilterfalse\ndef unique_everseen(iterable, key=None):\n    \"List unique elements, preserving order. Remember all elements ever seen.\"\n    # unique_everseen('AAAABBBCCDAABBB') --> A B C D\n    # unique_everseen('ABBCcAD', str.lower) --> A B C D\n    seen = set()\n    seen_add = seen.add\n    if key is None:\n        for element in ifilterfalse(seen.__contains__, iterable):\n            seen_add(element)\n            yield element\n    else:\n        for element in iterable:\n            k = key(element)\n            if k not in seen:\n                seen_add(k)\n                yield element\n\na = [(1,'a'), (1,'b'), (1,'c'), (2, 'd'), (5, 'e'), (5, 'f')]\n\nprint list(unique_everseen(a,key=lambda x: x[0]))\n", 
          "[(1, 'a'), (2, 'd'), (5, 'e')]\n"
        ], 
        "score": 2, 
        "id": 10683099, 
        "rank": 0
      }
    ], 
    "title": "filtering a list of tuples in python"
  }, 
  {
    "accepted_answer_post_id": 3359309, 
    "id": 3359151, 
    "answer_posts": [
      {
        "snippets": [
          " for elem in xml.xpath( '//foo' ) :\n      elem.getparent().remove(elem)\n"
        ], 
        "score": 16, 
        "id": 3359309, 
        "rank": 0
      }
    ], 
    "title": "How can I remove all elements matching an xpath in python using lxml?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 31445314, 
    "answer_posts": [
      {
        "snippets": [
          "df3 = pandas.DataFrame(header,data)\n", 
          "df3 = pandas.DataFrame(data, columns=header)\n"
        ], 
        "score": 0, 
        "id": 31446426, 
        "rank": 0
      }
    ], 
    "title": "How to create headers for pandas dataframe?"
  }, 
  {
    "accepted_answer_post_id": 21273405, 
    "id": 21272794, 
    "answer_posts": [
      {
        "snippets": [
          "Field('user_id', 'reference auth_user', requires=None)\n", 
          "Field('user_id', 'reference auth_user',\n      requires=IS_EMPTY_OR(IS_IN_DB(db, 'auth_user.id',\n                                    db.auth_user._format)))\n"
        ], 
        "score": 4, 
        "id": 21273405, 
        "rank": 0
      }
    ], 
    "title": "web2py, one to many, not required relationship"
  }, 
  {
    "accepted_answer_post_id": 4272888, 
    "id": 4270700, 
    "answer_posts": [
      {
        "snippets": [
          "import re\nimport numpy\n\ndef pbm2numpy(filename):\n    \"\"\"\n    Read a PBM into a numpy array.  Only supports ASCII PBM for now.\n    \"\"\"\n    fin = None\n    debug = True\n\n    try:\n        fin = open(filename, 'r')\n\n        while True:\n            header = fin.readline().strip()\n            if header.startswith('#'):\n                continue\n            elif header == 'P1':\n                break\n            elif header == 'P4':\n                assert False, 'Raw PBM reading not implemented yet'\n            else:\n                #\n                # Unexpected header.\n                #\n                if debug:\n                    print 'Bad mode:', header\n                return None\n\n        rows, cols = 0, 0\n        while True:\n            header = fin.readline().strip()\n            if header.startswith('#'):\n                continue\n\n            match = re.match('^(\\d+) (\\d+)$', header)\n            if match == None:\n                if debug:\n                    print 'Bad size:', repr(header)\n                return None\n\n            cols, rows = match.groups()\n            break\n\n        rows = int(rows)\n        cols = int(cols)\n\n        assert (rows, cols) != (0, 0)\n\n        if debug:\n            print 'Rows: %d, cols: %d' % (rows, cols)\n\n        #\n        # Initialise a 2D numpy array \n        #\n        result = numpy.zeros((rows, cols), numpy.int8)\n\n        pxs = []\n\n        # \n        # Read to EOF.\n        # \n        while True:\n            line = fin.readline().strip()\n            if line == '':\n                break\n\n            for c in line:\n                if c == ' ':\n                    continue\n\n                pxs.append(int(c))\n\n        if len(pxs) != rows*cols:\n            if debug:\n                print 'Insufficient image data:', len(pxs)\n            return None\n\n        for r in range(rows):\n            for c in range(cols):\n                #\n                # Index into the numpy array and set the pixel value.\n                #\n                result[r, c] = pxs[r*cols + c]\n\n        return result\n\n    finally:\n        if fin != None:\n            fin.close()\n        fin = None\n\n    return None\n", 
          "def pgm2pil(fname):\n    #\n    # This method returns a PIL.Image.  Use pbm2numpy function above as a\n    # guide.  If it can't load the image, it returns None.\n    #\n    pass\n\ndef wrapper(fname):\n    pgm = pgm2pil(fname)\n\n    if pgm is not None:\n        return pgm\n    return PIL.Image.open(fname)\n\n#\n# This is the line that \"adds\" the wrapper\n#\nPIL.Image.open = wrapper\n"
        ], 
        "score": 5, 
        "id": 4272888, 
        "rank": 0
      }
    ], 
    "title": "How to write PIL image filter for plain pgm format?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 28014071, 
    "answer_posts": [
      {
        "snippets": [
          "print(name, \", You got\", Correct, \"Out of 10\", file= \"ClassScore..txt\")\n", 
          "with open(\"ClassScore.tx.txt\",\"w\") as f:\n    f.write(\"{}, You got {} Out of 10\".format(name,Correct))\n"
        ], 
        "score": 1, 
        "id": 28014090, 
        "rank": 0
      }
    ], 
    "title": "Getting total score of a quiz in python into a text file?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 5729226, 
    "answer_posts": [
      {
        "snippets": [
          "attrslist = [dict(node.attributes.items()) for node in notificationlist]\nprint attrslist[0]\n# => {u'status': u'current', u'oid': u'1.3.6.1', u'name': u'ccmSmtp'}\nprint attrslist[0]['status']\n# => current\n", 
          "for n in attrslist:\n   status = n['status']\n   oid = n['oid']\n   name = n['name']\n   # blah\n"
        ], 
        "score": 1, 
        "id": 5735421, 
        "rank": 0
      }
    ], 
    "title": "Extracting values from XML using Python"
  }, 
  {
    "accepted_answer_post_id": 5919843, 
    "id": 5919828, 
    "answer_posts": [
      {
        "snippets": [
          "word = input(\"Give me a 5 letter word: \")\n", 
          "if len(word) != 5:\n    print \"that's not 5 letters...\"\n"
        ], 
        "score": 4, 
        "id": 5919843, 
        "rank": 0
      }
    ], 
    "title": "Python how to find the number of characters in the user input"
  }, 
  {
    "accepted_answer_post_id": 4656228, 
    "id": 4655526, 
    "answer_posts": [
      {
        "snippets": [
          "import sys\nimport os\nsys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))\n"
        ], 
        "score": 9, 
        "id": 4655793, 
        "rank": 0
      }
    ], 
    "title": "How to accomplish relative import in python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 17287700, 
    "answer_posts": [], 
    "title": "how to parse a XML file into a tree in python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 14447507, 
    "answer_posts": [
      {
        "snippets": [
          "Note that due to buffering, flush() or close() may be needed before\nthe file on disk reflects the data written.\n", 
          "with open(\"output\",\"w\") as f:\n  lat=-100\n  long=-190\n  while lat <=80:\n    lat=lat+10\n    long=-190\n    while long<=170:\n      long=long+10\n      f.write(\"latitude:\"+format(lat)+\" longitude:\"+format(long))\n"
        ], 
        "score": 1, 
        "id": 14447591, 
        "rank": 0
      }
    ], 
    "title": "Output for a nested 'while' loop function in Python into a text file"
  }, 
  {
    "accepted_answer_post_id": 40497913, 
    "id": 40494435, 
    "answer_posts": [
      {
        "snippets": [
          "In [435]: A=np.array([[1,0,2,0],[0,1,3,0],[3,0,0,4]])\nIn [436]: A\nOut[436]: \narray([[1, 0, 2, 0],\n       [0, 1, 3, 0],\n       [3, 0, 0, 4]])\nIn [437]: np.linalg.pinv(A)\nOut[437]: \narray([[ 0.61538462, -0.36923077,  0.04615385],\n       [-0.57692308,  0.44615385,  0.06923077],\n       [ 0.19230769,  0.18461538, -0.02307692],\n       [-0.46153846,  0.27692308,  0.21538462]])\n", 
          "In [439]: M=sparse.csr_matrix(A)\n", 
          "In [441]: np.linalg.pinv(M.toarray())\nOut[441]: \narray([[ 0.61538462, -0.36923077,  0.04615385],\n       [-0.57692308,  0.44615385,  0.06923077],\n       [ 0.19230769,  0.18461538, -0.02307692],\n       [-0.46153846,  0.27692308,  0.21538462]])\n", 
          "In [442]: np.linalg.pinv(M)   \n...\nLinAlgError: 0-dimensional array given. Array must be at least two-dimensional\n"
        ], 
        "score": 1, 
        "id": 40497913, 
        "rank": 0
      }
    ], 
    "title": "python how to inverse a sparse matrix"
  }, 
  {
    "accepted_answer_post_id": 33657921, 
    "id": 33657794, 
    "answer_posts": [
      {
        "snippets": [
          "with open(\"dvd.csv\") as f:\n    for num, line in enumerate(f, 1):\n        if \" arnold \" in line:\n            num = str(num)\n            print line.split(',')[3] + '' + num \n", 
          "print \"{} {}\".format(line.split(',')[3], num)\n"
        ], 
        "score": 2, 
        "id": 33657921, 
        "rank": 0
      }
    ], 
    "title": "Read line in file, print line if it contains string"
  }, 
  {
    "accepted_answer_post_id": 4299310, 
    "id": 4299293, 
    "answer_posts": [
      {
        "snippets": [
          "# Strip any hashes on the left.\nstring.lstrip('#')\n\n# Remove hashes anywhere in the string, not necessarily just from the front.\nstring.replace('#', '')\n\n# Remove only the first hash in the string.\nstring.replace('#', '', 1)\n\n# Unconditionally remove the first character, no matter what it is.\nstring[1:]\n\n# If the first character is a hash, remove it. Otherwise do nothing.\nimport re\nre.sub('^#', '', string)\n"
        ], 
        "score": 8, 
        "id": 4299310, 
        "rank": 0
      }
    ], 
    "title": "Modifying strings in Python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 36447758, 
    "answer_posts": [
      {
        "snippets": [
          "In [352]: fn = r'/path/to/your/excel.xlsx'\n", 
          "In [353]: writer = pd.ExcelWriter(fn, engine='openpyxl')\n", 
          "In [354]: book = load_workbook(fn)\n", 
          "In [355]: writer.book = book\n", 
          "In [356]: writer.sheets = dict((ws.title, ws) for ws in book.worksheets)\n", 
          "In [357]: df.to_excel(writer, sheet_name='New')\n", 
          "In [358]: writer.save()\n"
        ], 
        "score": 1, 
        "id": 36450435, 
        "rank": 0
      }
    ], 
    "title": "writing pandas data frame to existing workbook"
  }, 
  {
    "accepted_answer_post_id": 12333661, 
    "id": 12333628, 
    "answer_posts": [
      {
        "snippets": [
          ">>> lis=['xlnx>XLNX<', 'yhoo>YHOO<']\n>>> [x[x.index('>')+1:x.index('<')] for x in lis]\n['XLNX', 'YHOO']\n"
        ], 
        "score": 1, 
        "id": 12333791, 
        "rank": 0
      }
    ], 
    "title": "Python List Regex"
  }, 
  {
    "accepted_answer_post_id": 35256446, 
    "id": 35255377, 
    "answer_posts": [
      {
        "snippets": [
          "# -*- coding: utf-8 -*-\n\n# Form implementation generated from reading ui file 'mainWinui.ui'\n#\n# Created: Sun Feb  7 14:22:09 2016\n#      by: pyside-uic 0.2.15 running on PySide 1.2.4\n#\n# WARNING! All changes made in this file will be lost!\n\nfrom PySide import QtCore, QtGui\n\nclass Ui_MainWindow(object):\n    def setupUi(self, MainWindow):\n        MainWindow.setObjectName(\"MainWindow\")\n", 
          "from mainWinui import Ui_MainWindow\nfrom PySide import QtGui\n\n\nclass MainWin(QtGui.QMainWindow):\n    def __init__(self, parent=None):\n        QtGui.QMainWindow.__init__(self, parent)\n        self.ui = Ui_MainWindow()\n        self.ui.setupUi(self)\n        self.setup_signals()\n\n# Is this is the same as your Listeners ??\ndef setup_signals(self):\n    # Signal for updating the lineedits from the grid\n    self.ui.tabWidget.currentChanged.connect(self.onTabChanged)\n    # Connect the \"Add Staff\" button to the addStaffMember method\n    self.ui.btnAddStaff.clicked.connect(self.addStaffMember)\n", 
          "from PySide import QtGui, QtCore\nfrom mainwinClass import MainWin\nimport sys\n\n\nif __name__ == '__main__':\n    app = QtGui.QApplication(sys.argv)\n    mainWin = MainWin()\n\n    mainWin.show()\n    sys.exit(app.exec_())\n\n    # Nothing else _needed_ in here\n", 
          "pyside-uic -o dialogAddStaffui.py dialogAddStaffui.ui.\n", 
          "from dialogAddStaffui import Ui_DialogAddStaff\nfrom PySide import QtCore, QtGui\n\n\nclass DialogAddStaff(QtGui.QDialog):\n    def __init__(self, parent=None):\n        QtGui.QDialog.__init__(self, parent)\n        self.ui = Ui_DialogAddStaff()\n        self.ui.setupUi(self)\n        # Your own init stuff\n", 
          "def validate(self):\n    retval = True\n    if not self.ui.editLname.text():\n        retval = False\n        QtGui.QMessageBox.information(self, 'Invalid Last name',\n                                      \"Last Name must not be blank\")\n        self.ui.editLname.setFocus()\n    return retval\n\ndef accept(self):\n    if self.validate():\n        self.done(1)\n", 
          "from dialogAddStaffClass import DialogAddStaff\n\n\ndef addStaffMember(self):\n    addStaffForm = DialogAddStaff()\n        res = addStaffForm.exec_()   # exec_ waits, show would continue\n        # Function waits here for the Modal form to close.\n        if res:   # child was closed with OK and validated correctly\n            print(addStaffForm.ui.editLname.text())\n            # Saveing other Staff data happens here\n", 
          "# -*- coding: utf-8 -*-\n\n# Form implementation generated from reading ui file 'sisterWinui.ui'\n#\n# Created: Mon Feb  8 12:05:37 2016\n#      by: pyside-uic 0.2.15 running on PySide 1.2.4\n#\n# WARNING! All changes made in this file will be lost!\n\nfrom PySide import QtCore, QtGui\n\nclass Ui_SisterWin(object):\n    def setupUi(self, SisterWin):\n        SisterWin.setObjectName(\"SisterWin\")\n", 
          "pyside-uic -o sisterWinui.py sisterWinui.ui\n", 
          "from sisterWinui import Ui_SisterWin\nfrom PySide import QtCore, QtGui\n\n\nclass SisterWin(QtGui.QMainWindow):\n    def __init__(self, parent=None):\n        QtGui.QMainWindow.__init__(self, parent)\n        self.ui = Ui_SisterWin()\n        self.ui.setupUi(self)\n        # Your custom stuff after this\n", 
          "from sisterwinClass import SisterWin\n# no other new imports needed, just the stuff you had before\n\n\nclass MainWin(QtGui.QMainWindow):\n    def __init__(self, parent=None):\n        # These three lines were already there\n        QtGui.QMainWindow.__init__(self, parent)\n        self.ui = Ui_MainWindow()\n        self.ui.setupUi(self)\n        # Add a long lived attribute to hold the class instance\n        self.sisterWin = None\n        # Next line was already there\n        self.setup_signals()\n\ndef setup_signals(self):\n    # Connect button to openSisterWin\n    self.ui.btnSisterwin.clicked.connect(self.openSisterWin)\n    # You probably have other connects after this\n\n\n# This toggles the window\ndef openSisterWin(self):\n    if not self.sisterWin:\n        self.sisterWin = SisterWin()\n    if self.sisterWin.isVisible():\n        print('Hiding')\n        self.sisterWin.hide()\n        # hide or close, it's your choice\n        # self.sisterWin.close()\n    else:\n        print('Showing')\n        self.sisterWin.show()\n"
        ], 
        "score": 2, 
        "id": 35256446, 
        "rank": 0
      }
    ], 
    "title": "How to open a child window from the main window"
  }, 
  {
    "accepted_answer_post_id": 39116733, 
    "id": 39115794, 
    "answer_posts": [
      {
        "snippets": [
          "def quack():\n    print(\"Quack!\")\n", 
          "from quacker import quack\n\ncdef public void cquack():\n    quack()\n", 
          "#if _WIN32\n#include <direct.h>\n#define getcwd _getcwd\n#define PATH_SEPARATOR ';'\n#else\n#include <unistd.h>\n#define PATH_SEPARATOR ':'\n#endif\n\n#include <iostream>\n#include <string>\n#include <sstream>\n\n#include <Python.h>\n#include \"cquacker.h\"\n\nstd::wstring getSysPath()\n{\n  char cwd[FILENAME_MAX];\n  getcwd(cwd, FILENAME_MAX);\n  std::wstringstream path;\n  path << Py_GetPath() << PATH_SEPARATOR << cwd;\n  return path.str();\n}\n\nint main()\n{\n  Py_Initialize();\n  PySys_SetPath(getSysPath().c_str());\n  PyInit_cquacker();\n  if (PyErr_Occurred())\n  {\n    PyErr_Print();\n    return -1;\n  }\n  cquack();\n  Py_Finalize();\n  return 0;\n}\n", 
          "def qcallback(duck):\n    duck.quack()\n", 
          "#include <iostream>\n\nnamespace quacker {\n\nclass Duck\n{\npublic:\n    void quack() { std::cout << \"Quack!\" << \"\\n\"; }\n};\n\n}\n", 
          "cdef extern from \"quacker/Duck.hpp\" namespace \"quacker\":\n    cdef cppclass Duck:\n        Duck() except +\n        void quack()\n", 
          "from cython.operator cimport dereference as deref\nfrom libcpp.memory cimport shared_ptr\n\ncimport cquacker_defs\n\nfrom quacker import qcallback\n\ncdef class Duck:\n    cdef shared_ptr[cquacker_defs.Duck] _this\n\n    @staticmethod\n    cdef inline Duck _from_this(shared_ptr[cquacker_defs.Duck] _this):\n        cdef Duck result = Duck.__new__(Duck)\n        result._this = _this\n        return result\n\n    def __init__(self):\n        self._this.reset(new cquacker_defs.Duck())\n\n    def quack(self):\n        assert self._this != NULL\n        deref(self._this).quack()\n\n\ncdef public void cqcallback(shared_ptr[cquacker_defs.Duck] duck):\n    qcallback(Duck._from_this(duck))\n", 
          "#if _WIN32\n#include <direct.h>\n#define getcwd _getcwd\n#define PATH_SEPARATOR ';'\n#else\n#include <unistd.h>\n#define PATH_SEPARATOR ':'\n#endif\n\n#include <iostream>\n#include <memory>\n#include <string>\n#include <sstream>\n\n#include \"quacker/Duck.hpp\"\n\n#include <Python.h>\n#include \"cquacker.h\"\n\nstd::wstring getSysPath()\n{\n  char cwd[FILENAME_MAX];\n  getcwd(cwd, FILENAME_MAX);\n  std::wstringstream path;\n  path << Py_GetPath() << PATH_SEPARATOR << cwd;\n  return path.str();\n}\n\nint main()\n{\n  Py_Initialize();\n  PySys_SetPath(getSysPath().c_str());\n  PyInit_cquacker();\n  if (PyErr_Occurred())\n  {\n    PyErr_Print();\n    return -1;\n  }\n  auto duck = std::make_shared<quacker::Duck>();\n  cqcallback(duck);\n  Py_Finalize();\n  return 0;\n}\n"
        ], 
        "score": 3, 
        "id": 39116733, 
        "rank": 0
      }
    ], 
    "title": "Run python in C++"
  }, 
  {
    "accepted_answer_post_id": 15548688, 
    "id": 15547335, 
    "answer_posts": [
      {
        "snippets": [
          "class YourModelAdmin(admin.ModelAdmin):\n    raw_id_fields=('professor', )\n\nadmin.site.register(YourModel, YourModelAdmin)\n"
        ], 
        "score": 2, 
        "id": 15548688, 
        "rank": 0
      }
    ], 
    "title": "How to change a default widget in the Django admin?"
  }, 
  {
    "accepted_answer_post_id": 7596931, 
    "id": 7575779, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import re\n>>> s = \"AATTAATCTATATATTGAAATGGGGCCCCAATTTTCCCAAATC ....\"\n>>> [(m.start(), m.end()) for m in re.finditer('AAT.*?(?:ATG|TTT|ATC)', s)]\n[(0, 8), (18, 34)]\n", 
          "start = \"AAT\"\nend = [\"ATG\", \"TTT\", \"ATC\"]\nregex = \"%s.*?(?:%s)\" % (start, '|'.join(end))\n"
        ], 
        "score": 1, 
        "id": 7596931, 
        "rank": 0
      }
    ], 
    "title": "How to: From one string to another in a long list of strings"
  }, 
  {
    "accepted_answer_post_id": 18735545, 
    "id": 18734851, 
    "answer_posts": [
      {
        "snippets": [
          "import matplotlib.pyplot as plt\nfrom matplotlib import gridspec\n\ndef plot_data(avg_rel_track, sd_rel_track_sum, sd_index, sd_grad):\n\n    fig = plt.figure(figsize=(15,10))\n    gs  = gridspec.GridSpec(4, 1, height_ratios=[1, 1 ,1.5, 1])\n    ax0 = plt.subplot(gs[0])\n    ax1 = plt.subplot(gs[1])\n    ax2 = plt.subplot(gs[2])\n    ax3 = plt.subplot(gs[3])\n\n    fig.subplots_adjust(top=0.85)\n    lineObjects = ax0.plot(avg_rel_track_nan)\n\n    if len(sd_index)>1:\n        for i in xrange(1, len(sd_index)):\n            if sd_grad[i]==1:\n                ax0.axvspan(sd_index[i-1], sd_index[i],\n                            edgecolor='#FFCC66', facecolor='#FFCC66',\n                            alpha=1)\n\n    #The following plot has 5 plots within it.\n    ax0.set_title('Averaged Relative Track',fontsize=11)\n    ax0.legend(lineObjects, (1,2,3,4,5))\n\n    ax1.plot(sd_rel_track_sum)\n    ax1.set_title('RT Standard Deviation',fontsize=11)\n    ax1.set_ylim([0,250])\n\n    ax2.plot(splitpre)\n    ax2.set_title('Track Split',fontsize=11)\n\n    ax3.plot(ts_sd)\n    ax3.set_title('Track Split Standard Dev',fontsize=11)\n    ax3.set_ylim([0,100])\n\n    fig.tight_layout()\n    plt.show()\n"
        ], 
        "score": 4, 
        "id": 18735545, 
        "rank": 0
      }
    ], 
    "title": "Resizing a single subplot in matplotlib"
  }, 
  {
    "accepted_answer_post_id": 9249289, 
    "id": 9249151, 
    "answer_posts": [
      {
        "snippets": [
          "from BeautifulSoup import BeautifulSoup\nfrom pprint import pprint\n\ndef parseList(tag):\n    if tag.name == 'ul':\n        return [parseList(item)\n                for item in tag.findAll('li', recursive=False)]\n    elif tag.name == 'li':\n        if tag.ul is None:\n            return tag.text\n        else:\n            return (tag.contents[0].string.strip(), parseList(tag.ul))\n\nsoup = BeautifulSoup(lista)\npprint(parseList(soup.ul))\n", 
          "[(u'Arts & Entertainment',\n  [u'Celebrities & Entertainment News',\n   (u'Comics & Animation',\n    [u'Anime & Manga', u'Cartoons', u'Comics'])])]\n"
        ], 
        "score": 2, 
        "id": 9249289, 
        "rank": 0
      }
    ], 
    "title": "How to turn a Html nested list into a Python's one"
  }, 
  {
    "accepted_answer_post_id": 24311214, 
    "id": 24309377, 
    "answer_posts": [
      {
        "snippets": [
          "Open settings.py and find MIDDLEWARE_CLASSES. Add 'django.contrib.sessions.middleware.SessionMiddleware' to the list.\nFind INSTALLED_APPS in the same file and add 'django.contrib.sessions' there.\nRun manage.py syncdb from the command line.\n", 
          "def index(request):\n    d = getVariables(request,dictionary={'page_name': \"Home\"})\n    if request.method == \"POST\":\n        form = DropdownSelectionForm(request.POST)\n\n        if form.is_valid():\n            selection = form.cleaned_data['selection']\n            request.session[\"selection\"] = request.POST['selection']\n\n            return HttpResponseRedirect('/doclistings')\n    else:\n        form = DropdownSelectionForm()\n\n    return render(request, 'meddy1/index.html', {'form': form})\n", 
          "def doclistings(request):\n    d = getVariables(request)\n    doctors = Doctor.objects.all().order_by('-likes')\n    paginator = Paginator(doctors, 20) #Show 20 doctors per page\n    page =  page = request.GET.get('page')\n    print request.session[\"selection\"]\n    try:\n        doctors = paginator.page(page)\n    except PageNotAnInteger:\n        doctors = paginator.page(1)\n    except EmptyPage:\n        doctors = paginator.page(paginator.num_pages)\n    d['doctors'] = doctors\n    d['paginator'] = paginator\n\n    return render_to_response('meddy1/doclistings.html',d)\n"
        ], 
        "score": 2, 
        "id": 24311214, 
        "rank": 0
      }
    ], 
    "title": "Django 1.6: Pass dropdown value from one template another"
  }, 
  {
    "accepted_answer_post_id": 35939647, 
    "id": 35938851, 
    "answer_posts": [
      {
        "snippets": [
          "G[0][:] = [0] * 101 # Warning: Copied code from question, still flawed\n", 
          "G = [[0] * 101 for x in range(102)]\n", 
          "G[0] = [1] * 101\n", 
          "for i in range(102): G[i][0] = 1\n"
        ], 
        "score": 3, 
        "id": 35939647, 
        "rank": 0
      }
    ], 
    "title": "How to get all elements of 2D array by slice in python"
  }, 
  {
    "accepted_answer_post_id": 31078271, 
    "id": 31074758, 
    "answer_posts": [
      {
        "snippets": [
          "values = np.array([2,5,3,6,4,7,1])   \nidx = np.array(list('abcdefg')) \nclrs = ['grey' if (x < max(values)) else 'red' for x in values ]\nsb.barplot(x=idx, y=values, palette=clrs) # color=clrs)\n"
        ], 
        "score": 5, 
        "id": 31078271, 
        "rank": 0
      }
    ], 
    "title": "How to set a different color to the largest bar in a seaborn barplot?"
  }, 
  {
    "accepted_answer_post_id": 35599781, 
    "id": 35599632, 
    "answer_posts": [
      {
        "snippets": [
          ">>> h = b'\\x06\\xcf\\x96\\xf3\\nr\\x83\\xffrX\\xfc\\xef\\\\\\xf5\\x87\\xedQ\\x15l7'\nb'\\x06\\xcf\\x96\\xf3\\nr\\x83\\xffrX\\xfc\\xef\\\\\\xf5\\x87\\xedQ\\x15l7'\n>>> h.hex()\n'06cf96f30a7283ff7258fcef5cf587ed51156c37'\n", 
          ">>> import binascii\n>>> binascii.hexlify(h).decode('utf8')\n'06cf96f30a7283ff7258fcef5cf587ed51156c37'\n"
        ], 
        "score": 3, 
        "id": 35599781, 
        "rank": 0
      }
    ], 
    "title": "How to convert byte string with non-printable chars to hexadecimal in python?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 27028226, 
    "answer_posts": [
      {
        "snippets": [
          "#include <iostream>\n#include <vector>\n\ntemplate<typename T>\nstd::vector<double> linspace(T start_in, T end_in, int num_in)\n{\n  double start = static_cast<double>(start_in);\n  double end = static_cast<double>(end_in);\n  double num = static_cast<double>(num_in);\n  double delta = (end - start) / (num - 1);\n\n  std::vector<double> linspaced;\n  for(int i=0; i < num; ++i)\n    {\n      linspaced.push_back(start + delta * i);\n    }\n  linspaced.push_back(end);\n  return linspaced;\n}\n\nvoid print_vector(std::vector<double> vec)\n{\n  for (double d : vec)\n    std::cout << d << \" \";\n  std::cout << std::endl;\n}\n\nint main()\n{\n  std::vector<double> vec_1 = linspace(1, 10, 3);\n  print_vector(vec_1);\n\n  std::vector<double> vec_2 = linspace(6.0, 23.4, 5);\n  print_vector(vec_2);\n  return 0;\n}\n", 
          "1 5.5 10 \n6 10.35 14.7 19.05 23.4 \n", 
          ">>> np.linspace(1, 10, 3)\narray([  1. ,   5.5,  10. ])\n>>> np.linspace(6, 23.4, 5)\narray([  6.  ,  10.35,  14.7 ,  19.05,  23.4 ])\n"
        ], 
        "score": 2, 
        "id": 27030598, 
        "rank": 0
      }
    ], 
    "title": "python linspace in c++"
  }, 
  {
    "accepted_answer_post_id": 17243334, 
    "id": 17242828, 
    "answer_posts": [
      {
        "snippets": [
          "import subprocess\n\nsubprocess.check_call(['/my/file/path/programname.sh', 'arg1', 'arg2', arg3])\n"
        ], 
        "score": 19, 
        "id": 17243334, 
        "rank": 0
      }
    ], 
    "title": "Python: subprocess and running a bash script with multiple arguments"
  }, 
  {
    "accepted_answer_post_id": 27106387, 
    "id": 27106335, 
    "answer_posts": [
      {
        "snippets": [
          ">>> d = datetime.datetime.now()\n>>> d\ndatetime.datetime(2014, 11, 24, 22, 47, 3, 80000)\n>>> d.weekday()  # Monday\n0\n>>> (d.weekday() + 1) % 7\n1\n", 
          ">>> d.isoweekday() % 7\n1\n"
        ], 
        "score": 11, 
        "id": 27106387, 
        "rank": 0
      }
    ], 
    "title": "Python retrieve DayOfWeek as integer"
  }, 
  {
    "accepted_answer_post_id": 20229208, 
    "id": 20229071, 
    "answer_posts": [
      {
        "snippets": [
          "sorted(dct, key=lambda k: (-dct[k], k))\n", 
          ">>> dct = {'a': 5, 'c': 7, 'b': 2, 'e': 5, 'd': 5}\n>>> sorted(dct, key=lambda k: (-dct[k], k))\n['c', 'a', 'd', 'e', 'b']\n", 
          ">>> import timeit\n>>> timeit.timeit(\"sorted(dct, key=lambda k: (-dct[k], k))\", 'from __main__ import dct')\n4.741436004638672\n>>> timeit.timeit(\"map(operator.itemgetter(0), sorted(dct.items(), key=lambda i: (-i[1], i[0])))\", 'from __main__ import dct; import operator')\n7.489126920700073\n>>> timeit.timeit(\"map(operator.itemgetter(0), sorted(sorted(dct.iteritems()), key=operator.itemgetter(1), reverse=True))\", 'from __main__ import dct; import operator')\n10.01669192314148\n"
        ], 
        "score": 4, 
        "id": 20229138, 
        "rank": 0
      }
    ], 
    "title": "Sorting a dictionary by its value, and then its key if values are equal then outputting a list"
  }, 
  {
    "accepted_answer_post_id": 33947673, 
    "id": 33947632, 
    "answer_posts": [
      {
        "snippets": [
          ">>> from math import log10, floor\n>>> lst = [34523, 55, 65, 2]\n>>> [floor(x / (10**floor(log10(x)))) for x in lst]\n[3, 5, 6, 2]\n", 
          ">>> [x // (10**floor(log10(x))) for x in lst]\n[3, 5, 6, 2]\n", 
          ">>> [int(str(x)[0]) for x in lst]\n[3, 5, 6, 2]\n"
        ], 
        "score": 12, 
        "id": 33947673, 
        "rank": 0
      }
    ], 
    "title": "Get most significant digit in python"
  }, 
  {
    "accepted_answer_post_id": 15779001, 
    "id": 15778963, 
    "answer_posts": [
      {
        "snippets": [
          "import sys\nsys.path.insert(0, '/usr/local/lib/python2.6/dist-packages')\n"
        ], 
        "score": 2, 
        "id": 15779001, 
        "rank": 0
      }
    ], 
    "title": "Package path for Python"
  }, 
  {
    "accepted_answer_post_id": 24811478, 
    "id": 24810526, 
    "answer_posts": [
      {
        "snippets": [
          "isY = lambda x:int(x=='Y')\ncountRiskFactors = lambda row: isY(row['Smoker']) + isY(row['Diabetes']) + int(row[\"Age\"]>45)\n\ndf['Risk_Factors'] = df.apply(countRiskFactors,axis=1)\n", 
          "   Person_ID  Age Smoker Diabetes  Risk_Factors\n0          1   30      Y        N             1\n1          2   45      N        N             0\n2          3   27      N        Y             1\n3          4   18      Y        Y             2\n4          5   55      Y        Y             3\n"
        ], 
        "score": 5, 
        "id": 24811478, 
        "rank": 0
      }
    ], 
    "title": "COUNTIF in pandas python over multiple columns with multiple conditions"
  }, 
  {
    "accepted_answer_post_id": 35639344, 
    "id": 35638377, 
    "answer_posts": [
      {
        "snippets": [
          "import pandas as pd\n\ndf = pd.DataFrame(range(4),index=['Andrew', 'Bob', 'Calvin','yosef'])\n\ndf.ix[[x for x in df.index if x=='Bob']]\n\ndf.ix[[x for x in df.index if x[0]=='A']]\n\ndf.ix[[x for x in df.index if x.islower()]]\n"
        ], 
        "score": 3, 
        "id": 35639344, 
        "rank": 0
      }
    ], 
    "title": "Pandas - filter and regex search the index of DataFrame"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 34309151, 
    "answer_posts": [
      {
        "snippets": [
          "client = boto3.client(SERVICE_NAME, AWS_REGION)\n", 
          "client = boto3('redshift', 'us-west-1')\ncluster_list = client.describe_clusters()\n"
        ], 
        "score": 0, 
        "id": 34310249, 
        "rank": 0
      }
    ], 
    "title": "Get list clusters Amazon Redshift using Python with Boto3"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 23426086, 
    "answer_posts": [
      {
        "snippets": [
          "class menu:\n    def __init__(self, master):\n        self.master = master\n        self.button_1 = Button(self.master, text = 'test', command = self.correct)\n        self.button_1.pack()\n    def correct(self):\n        self.button_1.config(state = DISABLED)\n"
        ], 
        "score": 1, 
        "id": 23426140, 
        "rank": 0
      }
    ], 
    "title": "Python Tkinter, how to disable a button in a class?"
  }, 
  {
    "accepted_answer_post_id": 12342221, 
    "id": 12342207, 
    "answer_posts": [
      {
        "snippets": [
          "from collections import Counter\nwith open(file) as f:\n    c = Counter()\n    for x in f:\n        c += Counter(x.strip())\n", 
          "c = Counter(f.read().strip())\n", 
          ">>> c = Counter()\n>>> c += Counter('aaabbbcccddd eee fff ggg')\n>>> c\nCounter({'a': 3, ' ': 3, 'c': 3, 'b': 3, 'e': 3, 'd': 3, 'g': 3, 'f': 3})\n>>> c += Counter('aaabbbccc')\nCounter({'a': 6, 'c': 6, 'b': 6, ' ': 3, 'e': 3, 'd': 3, 'g': 3, 'f': 3})\n", 
          "from string import ascii_lowercase     # ascii_lowercase =='abcdefghijklmnopqrstuvwxyz'\nwith open(file) as f:\n    text = f.read().strip()\n    dic = {}\n    for x in ascii_lowercase:\n        dic[x] = text.count(x)\n"
        ], 
        "score": 13, 
        "id": 12342221, 
        "rank": 0
      }
    ], 
    "title": "Count frequency of letters in a text file"
  }, 
  {
    "accepted_answer_post_id": 25170040, 
    "id": 25169851, 
    "answer_posts": [
      {
        "snippets": [
          "import pandas as pd\ndf = pd.read_table('data', sep='\\s{2,}')\n# Make sure the index is a DatetimeIndex\ndf.index = pd.DatetimeIndex(df.index)\n\n# discard rows whose time falls between 16:00 and 18:00\ndf = df.between_time('18:00', '16:00', include_start=True, include_end=True)\n\nproxy = df.index + pd.DateOffset(hours=6)\nresult = df.groupby(proxy.date).agg(\n    {'Open': 'first', 'High': 'max', 'Low': 'min', 'Close': 'last'})\nresult = result.reindex(columns=['Open','High','Low','Close'])\nprint(result)\n", 
          "               Open    High      Low    Close\n2005-09-07  1230.25  1235.5  1229.25  1234.25\n", 
          "In [112]: proxy = pd.DatetimeIndex(df.index) + pd.DateOffset(hours=6)\n", 
          "In [116]: pd.Series(proxy.date, index=df.index)\nOut[116]: \nDateTime\n2005-09-06 18:00:00    2005-09-07\n2005-09-06 18:01:00    2005-09-07\n2005-09-07 15:59:00    2005-09-07\n2005-09-07 16:00:00    2005-09-07\ndtype: object\n"
        ], 
        "score": 2, 
        "id": 25170040, 
        "rank": 0
      }
    ], 
    "title": "Custom time series resampling in Pandas"
  }, 
  {
    "accepted_answer_post_id": 19412156, 
    "id": 19412029, 
    "answer_posts": [
      {
        "snippets": [
          "from socket import *\nclass Client(object):\n\n    def __init__(self):\n\n        self.clientSocket = socket(AF_INET, SOCK_STREAM)\n\n    def connect(self, addr):\n\n        self.clientSocket.connect(addr)\n\n    def _sendFile(self, path):\n\n        sendfile = open(path, 'rb')\n        data = sendfile.read()\n\n        self._con.sendall(encode_length(len(data))) # Send the length as a fixed size message\n        self._con.sendall(data)\n\n\n        # Get Acknowledgement\n        self._con.recv(1) # Just 1 byte\n\n>>> client = Client()\n>>> client.connect((\"192.168.0.102\", 21000))\n>>> client._sendFile(os.path.abspath(\"file_1.txt\")) # If this file is in your current directory, you may just use \"file_1.txt\"\n", 
          "def encode_length(l):\n\n    #Make it 4 bytes long\n    l = str(l)\n    while len(l) < 4:\n        l = \"0\"+l \n    return l\n\n# Example of using\n>>> encode_length(4)\n'0004'\n>>> encode_length(44)\n'0044'\n>>> encode_length(444)\n'0444'\n>>> encode_length(4444)\n'4444'\n", 
          "class someclass:\n    def __init__(self):\n        self.var = 10\n    def get(self):\n        return self.var\n\n>>> c = someclass()\n>>> c.get()\n10\n>>> c.var = 20\n>>> c.get()\n20\n>>> someclass.get(c)\n20\n>>>\n", 
          "class someclass:\n    def __init__(self):\n        self.var = 10\n    def get(self):\n        return 10 # Raises an error\n    @classmethod\n    def get2(self):\n        return 10 # Returns 10!\n"
        ], 
        "score": 3, 
        "id": 19412156, 
        "rank": 0
      }
    ], 
    "title": "Transfering File over TCP using Python"
  }, 
  {
    "accepted_answer_post_id": 26566982, 
    "id": 26566942, 
    "answer_posts": [
      {
        "snippets": [
          "lines = [tuple(row) for row in csv.reader(yourfile)]\n", 
          "for t in lines:\n    print(t[1])\n"
        ], 
        "score": 2, 
        "id": 26566982, 
        "rank": 0
      }
    ], 
    "title": "Access elements of a comma separated list with tuples in Python"
  }, 
  {
    "accepted_answer_post_id": 8127697, 
    "id": 8126151, 
    "answer_posts": [
      {
        "snippets": [
          "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\n\nnp.random.seed(101)\nx = np.random.random(100)\ny = np.random.random(100)\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nimForEngland = ax.scatter(x,y)\nfig.savefig('beforeclip.png')\nimForWales = ax.scatter(x,y)\nengland = patches.Circle((.75,.75),radius=.25,fc='none')\nwales = patches.Circle((.25,.25),radius=.25,fc='none')\nax.add_patch(england)\nax.add_patch(wales)\nimForEngland.set_clip_path(england)\nimForWales.set_clip_path(wales)\n\nfig.savefig('afterclip.png')\n"
        ], 
        "score": 6, 
        "id": 8127697, 
        "rank": 0
      }
    ], 
    "title": "Clip an image using several patches in matplotlib"
  }, 
  {
    "accepted_answer_post_id": 18198383, 
    "id": 18197008, 
    "answer_posts": [
      {
        "snippets": [
          "--+----+----+---\n x-hb  x   x+hb \n", 
          "(f(x+hf)*(1+hb/hf) + f(x)(2+hb/hf+hf/hb) + f(x-hb)(1+hf/hb)) / (2*hf*hb)\n", 
          "def laplacian(x, y):\n    x = np.asarray(x)\n    y = np.asarray(y)\n    hb = x[1:-1] - x[:-2]\n    hf = x[2:] - x[1:-1]\n    y_hb = y[:-2]\n    y_hf = y[2:]\n    hb_hf = hb / hf\n    hf_hb = hf / hb\n    return (y_hf*(1+hb_hf) - y[1:-1]*(2+hb_hf+hf_hb) +\n            y_hb*(1+hf_hb)) / 2 / hb / hf\n\n>>> laplacian(range(7), [0,0,0,4,8,8,8])\narray([ 0.,  4.,  0., -4.,  0.])\n"
        ], 
        "score": 1, 
        "id": 18198383, 
        "rank": 0
      }
    ], 
    "title": "Take laplacian of unevenly sampled data in python"
  }, 
  {
    "accepted_answer_post_id": 10906025, 
    "id": 10905758, 
    "answer_posts": [
      {
        "snippets": [
          "from collections import defaultdict\n\ndataset = [('121', set(['NY'])), ('132', set(['CA', 'NY'])), ('198', set(['NY'])), ('676', set(['NY'])), ('89', set(['NY', 'CA']))]\noutput = defaultdict(list)\nfor value, key in dataset:\n    output[frozenset(key)].append(value)\n", 
          "from collections import defaultdict\n\ndataset = [('121', set(['NY'])), ('132', set(['CA', 'NY'])), ('198', set(['NY'])), ('676', set(['NY'])), ('89', set(['NY', 'CA']))]\noutput = defaultdict(list)\nfor value, key in dataset:\n    output[tuple(sorted(key))].append(value)\n", 
          ">>> s,t = set([736, 9753, 7126, 7907, 3350]), set([3350, 7907, 7126, 9753, 736])\n>>> s == t\nTrue\n>>> tuple(s) == tuple(t)\nFalse\n>>> frozenset(s) == frozenset(t)\nTrue\n>>> hash(tuple(s)) == hash(tuple(t))\nFalse\n>>> hash(frozenset(s)) == hash(frozenset(t))\nTrue\n"
        ], 
        "score": 5, 
        "id": 10906025, 
        "rank": 0
      }
    ], 
    "title": "How do I convert a list of tuples with sets to a dictionary?"
  }, 
  {
    "accepted_answer_post_id": 7458896, 
    "id": 7456670, 
    "answer_posts": [
      {
        "snippets": [
          "self.response.out.write(\"\"\"\n<form name=\"search_form\" action=\"/searchhandler\" method=\"GET\"><br />\n<input type=\"text\" name=\"search_string\" size=40>\n<input type=\"submit\" value=\"search tags\">\n</form>\"\"\")\n", 
          "class SearchHandler(webapp.RequestHandler):\n    def get(self):\n        search_string = self.request.get(\"search_string\", None)\n        if not search_string:\n            raise Exception(\"Missing Param\")\n        tags = [t.strip() for t in search_string.split(\",\")]\n        if tags:\n            query = Main.all()\n            query.filter(\"tag_list IN\", tags)\n            query.order(\"-total_value\")\n\n        # Handle your results\n"
        ], 
        "score": 2, 
        "id": 7458896, 
        "rank": 0
      }
    ], 
    "title": "How do I add search parameters to search page url?"
  }, 
  {
    "accepted_answer_post_id": 2191740, 
    "id": 2191687, 
    "answer_posts": [
      {
        "snippets": [
          "DiGraph.out_edges(nbunch=None, data=False)\n", 
          "graph.out_edges([my_node])\n"
        ], 
        "score": 4, 
        "id": 2191740, 
        "rank": 0
      }
    ], 
    "title": "Is there any function that returns the out edges of a node?"
  }, 
  {
    "accepted_answer_post_id": 20448443, 
    "id": 20448435, 
    "answer_posts": [
      {
        "snippets": [
          "animalName = input(\">\")\n", 
          "animalName = Marmadukke #Not defined.\n", 
          "try:    \n        animalName = input(\">\")\nexcept:    \n    print(\"Invalid input!\")\n", 
          "animals = {}\n\nanimals['Marmaduke'] = Cat(\"Marmaduke\",True)\nanimals['Timmy'] = Cat(\"Timmy\",False)\nanimals['Cerberus'] = Dog(\"Cerberus\",True)\nanimals['Max'] = Dog(\"Max\",False)\n", 
          "animalName = animals[raw_input(\">\")]\n"
        ], 
        "score": 1, 
        "id": 20448481, 
        "rank": 0
      }
    ], 
    "title": "How do I catch NameError in Python?"
  }, 
  {
    "accepted_answer_post_id": 11279626, 
    "id": 11279589, 
    "answer_posts": [
      {
        "snippets": [
          "xml=\"\"\"<bookstore>\n    <book category=\"COOKING\">\n        <title lang=\"english\">Everyday Italian</title>\n        <author>Giada De Laurentiis</author>\n        <year>2005</year>\n        <price>300.00</price>\n    </book>\n\n    <book category=\"CHILDREN\">\n        <title lang=\"english\">Harry Potter</title>\n        <author>J K. Rowling </author>\n        <year>2005</year>\n        <price>625.00</price>\n    </book>\n</bookstore>\n\"\"\"\nfrom lxml import etree\nroot = etree.fromstring(xml).getroot()\nroot.xpath('/bookstore/book/*/text()')\n# ['Everyday Italian', 'Giada De Laurentiis', '2005', '300.00', 'Harry Potter', 'J K. Rowling ', '2005', '625.00']\n"
        ], 
        "score": 1, 
        "id": 11279704, 
        "rank": 0
      }
    ], 
    "title": "extract text from xml documents in python"
  }, 
  {
    "accepted_answer_post_id": 280238, 
    "id": 280207, 
    "answer_posts": [
      {
        "snippets": [
          "self.currentEmailParsedInstance.get_payload()\n", 
          ">>> parser = email.parser.Parser()\n>>> message = parser.parse(open('/home/vinko/jlm.txt','r'))\n>>> message.is_multipart()\nTrue\n>>> parts = message.get_payload()\n>>> len(parts)\n2\n>>> parts[0].get_content_type()\n'text/plain'\n>>> parts[1].get_content_type()\n'message/rfc822'\n>>> parts[0].get_payload()\n'Message Text'\n"
        ], 
        "score": 4, 
        "id": 280238, 
        "rank": 0
      }
    ], 
    "title": "email body from a parsed email object in jython"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 8556589, 
    "answer_posts": [
      {
        "snippets": [
          "from pgylet.gl import *\n", 
          "#These arguments are x, y and z respectively. This scales your window.\nglScalef(2.0, 2.0, 2.0)\n", 
          "def on_draw(self):\n        self.clear() #clears the screen\n        #The following two lines will change how textures are scaled.\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST) \n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST)\n        self.label.draw() #blits the label to the screen\n"
        ], 
        "score": 4, 
        "id": 11183462, 
        "rank": 0
      }
    ], 
    "title": "Scale Resolution in Pyglet"
  }, 
  {
    "accepted_answer_post_id": 1249740, 
    "id": 1249670, 
    "answer_posts": [
      {
        "snippets": [
          "clean = open('thefile.txt').read().replace('\\n', '')\n", 
          "clean = ''.join(l[:-1] for l in open('thefile.txt'))\n", 
          "$ python -mtimeit -s\"import re\" \"re.sub('\\n','',open('AV1611Bible.txt').read())\"\n10 loops, best of 3: 53.9 msec per loop\n$ python -mtimeit \"''.join(l[:-1] for l in open('AV1611Bible.txt'))\"\n10 loops, best of 3: 51.3 msec per loop\n$ python -mtimeit \"open('AV1611Bible.txt').read().replace('\\n', '')\"\n10 loops, best of 3: 35.1 msec per loop\n"
        ], 
        "score": 24, 
        "id": 1249740, 
        "rank": 0
      }
    ], 
    "title": "Simple python/Regex problem: Removing all new lines from a file"
  }, 
  {
    "accepted_answer_post_id": 40003443, 
    "id": 40003289, 
    "answer_posts": [
      {
        "snippets": [
          "@api.model\ndef create(self, vals):\n    vals['sequence_id'] = self.env['ir.sequence'].get('comben.cashadvance')\n    return super(cashadvance, self).create(vals)\n", 
          "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<openerp>\n    <data noupdate=\"1\">\n        <record id=\"cashadvance_seq\" model=\"ir.sequence\">\n          <field name=\"name\">No_PD</field>\n          <field name=\"padding\">3</field>\n          <field name=\"code\">comben.cashadvance</field>\n        </record>\n    </data>\n</openerp>\n"
        ], 
        "score": 2, 
        "id": 40003443, 
        "rank": 0
      }
    ], 
    "title": "how to create auto increment field in odoo 9"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 30154377, 
    "answer_posts": [
      {
        "snippets": [
          "stock = 'spam'\n\nrows = table.find_all('tr', recursive=False)\n\nfor row in rows:\n    cols = row.findAll('td', recursive=False)\n    col1 = [ele.text.strip().replace(',','') for ele in cols]\n\n    account = col1[0:1]\n    period1 = col1[2:3]\n    period2 = col1[3:4]\n    period3 = col1[4:5]\n\n    record = (stock, account,period1,period3,period3)\n\n    print record\n", 
          "('spam', [''], ['$170910000'], ['$108249000'], ['$108249000'])\n", 
          "account, whatever, period1, period2, period3 = col\n"
        ], 
        "score": 1, 
        "id": 30154589, 
        "rank": 0
      }
    ], 
    "title": "Extract HTML table using Python BeautifulSoup"
  }, 
  {
    "accepted_answer_post_id": 24024066, 
    "id": 24023963, 
    "answer_posts": [
      {
        "snippets": [
          "sql = '''INSERT INTO scr(scr, close_date, vendor, application, dev, tester, release) VALUES (?, ?, ?, ?, ?, ?, ?)'''\nparams = (issueId, closeDate, vendor, application, assignedDev, assignedTester, enterpriseRelease)\n\ntry:\n    cursor.execute(sql, params)\n    db.commit()\nexcept Exception as err:\n    print(\"\\nFailed to insert row into table scr:\\n\" + str(sql))\n    print(Exception, err)\n"
        ], 
        "score": 2, 
        "id": 24024066, 
        "rank": 0
      }
    ], 
    "title": "Error when inserting rows into SQLite with Python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 14521414, 
    "answer_posts": [
      {
        "snippets": [
          "import os\nimport win32com.client\n\nproc_name = 'MyProgram.exe'\nmy_pid = os.getpid()\n\nwmi = win32com.client.GetObject('winmgmts:')\nall_procs = wmi.InstancesOf('Win32_Process')\n\nfor proc in all_procs:\n   if proc.Properties_(\"Name\").Value == proc_name:\n        proc_pid = proc.Properties_(\"ProcessID\").Value\n        if proc_pid != my_pid:\n            print \"killed my loader %s\\n\" % (proc_pid)\n            os.kill(proc_pid, 9)\n"
        ], 
        "score": 2, 
        "id": 17382805, 
        "rank": 0
      }
    ], 
    "title": "Python - Two processes after compiling?"
  }, 
  {
    "accepted_answer_post_id": 29705489, 
    "id": 29703942, 
    "answer_posts": [
      {
        "snippets": [
          "print \"Removing empty folder:\", path\n", 
          "print \"Removing empty folder:\", repr(path)\n"
        ], 
        "score": 1, 
        "id": 29705489, 
        "rank": 0
      }
    ], 
    "title": "Trying to delete folders with Unicode names"
  }, 
  {
    "accepted_answer_post_id": 16946553, 
    "id": 16946435, 
    "answer_posts": [
      {
        "snippets": [
          "sorted(l, key=lambda x: int(re.sub('\\D', '', x)))\n", 
          "In [1]: import re\n\nIn [2]: l = ['asdas2', 'asdas1', 'asds3ssd']\n\nIn [3]: sorted(l, key=lambda x: int(re.sub('\\D', '', x)))\nOut[3]: ['asdas1', 'asdas2', 'asds3ssd']\n"
        ], 
        "score": 5, 
        "id": 16946553, 
        "rank": 0
      }
    ], 
    "title": "sort string by number inside"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 27401779, 
    "answer_posts": [
      {
        "snippets": [
          "Entity.objects.using('context1').all()\nEntity.objects.using('context2').all()\n", 
          "DATABASES = {\n    'context1': {\n        'NAME': 'context1',\n        'ENGINE': 'db.engine.to.use',\n        'USER': 'xxx',\n        'PASSWORD': 'xxx'\n    },\n    'context2': {\n        'NAME': 'context2',\n        'ENGINE': 'db.engine.to.use',\n        'USER': 'xxx',\n        'PASSWORD': 'xxx'\n    }\n}\n"
        ], 
        "score": 1, 
        "id": 27402582, 
        "rank": 0
      }
    ], 
    "title": "dynamically set database based on request in django"
  }, 
  {
    "accepted_answer_post_id": 14166301, 
    "id": 14166132, 
    "answer_posts": [
      {
        "snippets": [
          "for subdir, dirs, files in os.walk(rootdir):\n    for file in files:\n        output=[]\n        with open(file, 'r') as inF:\n            for line in inF:\n                output.append(line)\n                if 'criteria' in line: break\n        f=open(file, 'a')\n        Lorem_list=['Lorem Ipsum','Lorem Ipsum','Lorem Ipsum']\n        #The '\\n' may look strange, but I am using your previous syntax.\n        #This also will result in a blank line. I would suggest revising the\n        #way you place text to follow the (x+'\\n') format.\n        [f.write(x) for x in output]\n        [f.write('\\n      '+x) for x in Lorem_list]\n        f.close()\n", 
          "Lorem_list=['Lorem Ipsum','Lorem Ipsum','Lorem Ipsum']\n[f.write('\\n      '+x) for x in Lorem_list]\n", 
          "    f.write(\"\\n      Lorem Ipsum\")\n    f.write(\"\\n      Lorem Ipsum\")\n    f.write(\"\\n      Lorem Ipsum\")\n"
        ], 
        "score": 1, 
        "id": 14166301, 
        "rank": 0
      }
    ], 
    "title": "Remove multiple lines from a text file after a specific string, then replace with new text"
  }, 
  {
    "accepted_answer_post_id": 1223303, 
    "id": 1223289, 
    "answer_posts": [
      {
        "snippets": [
          "import os\nos.write(fd, os.linesep)\n"
        ], 
        "score": 40, 
        "id": 1223303, 
        "rank": 0
      }
    ], 
    "title": "How to write native newline character to a file descriptor in Python?"
  }, 
  {
    "accepted_answer_post_id": 2791112, 
    "id": 2776794, 
    "answer_posts": [
      {
        "snippets": [
          "import pycurl\nc = pycurl.Curl()\nc.setopt(pycurl.URL, \"http://api.website.com\")\nc.setopt(pycurl.POST, 1)\nc.setopt(pycurl.POSTFIELDS, \"request=%s\" % wrapper)\nimport StringIO\nb = StringIO.StringIO()\nc.setopt(pycurl.WRITEFUNCTION, b.write)\nc.perform()\nc.close()\ndata = b.getvalue()\n"
        ], 
        "score": 2, 
        "id": 2776815, 
        "rank": 0
      }
    ], 
    "title": "Help with cURL in Python"
  }, 
  {
    "accepted_answer_post_id": 18676479, 
    "id": 18676293, 
    "answer_posts": [
      {
        "snippets": [
          "with open('data.txt') as f:\n    lst = f.read().split()\n", 
          "lst = [s for s in lst if not s.startswith('-')]\n", 
          "lst3 = [lst[i:i+3] for i in range(0, len(lst), 3)]\n", 
          "for item in lst3:\n    self.city, self.time, self.local = item\n"
        ], 
        "score": 1, 
        "id": 18676371, 
        "rank": 0
      }
    ], 
    "title": "Python - list search"
  }, 
  {
    "accepted_answer_post_id": 32070352, 
    "id": 32069628, 
    "answer_posts": [
      {
        "snippets": [
          "pip install netifaces\n", 
          "(stackoverflow)[root@joeyoung.io stackoverflow]# python\n\n>>> import netifaces\n>>> netifaces.interfaces()\n['lo', 'eth0', 'eth0:0']\n", 
          ">>> netifaces.ifaddresses('eth0')\n{17: [{'broadcast': 'ff:ff:ff:ff:ff:ff', 'addr': '52:54:00:0d:4d:36'}], 2: [{'broadcast': '159.107.29.255', 'netmask': '255.255.254.0', 'addr': '159.107.28.65'}]}\n", 
          ">>> netifaces.ifaddresses('eth0')[netifaces.AF_INET]\n[{'broadcast': '159.107.29.255', 'netmask': '255.255.254.0', 'addr': '159.107.28.65'}]\n", 
          ">>> netifaces.ifaddresses('eth0')[netifaces.AF_INET][0]['addr']\n'159.107.28.65'\n", 
          ">>> netifaces.ifaddresses('eth0:0')\n{2: [{'broadcast': '192.168.13.255', 'netmask': '255.255.255.0', 'addr': '192.168.13.2'}]}\n>>> netifaces.ifaddresses('eth0:0')[netifaces.AF_INET]\n[{'broadcast': '192.168.13.255', 'netmask': '255.255.255.0', 'addr': '192.168.13.2'}]\n>>> netifaces.ifaddresses('eth0:0')[netifaces.AF_INET][0]['addr']\n'192.168.13.2'\n"
        ], 
        "score": 1, 
        "id": 32070352, 
        "rank": 0
      }
    ], 
    "title": "When oracle virtualbox are set, How to get local ip address in python"
  }, 
  {
    "accepted_answer_post_id": 18473415, 
    "id": 18473377, 
    "answer_posts": [
      {
        "snippets": [
          "from bs4 import BeautifulSoup\n\n\ntext = \"<strong><p> hello </p><p> world </p></strong>\"\n\nsoup = BeautifulSoup(text)\nprint soup.get_text()  # prints \" hello  world \"\n", 
          "import nltk\n\n\ntext = \"<strong><p> hello </p><p> world </p></strong>\"\nprint nltk.clean_html(text)  # prints \"hello world\"\n"
        ], 
        "score": 3, 
        "id": 18473415, 
        "rank": 0
      }
    ], 
    "title": "Python, get text value of an html document"
  }, 
  {
    "accepted_answer_post_id": 26186178, 
    "id": 26186033, 
    "answer_posts": [
      {
        "snippets": [
          "df.to_csv('test.csv', index=False, quoting=csv.QUOTE_NONE)\n", 
          "import numpy as np\nimport pandas as pd\nimport csv\ndf = pd.DataFrame({\n                'A': ['group1', 'group2', 'group3'],\n                'B': ['foo', 'foo', 'foo'] })\ndf['Status'] = '<span style=\"color: #00CD00\">Active</span>'\ndf.to_csv('test.csv', index=False, quoting=csv.QUOTE_NONE)\n", 
          "$ cat test.csv\nA,B,Status\ngroup1,foo,<span style=\"color: #00CD00\">Active</span>\ngroup2,foo,<span style=\"color: #00CD00\">Active</span>\ngroup3,foo,<span style=\"color: #00CD00\">Active</span>\n"
        ], 
        "score": 8, 
        "id": 26186178, 
        "rank": 0
      }
    ], 
    "title": "Pandas Dataframe CSV export, how to prevent additional double-quote characters"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 23016700, 
    "answer_posts": [
      {
        "snippets": [
          "df.set_index(['a', 'b'], inplace=True)\n", 
          "df.ix[(0, 1)]\n"
        ], 
        "score": 2, 
        "id": 23017265, 
        "rank": 0
      }
    ], 
    "title": "Pandas, fast access by (multi)column value"
  }, 
  {
    "accepted_answer_post_id": 7733047, 
    "id": 7733033, 
    "answer_posts": [
      {
        "snippets": [
          ">>> a = [20,3]\n>>> [a[0]] * a[1]\n[20, 20, 20]\n", 
          "float(20*3 + 40*7 + 50*2) / (3 + 7 + 2)\n", 
          ">>> xs = [[20,3], [40,7], [50,2]]\n>>> float(sum(x[0] * x[1] for x in xs)) / sum(x[1] for x in xs)\n36.666666666666664\n"
        ], 
        "score": 8, 
        "id": 7733047, 
        "rank": 0
      }
    ], 
    "title": "Expanding tuple into number repeated X times in a list (python)"
  }, 
  {
    "accepted_answer_post_id": 30092291, 
    "id": 30092226, 
    "answer_posts": [], 
    "title": "How to calculate CRC32 with Python to match online results?"
  }, 
  {
    "accepted_answer_post_id": 29519357, 
    "id": 29518758, 
    "answer_posts": [
      {
        "snippets": [
          "def save_currencies(_fetch_currencies, filename):   \n    with open(\"path/to/folder/{}\".format(filename), 'wb') as my_csv:\n       csv_writer = csv.writer(my_csv, delimiter=',')\n       csv_writer.writerow([\"code\",\"name\"])  \n       for k,v in _fetch_currencies.iteritems(): \n          csv_writer.writerow([k,v])\n"
        ], 
        "score": 1, 
        "id": 29519044, 
        "rank": 0
      }
    ], 
    "title": "How to save data to a specific folder and add header line in csv file"
  }, 
  {
    "accepted_answer_post_id": 817095, 
    "id": 816887, 
    "answer_posts": [
      {
        "snippets": [
          "import wx, wx.calendar\n\n\nclass FoldableWindowContainer(wx.Panel):\n    def __init__(self, parent, left, right):\n        wx.Panel.__init__(self, parent)\n\n        sizer = wx.BoxSizer(wx.HORIZONTAL)\n        self.SetSizer(sizer)\n        self.splitter = wx.SplitterWindow(self, style=wx.SP_LIVE_UPDATE)\n        left.Reparent(self.splitter)\n        right.Reparent(self.splitter)\n        self.left = left\n        self.right = right\n        self.splitter.SplitVertically(self.left, self.right)\n        self.splitter.SetMinimumPaneSize(50)\n        self.sash_pos = self.splitter.SashPosition\n        sizer.Add(self.splitter, 1, wx.EXPAND)\n\n        fold_button = wx.Button(self, size=(10, -1))\n        fold_button.Bind(wx.EVT_BUTTON, self.On_FoldToggle)\n        sizer.Add(fold_button, 0, wx.EXPAND)\n\n    def On_FoldToggle(self, event):\n        if self.splitter.IsSplit():\n            self.sash_pos = self.splitter.SashPosition\n            self.splitter.Unsplit()\n        else:\n            self.splitter.SplitVertically(self.left, self.right, self.sash_pos)\n\n\nclass FoldTest(wx.Frame):\n    def __init__(self):\n        wx.Frame.__init__(self, None)\n\n        left = wx.Panel(self, style=wx.BORDER_SUNKEN)\n        right = wx.Panel(self, style=wx.BORDER_SUNKEN)\n\n        left_sizer = wx.BoxSizer(wx.VERTICAL)\n        left.SetSizer(left_sizer)\n        left_sizer.Add(wx.calendar.CalendarCtrl(left), 1, wx.EXPAND | wx.ALL, 5)\n        left_sizer.Add(wx.Button(left, label=\"Act\"), 0, wx.EXPAND | wx.ALL, 5)\n\n        right_sizer = wx.BoxSizer(wx.VERTICAL)\n        right.SetSizer(right_sizer)\n        right_sizer.Add(\n            wx.StaticText(right, label=\"Fold panel\", style=wx.BORDER_RAISED),\n            1, wx.EXPAND | wx.ALL, 5\n        )\n\n        FoldableWindowContainer(self, left, right)\n\n\napp = wx.PySimpleApp()\napp.TopWindow = FoldTest()\napp.TopWindow.Show()\napp.MainLoop()\n"
        ], 
        "score": 3, 
        "id": 817095, 
        "rank": 0
      }
    ], 
    "title": "wxPython: A foldable panel widget"
  }, 
  {
    "accepted_answer_post_id": 18182899, 
    "id": 18169794, 
    "answer_posts": [
      {
        "snippets": [
          "    #!usr/bin/env/ python\n\n    #Regexp library\n    import re\n\n    #Map\n    #This function returns a new array containing\n    #the elements after that have been modified by whatever function we passed in.\n    def mapper(function, sequence):\n\n        #List to store the results of the map operation\n        result = []\n\n        #Iterate over each item in sequence, append the values to the results list\n        #after they have been modified by the \"function\" supplied as an argument in the\n        #mapper function call.\n        for item in sequence:\n            result.append(function(item))\n\n        return result\n\n    #Reduce\n    #The purpose of the reduce function is to go through an array, and combine the items \n    #according to a specified function - this specified function should combine an element \n    #with a base value\n    def reducer(function, sequence, base_value):\n\n        #Need to get an base value to serve as the starting point for the construction of \n        #the result\n        #I will assume one is given, but in most cases you should include extra validation \n        #here to either ensure one is given, or some sensible default is chosen\n\n        #Initialize our accumulative value object with the base value\n        accum_value = base_value\n\n        #Iterate through the sequence items, applying the \"function\" provided, and \n        #storing the results in the accum_value object\n        for item in sequence:\n            accum_value = function(item, accum_value)\n\n        return accum_value\n\n    #With these functions it should be sufficient to address your problem, what remains \n    #is simply to get the data from the text files, and keep track of the lines in \n    #which words appear\n    if __name__ == 'main':\n\n        word_list_file = 'FILEPATH GOES HERE'\n\n        #Read in a file containing the words that will be searched in the text file \n        #(assumes words are given as a comma separated list)\n        infile = open(word_list_file, 'rt')    #Open file\n        content = infile.read()     #read the whole file as a single string\n        word_list = content.split(',')  #split the string into an array of words\n        infile.close()\n\n        target_text_file = 'FILEPATH GOES HERE'\n\n        #Read in the text to analyze\n        infile = open(target_text_file, 'rt')   #Open file\n        target_text_lines = infile.readlines()    #Read the whole file as an array of lines\n        infile.close()\n\n        #With the data loaded, the overall strategy will be to loop over the text lines, and \n        #we will use the map function to loop over the the word_list and see if they are in \n        #the current text file line\n\n        #First, define the my_mapper function that will process your data, and will be passed to\n        #the map function\n        def my_mapper(item):\n\n            #Split the current sentence into words\n            #Will split on any non alpha-numeric character. This strategy can be revised \n            #to find matches to a regular expression pattern based on the words in the \n            #words list. Either way, make sure you choose a sensible strategy to do this.\n            current_line_words = re.split(r'\\W+', target_text_lines[k])\n\n            #lowercase the words\n            current_line_words = [word.lower() for word in current_line_words]\n\n            #Check if the current item (word) is in the current_line_words list, and if so,\n            #return the word and the line number\n            if item in current_line_words:\n                return [item, k+1]    #Return k+1 because k begins at 0, but I assume line\n                                      #counting begins with 1?\n            else:\n                return []   #Technically, this does not need to be added, it can simply \n                            #return None by default, but that requires manually handling iterator \n                            #objects so the loop doesn't crash when seeing the None values, \n                            #and I am being lazy :D\n\n        #With the mapper function established, we can proceed to  loop over the text lines of the \n        #array, and use our map function to process the lines against the list of words.\n\n        #This array will store the results of the map operation\n        map_output = []\n\n        #Loop over text file lines, use mapper to find which words are in which lines, store \n        #in map_output list. This is the exciting stuff!\n        for k in range(len(target_text_lines)):\n            map_output.extend(mapper(my_mapper, word_list))\n\n        #At this point, we should have a list of lists containing the words and the lines they \n        #appeared in, and it should look like, [['word1', 1] ... ['word25': 5] ... [] ...]\n        #As you can see, the post-map array will have an entry for each word that appeared in \n        #each line, and if a particular word did not appear in a particular line, there will be a\n        #empty list instead.\n\n        #Now all that remains is to summarize our data, and that is what the reduce function is \n        #for. We will iterate over the map_output list, and collect the words and which lines \n        #they appear at in an object that will have the format { 'word': [n1, n2, ...] },where \n        #n1, n2, ... are the lines the word appears in. As in the case for the mapper\n        #function, the output of the reduce function can be modified in the my_reducer function \n        #you supply to it. If you'd rather it return something else (like say, word count), this\n        #is the function to modify.\n\n        def my_reducer(item, accum_value):\n            #First, verify item is not empty\n            if item != []:\n                #If the element already exists in the output object, append the current line \n                #value to it, if not, add it to the object and create a set holding the current \n                #line value\n\n                #Check this word/line combination isn't already stored in the output dict\n                if (item[0] in accum_value) and (item[1] not in accum_value[item[0]]):\n                    accum_value[item[0]].append(item[1])\n                else:\n                    accum_value[item[0]] = [item[1]]\n\n            return accum_value\n\n        #Now we can call the reduce function, save it's output, print it to screen, and we're  \n        #done!\n        #(Note that for base value we are just passing in an empty object, {})\n        reduce_results = reducer(my_reducer, map_output, {})\n\n        #Print results to screen\n        for result in reduce_results:\n            print('word: {}, lines: {}'.format(result, reduce_results[result]))\n"
        ], 
        "score": 2, 
        "id": 18182899, 
        "rank": 0
      }
    ], 
    "title": "Iterating through an array and searching for each item in the array in a file"
  }, 
  {
    "accepted_answer_post_id": 18943790, 
    "id": 18940132, 
    "answer_posts": [
      {
        "snippets": [
          "import struct\nfrom functools import partial\nfrom itertools import imap\n\ndef to_bytes(number):\n    # This can only pack an unsigned long long\n    # so we need to split the number into those\n    packer = partial(struct.pack, \">Q\")\n\n    # How many unsigned long longs needed to hold the number\n    iterations = (number.bit_length() // 64) + 1\n\n    # Get the parts\n    sections = ((number >> i*64) & 0xFFFFFFFFFFFFFFFF for i in reversed(xrange(iterations)))\n\n    # And map \"packer\" over them\n    return b\"\".join(imap(packer, sections)).lstrip(\"\\x00\")\n", 
          ">>> to_bytes(0x12300FFABACAADABAF0)\n'\\x01#\\x00\\xff\\xab\\xac\\xaa\\xda\\xba\\xf0'\n\n>>> hex(0x12300FFABACAADABAF0)[2:].decode('hex')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib/python2.7/encodings/hex_codec.py\", line 42, in hex_decode\n    output = binascii.a2b_hex(input)\nTypeError: Non-hexadecimal digit found\n", 
          ">>> number.to_bytes(number.bit_length()//8+1, \"big\")\nb'\\x01#\\x00\\xff\\xab\\xac\\xaa\\xda\\xba\\xf0'\n", 
          "%~> python2\nPython 2.7.5 (default, May 12 2013, 12:00:47) \n[GCC 4.8.0 20130502 (prerelease)] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> (324).bit_length()\n9\n"
        ], 
        "score": 2, 
        "id": 18943790, 
        "rank": 0
      }
    ], 
    "title": "Converting integers to bytes"
  }, 
  {
    "accepted_answer_post_id": 32532321, 
    "id": 32531377, 
    "answer_posts": [
      {
        "snippets": [
          "from skimage.util import view_as_windows\n\nwindows = view_as_windows(field_array, match_array.shape)\n", 
          ">>> (windows == match_array).all(axis=(2,3)).any()\nTrue\n", 
          ">>> (windows == match_array).all(axis=(2,3)).nonzero()\n(array([6]), array([3]))\n"
        ], 
        "score": 4, 
        "id": 32531759, 
        "rank": 0
      }
    ], 
    "title": "How can I check if one two-dimensional NumPy array contains a specific pattern of values inside it?"
  }, 
  {
    "accepted_answer_post_id": 11924056, 
    "id": 11924012, 
    "answer_posts": [
      {
        "snippets": [
          "min(enumerate(lst), key=lambda x: abs(x[1]))\n", 
          ">>> example = [237, 72, -18, 237, 236, 237, 60, -158, -273, -78, 492, 243]\n>>> min(enumerate(example), key=lambda x: abs(x[1]))\n(2, -18)\n>>> min(enumerate(example), key=lambda x: abs(x[1]))[0]\n2\n"
        ], 
        "score": 4, 
        "id": 11924030, 
        "rank": 0
      }
    ], 
    "title": "python - get item number from list"
  }, 
  {
    "accepted_answer_post_id": 13306870, 
    "id": 13306613, 
    "answer_posts": [
      {
        "snippets": [
          "from StringIO import StringIO\nimport csv\n\nimport web\n\nurls = (\n  '/retrieve',   'Retrieve',\n)\n\napp = web.application(urls, globals())\nconn = mdb.connect(user='root', passwd='redhat', db='Merion_dev', host='localhost')\n\nclass Retrieve:\n\n    def POST(self):\n        cursor = conn.cursor()\n        query = \"SELECT * FROM adm_facility LIMIT 0,10 \"\n        cursor.execute(query)\n        result = cursor.fetchall() \n        csv_file = StringIO()\n        csv_writer = csv.writer(csv_file)\n        csv_writer.writerow(['Facility_id', 'Name', 'Account Number', 'Street'])\n        for i in result :\n            csv_writer.writerow([i[0],i[2],i[3],i[4]])\n        web.header('Content-Type','text/csv')\n        web.header('Content-disposition', 'attachment; filename=yourfilename.csv')\n        return csv_file.getvalue()\n\nif __name__ == \"__main__\":\n    web.internalerror = web.debugerror\n    app.run()  \n"
        ], 
        "score": 2, 
        "id": 13306870, 
        "rank": 0
      }
    ], 
    "title": "How to downlaod a csv file after writing data to it using python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 28679851, 
    "answer_posts": [
      {
        "snippets": [
          "[  0, -1, \n   1,  0   ] (90 degree clockwise rotation)\n", 
          "x = np.array( ((100,100), (100, 150), (150, 125)) )\ny = np.matrix( ((0,-1), (1, 0)) )\nprint (x * y)\n", 
          "def get_matrix(angle) :\n     return np.matrix( ((math.cos(angle),-math.sin(angle)), (math.sin(angle), math.cos(angle))) )\n"
        ], 
        "score": 0, 
        "id": 28682479, 
        "rank": 0
      }
    ], 
    "title": "How to rotate an object by changing it's point coordinates (Python, Pygame)"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 16325794, 
    "answer_posts": [
      {
        "snippets": [
          "import os\nfrom subprocess import Popen, PIPE\nmusic = None\nwhile 1:\n    cmd = raw_input('> ')\n    if cmd.lower() == 'play':\n        music = Popen('mpg321 /home/Torxed/test.mp3'.split(' ',1), stdout=PIPE, stderr=STDOUT, close_fds=True)\n    elif cmd.lower() == 'stop':\n        try:\n            music.stdout.close()\n            music.stdin.close()\n        except:\n            pass\n        music = None\n", 
          "music = os.popen('mpg321 /home/Torxed/test.mp3', 'w')\n", 
          "music.close()\n", 
          "import pygame, time\npygame.init()\npygame.mixer.music.load('/home/Torxed/test.mp3')\npygame.mixer.music.play()\ntime.sleep(5)\npygame.mixer.music.fadeout(5)\n", 
          "s = Sound() \ns.read('/home/Torxed/test.mp3') \ns.play()\n", 
          "import pyglet\n\nmusic = pyglet.resource.media('/home/Torxed/test.mp3')\nmusic.play()\n\npyglet.app.run()\n", 
          "import winsound\nwinsound.PlaySound('C:\\\\users\\\\Torxed\\\\Desktop\\\\test.mp3')\n", 
          "from wave import open as waveOpen\nfrom ossaudiodev import open as ossOpen\ns = waveOpen('/home/Torxed/test.wav','rb')\n(nc,sw,fr,nf,comptype, compname) = s.getparams( )\ndsp = ossOpen('/dev/dsp','w')\ntry:\n  from ossaudiodev import AFMT_S16_NE\nexcept ImportError:\n  if byteorder == \"little\":\n    AFMT_S16_NE = ossaudiodev.AFMT_S16_LE\n  else:\n    AFMT_S16_NE = ossaudiodev.AFMT_S16_BE\ndsp.setparameters(AFMT_S16_NE, nc, fr)\ndata = s.readframes(nf)\ns.close()\ndsp.write(data)\ndsp.close()\n"
        ], 
        "score": 6, 
        "id": 16326257, 
        "rank": 0
      }
    ], 
    "title": "how to play music through python with mpg321"
  }, 
  {
    "accepted_answer_post_id": 27449483, 
    "id": 27449109, 
    "answer_posts": [
      {
        "snippets": [
          "import numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport random\n\ndef fun(x, y):\n  return 0.063*x**2 + 0.0628*x*y - 0.15015876*x + 96.1659*y**2 - 74.05284306*y  +      14.319143466051\n\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = y = np.arange(-1.0, 1.0, 0.05)\nX, Y = np.meshgrid(x, y)\nzs = np.array([fun(x,y) for x,y in zip(np.ravel(X), np.ravel(Y))])\nZ = zs.reshape(X.shape)\n\nax.plot_surface(X, Y, Z)\n\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('Z')\nfake2Dline = mpl.lines.Line2D([0],[0], linestyle=\"none\", c='b', marker = 'o')\nax.legend([fake2Dline], ['Lyapunov function on XY plane'], numpoints = 1)\nplt.show()\n"
        ], 
        "score": 2, 
        "id": 27449483, 
        "rank": 0
      }
    ], 
    "title": "Adding legend to a surface plot"
  }, 
  {
    "accepted_answer_post_id": 20061899, 
    "id": 20061763, 
    "answer_posts": [
      {
        "snippets": [
          "import os\nos.path.abspath(file_csv.name)\n"
        ], 
        "score": 0, 
        "id": 20061899, 
        "rank": 0
      }
    ], 
    "title": "get local path of an uploaded file in django"
  }, 
  {
    "accepted_answer_post_id": 32658503, 
    "id": 32657226, 
    "answer_posts": [
      {
        "snippets": [
          "tips = pd.DataFrame({ 'day':list('MMMFFF'), 'tip':range(6), \n                      'total_bill':[10,40,20,80,50,40] })\n\ndef fit_predict(df):\n    m = sm.ols(\"tip ~ total_bill\", df).fit()\n    return pd.Series(m.predict(df), index=df.index)\n", 
          "tips.groupby(\"day\").apply(fit_predict)\n\nday   \nF    3    2.923077\n     4    4.307692\n     5    4.769231\nM    0    0.714286\n     1    1.357143\n     2    0.928571\n", 
          "tips['predicted'] = tips.groupby(\"day\").apply(fit_predict).reset_index(level=0,drop=True)\n\n  day  tip  total_bill  predicted\n0   M    0          10   0.714286\n1   M    1          40   1.357143\n2   M    2          20   0.928571\n3   F    3          80   2.923077\n4   F    4          50   4.307692\n5   F    5          40   4.769231\n"
        ], 
        "score": 2, 
        "id": 32658503, 
        "rank": 0
      }
    ], 
    "title": "Can pandas groupby transform a DataFrame into a Series?"
  }, 
  {
    "accepted_answer_post_id": 34273874, 
    "id": 34273779, 
    "answer_posts": [
      {
        "snippets": [
          ">>> df['one'].between(0, 1).all()\nFalse\n>>> df['two'].between(0, 1).all()\nTrue\n", 
          ">>> ((0 <= df) & (df <= 1)).all()\none    False\ntwo     True\ndtype: bool\n"
        ], 
        "score": 4, 
        "id": 34273874, 
        "rank": 0
      }
    ], 
    "title": "Check if every row of column is within range"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 24758113, 
    "answer_posts": [
      {
        "snippets": [
          "from mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import proj3d\nimport numpy as np\nimport matplotlib.gridspec as gridspec\nimport matplotlib\n\ndef smooth1d(x, window_len):\n    s=np.r_[2*x[0]-x[window_len:1:-1],x,2*x[-1]-x[-1:-window_len:-1]]\n    w = np.hanning(window_len)\n    y=np.convolve(w/w.sum(),s,mode='same')\n    return y[window_len-1:-window_len+1]\n\ndef smooth2d(A, sigma=3):\n    window_len = max(int(sigma), 3)*2+1\n    A1 = np.array([smooth1d(x, window_len) for x in np.asarray(A)])\n    A2 = np.transpose(A1)\n    A3 = np.array([smooth1d(x, window_len) for x in A2])\n    A4 = np.transpose(A3)\n\n    return A4\n\nclass BaseFilter(object):\n    def prepare_image(self, src_image, dpi, pad):\n        ny, nx, depth = src_image.shape\n        #tgt_image = np.zeros([pad*2+ny, pad*2+nx, depth], dtype=\"d\")\n        padded_src = np.zeros([pad*2+ny, pad*2+nx, depth], dtype=\"d\")\n        padded_src[pad:-pad, pad:-pad,:] = src_image[:,:,:]\n\n        return padded_src#, tgt_image\n\n    def get_pad(self, dpi):\n        return 0\n\n    def __call__(self, im, dpi):\n        pad = self.get_pad(dpi)\n        padded_src = self.prepare_image(im, dpi, pad)\n        tgt_image = self.process_image(padded_src, dpi)\n        return tgt_image, -pad, -pad\n\nclass GaussianFilter(BaseFilter):\n    \"simple gauss filter\"\n    def __init__(self, sigma, alpha=0.5, color=None):\n        self.sigma = sigma\n        self.alpha = alpha\n        if color is None:\n            self.color=(0, 0, 0)\n        else:\n            self.color=color\n\n    def get_pad(self, dpi):\n        return int(self.sigma*3/72.*dpi)\n\n\n    def process_image(self, padded_src, dpi):\n        #offsetx, offsety = int(self.offsets[0]), int(self.offsets[1])\n        tgt_image = np.zeros_like(padded_src)\n        aa = smooth2d(padded_src[:,:,-1]*self.alpha,\n                      self.sigma/72.*dpi)\n        tgt_image[:,:,-1] = aa\n        tgt_image[:,:,:-1] = self.color\n        return tgt_image\n\n\nfrom matplotlib.artist import Artist\n\nclass FilteredArtistList(Artist):\n    \"\"\"\n    A simple container to draw filtered artist.\n    \"\"\"\n    def __init__(self, artist_list, filter):\n        self._artist_list = artist_list\n        self._filter = filter\n        Artist.__init__(self)\n\n    def draw(self, renderer):\n        renderer.start_rasterizing()\n        renderer.start_filter()\n        for a in self._artist_list:\n            a.draw(renderer)\n        renderer.stop_filter(self._filter)\n        renderer.stop_rasterizing()\n\n\n\n\n\n##Create the landscape\nfrom noise import snoise2\n\ndef boxOnSurface(rect, X,Y,Z):\n  #Make rectangle of indicies to draw. Left the four loops expanded for clarity. Otherwise it's fairly ugly.\n  rXs, rYs, rZs = [],[],[]\n\n  for j in range(rect[0][1], rect[1][1]):\n    i = rect[0][0]\n\n    rXs.append(X[i][j])\n    rYs.append(Y[i][j])\n    rZs.append(Z[i][j])\n\n  for i in range(rect[0][0], rect[1][0]):\n    j = rect[1][1]\n\n    rXs.append(X[i][j])\n    rYs.append(Y[i][j])\n    rZs.append(Z[i][j])\n\n  for j in range(rect[1][1], rect[0][1], -1):\n    i = rect[1][0]\n\n    rXs.append(X[i][j])\n    rYs.append(Y[i][j])\n    rZs.append(Z[i][j])\n\n  for i in range(rect[1][0], rect[0][0]-1, -1):\n    j = rect[0][1]\n\n    rXs.append(X[i][j])\n    rYs.append(Y[i][j])\n    rZs.append(Z[i][j])\n\n  return rXs, rYs, rZs, [np.mean(rXs), np.mean(rYs), np.mean(rZs)]\n\n\n\noctaves = 4\nfreq = octaves * 100\n\n\nxs, ys = np.linspace(0.0, 100.0, 100), np.linspace(0.0, 100.0, 100)\nX,Y = np.meshgrid(xs,ys)\n\nZ1 = np.zeros(X.shape)\n\n\nfor i,x in enumerate(xs):\n  for j,y in enumerate(ys):\n    Z1[i][j] = int(snoise2(x/freq, y/freq, octaves) * 127.0 + 128.0)\n\n\n\n# get some different colours for the surface.\nfaceValues = np.zeros(X.shape)\n\nnoise = []\n\nfor i,x in enumerate(xs):\n  for j,y in enumerate(ys):\n    faceValues[i][j] = snoise2(4*x/freq, 4*y/freq, octaves)\n\njet = cm.get_cmap(\"jet\")\nfaceColours = []\n\n\nfor i,x in enumerate(xs):\n  faceColours.append([])\n  for j,y in enumerate(ys):\n    normalised = (faceValues[i][j] - faceValues.min()) / (faceValues.max() - faceValues.min())\n    faceColours[i].append(jet(normalised))\n    faceValues[i][j] = normalised\n\n\n\n\nfig = plt.figure()\nminiPlotCount = 5\ngs = gridspec.GridSpec(5, miniPlotCount)\nax = fig.add_subplot(gs[0:4,:], projection='3d')\n\nminiAxes = []\nfor i in range(miniPlotCount):\n  miniAxes.append(fig.add_subplot(gs[4,i]))\n\nax.plot_surface(X,Y,Z1, cmap=cm.jet, linewidth=0.2, cstride=2, rstride=2, facecolors=faceColours, vmin=0, vmax=1)\n\n\n#This decides where we draw the rectangle to be inspecting.\nrect = ((25,45),(65,70))\n\nboxXs, boxYs, boxZs, middleOfBox = boxOnSurface(rect, X,Y,Z1)\nax.plot(boxXs, boxYs, boxZs)\n\nxb, yb, zb = middleOfBox\n\nxPoint, yPoint, _ = proj3d.proj_transform(xb, yb, zb, ax.get_proj())\n\n\nlabels = []\ngrids = []\nfor i in range(miniPlotCount):\n  bbox = miniAxes[i].get_window_extent()\n  xytext = ((bbox.min[0] + bbox.max[0])/2, (bbox.min[1] + bbox.max[1])/2)\n  labels.append(ax.annotate(\"\", xy=(xPoint,yPoint), arrowprops = {\"arrowstyle\":'->', \"connectionstyle\":'arc3,rad=0'}, textcoords=\"figure pixels\", xytext=xytext))\n\n#  miniAxes[i].contourf(X[rect[0][0]:rect[1][0],rect[0][1]:rect[1][1]], Y[rect[0][0]:rect[1][0],rect[0][1]:rect[1][1]], Z1[rect[0][0]:rect[1][0],rect[0][1]:rect[1][1]])#, vmin=Z1.min(), vmax=Z1.max())\n  miniAxes[i].contourf(X[rect[0][0]:rect[1][0],rect[0][1]:rect[1][1]], Y[rect[0][0]:rect[1][0],rect[0][1]:rect[1][1]], faceValues[rect[0][0]:rect[1][0],rect[0][1]:rect[1][1]], vmin=faceValues.min(), vmax=faceValues.max())\n\n# miniAxes[i].set_agg_filter(gaussFilter)\n  gaussFilter = GaussianFilter(i)\n  miniAxes[i].grid(linestyle=\"-\", linewidth=2, agg_filter=gaussFilter)\n\n\n\n\n\n\ndef update_position(e):\n    xPoint, yPoint, _ = proj3d.proj_transform(xb, yb, zb, ax.get_proj())\n    for label in labels:\n      label.xy = xPoint, yPoint\n      label.update_positions(fig.canvas.renderer)\n    fig.canvas.draw()\n\nfig.canvas.mpl_connect('motion_notify_event', update_position)\n\n\n\n\nplt.show()\n"
        ], 
        "score": 5, 
        "id": 24763646, 
        "rank": 0
      }
    ], 
    "title": "Drawing blurred lines with Matplotlib / Python"
  }, 
  {
    "accepted_answer_post_id": 24350799, 
    "id": 24350779, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import re\n>>> string = 'sdkjhsgshfsdkj'\n>>> substring = 'sdkj'\n>>> len(re.findall(substring, string))\n2\n", 
          ">>> re.findall('sdkj', 'sdkjhsgshfsdkj')\n['sdkj', 'sdkj']\n", 
          "sum(string.count(c) for c in substring)\n", 
          "from collections import Counter\n\ncounts = Counter(string)\nsum(counts.get(c, 0) for c in substring)\n", 
          ">>> string = \"sdjskjhdvsnea\"\n>>> substring = \"sdkj\"\n>>> sum(string.count(c) for c in substring)\n8\n>>> from collections import Counter\n>>> counts = Counter(string)\n>>> sum(counts.get(c, 0) for c in substring)\n8\n", 
          ">>> sum(string.count(c) for c in \"sdjks\")\n11\n>>> sum(string.count(c) for c in set(\"sdjks\"))\n8\n"
        ], 
        "score": 1, 
        "id": 24350826, 
        "rank": 0
      }
    ], 
    "title": "How to find the total number of occurrences of the characters of a word in a string?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 13990828, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import hashlib\n>>> data = 'foobar'\n>>> hashlib.sha1(data).digest()\n'\\x88C\\xd7\\xf9$\\x16!\\x1d\\xe9\\xeb\\xb9c\\xffL\\xe2\\x81%\\x93(x'\n>>> len(hashlib.sha1(data).digest())\n20\n", 
          ">>> hashlib.sha1(data).hexdigest()\n'8843d7f92416211de9ebb963ff4ce28125932878'\n"
        ], 
        "score": 6, 
        "id": 13990994, 
        "rank": 0
      }
    ], 
    "title": "Analog of PHP's sha1 raw output in Python"
  }, 
  {
    "accepted_answer_post_id": 21650895, 
    "id": 21650809, 
    "answer_posts": [
      {
        "snippets": [
          ">>> data.loc[data.index != \"Colorado\"]\nnumber    one  two  three\nstate                    \nOhio        0    1      2\nNew York    6    7      8\n\n[2 rows x 3 columns]\n", 
          ">>> data.query(\"state != 'New York'\")\nnumber    one  two  three\nstate                    \nOhio        0    1      2\nColorado    3    4      5\n\n[2 rows x 3 columns]\n"
        ], 
        "score": 6, 
        "id": 21650895, 
        "rank": 0
      }
    ], 
    "title": "Most efficient way to exclude indexed rows in pandas dataframe"
  }, 
  {
    "accepted_answer_post_id": 19885104, 
    "id": 19884870, 
    "answer_posts": [
      {
        "snippets": [
          "arr = array([['3', '1', '22', '1', '0', '7.25', '2'], \n            ['3', '', '22', '1', '0', '7.25', '2']], \n           dtype='<U82')\n\nblank = np.where(arr=='')\n\narr[blank] = 20\n\narray([[u'3', u'1', u'22', u'1', u'0', u'7.25', u'2'],\n       [u'3', u'20', u'22', u'1', u'0', u'7.25', u'2']], \n      dtype='<U82')\n", 
          "male = np.where(arr[:, 1]=='') # where 1 is the column\narr[male] = 30\n\nfemale = np.where(arr[:, 2]=='') # where 2 is the column\narr[female] = 28\n"
        ], 
        "score": 1, 
        "id": 19885024, 
        "rank": 0
      }
    ], 
    "title": "replace blanks in numpy array"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 14652942, 
    "answer_posts": [
      {
        "snippets": [
          "import sys\noutenc = sys.stdout.encoding or sys.getfilesystemencoding()\nprint t.decode(\"iso-8859-1\").encode(outenc)\n"
        ], 
        "score": 0, 
        "id": 14653028, 
        "rank": 0
      }
    ], 
    "title": "Python - How to get accented characters correct? (BeautifulSoup)"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 837828, 
    "answer_posts": [
      {
        "snippets": [
          ">>> from django.template.defaultfilters import slugify\n>>> slugify(\"b b b b\")\nu'b-b-b-b'\n>>>\n", 
          "class test(models.Model):\n    q = models.CharField(max_length=30)\n    s = models.SlugField()\n\n    def save(self, *args, **kwargs):\n        self.s = slugify(self.q)\n        super(test, self).save(*args, **kwargs)\n", 
          "class test(models.Model):\n    q = models.CharField(max_length=30)\n    s = models.SlugField()\n\n    def save(self, *args, **kwargs):\n        if not self.id:\n            # Newly created object, so set slug\n            self.s = slugify(self.q)\n\n        super(test, self).save(*args, **kwargs)\n"
        ], 
        "score": 323, 
        "id": 837835, 
        "rank": 0
      }
    ], 
    "title": "How do I create a slug in Django?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 33005870, 
    "answer_posts": [
      {
        "snippets": [
          "check(hash_algorithm, offset=0, length=0, block_size=0)\nchmod(mode)\nchown(uid, gid)\nclose()\nflush()\ngettimeout()\nnext()\nprefetch()\nread(size=None)\nreadline(size=None)\nreadlines(sizehint=None)\nreadv(chunks)\nset_pipelined(pipelined=True)\nsetblocking(blocking)\nsettimeout(timeout)\nstat()\ntell()\ntruncate(size)\nutime(times)\nwrite(data)\nwritelines(sequence)\nxreadlines()\n"
        ], 
        "score": 0, 
        "id": 33006786, 
        "rank": 0
      }
    ], 
    "title": "In Python, how to write a file on a remote machine synchronously?"
  }, 
  {
    "accepted_answer_post_id": 36627560, 
    "id": 36626721, 
    "answer_posts": [
      {
        "snippets": [
          "from itertools import chain\nprint sum(map(float, chain(*p)))\n", 
          "print [sum(map(float, sublist)) for sublist in p]\n", 
          "# Total sum\n2265000.0\n# Sums per each list\n[1093000.0, 4000.0, 4000.0, 4000.0, 4000.0, 4000.0, 4000.0, 4000.0, 4000.0, 4000.0, 4000.0, 4000.0, 4000.0, 4000.0, 4000.0, 4000.0, 4000.0, 4000.0, 4000.0, 4000.0, 4000.0, 1092000.0]\n"
        ], 
        "score": 1, 
        "id": 36626898, 
        "rank": 0
      }
    ], 
    "title": "TypeError: float() argument must be a string or a number with list sum"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 37378314, 
    "answer_posts": [
      {
        "snippets": [
          "import zipfile,fnmatch,os, re\n\nrootPath = r\"C:\\Users\\Bob\\Desktop\\Bill\"\npattern = '*.zip'\nNew = 'New*'\n\nfor root, dirs, files in os.walk(rootPath):\n    for filename in fnmatch.filter(files, pattern):\n        print(os.path.join(root, filename))\n        zipfile.ZipFile(os.path.join(root,     filename)).extractall(os.path.join(root, os.path.splitext(filename)[0]))\n\nfor dirName in os.listdir(rootPath):\n    if not re.search(\"zip\", dirName):\n        os.rename(os.path.join(rootPath, dirName), os.path.join(rootPath,\"New\"))\n"
        ], 
        "score": 0, 
        "id": 37379594, 
        "rank": 0
      }
    ], 
    "title": "Unzipping and renaming files/folders"
  }, 
  {
    "accepted_answer_post_id": 9653368, 
    "id": 9653264, 
    "answer_posts": [
      {
        "snippets": [
          "self.ui.txtName.setProperty(\"rules\", QtCore.QVariant())\n#or \nself.ui.txtName.setProperty(\"rules\", None)\n"
        ], 
        "score": 2, 
        "id": 9653368, 
        "rank": 0
      }
    ], 
    "title": "How to remove property of ui component in pyside/pyqt?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 7753226, 
    "answer_posts": [
      {
        "snippets": [
          "'\"149\" \"149\" \"153\" \"153\" \"159\" \"159\" \"165\" \"165\" \"36\" \"36\" \"44\"'\n", 
          "[x.strip('\"') for x in '\"149\" \"149\" \"153\" \"153\" \"159\" \"159\" \"165\" \"165\" \"36\" \"36\" \"44\"'.split()]\n", 
          "['149', '149', '153', '153', '159', '159', '165', '165', '36', '36', '44']\n", 
          "import array\nfoo = array.array('i',(int(x.strip('\"')) for x in '\"149\" \"149\" \"153\" \"153\" \"159\" \"159\" \"165\" \"165\" \"36\" \"36\" \"44\"'.split()))\n"
        ], 
        "score": 0, 
        "id": 7753278, 
        "rank": 0
      }
    ], 
    "title": "Python put multiple lines to array"
  }, 
  {
    "accepted_answer_post_id": 27964640, 
    "id": 27964435, 
    "answer_posts": [
      {
        "snippets": [
          "import requests\n\nfor i in range(101):\n    payload = {'usn': i}\n    response = requests.post(\"index.php\", data=payload)\n    # do something with response\n"
        ], 
        "score": 2, 
        "id": 27964640, 
        "rank": 0
      }
    ], 
    "title": "Pass Python parameters to HTML"
  }, 
  {
    "accepted_answer_post_id": 38108383, 
    "id": 38108335, 
    "answer_posts": [
      {
        "snippets": [
          "np.bmat([[A, B], [B.T, C]])\n", 
          "np.asarray(np.bmat([[A, B], [B.T, C]]))\n"
        ], 
        "score": 5, 
        "id": 38108383, 
        "rank": 0
      }
    ], 
    "title": "Arranging numpy arrays in a block matrix"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 28190526, 
    "answer_posts": [
      {
        "snippets": [
          "cherrypy.session.acquire_lock()\ncherrypy.session.release_lock()\n"
        ], 
        "score": 2, 
        "id": 28210348, 
        "rank": 0
      }
    ], 
    "title": "How to make CherryPy serve concurrent requests?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 32564507, 
    "answer_posts": [
      {
        "snippets": [
          "In [21]: lst = [(2, 'eye'), (4, 'tail'), (1, 'scarf'), (4,'voice')]\n\nIn [22]: sorted(lst, key = lambda x: (-x[0],x[1]))\nOut[22]: [(4, 'tail'), (4, 'voice'), (2, 'eye'), (1, 'scarf')]\n", 
          "In [24]: [x[1] for x in sorted(lst, key = lambda x: (-x[0],x[1]))]\nOut[24]: ['tail', 'voice', 'eye', 'scarf']\n"
        ], 
        "score": 4, 
        "id": 32564560, 
        "rank": 0
      }
    ], 
    "title": "How to sort the list of tuples first by the descending order and alphabetically simultaneously in python 3?"
  }, 
  {
    "accepted_answer_post_id": 8184680, 
    "id": 8183700, 
    "answer_posts": [
      {
        "snippets": [
          "a.save() # Succeeds, and never undone by savepoint rollback\ntry:\n    sid = transaction.savepoint()\n    b.save() # Could throw exception\n    transaction.savepoint_commit(sid)\nexcept IntegrityError:\n    transaction.savepoint_rollback(sid)\nc.save() # Succeeds, and a.save() is never undone\n"
        ], 
        "score": 7, 
        "id": 8184680, 
        "rank": 0
      }
    ], 
    "title": "Django, Postgresql & IntegrityErrors"
  }, 
  {
    "accepted_answer_post_id": 14698192, 
    "id": 14698132, 
    "answer_posts": [
      {
        "snippets": [
          "lst = [('a','b'), ('c', 'b'), ('a', 'd'), ('e','f'), ('a', 'b')]\n\ndef merge(x):\n    s = set()\n    for i in x:\n        if not s.intersection(i):\n            yield i\n            s.update(i)\n", 
          ">>> list(merge(lst))\n[('a', 'b'), ('e', 'f')]\n>>> list(merge([('a', 'b'), ('c', 'd'), ('c', 'e')]))\n[('a', 'b'), ('c', 'd')]\n>>> list(merge([('a', 'b'), ('a', 'c'), ('c', 'd')]))\n[('a', 'b'), ('c', 'd')]\n"
        ], 
        "score": 6, 
        "id": 14698192, 
        "rank": 0
      }
    ], 
    "title": "Removing duplicates from tuples within a list"
  }, 
  {
    "accepted_answer_post_id": 14925059, 
    "id": 14924963, 
    "answer_posts": [
      {
        "snippets": [
          ">>> \"a\" + \"b\"\n'ab'\n>>> \"a\" \"b\"\n'ab'\n", 
          "plt.text(0.5, 0.5,\n         r'$\\mathsf{sin\\left(\\frac{\\pi}{180} f_1 \\theta + \\varphi_1\\right)'\n         r'     + B sin\\left(\\frac{\\pi}{180} f_2 \\theta + \\varphi_2\\right)}$')\n"
        ], 
        "score": 5, 
        "id": 14925059, 
        "rank": 0
      }
    ], 
    "title": "matplotlib raw string line break in code"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 19279008, 
    "answer_posts": [
      {
        "snippets": [
          "inputbox = Entry(maingui, textvariable=inputvar)\ninputbox.place(x=10,y=10)\n", 
          "from Tkinter import *\n\nroot = Tk()\n\ndef click():\n    inputbox.insert(0, \"1\")\n\ninputbox = Entry()\ninputbox.place(x=10,y=10)\n\nButton(text=\"Click\",command=click).place(x=10,y=40)\n\nroot.mainloop()\n", 
          "inputbox.delete(0, END)\n"
        ], 
        "score": 1, 
        "id": 19280739, 
        "rank": 0
      }
    ], 
    "title": "How to insert text onto an entry box when a button is clicked"
  }, 
  {
    "accepted_answer_post_id": 33688795, 
    "id": 28615887, 
    "answer_posts": [
      {
        "snippets": [
          "ax2.xaxis.get_majorticklabels()[2].set_y(-.1)\nax2.xaxis.get_majorticklabels()[2].set_x(10**99)\n", 
          "for tick in ax2.xaxis.get_majorticklabels():\n    tick.set_horizontalalignment(\"left\")\n"
        ], 
        "score": 7, 
        "id": 28616845, 
        "rank": 0
      }
    ], 
    "title": "How to move a tick's label in matplotlib?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 19804758, 
    "answer_posts": [
      {
        "snippets": [
          "stylesheet = \"\"\" \n    QTabBar::tab:selected {background: gray;}\n    QTabWidget>QWidget>QWidget{background: gray;}\n    \"\"\"\n\nself.setStyleSheet(stylesheet)\n"
        ], 
        "score": 0, 
        "id": 19807893, 
        "rank": 0
      }
    ], 
    "title": "How to color a PyQt QTabwidget"
  }, 
  {
    "accepted_answer_post_id": 3858957, 
    "id": 3858851, 
    "answer_posts": [
      {
        "snippets": [
          "from win32com.shell import shell, shellcon\nprint shell.SHGetFolderPath(0, shellcon.CSIDL_MYPICTURES, None, 0)\n# prints something like C:\\Documents and Settings\\Username\\My Documents\\My Pictures\n# (Unicode object)\n"
        ], 
        "score": 14, 
        "id": 3858957, 
        "rank": 0
      }
    ], 
    "title": "Python, get windows special folders for currently logged-in user"
  }, 
  {
    "accepted_answer_post_id": 39195332, 
    "id": 39195113, 
    "answer_posts": [
      {
        "snippets": [
          "import glob\nfilelist = glob.glob('BengaliBMPConvert/*.bmp')\n", 
          "filelist = 'file1.bmp', 'file2.bmp', 'file3.bmp'\n", 
          "x = np.array([np.array(Image.open(fname)) for fname in filelist])\n", 
          "import pickle\npickle.dump( x, filehandle, protocol=2 )\n"
        ], 
        "score": 1, 
        "id": 39195332, 
        "rank": 0
      }
    ], 
    "title": "How to load multiple images in a numpy array ?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 12694779, 
    "answer_posts": [
      {
        "snippets": [
          "sum(function.count(x) for x in '1 2 3'.split())\n", 
          "import string\nsum(function.count(x) for x in string.digits)\n", 
          "def onepass(x):\n    return sum(1 for c in x if c in string.digits)\n", 
          "def drop_nondigits(x):\n    # The essential idea comes from the translator recipe in Python Cookbook;\n    # It can also be found here\n    # http://code.activestate.com/recipes/303342-simple-wrapper-for-stringtranslate/\n    keep = string.digits\n    allchars = string.maketrans('', '')\n    delete = allchars.translate(allchars, keep)\n    return len(x.translate(allchars, delete))    \n", 
          "import collections\ndef using_counter(x):\n    counter = collections.Counter(x)\n    return sum(counter[d] for d in string.digits)\n", 
          "In [26]: x = 'some very large string 123456' * 1000\n\nIn [38]: %timeit using_counter(x)\n100 loops, best of 3: 7.26 ms per loop\n\nIn [29]: %timeit onepass(x)\n100 loops, best of 3: 2.52 ms per loop\n\nIn [32]: %timeit drop_nondigits(x)\n10000 loops, best of 3: 34.9 us per loop\n"
        ], 
        "score": 3, 
        "id": 12694812, 
        "rank": 0
      }
    ], 
    "title": "Combining multiple count items in python?"
  }, 
  {
    "accepted_answer_post_id": 24977126, 
    "id": 24977071, 
    "answer_posts": [
      {
        "snippets": [
          "img.save(os.path.join(app.config['UPLOAD_FOLDER'], filename), format='PNG')\n", 
          "formats = {\n    'image/jpeg': 'JPEG',\n    'image/png': 'PNG',\n    'image/gif': 'GIF'\n}\n\nresponse = urllib.urlopen(URL)\nimage_type = response.info().get('Content-Type')\ntry:\n    format = formats[image_type]\nexcept KeyError:\n    raise ValueError('Not a supported image format')\n\nfile = cStringIO.StringIO(response.read())\nimg = Image.open(file)\n\n# ...\n\nfilename = secure_filename(URL.rpartition('/')[-1])\nimg.save(os.path.join(app.config['UPLOAD_FOLDER'], filename), format=format)\n"
        ], 
        "score": 3, 
        "id": 24977126, 
        "rank": 0
      }
    ], 
    "title": "Open Image From Online, Save To Server Flask"
  }, 
  {
    "accepted_answer_post_id": 18667977, 
    "id": 18667942, 
    "answer_posts": [
      {
        "snippets": [
          "board = []\nfor i in range(7):\n    board.append(line)\n", 
          "def createBoard(self):\n    board = []\n    for i in range(7):\n        line = []\n        for i in range(7):\n            line.append(' ')\n        board.append(line)\n    return board\n", 
          "def createBoard(self):\n    line = []\n    for i in range(7):\n        line.append(' ')\n    board = []\n    for i in range(7):\n        board.append(line[:])\n    return board\n", 
          "def createBoard(self):\n    return [[' ' for j in range(7)] for i in range(7)]\n", 
          "def createBoard(self):\n    return np.tile(' ', (7, 7))\n"
        ], 
        "score": 6, 
        "id": 18667977, 
        "rank": 0
      }
    ], 
    "title": "Two-dimensional list wrongly assigning values in python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 31225132, 
    "answer_posts": [
      {
        "snippets": [
          "import urllib.request\n", 
          "import urllib\n", 
          "import urllib.request as request\n", 
          "json_string = f.read().decode('utf-8')\nparsed_json = json.loads(json_string)\n", 
          "print (\"Current temperature in %s is: %s\" % (location, temp_f))\n", 
          "import urllib.request as request\nimport json\n\nkey = ...\nzip_code = input('For which ZIP code would you like to see the weather? ')\nfileName = \"http://api.wunderground.com/api/\" + key +    \"/geolookup/conditions/q/PA/\" + zip_code + \".json\"\nf = request.urlopen(fileName)\njson_string = f.read().decode('utf-8')\nparsed_json = json.loads(json_string)\nlocation = parsed_json['location']['city']\ntemp_f = parsed_json['current_observation']['temp_f']\nprint (\"Current temperature in %s is: %s\" % (location, temp_f))\n"
        ], 
        "score": 2, 
        "id": 31225245, 
        "rank": 0
      }
    ], 
    "title": "Python 3.3.2 - trying to read url from wunderground"
  }, 
  {
    "accepted_answer_post_id": 23602217, 
    "id": 23597700, 
    "answer_posts": [
      {
        "snippets": [
          "from mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\nax.scatter3D(data[:,1], data[:,2], data[:,7], c='r', marker='0')\n"
        ], 
        "score": 2, 
        "id": 23602217, 
        "rank": 0
      }
    ], 
    "title": "matplotlib 3d scatter from 2d numpy array vertices error"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 32470132, 
    "answer_posts": [
      {
        "snippets": [
          "with open('science.json') as tweet_data:\n    json_data = json.load(tweet_data)\n"
        ], 
        "score": 0, 
        "id": 32473824, 
        "rank": 0
      }
    ], 
    "title": "parsing tweets text from json file in python"
  }, 
  {
    "accepted_answer_post_id": 10386420, 
    "id": 10386132, 
    "answer_posts": [
      {
        "snippets": [
          "import os\ncpstr = 'echo %(pass)s | sudo -S cp \"%(from)s\" \"%(to)s\"'\nos.system(cpstr % {'pass':'userpassword', 'from':'./build/bin/myapp', 'to':'/bin/myapp'})\n"
        ], 
        "score": 0, 
        "id": 10386420, 
        "rank": 0
      }
    ], 
    "title": "Python: how to copy files in /bin/ folder"
  }, 
  {
    "accepted_answer_post_id": 25975622, 
    "id": 25975086, 
    "answer_posts": [
      {
        "snippets": [
          "url(r'^getdata_json$', 'views.myajaxview', name='getdata_json')\n", 
          "<table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" id=\"example1\"\n    data-url=\"{% url 'getdata_json' %}\">\n", 
          "<script type=\"text/javascript\" language=\"javascript\" class=\"init\">\n $(document).ready(function() {\n     $('#example1').dataTable( {                 \n         \"bServerSide\": true,\n         \"sAjaxSource\": $(this).data('url'),\n         \"bProcessing\": true,\n     } );\n } );\n </script>\n", 
          "for q in query:\n    report.append(q.nome_struttura)\njson = json.dumps(report)\n"
        ], 
        "score": 1, 
        "id": 25975622, 
        "rank": 0
      }
    ], 
    "title": "Django datatables load ajax data load"
  }, 
  {
    "accepted_answer_post_id": 17436999, 
    "id": 17436870, 
    "answer_posts": [
      {
        "snippets": [
          "nums = [1, 2, 3, 4]\nnewarray = sum(zip(reversed(nums), nums), ())[:len(nums)]\n\n>>> print(newarray)\n(4, 1, 3, 2)\n", 
          ">>> list(reversed(nums))\n[4, 3, 2, 1]\n", 
          ">>> list(zip([4, 3, 2, 1], [1, 2, 3, 4]))\n[(4, 1), (3, 2), (2, 3), (1, 4)]\n", 
          ">>> (4, 1) + (3, 2) + (2, 3) + (1, 4)\n(4, 1, 3, 2, 2, 3, 1, 4)\n", 
          ">>> sum([(4, 1), (3, 2), (2, 3), (1, 4)], ())\n(4, 1, 3, 2, 2, 3, 1, 4)\n", 
          ">>> (4, 1, 3, 2, 2, 3, 1, 4)[:len(nums)]\n(4, 1, 3, 2)\n", 
          "from itertools import chain, islice\na = list(islice(chain.from_iterable(zip(nums, reversed(nums))), len(nums)))\n"
        ], 
        "score": 5, 
        "id": 17436999, 
        "rank": 0
      }
    ], 
    "title": "Python: Alternating elements of a sorted array"
  }, 
  {
    "accepted_answer_post_id": 7968389, 
    "id": 7683207, 
    "answer_posts": [
      {
        "snippets": [
          "def upload_document(request):\n    if request.method == 'POST':\n        form = DocumentForm(request.POST, request.FILES)\n        if form.is_valid():\n            new_document = form.save()\n            form.save_m2m()\n            return HttpResponseRedirect(\"/thanks/\")\n\n    else:\n        form = DocumentForm()\n\n    return render_to_response('upload_page.html', {'form':form}, context_instance=RequestContext(request))\n"
        ], 
        "score": 4, 
        "id": 7968389, 
        "rank": 0
      }
    ], 
    "title": "When and how is a many-to-many relationship created when saving a model?"
  }, 
  {
    "accepted_answer_post_id": 2238053, 
    "id": 2238008, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import datetime\n>>> datetime.date.today()\ndatetime.date(2010, 2, 10)\n>>> datetime.datetime.now().date()\ndatetime.date(2010, 2, 10)\n"
        ], 
        "score": 5, 
        "id": 2238053, 
        "rank": 0
      }
    ], 
    "title": "Subtract two dates to give a timedelta"
  }, 
  {
    "accepted_answer_post_id": 32327388, 
    "id": 32327314, 
    "answer_posts": [
      {
        "snippets": [
          "# converts to date \ndatetime.strptime(date_string, 'DD/MM/YYYY HH:MM')  \n", 
          "# converts to your requested string format\ndatetime.strftime(date_string, \"YYYY/MM/DD HH:MM:SS\")  \n"
        ], 
        "score": 1, 
        "id": 32327427, 
        "rank": 0
      }
    ], 
    "title": "How to rearrange a date in python"
  }, 
  {
    "accepted_answer_post_id": 5341806, 
    "id": 5341794, 
    "answer_posts": [
      {
        "snippets": [
          "for cl in mylist:\n    # do stuff\n", 
          "for idx, item in enumerate(mylist):\n    # idx = index of current item\n    # item = current item\n", 
          "for i in range(len(mylist)):\n    # mylist[i] is the ith item in the list\n"
        ], 
        "score": 8, 
        "id": 5341806, 
        "rank": 0
      }
    ], 
    "title": "for loop in python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 25967012, 
    "answer_posts": [
      {
        "snippets": [
          "b = 222\nb = 0xde\n", 
          "s = hex(b)\nb = int(s, 16)\n", 
          "b = int('0' + s[1:] if (s[0] == '\\\\') else s, 16)\n", 
          "b = int('0' + s[1:], 16)\n"
        ], 
        "score": 1, 
        "id": 25967602, 
        "rank": 0
      }
    ], 
    "title": "How to convert hex into ascii hex string in python?"
  }, 
  {
    "accepted_answer_post_id": 4226506, 
    "id": 4225721, 
    "answer_posts": [
      {
        "snippets": [
          "import mechanize\n\nself.browser = mechanize.Browser()\nself.browser.open(self.url)\nself.browser.select_form(name=\"login\")\n\nself.browser[\"login_nick\"] = self.username\nself.browser[\"login_pwd\"] = self.password\nself.browser.new_control(\"HIDDEN\", \"action\", {})\ncontrol = self.browser.form.find_control(\"action\")\ncontrol.readonly = False\nself.browser[\"action\"] = \"login\"\nself.browser.method = \"POST\"\nself.browser.action = self.url\n\nresponse = self.browser.submit()\n"
        ], 
        "score": 8, 
        "id": 4226506, 
        "rank": 0
      }
    ], 
    "title": "Python mechanize login to website"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 28788086, 
    "answer_posts": [
      {
        "snippets": [
          "In [282]: rows, cols = 5.,6.  # make float\nIn [283]: maxx, maxy = 80.,100.\nIn [284]: X = (rows-1-np.mgrid[0:rows,0:cols][0])/(rows-1)*maxx\nIn [285]: Y = np.mgrid[0:rows,0:cols][1]/(cols-1)*maxy\nIn [288]: np.vstack(([X.T],[Y.T]))  \nOut[288]: \narray([[[  80.,   60.,   40.,   20.,    0.],\n        [  80.,   60.,   40.,   20.,    0.],\n        [  80.,   60.,   40.,   20.,    0.],\n        [  80.,   60.,   40.,   20.,    0.],\n        [  80.,   60.,   40.,   20.,    0.],\n        [  80.,   60.,   40.,   20.,    0.]],\n\n       [[   0.,    0.,    0.,    0.,    0.],\n        [  20.,   20.,   20.,   20.,   20.],\n        [  40.,   40.,   40.,   40.,   40.],\n        [  60.,   60.,   60.,   60.,   60.],\n        [  80.,   80.,   80.,   80.,   80.],\n        [ 100.,  100.,  100.,  100.,  100.]]])\n", 
          "In [307]: Y,X=np.mgrid[0:100:6j,80:0:5j]\nIn [308]: np.array([X,Y])\n"
        ], 
        "score": 0, 
        "id": 28788735, 
        "rank": 0
      }
    ], 
    "title": "generate 2D numpy array containing tuples"
  }, 
  {
    "accepted_answer_post_id": 5518513, 
    "id": 5518435, 
    "answer_posts": [
      {
        "snippets": [
          "d = [[] for x in xrange(n)]\n", 
          "from itertools import repeat\nd = [[] for i in repeat(None, n)]\n", 
          "d = numpy.empty((n, 0)).tolist()\n"
        ], 
        "score": 60, 
        "id": 5518513, 
        "rank": 0
      }
    ], 
    "title": "Python: fastest way to create a list of n lists"
  }, 
  {
    "accepted_answer_post_id": 3988714, 
    "id": 3988632, 
    "answer_posts": [
      {
        "snippets": [
          "longer = \"ABC(a =2,b=3,c=5,d=5,e=Something)\"\n\nshorter = re.sub(r',\\s*d=\\d+,\\s*e=[^)]+', '', longer)\n\n# shorter: 'ABC(a =2,b=3,c=5)'\n", 
          "shorter = re.sub(r',\\s*d=[^)]+', '', longer)\n"
        ], 
        "score": 3, 
        "id": 3988670, 
        "rank": 0
      }
    ], 
    "title": "Python: Use Regular expression to remove something"
  }, 
  {
    "accepted_answer_post_id": 4341982, 
    "id": 4341942, 
    "answer_posts": [
      {
        "snippets": [
          ">>> a = b = c = [1]  # assign everyone to the same object\n>>> a, b, c\n([1], [1], [1])\n>>> a[0] = 2         # modify a member of a\n>>> a, b, c\n([2], [2], [2])      # everyone gets updated because they all refer to the same object\n>>> a = [3]          # assign a to a new object\n>>> a, b, c\n([3], [2], [2])      # b and c are not affected\n"
        ], 
        "score": 4, 
        "id": 11284835, 
        "rank": 0
      }
    ], 
    "title": "How can I get a list of references of an object in Python?"
  }, 
  {
    "accepted_answer_post_id": 15922417, 
    "id": 15921613, 
    "answer_posts": [
      {
        "snippets": [
          "def EpiChange(self)\n", 
          "class Add(QtGui.QMainWindow,Ui_AddShotDetails):\n\n    def __init__(self, manager):\n        super(Add,self).__init__()\n        self.manager = manager\n        self.setupUi(self)\n\n    def addDetails(self):\n        #Do some stuff and call method in Manager class\n        self.manager.EpiChange() # I get the error at this line\n", 
          "self.AddWindow = Add(self)\n"
        ], 
        "score": 6, 
        "id": 15922417, 
        "rank": 0
      }
    ], 
    "title": "How to call a method from one class in another class"
  }, 
  {
    "accepted_answer_post_id": 22691636, 
    "id": 22677151, 
    "answer_posts": [
      {
        "snippets": [
          "record_exists = u\"SELECT COUNT(*) FROM did_you_know WHERE \" \\\n                \"name = %s\"\n# and later on\nself.cursor.execute(record_exists, item[\"name\"])\n"
        ], 
        "score": 1, 
        "id": 22691636, 
        "rank": 0
      }
    ], 
    "title": "Keep getting error in trying to INSERT into MySQL"
  }, 
  {
    "accepted_answer_post_id": 28705040, 
    "id": 28704613, 
    "answer_posts": [
      {
        "snippets": [
          "plt.plot(x, y)\n", 
          "for row in reader:\n        if j > 1:\n        dates.append(row[1])\n        dates.append(float(row[6]))\n", 
          "for row in reader:\n    if j > 1:\n        dates.append(row[1])\n        dates.append(float(row[6]))\n"
        ], 
        "score": 0, 
        "id": 28705026, 
        "rank": 0
      }
    ], 
    "title": "Python, matplotlib, plotting with dates"
  }, 
  {
    "accepted_answer_post_id": 12477780, 
    "id": 12477721, 
    "answer_posts": [
      {
        "snippets": [
          "import re\nwith open(\"input.txt\") as infile, open(\"output.txt\", \"w\") as outfile:\n    outfile.write(re.sub(r\"(?s)<cmd>.*?</cmd>\", \"<cmd>\\n</cmd>\", infile.read()))\n", 
          "import re\nwith open(\"input.txt\") as infile, open(\"output.txt\", \"w\") as outfile:\n    outfile.write(re.sub(\n        r\"\"\"(?sx)<cmd>      # Match <cmd>.\n        (?:                 # Match...\n         (?!</cmd>)         #  (unless we're at the closing tag)\n         .                  #  any character\n        )*                  # any number of times.\n        \\bxcopy\\b           # Match \"xcopy\" as a whole word\n        (?:(?!</cmd>).)*    # (Same as above)\n        </cmd>              # Match </cmd>\"\"\", \n        \"<cmd>\\n</cmd>\", infile.read())\n"
        ], 
        "score": 4, 
        "id": 12477780, 
        "rank": 0
      }
    ], 
    "title": "Updating multiple lines of a text file python"
  }, 
  {
    "accepted_answer_post_id": 28225177, 
    "id": 28225109, 
    "answer_posts": [
      {
        "snippets": [
          "split_str.sort(key=int)\n", 
          ">>> def sort_int_string(this_string):\n...     split_str = this_string.split()\n...     split_str.sort(key=int)\n...     join_str = ' '.join(split_str)\n...     return join_str\n... \n>>> print(sort_int_string(\"4 1 -1 -3\"))\n-3 -1 1 4\n"
        ], 
        "score": 2, 
        "id": 28225177, 
        "rank": 0
      }
    ], 
    "title": "Sorting negative integer strings in python"
  }, 
  {
    "accepted_answer_post_id": 651879, 
    "id": 651794, 
    "answer_posts": [
      {
        "snippets": [
          "mydict = {('foo', 'bar', 'baz'):1} # Initializes dict with a key/value pair\nmydict[('foo', 'bar', 'baz')]      # Returns 1\n\nmydict[('foo', 'unbar')] = 2       # Sets a value for a new key\n", 
          "mydict = {}                        # Initialized the dict\nmydict['foo', 'bar', 'baz'] = 1    # Sets a value\nmydict['foo', 'bar', 'baz']        # Returns 1\n"
        ], 
        "score": 11, 
        "id": 651930, 
        "rank": 0
      }
    ], 
    "title": "What's the best way to initialize a dict of dicts in Python?"
  }, 
  {
    "accepted_answer_post_id": 14946355, 
    "id": 14946109, 
    "answer_posts": [
      {
        "snippets": [
          "re.sub(r'[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f-\\xff]', '', text)\n", 
          ">>> re.sub(r'[\\x00-\\x1f\\x7f-\\xff]', '', ''.join(map(chr, range(256))))\n' !\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~'\n"
        ], 
        "score": 4, 
        "id": 14946355, 
        "rank": 0
      }
    ], 
    "title": "How to remove escape sequence like '\\xe2' or '\\x0c' in python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 32149809, 
    "answer_posts": [
      {
        "snippets": [
          "import ctypes\nimport comtypes\nfrom ctypes import wintypes\n\nMMDeviceApiLib = comtypes.GUID(\n    '{2FDAAFA3-7523-4F66-9957-9D5E7FE698F6}')\nIID_IMMDevice = comtypes.GUID(\n    '{D666063F-1587-4E43-81F1-B948E807363F}')\nIID_IMMDeviceCollection = comtypes.GUID(\n    '{0BD7A1BE-7A1A-44DB-8397-CC5392387B5E}')\nIID_IMMDeviceEnumerator = comtypes.GUID(\n    '{A95664D2-9614-4F35-A746-DE8DB63617E6}')\nIID_IAudioEndpointVolume = comtypes.GUID(\n    '{5CDF2C82-841E-4546-9722-0CF74078229A}')\nCLSID_MMDeviceEnumerator = comtypes.GUID(\n    '{BCDE0395-E52F-467C-8E3D-C4579291692E}')\n\n# EDataFlow\neRender = 0 # audio rendering stream\neCapture = 1 # audio capture stream\neAll = 2 # audio rendering or capture stream\n\n# ERole\neConsole = 0 # games, system sounds, and voice commands\neMultimedia = 1 # music, movies, narration\neCommunications = 2 # voice communications\n\nLPCGUID = REFIID = ctypes.POINTER(comtypes.GUID)\nLPFLOAT = ctypes.POINTER(ctypes.c_float)\nLPDWORD = ctypes.POINTER(wintypes.DWORD)\nLPUINT = ctypes.POINTER(wintypes.UINT)\nLPBOOL = ctypes.POINTER(wintypes.BOOL)\nPIUnknown = ctypes.POINTER(comtypes.IUnknown)\n\nclass IMMDevice(comtypes.IUnknown):\n    _iid_ = IID_IMMDevice\n    _methods_ = (\n        comtypes.COMMETHOD([], ctypes.HRESULT, 'Activate',\n            (['in'], REFIID, 'iid'),\n            (['in'], wintypes.DWORD, 'dwClsCtx'),\n            (['in'], LPDWORD, 'pActivationParams', None),\n            (['out','retval'], ctypes.POINTER(PIUnknown), 'ppInterface')),\n        comtypes.STDMETHOD(ctypes.HRESULT, 'OpenPropertyStore', []),\n        comtypes.STDMETHOD(ctypes.HRESULT, 'GetId', []),\n        comtypes.STDMETHOD(ctypes.HRESULT, 'GetState', []))\n\nPIMMDevice = ctypes.POINTER(IMMDevice)\n\nclass IMMDeviceCollection(comtypes.IUnknown):\n    _iid_ = IID_IMMDeviceCollection\n\nPIMMDeviceCollection = ctypes.POINTER(IMMDeviceCollection)\n\nclass IMMDeviceEnumerator(comtypes.IUnknown):\n    _iid_ = IID_IMMDeviceEnumerator\n    _methods_ = (\n        comtypes.COMMETHOD([], ctypes.HRESULT, 'EnumAudioEndpoints',\n            (['in'], wintypes.DWORD, 'dataFlow'),\n            (['in'], wintypes.DWORD, 'dwStateMask'),\n            (['out','retval'], ctypes.POINTER(PIMMDeviceCollection),\n             'ppDevices')),\n        comtypes.COMMETHOD([], ctypes.HRESULT, 'GetDefaultAudioEndpoint',\n            (['in'], wintypes.DWORD, 'dataFlow'),\n            (['in'], wintypes.DWORD, 'role'),\n            (['out','retval'], ctypes.POINTER(PIMMDevice), 'ppDevices')))\n    @classmethod\n    def get_default(cls, dataFlow, role):\n        enumerator = comtypes.CoCreateInstance(\n            CLSID_MMDeviceEnumerator, cls, comtypes.CLSCTX_INPROC_SERVER)\n        return enumerator.GetDefaultAudioEndpoint(dataFlow, role)\n\nclass IAudioEndpointVolume(comtypes.IUnknown):\n    _iid_ = IID_IAudioEndpointVolume\n    _methods_ = (\n        comtypes.STDMETHOD(ctypes.HRESULT, 'RegisterControlChangeNotify', []),\n        comtypes.STDMETHOD(ctypes.HRESULT, 'UnregisterControlChangeNotify', []),\n        comtypes.COMMETHOD([], ctypes.HRESULT, 'GetChannelCount',\n            (['out', 'retval'], LPUINT, 'pnChannelCount')),\n        comtypes.COMMETHOD([], ctypes.HRESULT, 'SetMasterVolumeLevel',\n            (['in'], ctypes.c_float, 'fLevelDB'),\n            (['in'], LPCGUID, 'pguidEventContext', None)),\n        comtypes.COMMETHOD([], ctypes.HRESULT, 'SetMasterVolumeLevelScalar',\n            (['in'], ctypes.c_float, 'fLevel'),\n            (['in'], LPCGUID, 'pguidEventContext', None)),\n        comtypes.COMMETHOD([], ctypes.HRESULT, 'GetMasterVolumeLevel',\n            (['out','retval'], LPFLOAT, 'pfLevelDB')),\n        comtypes.COMMETHOD([], ctypes.HRESULT, 'GetMasterVolumeLevelScalar',\n            (['out','retval'], LPFLOAT, 'pfLevel')),\n        comtypes.COMMETHOD([], ctypes.HRESULT, 'SetChannelVolumeLevel',\n            (['in'], wintypes.UINT, 'nChannel'),\n            (['in'], ctypes.c_float, 'fLevelDB'),\n            (['in'], LPCGUID, 'pguidEventContext', None)),\n        comtypes.COMMETHOD([], ctypes.HRESULT, 'SetChannelVolumeLevelScalar',\n            (['in'], wintypes.UINT, 'nChannel'),\n            (['in'], ctypes.c_float, 'fLevel'),\n            (['in'], LPCGUID, 'pguidEventContext', None)),\n        comtypes.COMMETHOD([], ctypes.HRESULT, 'GetChannelVolumeLevel',\n            (['in'], wintypes.UINT, 'nChannel'),\n            (['out','retval'], LPFLOAT, 'pfLevelDB')),\n        comtypes.COMMETHOD([], ctypes.HRESULT, 'GetChannelVolumeLevelScalar',\n            (['in'], wintypes.UINT, 'nChannel'),\n            (['out','retval'], LPFLOAT, 'pfLevel')),\n        comtypes.COMMETHOD([], ctypes.HRESULT, 'SetMute',\n            (['in'], wintypes.BOOL, 'bMute'),\n            (['in'], LPCGUID, 'pguidEventContext', None)),\n        comtypes.COMMETHOD([], ctypes.HRESULT, 'GetMute',\n            (['out','retval'], LPBOOL, 'pbMute')),\n        comtypes.COMMETHOD([], ctypes.HRESULT, 'GetVolumeStepInfo',\n            (['out','retval'], LPUINT, 'pnStep'),\n            (['out','retval'], LPUINT, 'pnStepCount')),\n        comtypes.COMMETHOD([], ctypes.HRESULT, 'VolumeStepUp',\n            (['in'], LPCGUID, 'pguidEventContext', None)),\n        comtypes.COMMETHOD([], ctypes.HRESULT, 'VolumeStepDown',\n            (['in'], LPCGUID, 'pguidEventContext', None)),\n        comtypes.COMMETHOD([], ctypes.HRESULT, 'QueryHardwareSupport',\n            (['out','retval'], LPDWORD, 'pdwHardwareSupportMask')),\n        comtypes.COMMETHOD([], ctypes.HRESULT, 'GetVolumeRange',\n            (['out','retval'], LPFLOAT, 'pfLevelMinDB'),\n            (['out','retval'], LPFLOAT, 'pfLevelMaxDB'),\n            (['out','retval'], LPFLOAT, 'pfVolumeIncrementDB')))\n    @classmethod\n    def get_default(cls):\n        endpoint = IMMDeviceEnumerator.get_default(eRender, eMultimedia)\n        interface = endpoint.Activate(cls._iid_, comtypes.CLSCTX_INPROC_SERVER)\n        return ctypes.cast(interface, ctypes.POINTER(cls))\n", 
          "if __name__ == '__main__':\n\n    def show_vol(ev):\n        voldb = ev.GetMasterVolumeLevel()\n        volsc = ev.GetMasterVolumeLevelScalar()\n        volst, nstep = ev.GetVolumeStepInfo()\n        print('Master Volume (dB): %0.4f' % voldb)\n        print('Master Volume (scalar): %0.4f' % volsc)\n        print('Master Volume (step): %d / %d' % (volst, nstep))\n\n    def test():\n        ev = IAudioEndpointVolume.get_default()\n        vol = ev.GetMasterVolumeLevelScalar()\n        vmin, vmax, vinc = ev.GetVolumeRange()\n        print('Volume Range (min, max, step) (dB): '\n              '%0.4f, %0.4f, %0.4f' % (vmin, vmax, vinc))\n        show_vol(ev)\n        try:\n            print('\\nIncrement the master volume')\n            ev.VolumeStepUp()\n            show_vol(ev)\n            print('\\nDecrement the master volume twice')\n            ev.VolumeStepDown()\n            ev.VolumeStepDown()\n            show_vol(ev)\n            print('\\nSet the master volume to 0.75 scalar')\n            ev.SetMasterVolumeLevelScalar(0.75)\n            show_vol(ev)\n            print('\\nSet the master volume to 0.25 scalar')\n            ev.SetMasterVolumeLevelScalar(0.25)\n            show_vol(ev)\n        finally:\n            ev.SetMasterVolumeLevelScalar(vol)\n\n    comtypes.CoInitialize()\n    try:\n        test()\n    finally:\n        comtypes.CoUninitialize()\n"
        ], 
        "score": 3, 
        "id": 32151549, 
        "rank": 0
      }
    ], 
    "title": "Read and/or Change Windows 8 Master Volume in Python"
  }, 
  {
    "accepted_answer_post_id": 19575539, 
    "id": 19573809, 
    "answer_posts": [
      {
        "snippets": [
          "from multiprocessing import Pool\nimport os\n\npath1 = \"some/path\"\npath2 = \"some/other/path\"\n\nlisting = os.listdir(path1)    \n\np = Pool(5) # process 5 images simultaneously\n\ndef process_fpath(path):\n    im = Image.open(path1 + path)    \n    im.resize((50,50))                # need to do some more processing here             \n    im.save(os.path.join(path2,path), \"JPEG\")\n\np.map(process_fpath, listing)\n"
        ], 
        "score": 10, 
        "id": 19575539, 
        "rank": 0
      }
    ], 
    "title": "Open images from a folder one by one using python?"
  }, 
  {
    "accepted_answer_post_id": 28928174, 
    "id": 28927779, 
    "answer_posts": [
      {
        "snippets": [
          "import matplotlib.pyplot as plt\nimport seaborn  as sns\nx =  range(10)\ny =  range(10)\nplt.bar(x,y,color= sns.color_palette(\"BuGn_r\", len(x)))\nplt.show()\n"
        ], 
        "score": 2, 
        "id": 28928174, 
        "rank": 0
      }
    ], 
    "title": "generate non-repeating sequential color plot with matplotlib"
  }, 
  {
    "accepted_answer_post_id": 26197696, 
    "id": 26197435, 
    "answer_posts": [
      {
        "snippets": [
          "def lcs(a, b):\n    tbl = [[0 for _ in range(len(b) + 1)] for _ in range(len(a) + 1)]\n    for i, x in enumerate(a):\n        for j, y in enumerate(b):\n            tbl[i + 1][j + 1] = tbl[i][j] + 1 if x == y else max(\n                tbl[i + 1][j], tbl[i][j + 1])\n    res = []\n    i, j = len(a), len(b)\n    while i and j:\n        if tbl[i][j] == tbl[i - 1][j]:\n            i -= 1\n        elif tbl[i][j] == tbl[i][j - 1]:\n            j -= 1\n        else:\n            res.append(a[i - 1])\n            i -= 1\n            j -= 1\n    return res[::-1]\n", 
          ">>> def lcs(a, b):\n...     tbl = [[0 for _ in range(len(b) + 1)] for _ in range(len(a) + 1)]\n...     for i, x in enumerate(a):\n...         for j, y in enumerate(b):\n...             tbl[i + 1][j + 1] = tbl[i][j] + 1 if x == y else max(\n...                 tbl[i + 1][j], tbl[i][j + 1])\n...     res = []\n...     i, j = len(a), len(b)\n...     while i and j:\n...         if tbl[i][j] == tbl[i - 1][j]:\n...             i -= 1\n...         elif tbl[i][j] == tbl[i][j - 1]:\n...             j -= 1\n...         else:\n...             res.append(a[i - 1])\n...             i -= 1\n...             j -= 1\n...     return res[::-1]\n... \n>>> list1 = [1, 2, 3, 4, 5, 6, 7]\n>>> list2 = [7, 6, 3, 4, 5, 8]\n>>> lcs(list1, list2)\n[3, 4, 5]\n", 
          ">>> lcs([1, 2, 3, 4, 5, 6, 7], [7, 3, 6, 4, 8, 5])\n[3, 4, 5]\n"
        ], 
        "score": 2, 
        "id": 26197696, 
        "rank": 0
      }
    ], 
    "title": "Find overlap of two lists, preserving sequence order"
  }, 
  {
    "accepted_answer_post_id": 11005877, 
    "id": 11005809, 
    "answer_posts": [
      {
        "snippets": [
          "myfile = open(\"grep.txt\", \"w\")\nfor i in ...\n    if i[1] ...:\n         myfile.write(i + '\\n')\n", 
          "newstr = '\\n'.join([''.join(i) for i in items if i[1] in items_grep])\n", 
          "with open(\"grep.txt\",\"w\") as f:\n    f.write(newstr)\n"
        ], 
        "score": 1, 
        "id": 11005877, 
        "rank": 0
      }
    ], 
    "title": "How to save an array to a file "
  }, 
  {
    "accepted_answer_post_id": 11509759, 
    "id": 11509721, 
    "answer_posts": [
      {
        "snippets": [
          "data = {k: [] for k in range(2)}\n", 
          "data = dict((k, []) for k in range(2))\n"
        ], 
        "score": 53, 
        "id": 11509759, 
        "rank": 0
      }
    ], 
    "title": "How do I initialize a dictionary of empty lists in Python?"
  }, 
  {
    "accepted_answer_post_id": 37629921, 
    "id": 37629828, 
    "answer_posts": [
      {
        "snippets": [
          "b = map(float, a[0].split(\"*\"))\n", 
          "b = list(map(float, a[0].split(\"*\")))\n", 
          "b = [float(s) for s in a[0].split(\"*\")]\n"
        ], 
        "score": 2, 
        "id": 37629921, 
        "rank": 0
      }
    ], 
    "title": "TypeError: float() argument must be a string or a number, not 'list' python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 4390942, 
    "answer_posts": [
      {
        "snippets": [
          "print \"123\",\nprint \"456\"\n", 
          "sys.stdout.write('123')\nsys.stdout.write('456\\n')\n"
        ], 
        "score": 5, 
        "id": 4390962, 
        "rank": 0
      }
    ], 
    "title": "How can I show the output of two print statements on the same line?"
  }, 
  {
    "accepted_answer_post_id": 26812998, 
    "id": 26812763, 
    "answer_posts": [
      {
        "snippets": [
          "import numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({'Buy/Sell': [1, 0, 1, 1, 0, 1, 0, 0],\n                   'Trader': ['A', 'A', 'B', 'B', 'B', 'C', 'C', 'C']})\n\ngrouped = df.groupby(['Trader'])\nresult = grouped['Buy/Sell'].agg(['sum', 'count'])\nmeans = grouped['Buy/Sell'].mean()\nresult['Buy/Sell'] = np.select(condlist=[means>0.5, means<0.5], choicelist=[1, 0], \n    default=np.nan)\nprint(result)\n", 
          "        Buy/Sell  sum  count\nTrader                      \nA            NaN    1      2\nB              1    2      3\nC              0    1      3\n", 
          "def categorize(x):\n    m = x.mean()\n    return 1 if m > 0.5 else 0 if m < 0.5 else np.nan\nresult = df.groupby(['Trader'])['Buy/Sell'].agg([categorize, 'sum', 'count'])\nresult = result.rename(columns={'categorize' : 'Buy/Sell'})\n", 
          "import numpy as np\nimport pandas as pd\nnp.random.seed(2017)\nN = 10000\ndf = pd.DataFrame({\n    'Buy/Sell': np.random.randint(2, size=N),\n    'Trader': np.random.randint(1000, size=N)})\n\ndef using_select(df):\n    grouped = df.groupby(['Trader'])\n    result = grouped['Buy/Sell'].agg(['sum', 'count'])\n    means = grouped['Buy/Sell'].mean()\n    result['Buy/Sell'] = np.select(condlist=[means>0.5, means<0.5], choicelist=[1, 0], \n        default=np.nan)\n    return result\n\ndef categorize(x):\n    m = x.mean()\n    return 1 if m > 0.5 else 0 if m < 0.5 else np.nan\n\ndef using_custom_function(df):\n    result = df.groupby(['Trader'])['Buy/Sell'].agg([categorize, 'sum', 'count'])\n    result = result.rename(columns={'categorize' : 'Buy/Sell'})\n    return result\n", 
          "In [69]: %timeit using_custom_function(df)\n10 loops, best of 3: 132 ms per loop\n\nIn [70]: %timeit using_select(df)\n100 loops, best of 3: 2.46 ms per loop\n\nIn [71]: 132/2.46\nOut[71]: 53.65853658536585\n"
        ], 
        "score": 4, 
        "id": 26812998, 
        "rank": 0
      }
    ], 
    "title": "Applying a custom groupby aggregate function to output a binary outcome in pandas python"
  }, 
  {
    "accepted_answer_post_id": 26261479, 
    "id": 26261151, 
    "answer_posts": [], 
    "title": "scikit-learn, linearsvc - how to get support vectors from the trained SVM?"
  }, 
  {
    "accepted_answer_post_id": 7006380, 
    "id": 7001008, 
    "answer_posts": [
      {
        "snippets": [
          "import matplotlib.pyplot as plt\nimport numpy as np\nfig=plt.figure(1,figsize=(5,10))\naxis = fig.add_subplot(211, autoscale_on=False, xlim=(1,10), ylim=(0,1))\nN=100\nx = np.linspace(1,10, N)\ny = np.cumsum(np.random.random(N)-0.5)\ny -= y.min()\ny /= y.max()\nplt.plot(x,y)\nplt.savefig('test.png', bbox_inches='tight', pad_inches=0.0)\n"
        ], 
        "score": 4, 
        "id": 7001437, 
        "rank": 0
      }
    ], 
    "title": "How to remove white space at the bottom of matplotlib graph?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 21019942, 
    "answer_posts": [
      {
        "snippets": [
          "target.write(\"%s \\n %s \\n %s \\n\" % (line1, line2, line3))\n", 
          "target.writelines([line1, line2, line3])\n"
        ], 
        "score": 13, 
        "id": 21020007, 
        "rank": 0
      }
    ], 
    "title": "write multiple lines in a file in python"
  }, 
  {
    "accepted_answer_post_id": 37304320, 
    "id": 37299109, 
    "answer_posts": [
      {
        "snippets": [
          "import pandas as pd\ndf1 = pd.DataFrame([[23, 'Moscow', 'Msk', ''],\n                    [34, 'Obninsk', 'Msk', 'Msk'],\n                    [56, '', '', 'Spb'],\n                    [17, 'Tula', 'Spb', '']],\n                   columns=['ID', 'City', 'Region', '2City'])\ndf2 = pd.DataFrame([['Msk', 'Msk'],\n                    ['Spb', 'Spb'],\n                    ['Tula', 'Msk'],\n                    ['Moscow', 'Msk']],\n                   columns=['City', 'Office'])\n\ndf = pd.concat([df1.loc[df1[x].isin(df2['City']), x] for x in ['City', 'Region', '2City']])\ndf1['Join'] = df.groupby(df.index).first()\noutput = df1.merge(df2, left_on='Join', right_on='City', how='right')\n", 
          "df1['Office'] = output['Office']\n", 
          "df1.drop('Join', axis=1, inplace=True)\n"
        ], 
        "score": 0, 
        "id": 37304320, 
        "rank": 0
      }
    ], 
    "title": "VLOOKUP Excel analog in pandas python"
  }, 
  {
    "accepted_answer_post_id": 9402357, 
    "id": 9402151, 
    "answer_posts": [
      {
        "snippets": [
          "import matplotlib.pyplot as plt\n# or from matplotlib import pyplot\n", 
          "plt.title(\"Analysis of Tsunamis in Southeast Asia\")\n# or pyplot.title(\"Analysis of Tsunamis in Southeast Asia\")\n"
        ], 
        "score": 4, 
        "id": 9402357, 
        "rank": 0
      }
    ], 
    "title": "How do I add a title to my MatPlotLib basemap?"
  }, 
  {
    "accepted_answer_post_id": 18447504, 
    "id": 17984029, 
    "answer_posts": [
      {
        "snippets": [
          "import sys\nfrom PyQt4 import QtGui, QtCore\n\nclass MyPushButton(QtGui.QPushButton):\n    def __init__(self, popMenu,elementID, mainForm):\n        super(MyPushButton, self).__init__()\n        self.__elementID = elementID\n        self.__mainForm = mainForm\n        self.__popMenu = popMenu\n\n        self.connect(self, QtCore.SIGNAL('customContextMenuRequested(const QPoint&)'), self.on_context_menu)   \n        self.connect(self, QtCore.SIGNAL('clicked()'),  self,        QtCore.SLOT(\"triggerOutput()\"))    \n\n    def on_context_menu(self, point):\n        # show context menu\n        self.__popMenu.exec_(self.mapToGlobal(point)) \n\n    @QtCore.pyqtSlot()\n    def triggerOutput(self):\n        self.__mainForm.emit(QtCore.SIGNAL(\"buttonXclickedSignal(PyQt_PyObject)\"), self.__elementID) # send signal to MainForm class\n\n\nclass MainForm(QtGui.QWidget):\n    def __init__(self, parent=None):\n        super(MainForm, self).__init__(parent)\n        self.setGeometry(300, 300, 400, 200)\n        VmasterLayout = QtGui.QVBoxLayout(self)\n        self.Hbox = QtGui.QHBoxLayout()\n\n        # Custom signal\n        self.connect(self, QtCore.SIGNAL(\"buttonXclickedSignal(PyQt_PyObject)\"),         self.buttonXclicked)\n\n        for i in range(1,4):\n            # create context menu as you like\n            popMenu = QtGui.QMenu(self)\n            popMenu.addAction(QtGui.QAction('button %s - test0'%(i), self))\n            popMenu.addAction(QtGui.QAction('button %s - test1'%(i), self))\n            popMenu.addSeparator()\n            popMenu.addAction(QtGui.QAction('button %s - test2'%(i), self))\n\n            # create button\n            self.button = MyPushButton(popMenu, i, self)   \n            self.button.setText(\"test button %s\" %(i))    \n            self.button.resize(100, 30)\n\n            # set button context menu policy\n            self.button.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)        \n\n            self.Hbox.addWidget(self.button)\n\n        VmasterLayout.addLayout(self.Hbox)\n\n    def buttonXclicked(self, buttonID):\n        if buttonID == 1: \n            #do something , call some method ..\n            print \"button with ID \", buttonID, \" is clicked\"\n        if buttonID == 2: \n            #do something , call some method ..\n            print \"button with ID \", buttonID, \" is clicked\"\n        if buttonID == 3: \n            #do something , call some method ..\n            print \"button with ID \", buttonID, \" is clicked\"\n\ndef main():\n    app = QtGui.QApplication(sys.argv)\n    form = MainForm()\n    form.show()\n    app.exec_()\n\nif __name__ == '__main__':\n    main()\n"
        ], 
        "score": 1, 
        "id": 18447504, 
        "rank": 0
      }
    ], 
    "title": "python pyqt4 contextMenu on multiple pushButtons"
  }, 
  {
    "accepted_answer_post_id": 15751132, 
    "id": 15750628, 
    "answer_posts": [
      {
        "snippets": [
          "import csv\n\nwith open(\"special.csv\", \"rb\") as infile, open(\"repaired.csv\", \"wb\") as outfile:\n    reader = csv.reader(infile)\n    writer = csv.writer(outfile)\n    conversion = set('_\"/.$')\n    for row in reader:\n        newrow = [''.join('_' if c in conversion else c for c in entry) for entry in row]\n        writer.writerow(newrow)\n", 
          "$ cat special.csv\nth$s,2.3/,will-be\nfixed.,even.though,maybe\nsome,\"shoul\"\"dn't\",be\n", 
          "$ cat repaired.csv \nth_s,2_3_,will-be\nfixed_,even_though,maybe\nsome,shoul_dn't,be\n", 
          "text =  input.read()\n", 
          "newtext = '_'\n", 
          "for c in text:\n", 
          "    newtext += '_' if c in conversion else c\n", 
          "    writer.writerow(c)\n"
        ], 
        "score": 2, 
        "id": 15751132, 
        "rank": 0
      }
    ], 
    "title": "Remove special characters from csv file using python"
  }, 
  {
    "accepted_answer_post_id": 13158292, 
    "id": 13158207, 
    "answer_posts": [
      {
        "snippets": [
          "import re\ntext = open(filename).read()\nprint re.search(\"^\\s*My_NUMBER\\s*=\\s*(\\d*)\\s*$\", text, re.MULTILINE).group(1)\n"
        ], 
        "score": 3, 
        "id": 13158289, 
        "rank": 0
      }
    ], 
    "title": "Read certain part of string from file"
  }, 
  {
    "accepted_answer_post_id": 19316360, 
    "id": 19315870, 
    "answer_posts": [
      {
        "snippets": [
          "for line in reference:       \n    line_list.append(line[:-1].split(\"\\t\\t\"))\nprint line_list[2][0]\n"
        ], 
        "score": 1, 
        "id": 19316360, 
        "rank": 0
      }
    ], 
    "title": "Access an element in a list of lists in python"
  }, 
  {
    "accepted_answer_post_id": 7218855, 
    "id": 7218809, 
    "answer_posts": [
      {
        "snippets": [
          "from itertools import chain\nlist(chain.from_iterable(node.sons.values() for node in current_nodes))\n", 
          "sum((node.sons.values() for node in current_nodes), [])\n"
        ], 
        "score": 4, 
        "id": 7218855, 
        "rank": 0
      }
    ], 
    "title": "How to propagate tree nodes in Python"
  }, 
  {
    "accepted_answer_post_id": 30482178, 
    "id": 30482071, 
    "answer_posts": [
      {
        "snippets": [
          "In [4]: df.groupby('StationID', as_index=False)['BiasTemp'].mean()\nOut[4]:\n  StationID  BiasTemp\n0        BB       5.0\n1     KEOPS       2.5\n2    SS0279      15.0\n", 
          "In [5]: df.groupby('StationID')['BiasTemp'].mean()\nOut[5]:\nStationID\nBB            5.0\nKEOPS         2.5\nSS0279       15.0\nName: BiasTemp, dtype: float64\n"
        ], 
        "score": 3, 
        "id": 30482178, 
        "rank": 0
      }
    ], 
    "title": "How to calculate mean values grouped on another column in Pandas"
  }, 
  {
    "accepted_answer_post_id": 4408409, 
    "id": 4408377, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import subprocess\n>>> cmd = [ 'echo', 'arg1', 'arg2' ]\n>>> output = subprocess.Popen( cmd, stdout=subprocess.PIPE ).communicate()[0]\n>>> print output\narg1 arg2\n\n>>> \n", 
          "import subprocess\nimport tempfile\n\nwith tempfile.TemporaryFile() as tempf:\n    proc = subprocess.Popen(['echo', 'a', 'b'], stdout=tempf)\n    proc.wait()\n    tempf.seek(0)\n    print tempf.read()\n"
        ], 
        "score": 23, 
        "id": 4408409, 
        "rank": 0
      }
    ], 
    "title": "How can I get terminal output in python?"
  }, 
  {
    "accepted_answer_post_id": 17776199, 
    "id": 17776113, 
    "answer_posts": [
      {
        "snippets": [
          "def mazeDetector(row,col, solution):\n    c= m[row][col]\n    solution.append((row, col))\n    if c ==\"W\":\n        print \"Wall here: \"+ str(row)+ \",\"+ str(col)\n        return False\n    elif c ==\"V\":\n        print \"Visited: \" + str(row)+ \",\"+ str(col)\n        return False\n    elif c==\"F\":\n        print \"Found: \"+ str(row)+ \",\"+ str(col)\n        print solution\n        return True\n\n    print \"visiting:\"+ str(row)+ \",\"+ str(col) \n    m[row][col]==\"V\"\n    if (col>0 and mazeDetector(row,col-1, list(solution))):\n        return True\n    elif (row< len(m)-1 and mazeDetector(row+1,col, list(solution))):\n        return True\n    elif (row>0 and mazeDetector(row-1, col, list(solution))):\n        return True\n    elif (col<=len(m)-1 and mazeDetector(row, col+1, list(solution))):\n        return True\n    return False\nmazeDetector(1,5, [])\n", 
          "def mazeDetector(row, col, solution):\n    solution.append((row, col))\n    if m[row][col] == \"F\": return True, solution\n    m[row][col] = \"V\"\n    neighbors = [(row, col - 1), (row + 1, col), (row - 1, col), (row, col + 1)]\n    neighbors = filter(lambda (r, c): r >= 0 and c >= 0 and r < len(m) and c < len(m) and m[r][c] not in (\"V\", \"W\"), neighbors)\n    for r, c in neighbors:\n        t, sol = mazeDetector(r, c, list(solution))\n        if t: return True, sol\n    return False, []\n\nprint mazeDetector(1, 5, [])[1]\n"
        ], 
        "score": 1, 
        "id": 17776199, 
        "rank": 0
      }
    ], 
    "title": "how to make my maze function print out the solution"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 29442670, 
    "answer_posts": [
      {
        "snippets": [
          "numbers = [int(n) for n in input('Enter numbers: ').split()]\n", 
          "numbers = [int(n) for n in raw_input('Enter numbers: ').split()]\n", 
          ">>> numbers = [int(n) for n in raw_input('Enter numbers: ').split()]\nEnter numbers: 1 2 3 4 5\n>>> numbers\n[1, 2, 3, 4, 5]\n"
        ], 
        "score": 0, 
        "id": 29442690, 
        "rank": 0
      }
    ], 
    "title": "How do I store user input into a list?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 30149851, 
    "answer_posts": [
      {
        "snippets": [
          "parser.add_argument('-a', '--alpha', action='append')\n", 
          "namespace(alpha=['1','3'], b='4')\n"
        ], 
        "score": 4, 
        "id": 30153258, 
        "rank": 0
      }
    ], 
    "title": "Python argparse : how to detect duplicated optional argument?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 15376033, 
    "answer_posts": [
      {
        "snippets": [
          "counts = [(len(list(cpart))) for c,cpart in groupby(s) if c == ' ']\n", 
          "s = \"   NAME          ACCOUNT#         DISCOUNT         DUE         DUE\"\n", 
          "groupby(\"hello!!!\")\n[('h', ['h']), ('e', ['e']), ('l', ['l', 'l']), ('o', ['o']), ('!', ['!', '!', '!'])]\n", 
          "word_counts = [ len(word) for word in s.split() ]\n"
        ], 
        "score": 3, 
        "id": 15376561, 
        "rank": 0
      }
    ], 
    "title": "Counting the number of spaces between words in a file using python?"
  }, 
  {
    "accepted_answer_post_id": 33947642, 
    "id": 33945086, 
    "answer_posts": [
      {
        "snippets": [
          "def per_group(blk):\n    return blk.groupby('ts').text.resample('3H', how='sum')\n\ndf.groupby('user_id').apply(per_group, columns=['ts', 'text']).compute()\n"
        ], 
        "score": 1, 
        "id": 33947642, 
        "rank": 0
      }
    ], 
    "title": "Dask DataFrame: Resample over groupby object with multiple rows"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 33093809, 
    "answer_posts": [
      {
        "snippets": [
          ">>> from itertools import chain\n>>> from collections import Counter\n>>> list1, list2, list3 = [12,24,36], [3,5,12,24], [36,41,69]\n>>> Counter(chain(list1, list2, list3))\nCounter({3: 1, 5: 1, 12: 2, 24: 2, 36: 2, 41: 1, 69: 1})\n"
        ], 
        "score": 6, 
        "id": 33093930, 
        "rank": 0
      }
    ], 
    "title": "count the frequency of elements in list of lists in Python"
  }, 
  {
    "accepted_answer_post_id": 5651824, 
    "id": 5651763, 
    "answer_posts": [
      {
        "snippets": [
          "from datetime import datetime\n\ndef a_view(request):\n    return render_to_response(\"a_template.html\", {\n        'time':datetime.now(),\n        }, context_instance=RequestContext(request))\n", 
          "<p>{{time}}</p>\n"
        ], 
        "score": 1, 
        "id": 5651824, 
        "rank": 0
      }
    ], 
    "title": "Django Want to print the date & time for today"
  }, 
  {
    "accepted_answer_post_id": 7253436, 
    "id": 7252851, 
    "answer_posts": [
      {
        "snippets": [
          "In [79]: x=np.random.randint(0,3,size=100)\n\nIn [80]: y=np.random.randint(0,100,size=100)\n\nIn [81]: d=np.vstack([x,y]).T\n\nIn [88]: print d[:5,:]\n[[ 0 43]\n [ 1 60]\n [ 2 60]\n [ 1  4]\n [ 0 30]]\n", 
          "In [82]: idx=np.unique(d[:,0])\n\nIn [83]: print idx\n[0 1 2]\n", 
          "[113]: g=(d[np.where(d[:,0]==val),1].std() for val in idx)\n", 
          "In [114]: print np.vstack([idx,np.fromiter(g,dtype=np.float)]).T\n[[  0.          26.87376385]\n [  1.          29.41046084]\n [  2.          24.2477246 ]]\n"
        ], 
        "score": 4, 
        "id": 7253436, 
        "rank": 0
      }
    ], 
    "title": "Composite a numpy array/matrix based on column values and variables?"
  }, 
  {
    "accepted_answer_post_id": 28080146, 
    "id": 28079963, 
    "answer_posts": [
      {
        "snippets": [
          ">>> pd.read_csv('test.csv', header=None).values.reshape(-1,2)\narray([[  2.83,  25.56],\n       [  3.01,  33.21],\n       [  3.33,  41.41]])\n", 
          ">>> pd.DataFrame(pd.read_csv('test.csv', header=None).values.reshape(-1,2))\n      0      1\n0  2.83  25.56\n1  3.01  33.21\n2  3.33  41.41\n", 
          ">>> pd.DataFrame(pd.read_csv('test.csv', header=None, squeeze=True).reshape(-1,2))\n"
        ], 
        "score": 1, 
        "id": 28080146, 
        "rank": 0
      }
    ], 
    "title": "Read 2 lines of a file into a dataframe with two columns using pandas read_csv()"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 34301809, 
    "answer_posts": [
      {
        "snippets": [
          "# FILE 1\nimport pypyodbc\n\ndef dbconn():\n    try:\n        cononnection = pypyodbc.connect('DRIVER={SQL Server};'\n                                            'SERVER=........'\n                                            'DATABASE=......'\n                                            'UID=......;PWD=......')\n        return connection \n    except:\n        print(\"I am unable to connect to the SQL SERVER Database\")\n", 
          "import AnotherPythonFile as File1   \n\ndef query():     \n     # EACH WILL USE DIFFERENT INSTANCES OF SAME CONNECTION OBJECT\n     conxn1 = File1.dbconn()\n     conxn2 = File1.dbconn() \n", 
          "cursr.execute(\"SLEECT * FROM Table;\")\n"
        ], 
        "score": 0, 
        "id": 34302997, 
        "rank": 0
      }
    ], 
    "title": "pypyodbc - Reusing a Database Connection"
  }, 
  {
    "accepted_answer_post_id": 11678388, 
    "id": 11678113, 
    "answer_posts": [
      {
        "snippets": [
          "arr = np.zeros((dim,dim), dtype = 'bool')\n", 
          "arr = np.matrix(arr)\n", 
          "arr[row_num]\n", 
          "arr[row_num] = new_row\n"
        ], 
        "score": 6, 
        "id": 11678388, 
        "rank": 0
      }
    ], 
    "title": "Efficient manipulations of binary matrix in numpy"
  }, 
  {
    "accepted_answer_post_id": 11130796, 
    "id": 11111779, 
    "answer_posts": [
      {
        "snippets": [
          "web.sendmail(from_address, to_address, subject, msg, headers={'Content-Type':'text/html;charset=utf-8'})\n", 
          "def prepare_message(self):\n    for k, v in self.headers.iteritems():\n        if k.lower() == \"content-type\":\n            self.message.set_type(v)\n        else:\n            self.message.add_header(k, v)\n\n    self.headers = {}\n"
        ], 
        "score": 1, 
        "id": 11130796, 
        "rank": 0
      }
    ], 
    "title": "How to send mail only using web.py in python?"
  }, 
  {
    "accepted_answer_post_id": 16872649, 
    "id": 16871109, 
    "answer_posts": [
      {
        "snippets": [
          "$ ffmpeg -s 352x288 -i foreman_cif_frame_0.yuv f.png\nffmpeg version N-46810-g7750c48 Copyright (c) 2000-2012 the FFmpeg developers\n  built on Apr 21 2013 11:12:24 with gcc 4.6 (Ubuntu/Linaro 4.6.3-1ubuntu5)\n  configuration: --enable-gpl --enable-libx264 --enable-libmp3lame\n  libavutil      52.  7.100 / 52.  7.100\n  libavcodec     54. 71.100 / 54. 71.100\n  libavformat    54. 36.100 / 54. 36.100\n  libavdevice    54.  3.100 / 54.  3.100\n  libavfilter     3. 23.100 /  3. 23.100\n  libswscale      2.  1.102 /  2.  1.102\n  libswresample   0. 16.100 /  0. 16.100\n  libpostproc    52.  1.100 / 52.  1.100\n[rawvideo @ 0x18a1320] Estimating duration from bitrate, this may be inaccurate\nInput #0, rawvideo, from 'foreman_cif_frame_0.yuv':\n  Duration: N/A, start: 0.000000, bitrate: N/A\n    Stream #0:0: Video: rawvideo (I420 / 0x30323449), yuv420p, 352x288, 25 tbr, 25 tbn, 25 tbc\nOutput #0, image2, to 'f.png':\n  Metadata:\n    encoder         : Lavf54.36.100\n    Stream #0:0: Video: png, rgb24, 352x288, q=2-31, 200 kb/s, 90k tbn, 25 tbc\nStream mapping:\n  Stream #0:0 -> #0:0 (rawvideo -> png)\nPress [q] to stop, [?] for help\nframe=    1 fps=0.0 q=0.0 Lsize=       0kB time=00:00:00.04 bitrate=   0.0kbits/s    \nvideo:201kB audio:0kB subtitle:0 global headers:0kB muxing overhead -100.000000%\n", 
          "$ convert -size 352x288 -depth 8 foreman_cif_frame_0.yuv f2.png \n", 
          "$ compare -compose src f.png f2.png diff.png\n", 
          "# Here I'm assuming you get the data from the drone into parameter raw\n# 1 frame contains 640*480*3/2 = 460800 bytes\nimport numpy as np\n\n# turn raw into a numpy array\nraw = np.array(raw)\n\n# calculate where each plane starts and stops\nwh = 640 * 480\np = (0, wh, wh, wh/4*5, wh/4*5, wh/2*3)\n\n# Now use slizing to extract the different planes\nyy = np.empty(640*480, dtype=np.uint8)\ncb = np.empty(640*480/4, dtype=np.uint8)\ncb = np.empty(640*480/4, dtype=np.uint8)\n\nyy = raw[p[0]:p[1]]\ncb = raw[p[2]:p[3]]\ncr = raw[p[4]:p[5]]\n", 
          "yy.reshape([480, 640])\ncb.reshape([480 / 2, 640 / 2])\ncr.reshape([480 / 2, 640 / 2])\n"
        ], 
        "score": 1, 
        "id": 16872649, 
        "rank": 0
      }
    ], 
    "title": "YUV420p to other formats, color shift problems"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 25632435, 
    "answer_posts": [
      {
        "snippets": [
          "datap += sock.recv(sizeof(message) - amount_received)\n", 
          "payload = payload_t.from_buffer_copy(datap)\n"
        ], 
        "score": 0, 
        "id": 25640277, 
        "rank": 0
      }
    ], 
    "title": "Send/receive data through socket using python and ctype Structure"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 33978870, 
    "answer_posts": [
      {
        "snippets": [
          "return render_template('zapa.html', states=states)\n", 
          "@app.route('/control', methods=['GET', 'POST'])\ndef control():\n    if request.method == 'POST':\n        val = int(request.form['change rele state'])\n        current_states = states[:]\n        current_states[val] = not current_states[val]\n        return render_template('zapa.html', states=current_states)\n    else:\n        return render_template('zapa.html', states=states)\n"
        ], 
        "score": 0, 
        "id": 33978966, 
        "rank": 0
      }
    ], 
    "title": "Reload page re-send the data"
  }, 
  {
    "accepted_answer_post_id": 20438114, 
    "id": 20438012, 
    "answer_posts": [
      {
        "snippets": [
          ">>> food = \"pizza\"\n>>> json.dumps({\"favorite_food\":[food]})\n'{\"favorite_food\": [\"pizza\"]}'\n"
        ], 
        "score": 5, 
        "id": 20438114, 
        "rank": 0
      }
    ], 
    "title": "Python json.dumps with string interpolation?"
  }, 
  {
    "accepted_answer_post_id": 3481575, 
    "id": 3481289, 
    "answer_posts": [
      {
        "snippets": [
          "float(repr(a_float)) == a_float\n", 
          "Python 2.6.4 (r264:75708, Oct 26 2009, 08:23:19) [MSC v.1500 32 bit (Intel)] on win32\n>>> f = 0.38288746115497402\n>>> repr(f)\n'0.38288746115497402'\n>>> float(repr(f)) == f\nTrue\n\nPython 2.7 (r27:82525, Jul  4 2010, 09:01:59) [MSC v.1500 32 bit (Intel)] on win32\n>>> f = 0.38288746115497402\n>>> repr(f)\n'0.382887461154974'\n>>> float(repr(f)) == f\nTrue\n"
        ], 
        "score": 40, 
        "id": 3481575, 
        "rank": 0
      }
    ], 
    "title": "Converting a Python Float to a String without losing precision"
  }, 
  {
    "accepted_answer_post_id": 18945266, 
    "id": 18945109, 
    "answer_posts": [
      {
        "snippets": [
          "from google.appengine.ext import ndb\n\nndb.delete_multi(\n    Game.query().fetch(keys_only=True)\n)\n"
        ], 
        "score": 35, 
        "id": 18945266, 
        "rank": 0
      }
    ], 
    "title": "How to delete all entities for NDB Model in Google App Engine for python?"
  }, 
  {
    "accepted_answer_post_id": 2309910, 
    "id": 2309828, 
    "answer_posts": [
      {
        "snippets": [
          ">>> d = datetime.datetime.now()\n>>> \"%d/%d/%d\"%(d.month, d.day, d.year)\n4/8/2012\n"
        ], 
        "score": 21, 
        "id": 2309945, 
        "rank": 0
      }
    ], 
    "title": "Get rid of leading zeros for date strings in Python?"
  }, 
  {
    "accepted_answer_post_id": 21135802, 
    "id": 21135033, 
    "answer_posts": [
      {
        "snippets": [
          "[{\"status\": \"Registered\", \"credential\": \"10000323xsds\", \"scan_time\": \"Jan.15,2014, 03:30 pm\", \"asset_code\": \"cls103\", \"emp_id\": \"LS07\", \"location\": \"BLR-10\", \"auth_code\": \"DSC(Verisign\", \"operator\": \"pradeep\", \"id\": 538}]\n", 
          "for jo in j_obj: \n    print j_obj[jo]['status']\n", 
          "for jo in j_obj: \n    print jo['status']\n"
        ], 
        "score": 7, 
        "id": 21135802, 
        "rank": 0
      }
    ], 
    "title": "How to parse json data python django?"
  }, 
  {
    "accepted_answer_post_id": 38170102, 
    "id": 38170071, 
    "answer_posts": [
      {
        "snippets": [
          "#Read CSV File\ndef read_csv(file, json_file, format):\n    csv_rows = []\n    with open(file) as csvfile:\n        reader = csv.DictReader(csvfile)\n        title = reader.fieldnames\n        for row in reader:\n            csv_rows.extend([{title[i]:row[title[i]] for i in range(len(title))}])\n        write_json(csv_rows, json_file, format)\n\n#Convert csv data into json and write it\ndef write_json(data, json_file, format):\n    with open(json_file, \"w\") as f:\n        if format == \"pretty\":\n            f.write(json.dumps(data, sort_keys=False, indent=4, separators=(',', ': '),encoding=\"utf-8\",ensure_ascii=False))\n        else:\n            f.write(json.dumps(data))\n"
        ], 
        "score": 2, 
        "id": 38170095, 
        "rank": 0
      }
    ], 
    "title": "csv to json convertion with python"
  }, 
  {
    "accepted_answer_post_id": 26579158, 
    "id": 26579033, 
    "answer_posts": [
      {
        "snippets": [
          "def average(*args):\n    if type(args) is tuple:\n        r = 0\n        for x in args:\n            for y in x:\n                r += y\n        print r / float(len(x))\n    else:\n        print sum(args) / float(len(args))\n\naverage([2, 3, 8, 1, 9])\n"
        ], 
        "score": 1, 
        "id": 26579080, 
        "rank": 0
      }
    ], 
    "title": "Creating a function that takes a list or integer as argument (Python)"
  }, 
  {
    "accepted_answer_post_id": 19763148, 
    "id": 19763132, 
    "answer_posts": [
      {
        "snippets": [
          "a = [(1, 2), (1, 4), (1, 6)]\nprint reduce(lambda x, y: (x[0] + y[0], x[1] + y[1]), a)\n", 
          "(3, 12)\n", 
          "a = []\nprint reduce(lambda x, y: (x[0] + y[0], x[1] + y[1]), [(0, 0)] + a)\n", 
          "(0, 0)\n", 
          "a = []\nprint reduce(lambda x, y: (x[0] + y[0], x[1] + y[1]), a, (0, 0))\n"
        ], 
        "score": 9, 
        "id": 19763148, 
        "rank": 0
      }
    ], 
    "title": "How to use the reduce function on a list of tuples?"
  }, 
  {
    "accepted_answer_post_id": 21403890, 
    "id": 21398942, 
    "answer_posts": [
      {
        "snippets": [
          "df[(df['datecol'] >= pd.datetime(2014, 1, 1)) & (df['datecol'] <= pd.datetime(2014, 1, 31))]\n", 
          "crit1 = df['datecol'].map(lambda x : x.year == 2014)\ncrit2 = df['datecol'].map(lambda x : x.month == 1)\n\ndf[crit1 & crit2]\n"
        ], 
        "score": 1, 
        "id": 21403890, 
        "rank": 0
      }
    ], 
    "title": "Selecting rows with a particualr year and month"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 11119632, 
    "answer_posts": [
      {
        "snippets": [
          ">>> print hex(0x12ef ^ 0xabcd)\n0xb922\n", 
          ">>> print int(\"12ef\", 16)\n4874\n", 
          ">>> print hex(int(\"12ef\", 16) ^ int(\"abcd\", 16))\n0xb922\n"
        ], 
        "score": 89, 
        "id": 11119660, 
        "rank": 0
      }
    ], 
    "title": "bitwise XOR of hex numbers in python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 22698687, 
    "answer_posts": [
      {
        "snippets": [
          "import numpy as np\n\narr = np.array([[-0.30565392, -0.96605562],\n                [ 0.85331367, -2.62963495],\n                [ 0.87839643, -0.28283675],\n                [ 0.72676698,  0.93213482],\n                [-0.52007354,  0.27752806],\n                [-0.08701666,  0.22764316],\n                [-1.78897817,  0.50737573],\n                [ 0.62260038, -1.96012161],\n                [-1.98231706,  0.36523876],\n                [-1.07587382, -2.3022289 ]])\n", 
          ">>> arr[arr[:, 1].argsort()]\narray([[ 0.85331367, -2.62963495],\n       [-1.07587382, -2.3022289 ],\n       [ 0.62260038, -1.96012161],\n       [-0.30565392, -0.96605562],\n       [ 0.87839643, -0.28283675],\n       [-0.08701666,  0.22764316],\n       [-0.52007354,  0.27752806],\n       [-1.98231706,  0.36523876],\n       [-1.78897817,  0.50737573],\n       [ 0.72676698,  0.93213482]])\n", 
          ">>> arr[np.argsort(arr[:, 1])]\narray([[ 0.85331367, -2.62963495],\n       [-1.07587382, -2.3022289 ],\n       [ 0.62260038, -1.96012161],\n       [-0.30565392, -0.96605562],\n       [ 0.87839643, -0.28283675],\n       [-0.08701666,  0.22764316],\n       [-0.52007354,  0.27752806],\n       [-1.98231706,  0.36523876],\n       [-1.78897817,  0.50737573],\n       [ 0.72676698,  0.93213482]])\n"
        ], 
        "score": 21, 
        "id": 22699957, 
        "rank": 0
      }
    ], 
    "title": "How to sort 2D array (numpy.ndarray) based to the second column in python?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 34889012, 
    "answer_posts": [
      {
        "snippets": [
          "print(\"please copy and paste your charge discharge data.\\n\"\n      \"To end recording Press Ctrl+d on Linux/Mac on Crtl+z on Windows\")\nlines = []\ntry:\n    while True:\n        lines.append(raw_input())\nexcept EOFError:\n    pass\nlines = \"\\n\".join(lines)\n"
        ], 
        "score": 2, 
        "id": 34889391, 
        "rank": 0
      }
    ], 
    "title": "How to paste multiple lines of text into python input"
  }, 
  {
    "accepted_answer_post_id": 12096439, 
    "id": 12096377, 
    "answer_posts": [
      {
        "snippets": [
          "import imp\nmy_module = imp.load_compiled(\"my_module\", \"full_path_to_my_module/my_module.pyc\")\n", 
          "my_module.yayfunctions('a')\n", 
          "$ cat /tmp/my_module.py\ndef yayfunctions(a):\n    print a\n$ python -m compileall /tmp/my_module.py\n$ ls /tmp/my_module.py*\nmy_module.py   my_module.pyc\n$ python\n>>> import imp\n>>> my_module = imp.load_compiled(\"my_module\", \"/tmp/my_module.pyc\")\n>>> my_module.yayfunctions('a')\na\n", 
          "import os\n\n\ndef load_path(filepath):\n    \"\"\"Given a path like /path/to/my_module.pyc (or .py) imports the\n    module and returns it\n    \"\"\"\n\n    path, fname = os.path.split(filepath)\n    modulename, _ = os.path.splitext(fname)\n\n    if path not in sys.path:    \n        sys.path.insert(0, path)\n\n    return __import__(modulename)\n\n\nif __name__ == '__main__':\n    # Example usage\n    my_module = load_path('/tmp/my_module.py')\n    my_module.yayfunctions('test')\n"
        ], 
        "score": 4, 
        "id": 12096439, 
        "rank": 0
      }
    ], 
    "title": "trying to import a *.pyc as a module"
  }, 
  {
    "accepted_answer_post_id": 10183147, 
    "id": 10182628, 
    "answer_posts": [
      {
        "snippets": [
          "import re\n\nregex = re.compile(r'(\\d*)([A-Za-z ]+)$')\ncard_list = [\"2 Cardname\", \"3 Cardname Two\", \"Cardname Three\"]\ncard_dict = {}\n\nfor quantity, name in (regex.match(card).groups() for card in card_list):\n    if not quantity:\n        quantity = 1\n    card_dict[name.strip()] = int(quantity)\n\nprint(card_dict)\n", 
          "{'Cardname Two': 3, 'Cardname Three': 1, 'Cardname': 2}\n", 
          "regex = re.compile(r'(\\d*)x?([A-Za-z ]+)$')\n", 
          "{name.strip(): quantity for quantity, name in (regex.match(card).groups() for card in card_list)}\n"
        ], 
        "score": 1, 
        "id": 10182789, 
        "rank": 0
      }
    ], 
    "title": "Use groupdict to parse string to dict"
  }, 
  {
    "accepted_answer_post_id": 6883050, 
    "id": 6883033, 
    "answer_posts": [
      {
        "snippets": [
          "def nodeMethod(self, *args):\n    return args[0], args[1]\n", 
          ">>> class Node(object):\n...     def nodeMethod(self, *cornucopia):\n...         return cornucopia[0], cornucopia[1]\n... \n>>> n = Node()\n>>> n.nodeMethod(1, 2, 3)\n(1, 2)\n"
        ], 
        "score": 7, 
        "id": 6883050, 
        "rank": 0
      }
    ], 
    "title": "accessing *args from within a function in Python"
  }, 
  {
    "accepted_answer_post_id": 13337538, 
    "id": 13336628, 
    "answer_posts": [
      {
        "snippets": [
          "html = open('led.html','r').read()\n", 
          "import cherrypy\nimport os.path\nimport struct\nfrom jinja2 import Template\n\nclass Server(object):\n    led_switch=1 \n    def index(self,  switch=''):\n        myText = ''\n        if switch:\n            self.led_switch = int(switch)             \n            myText = \"Please Wait\"\n        html = Template(\"\"\"\n                <html>\n                <body onload='setTimeout(function(){document.getElementById(\"UserMessage\").innerHTML = \"Ok! it's done\"}, 5000)'>\n                <br>\n                <p id=\"UserMessage\">{{ htmlText }}<p>\n                <a href=\"?switch=1\"><img src=\"images/on.png\"></a>\n                </body>\n                </html>\n                \"\"\")\n\n        return html.render(htmlText=myText)\n    index.exposed = True\n\n    conf = {\n        'global' : { \n            'server.socket_host': '0.0.0.0', #0.0.0.0 or specific IP\n            'server.socket_port': 8080 #server port\n        },\n\n        '/images': { #images served as static files\n            'tools.staticdir.on': True,\n            'tools.staticdir.dir': os.path.abspath('images')\n        },\n\n        '/favicon.ico': {  #favorite icon\n            'tools.staticfile.on': True,  \n            'tools.staticfile.filename': os.path.abspath(\"images/bulb.ico\")\n        }\n    }\ncherrypy.quickstart(Server(), config=conf)\n"
        ], 
        "score": 0, 
        "id": 13337538, 
        "rank": 0
      }
    ], 
    "title": "How to display text on the web page using python and HTML"
  }, 
  {
    "accepted_answer_post_id": 18746154, 
    "id": 18737942, 
    "answer_posts": [
      {
        "snippets": [
          "Y = pdist(X, f)\n", 
          "dm = pdist(X, lambda u, v: np.sqrt(((u-v)**2).sum()))\n", 
          "scipy.cluster.hierarchy.linkage(y, method='single', metric='euclidean')\n"
        ], 
        "score": 3, 
        "id": 18746154, 
        "rank": 0
      }
    ], 
    "title": "Clustering in python(scipy) with space and time variables"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 34442293, 
    "answer_posts": [
      {
        "snippets": [
          "   df['col'].apply(lambda x : pd.Series(x.split(',')))\n", 
          "   df['col'].apply(lambda x : pd.Series( x.replace( '),' , ')&&' ).split('&&'))) \n"
        ], 
        "score": 1, 
        "id": 34443863, 
        "rank": 0
      }
    ], 
    "title": "Parse lists in pandas columns"
  }, 
  {
    "accepted_answer_post_id": 34584203, 
    "id": 34584109, 
    "answer_posts": [
      {
        "snippets": [
          "from sys import argv\nimport codecs\nscript, filename = argv\n\nfile = codecs.open(filename, encoding='utf-16')\nsentence = file.read()\nprint sentence\nfile.close()\n"
        ], 
        "score": 1, 
        "id": 34584203, 
        "rank": 0
      }
    ], 
    "title": "Python Read String from File with Strange Encoding"
  }, 
  {
    "accepted_answer_post_id": 27537824, 
    "id": 27537779, 
    "answer_posts": [
      {
        "snippets": [
          "from django.shortcuts import redirect\n\ndef my_view(request):\n    service = RestaurantService.objects.get(pk=5)\n    return redirect('user_view', service_name=service.service_name) \n"
        ], 
        "score": 2, 
        "id": 27537824, 
        "rank": 0
      }
    ], 
    "title": "How do you pass a string parameter in a view to a url?"
  }, 
  {
    "accepted_answer_post_id": 16577648, 
    "id": 16577632, 
    "answer_posts": [
      {
        "snippets": [
          "json.loads(data)\n", 
          "json.load(request)\n", 
          "import requests\n\njson = requests.get(url).json()\n"
        ], 
        "score": 15, 
        "id": 16577648, 
        "rank": 0
      }
    ], 
    "title": "Convert string to JSON in Python?"
  }, 
  {
    "accepted_answer_post_id": 17194846, 
    "id": 17194670, 
    "answer_posts": [
      {
        "snippets": [
          " >>> import csv\n >>> with open('eggs.csv', 'rb') as csvfile:\n ...     spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')\n ...     for row in spamreader:\n ...         print ', '.join(row)\n Spam, Spam, Spam, Spam, Spam, Baked Beans\n Spam, Lovely Spam, Wonderful Spam\n", 
          "import csv\nwith open('eggs.csv', 'a') as csvfile:\n    spamwriter = csv.writer(csvfile, delimiter=',',\n                            quotechar='|', quoting=csv.QUOTE_MINIMAL)\n    spamwriter.writerow(['Spam'] * 5 + ['Baked Beans'])\n    spamwriter.writerow(['Spam', 'Lovely Spam', 'Wonderful Spam'])\n"
        ], 
        "score": 4, 
        "id": 17194846, 
        "rank": 0
      }
    ], 
    "title": "opening an excel file and writing to it in python"
  }, 
  {
    "accepted_answer_post_id": 10301755, 
    "id": 10301687, 
    "answer_posts": [
      {
        "snippets": [
          "with open(\"a.txt\") as a:\n    with open(\"b.txt\") as b:\n        with open(\"c.txt\", \"w\") as c:\n            c.write(\"\".join(set(a) - set(b)))\n", 
          "with open(\"a.txt\") as a:\n    with open(\"b.txt\") as b:\n        with open(\"c.txt\", \"w\") as c:\n            b_lines = set(b)\n            c.write(\"\".join(line for line in a if not line in b_lines))\n"
        ], 
        "score": 14, 
        "id": 10301755, 
        "rank": 0
      }
    ], 
    "title": "What's the fastest way to find unique lines from huge file A as compared to huge file B using python?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 18817207, 
    "answer_posts": [
      {
        "snippets": [
          "coordinates = []\n\nfor x in range(11):\n  for y in range(11):\n    coordinates.append((x, y))\n", 
          "coordinates = [(x,y) for x in range(11) for y in range(11)]\n"
        ], 
        "score": 5, 
        "id": 18817249, 
        "rank": 0
      }
    ], 
    "title": "Use Python to create 2D coordinate"
  }, 
  {
    "accepted_answer_post_id": 4857146, 
    "id": 4856887, 
    "answer_posts": [
      {
        "snippets": [
          "ExtEntry.objects.filter(categories=my_category)\n", 
          "for e in category.entry_set.select_related('extentry'):\n    e.extentry # already loaded because of `select_related`, \n               # however might be None if there is no Extentry for current e\n", 
          "for e in category.entry_set.select_related('extentry').exlude(extentry=None):\n    e.extentry # now this definitely is something, not None\n", 
          "SELECT entry.*, extentry.* FROM entry\nLEFT OUTER JOIN `extentry` ON (entry.id = extentry.entry_ptr_id) \nWHERE NOT (entry.id IN (SELECT U0.id FROM entry U0 LEFT OUTER JOIN \n                        extentry U1 ON (U0.id = U1.entry_ptr_id) \n                        WHERE U1.entry_ptr_id IS NULL))\n"
        ], 
        "score": 3, 
        "id": 4857146, 
        "rank": 0
      }
    ], 
    "title": "Django ForeignKey _set on an inherited model"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 19924794, 
    "answer_posts": [
      {
        "snippets": [
          " import Skype4Py\n\n def user_status(Status):\n     print 'The status of the user changed'\n\n skype = Skype4Py.Skype()\n skype.OnUserStatus = user_status\n"
        ], 
        "score": 0, 
        "id": 19925134, 
        "rank": 0
      }
    ], 
    "title": "Accept friend request on Skype4Py"
  }, 
  {
    "accepted_answer_post_id": 32791531, 
    "id": 32791377, 
    "answer_posts": [
      {
        "snippets": [
          "l1=[]\nl2=[]\nd={}\nread_file=open('edges.txt','r')\nsplit= [line.strip() for line in read_file]\nfor line in split:\n    l1.append(line.split('  ')[0].strip())\n    l2.append('  '.join(line.split('  ')[1:]).strip())\nd=dict(zip(l1,l2))\nprint d\n", 
          "'  '.join(line.split('  ')[1:]).strip()\n", 
          "line.split('  ')[1].strip()\n"
        ], 
        "score": 0, 
        "id": 32791487, 
        "rank": 0
      }
    ], 
    "title": "data read from a text file into two lists in python"
  }, 
  {
    "accepted_answer_post_id": 3940755, 
    "id": 3940721, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import re\n>>> r = re.compile(r'(.)\\1*')\n>>> [m.group() for m in r.finditer('AAABBBCDEEEEBBBAA')]\n['AAA', 'BBB', 'C', 'D', 'EEEE', 'BBB', 'AA']\n", 
          ">>> import itertools\n>>> [''.join(g) for k, g in itertools.groupby('AAABBBCDEEEEBBBAA')]\n['AAA', 'BBB', 'C', 'D', 'EEEE', 'BBB', 'AA']\n"
        ], 
        "score": 15, 
        "id": 3940744, 
        "rank": 0
      }
    ], 
    "title": "How to split this string with python?"
  }, 
  {
    "accepted_answer_post_id": 19551743, 
    "id": 19551589, 
    "answer_posts": [
      {
        "snippets": [
          ">>> int(\"\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: invalid literal for int() with base 10: ''\n", 
          "currentGuess = s.recv(1024).decode()\ncurrentGuess = int(currentGuess)\n"
        ], 
        "score": 1, 
        "id": 19551738, 
        "rank": 0
      }
    ], 
    "title": "Python Error ValueError: invalid literal for int() with base 10 ' '"
  }, 
  {
    "accepted_answer_post_id": 25793327, 
    "id": 25791763, 
    "answer_posts": [
      {
        "snippets": [
          "def SP2T():\n    global button1\n    ...\n\ndef SW02():\n    global button1\n    ...\n", 
          "import tkinter as tk\n\nclass MyGui(tk.Tk):\n\n    def __init__(self):\n        super(MyGui, self).__init__()\n        self.create_widgets()\n\n\n    def create_widgets(self):\n        self.frame = tk.Frame(self)\n        self.frame.pack()\n        self.buttonA = tk.Button(self.frame, padx=13, pady=6, bd=4, text=\"SP2T\",\n                                 fg=\"black\", command=self.SP2T)\n        self.buttonA.pack(side=tk.LEFT)\n\n    def SW02(self):\n        print(\"SW02 is on\")\n        self.button1[\"fg\"] = \"green\"\n\n    def SP2T(self):\n        self.button1 = tk.Button(self.frame, padx=13, pady=6, bd=4, text=\"SW02\",\n                                 fg=\"black\", command=self.SW02)\n        self.button1.pack(side=tk.LEFT)\n\nif __name__ == \"__main__\":\n    root = MyGui()\n    root.mainloop()\n"
        ], 
        "score": 2, 
        "id": 25793327, 
        "rank": 0
      }
    ], 
    "title": "Changing Button Color in a python GUI"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 31370809, 
    "answer_posts": [
      {
        "snippets": [
          "def fileCount(fname):\n    #counting variables\n    d = {\"lines\":0, \"words\": 0, \"lengths\":[]}\n    #file is opened and assigned a variable\n    with open(fname, 'r') as f:\n        for line in f:\n            # split into words\n            spl = line.split()\n            # increase count for each line\n            d[\"lines\"] += 1\n            # add length of split list which will give total words\n            d[\"words\"] += len(spl)\n            # get the length of each word and sum\n            d[\"lengths\"].append(sum(len(word) for word in spl))\n    return d\n\ndef main():\n    fname = input('Enter the name of the file to be used: ')\n    data = fileCount(fname)\n    print (\"There are {lines} lines in the file.\".format(**data))\n    print (\"There are {} characters in the file.\".format(sum(data[\"lengths\"])))\n    print (\"There are {words} words in the file.\".format(**data))\n    # enumerate over the lengths, outputting char count for each line\n    for ind, s in enumerate(data[\"lengths\"], 1):\n        print(\"Line: {} has {} characters.\".format(ind, s))\nmain()\n"
        ], 
        "score": 0, 
        "id": 31370984, 
        "rank": 0
      }
    ], 
    "title": "Count the number of characters in each line"
  }, 
  {
    "accepted_answer_post_id": 16947506, 
    "id": 16930632, 
    "answer_posts": [
      {
        "snippets": [
          "values = insert(values, [0], (1,2,3))\n", 
          "array([(0, 1, 3), (0, 0, 0), (0, 0, 4), ..., (255, 255, 251), (255, 255, 253), (255, 255, 255)],\n       dtype=[('R', 'u1'), ('G', 'u1'), ('B', 'u1')])\n", 
          "str(values[0]) == str((0,0,0))\n", 
          "eval(str(values[0])) == eval(str(0,0,0))\n"
        ], 
        "score": 1, 
        "id": 16947506, 
        "rank": 0
      }
    ], 
    "title": "Create new numpy array-scalar of flexible dtype"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 27964942, 
    "answer_posts": [
      {
        "snippets": [
          "with open(\"input.txt\") as f:\n     lines = f.readlines()\n\nfor line in lines[2:]:\n     columns = line.split()\n     print(columns[1])\n", 
          "with open(\"input.txt\") as f:\n     content = f.read()  # does not detect lines\n\nlines = content.split(\"\\n\")\nfor line in lines[2:]:\n     columns = line.split()\n     print(columns[1])\n", 
          "with open(\"input.txt\") as f:\n     content = f.read()  # does not detect lines\n\nlines = re.split(\"\\r?\\n?\", content)\nfor line in lines[2:]:\n     columns = line.split()\n     print(columns[1])\n"
        ], 
        "score": 0, 
        "id": 27965418, 
        "rank": 0
      }
    ], 
    "title": "extract a column from a string in python"
  }, 
  {
    "accepted_answer_post_id": 18391515, 
    "id": 18391435, 
    "answer_posts": [
      {
        "snippets": [
          "In [32]: from pandas import DataFrame, date_range, concat\n\nIn [33]: from numpy.random import randn\n\nIn [34]: df = DataFrame(randn(5, 1), index=date_range('20010101', periods=5), columns=['A'])\n\nIn [35]: df2 = DataFrame(randn(3, 2), columns=list('BC'))\n\nIn [36]: concat([df, df2.set_index(df.index[:len(df2)])], axis=1)\nOut[36]:\n                A      B      C\n2001-01-01 -0.043  0.759 -0.125\n2001-01-02 -1.377  0.895  0.629\n2001-01-03  0.263 -0.007 -0.515\n2001-01-04  1.546    NaN    NaN\n2001-01-05 -0.657    NaN    NaN\n", 
          "In [7]: df.join(df2.set_index(df.index[:len(df2)]))\nOut[7]:\n                A      B      C\n2001-01-01 -0.607 -0.038  0.593\n2001-01-02  0.573  0.399 -0.627\n2001-01-03  0.319  0.312 -0.152\n2001-01-04 -1.671    NaN    NaN\n2001-01-05 -1.589    NaN    NaN\n"
        ], 
        "score": 2, 
        "id": 18391515, 
        "rank": 0
      }
    ], 
    "title": "Copy index from DataFrame to second frame when 'index length mismatch'"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 30534377, 
    "answer_posts": [
      {
        "snippets": [
          "max(list,key=lambda x:x[1])\n", 
          "from operator import itemgetter\nmax(list,key=itemgetter(1))\n"
        ], 
        "score": 4, 
        "id": 30534435, 
        "rank": 0
      }
    ], 
    "title": "finding maximum value in python list of tuples"
  }, 
  {
    "accepted_answer_post_id": 12969839, 
    "id": 12966132, 
    "answer_posts": [
      {
        "snippets": [
          "export PYTHONPATH=<path to root of source>\nexport DJANGO_SETTINGS_MODULE=myproject.settings\n", 
          "sys.path.append('<path to root of source>')\nos.environ['DJANGO_SETTINGS_MODULE'] = 'myproject.settings'\n"
        ], 
        "score": 3, 
        "id": 12969839, 
        "rank": 0
      }
    ], 
    "title": "Sphinx autodoc with Django 1.4"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 25301779, 
    "answer_posts": [
      {
        "snippets": [
          "In [49]: lines[-1][:20]\nOut[49]: b'\\x01\\xa8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n", 
          "In [50]: [int(x) for x in lines[-1][:20]]\nOut[50]: [1, 168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n", 
          "$ strings GLA14_634_1102_002_0071_0_01_0001.DAT | head -20\nRecl=10000;\nNumhead=2;\nsize_mb_ecs_data_granule=267.57240295410156;\ntime_between_contiguous_records=1;\ninstrument_short_name=GLAS;\nplatform_short_name=Icesat;\nsensor_short_name=LaserAlt;\nglas_osc_rate.1=1.000000028;\nglas_osc_rate_date.1=2003-02-20;\nglas_osc_rate_time.1=00:00:00;\nsc_osc_rate.1=0.99999998864727;\nsc_osc_rate_date.1=2003-02-20;\nsc_osc_rate_time.1=00:00:00;\ninternal_time_delay.1=15.11;\ninternal_time_delay_date.1=2003-02-20;\ninternal_time_delay_time.1=00:00:00;\ninternal_range_delay.1=9556;\ninternal_range_delay_date.1=2003-02-20;\ninternal_range_delay_time.1=00:00:00;\nReprocessingPlanned=no further update anticipated;\n"
        ], 
        "score": 0, 
        "id": 25302258, 
        "rank": 0
      }
    ], 
    "title": "Reading the binary file shows unreadable characters"
  }, 
  {
    "accepted_answer_post_id": 14168455, 
    "id": 14168335, 
    "answer_posts": [
      {
        "snippets": [
          "from BeautifulSoup import BeautifulSoup as Soup\n\nfile = 'data.xml'\nhandler = open(file).read()\n\nsoup = Soup(handler)\n\ndata = soup.find('aws:temp')\nprint data.text\n", 
          "import feedparser\nimport string\n\nd = feedparser.parse(\n    'http://api.wxbug.net/getLiveCompactWeatherRSS.aspx?ACode=A6787859817&zipcode=18657&unittype=0')\n\nprint str(d.feed['aws_weather']).translate(None, string.ascii_letters)\n"
        ], 
        "score": 0, 
        "id": 14168455, 
        "rank": 0
      }
    ], 
    "title": "How to obtain value from WeatherBug XML File in Python?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 23882226, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import urllib\n>>> urllib.unquote('05%2F01%2F2014')\n'05/01/2014'\n\n# Python 3\n>> from urllib.parse import unquote\n>>> unquote('05%2F01%2F2014')\n'05/01/2014'\n"
        ], 
        "score": 2, 
        "id": 23882386, 
        "rank": 0
      }
    ], 
    "title": "Passing Date From querystring to Django view"
  }, 
  {
    "accepted_answer_post_id": 129522, 
    "id": 129507, 
    "answer_posts": [
      {
        "snippets": [
          "import mymod\n\nclass MyTestCase(unittest.TestCase):\n    def test1(self):\n        self.assertRaises(SomeCoolException, mymod.myfunc)\n"
        ], 
        "score": 285, 
        "id": 129522, 
        "rank": 0
      }
    ], 
    "title": "How do you test that a Python function throws an exception?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 33094687, 
    "answer_posts": [
      {
        "snippets": [
          "s = [['MGM', '1'], ['MGD', '1'], ['V1', '[0,2,0,1]'], ['AuD', '[0,0,0,1]']]\n", 
          "import ast\nfor sublist in s:\n    sublist[1] = ast.literal_eval(sublist[1])\n", 
          "[['MGM', 1], ['MGD', 1], ['V1', [0, 2, 0, 1]], ['AuD', [0, 0, 0, 1]]]\n", 
          "for sublist in s:\n    if isinstance(sublist[1],list):\n        sublist[1] = sum(sublist[1])\n    sublist[1] = str(sublist[1])\n", 
          "[['MGM', '1'], ['MGD', '1'], ['V1', '3'], ['AuD', '1']]\n"
        ], 
        "score": 7, 
        "id": 33094782, 
        "rank": 0
      }
    ], 
    "title": "How to find the sum of a string in a list"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 19556809, 
    "answer_posts": [
      {
        "snippets": [
          ">>> from fractions import Fraction\n>>> [float(Fraction(x)) for x in '0.25 1/4'.split()]\n[0.25, 0.25]\n", 
          "X = [[float(Fraction(x)) for x in line.split()] for line in f.readlines()[1:R]]\n", 
          "from itertools import islice\nwith open(input, \"rt\") as f:\n    X = [[float(Fraction(x)) for x in line.split()] for line in islice(f, 1, R)]\n"
        ], 
        "score": 3, 
        "id": 19556845, 
        "rank": 0
      }
    ], 
    "title": "Python: Read in file with numbers that are fractions or floating to treat as floating numbers"
  }, 
  {
    "accepted_answer_post_id": 15188877, 
    "id": 15188828, 
    "answer_posts": [
      {
        "snippets": [
          "volkswagen = tree.find('.//model[@id=\"Volkswagen\"]')\n", 
          "volkswagen.set('stereo', 'Blaupunkt')\n", 
          "models_with_stereos = tree.findall('.//model[@stereo]')\n"
        ], 
        "score": 2, 
        "id": 15188877, 
        "rank": 0
      }
    ], 
    "title": "Find and Edit SubElement in XML using Python ElementTree"
  }, 
  {
    "accepted_answer_post_id": 21661696, 
    "id": 21661526, 
    "answer_posts": [
      {
        "snippets": [
          "import numpy as np\nimport matplotlib.pyplot as plt\n\nt = np.arange(0.0, 2.0, 0.01)\n\ns1 = np.sin(2*np.pi*t)\ns2 = np.exp(-t)\ns3 = s1*s2\n\nleft, width = 0.1, 0.8\nrect1 = [left, 0.5, width, 0.4]\nrect2 = [left, 0.3, width, 0.15]\nrect3 = [left, 0.1, width, 0.15]\n\nfig = plt.figure()\nax1 = fig.add_axes(rect1)  #left, bottom, width, height\nax2 = fig.add_axes(rect2, sharex=ax1)\nax3  = fig.add_axes(rect3, sharex=ax1)\n\nax1.plot(t,s1)\nax2.plot(t[:150],s2[:150])\nax3.plot(t[30:],s3[30:])\n\n# hide labels\nfor label1,label2 in zip(ax1.get_xticklabels(),ax2.get_xticklabels()):\n    label1.set_visible(False)\n    label2.set_visible(False)\n\nplt.show()\n"
        ], 
        "score": 0, 
        "id": 21661908, 
        "rank": 0
      }
    ], 
    "title": "How to sharex when using subplot2grid"
  }, 
  {
    "accepted_answer_post_id": 5043046, 
    "id": 5043012, 
    "answer_posts": [
      {
        "snippets": [
          "return self.cleaned_data['name'].strip()\n", 
          "class Employee(models.Model):\n    \"\"\"(Workers, Staff, etc)\"\"\"\n    name = models.CharField(blank=True, null=True, max_length=100)\n\n    def save(self, *args, **kwargs):\n        self.full_clean() # performs regular validation then clean()\n        super(Employee, self).save(*args, **kwargs)\n\n\n    def clean(self):\n        \"\"\"\n        Custom validation (read docs)\n        PS: why do you have null=True on charfield? \n        we could avoid the check for name\n        \"\"\"\n        if self.name: \n            self.name = self.name.strip()\n\n\nclass EmployeeForm(ModelForm):\n    class Meta:\n        model = Employee\n\n\n    def clean_name(self):\n        \"\"\"\n        If somebody enters into this form ' hello ', \n        the extra whitespace will be stripped.\n        \"\"\"\n        return self.cleaned_data.get('name', '').strip()\n"
        ], 
        "score": 10, 
        "id": 5043046, 
        "rank": 0
      }
    ], 
    "title": "(Django) Trim whitespaces from charField"
  }, 
  {
    "accepted_answer_post_id": 15557847, 
    "id": 15557828, 
    "answer_posts": [
      {
        "snippets": [
          "datetime.datetime.strptime('30-01-12', '%d-%m-%y').date()\n", 
          ">>> import datetime\n>>> datetime.datetime.strptime('30-01-12', '%d-%m-%y').date()\ndatetime.date(2012, 1, 30)\n"
        ], 
        "score": 23, 
        "id": 15557847, 
        "rank": 0
      }
    ], 
    "title": "convert string to date type python"
  }, 
  {
    "accepted_answer_post_id": 27136262, 
    "id": 27135779, 
    "answer_posts": [
      {
        "snippets": [
          "import sys\ntry:\n    cursor = connection.cursor()\n    cursor.callproc('my_stored_proc', [arguments])\nexcept:\n    print \"Unexpected error:\", sys.exc_info()[0]\n"
        ], 
        "score": 8, 
        "id": 27136262, 
        "rank": 0
      }
    ], 
    "title": "cannot catch MySQL IntegrityError in Python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 32193526, 
    "answer_posts": [
      {
        "snippets": [
          "print list(item for item in itertools.product(*a) if item[1] != item[2])\n", 
          "result = []\nfor item in itertools.product(*a):\n    if item[1]==item[2]:\n        continue\n    item = set(item)\n    if item not in result:\n        result.append(item)\n\nprint result\n"
        ], 
        "score": 0, 
        "id": 32193541, 
        "rank": 0
      }
    ], 
    "title": "Generate all combinations from multiple lists with repeat lists"
  }, 
  {
    "accepted_answer_post_id": 3079120, 
    "id": 3077794, 
    "answer_posts": [
      {
        "snippets": [
          "import glob\nfilenames = glob.glob(\"/path/to/folder/*.txt\")\n", 
          ">>> filename = \"file-338.txt\"\n>>> import os\n>>> fnpart = os.path.splitext(filename)[0]\n>>> fnpart\n'file-338'\n>>> _, num = fnpart.split(\"-\")\n>>> num.rjust(5, \"0\")\n'00338'\n>>> newname = \"file-%s.txt\" % num.rjust(5, \"0\")\n>>> newname\n'file-00338.txt'\n", 
          "os.rename(filename, newname)\n", 
          "for filename in glob.glob(\"/path/to/folder/*.txt\"): # loop through each file\n    newname = make_new_filename(filename) # create a function that does step 2, above\n    os.rename(filename, newname)\n"
        ], 
        "score": 4, 
        "id": 3077835, 
        "rank": 0
      }
    ], 
    "title": "batch renaming 100K files with python"
  }, 
  {
    "accepted_answer_post_id": 25412191, 
    "id": 25412151, 
    "answer_posts": [
      {
        "snippets": [
          "i,j,x=len(seq),0,[]\n\nfor k in range(m):\n\n    a, j = j, j + (i+k)//m\n\n    x.append(seq[a:j])\n\nreturn x\n", 
          "seq = range(11), m=3\n", 
          "result : [[0, 1, 2], [3, 4, 5], [6, 7, 8, 9]]\n", 
          "def chunks(l, n):\n    return [l[i:i + n] for i in range(0, len(l), n)]\n", 
          ">>> x = [1,2,3,4,5,6,7,8,9]\n>>> zip(*[iter(x)]*3)\n[(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n"
        ], 
        "score": 2, 
        "id": 25412191, 
        "rank": 0
      }
    ], 
    "title": "How to split one list in a list of x list with python?"
  }, 
  {
    "accepted_answer_post_id": 17075711, 
    "id": 17075628, 
    "answer_posts": [
      {
        "snippets": [
          ">>> reduce(lambda x, y: x * (y + 1), [1, 2, 3])\n12\n", 
          ">>> (1 * (2 + 1)) * (3 + 1)\n12\n", 
          ">>> reduce(lambda x, y: x * (y + 1), [1, 2, 3], 10)\n240\n\n>>> (((10 * (1 + 1)) * (2 + 1)) * (3 + 1))\n240\n", 
          ">>> reduce(lambda x, y: x * (y + 1), [1, 2, 3], 1) # initializer is 1\n", 
          ">>> from operator import mul\n>>> reduce(mul, (v + 1 for v in d.values()))\n", 
          "In [10]: from operator import mul\n\nIn [11]: d = {'a' : 1, 'b' : 2, 'c' : 3}\n\nIn [12]: %timeit reduce(lambda x, y: x * (y + 1), d.values(), 1)\n1000000 loops, best of 3: 1 us per loop\n\nIn [13]: %timeit reduce(mul, (v + 1 for v in d.values()))\n1000000 loops, best of 3: 1.23 us per loop\n"
        ], 
        "score": 4, 
        "id": 17075711, 
        "rank": 0
      }
    ], 
    "title": "Setting a variable equal to a returned value from a for loop in Python"
  }, 
  {
    "accepted_answer_post_id": 26403049, 
    "id": 23151132, 
    "answer_posts": [
      {
        "snippets": [
          "row = self.link.fetchone()\n", 
          "print row[\"key\"]\n", 
          "row = self.link.fetchall()\n", 
          "print row[0][\"key\"]\n"
        ], 
        "score": 4, 
        "id": 26403049, 
        "rank": 0
      }
    ], 
    "title": "Fetch data with pymysql (DictCursor)"
  }, 
  {
    "accepted_answer_post_id": 9209931, 
    "id": 9209377, 
    "answer_posts": [
      {
        "snippets": [
          "import httpagentparser\n>>> s = \"Mozilla/5.0 (X11; U; Linux i686; en-US) AppleWebKit/532.9 (KHTML, like Gecko) Chrome/5.0.307.11 Safari/532.9\"\n>>> print httpagentparser.simple_detect(s)\n('Linux', 'Chrome 5.0.307.11')\n>>> print httpagentparser.detect(s)\n{'os': {'name': 'Linux'},\n 'browser': {'version': '5.0.307.11', 'name': 'Chrome'}}\n"
        ], 
        "score": 10, 
        "id": 9209931, 
        "rank": 0
      }
    ], 
    "title": "how to parse user agent string? python"
  }, 
  {
    "accepted_answer_post_id": 29982113, 
    "id": 29974589, 
    "answer_posts": [
      {
        "snippets": [
          "from datetime import date\nfrom datetime import timedelta\nfrom dateutil.relativedelta import relativedelta\n\nfrom openerp.osv import fields, osv\nfrom openerp.tools import DEFAULT_SERVER_DATE_FORMAT\n\n\nclass sale_order_dates(osv.osv):\n    _inherit = 'sale.order'\n\n    _columns = {\n        'requested_date': fields.date('Requested Date', help=\"Date requested by the customer for the sale.\"),\n    }\n\n    _defaults = {\n        'requested_date': (date.today() + timedelta(days=28)).strftime(DEFAULT_SERVER_DATE_FORMAT),\n    }\n\nsale_order_dates()\n", 
          "fields.Date.to_string(date_obj)\n"
        ], 
        "score": 1, 
        "id": 29982113, 
        "rank": 0
      }
    ], 
    "title": "OpenERP 7 : How can I set a default date in a create form?"
  }, 
  {
    "accepted_answer_post_id": 16638622, 
    "id": 16638589, 
    "answer_posts": [
      {
        "snippets": [
          "if __name__ == '__main__':\n    test = Test(10, 'hello')\n    test.compute(6)\n\n    pickle.dump(test, open('test_file.pkl', 'wb'))\n"
        ], 
        "score": 3, 
        "id": 16638624, 
        "rank": 0
      }
    ], 
    "title": "Python pickle instance variables"
  }, 
  {
    "accepted_answer_post_id": 28657681, 
    "id": 28657613, 
    "answer_posts": [
      {
        "snippets": [
          "tuple(x if x[0] != (givenX, givenY) else (x[0], True) for x in your_tuple)\n", 
          "In [23]: d = {(1, 2): False}\n\nIn [24]: d[1, 2] = True\n\nIn [25]: tuple(d.items())\nOut[25]: (((1, 2), True),)\n"
        ], 
        "score": 2, 
        "id": 28657681, 
        "rank": 0
      }
    ], 
    "title": "Python modify tuple with lambda"
  }, 
  {
    "accepted_answer_post_id": 1336751, 
    "id": 1335507, 
    "answer_posts": [
      {
        "snippets": [
          "import subprocess\nsubprocess.call('read -t 30', shell=True)\n"
        ], 
        "score": 4, 
        "id": 27222779, 
        "rank": 0
      }
    ], 
    "title": "Keyboard input with timeout in Python"
  }, 
  {
    "accepted_answer_post_id": 3800226, 
    "id": 3800086, 
    "answer_posts": [
      {
        "snippets": [
          "for file in files:\n    fname = os.path.join(dir, file)\n    inFile = codecs.open(fname, \"r\", \"utf-8\")\n    outFile = codecs.open(fname + \".new\", \"w\", \"utf-8\")\n    for line in inFile:\n        newline = do_replacements_on(line)\n        outFile.write(newline)\n    inFile.close()\n    outFile.close()\n    os.rename(fname + \".new\", fname)\n", 
          ">>> u\"\\xff and \\ubd23\".translate({0xff: u\"255\", 0xbd23: u\"something else\"})\nu'255 and something else'\n", 
          ">>> import re\n>>> d = {u'spam': u'spam, ham, spam and eggs', u'eggs': u'saussages'}\n>>> p = re.compile(\"|\".join(re.escape(k) for k in d))\n>>> def repl(m):\n...     return d[m.group(0)]\n...\n>>> p.sub(repl, u\"spam, vikings, eggs and vikings\")\nu'spam, ham, spam and eggs, vikings, saussages and vikings'\n"
        ], 
        "score": 13, 
        "id": 3800226, 
        "rank": 0
      }
    ], 
    "title": "Optimizing find and replace over large files in Python"
  }, 
  {
    "accepted_answer_post_id": 5758482, 
    "id": 5750887, 
    "answer_posts": [
      {
        "snippets": [
          "import ctypes\nimport struct\nimport win32con\nimport win32gui\nimport win32ui\n\nfrom PIL import Image\n\n\ndef RGB(r, g, b):    \n    return r | (g << 8) | (b << 16)\n\ndef native_bmp_to_pil(hdc, bitmap_handle, width, height):\n    bmpheader = struct.pack(\"LHHHH\", struct.calcsize(\"LHHHH\"),\n                            width, height, 1, 24) #w,h, planes=1, bitcount)\n    c_bmpheader = ctypes.c_buffer(bmpheader)\n\n    #3 bytes per pixel, pad lines to 4 bytes    \n    c_bits = ctypes.c_buffer(\" \" * (height * ((width*3 + 3) & -4)))\n\n    res = ctypes.windll.gdi32.GetDIBits(\n        hdc, bitmap_handle, 0, height,\n        c_bits, c_bmpheader,\n        win32con.DIB_RGB_COLORS)\n    if not res:\n        raise IOError(\"native_bmp_to_pil failed: GetDIBits\")\n\n    im = Image.frombuffer(\n        \"RGB\", (width, height), c_bits,\n        \"raw\", \"BGR\", (width*3 + 3) & -4, -1)\n    return im    \n\n\nclass Win32Font:\n    def __init__(self, name, height, weight=win32con.FW_NORMAL,\n                 italic=False, underline=False):\n        self.font = win32ui.CreateFont({\n            'name': name, 'height': height,\n            'weight': weight, 'italic': italic, 'underline': underline})\n\n        #create a compatible DC we can use to draw:\n        self.desktopHwnd = win32gui.GetDesktopWindow()\n        self.desktopDC = win32gui.GetWindowDC(self.desktopHwnd)\n        self.mfcDC = win32ui.CreateDCFromHandle(self.desktopDC)         \n        self.drawDC = self.mfcDC.CreateCompatibleDC()\n\n        #initialize it\n        self.drawDC.SelectObject(self.font)\n\n    def renderText(self, text):\n        \"\"\"render text to a PIL image using the windows API.\"\"\"\n        self.drawDC.SetTextColor(RGB(255,0,0))\n\n        #create the compatible bitmap:\n        w,h = self.drawDC.GetTextExtent(text)\n\n        saveBitMap = win32ui.CreateBitmap()\n        saveBitMap.CreateCompatibleBitmap(self.mfcDC, w, h)        \n        self.drawDC.SelectObject(saveBitMap)\n\n        #draw it\n        self.drawDC.DrawText(text, (0, 0, w, h), win32con.DT_LEFT)\n\n        #convert to PIL image\n        im = native_bmp_to_pil(self.drawDC.GetSafeHdc(), saveBitMap.GetHandle(), w, h)\n\n        #clean-up\n        win32gui.DeleteObject(saveBitMap.GetHandle())\n\n        return im        \n\n    def __del__(self):\n        self.mfcDC.DeleteDC()\n        self.drawDC.DeleteDC()\n        win32gui.ReleaseDC(self.desktopHwnd, self.desktopDC)\n        win32gui.DeleteObject(self.font.GetSafeHandle())\n\n    def __del__(self):\n        win32gui.DeleteObject(self.font.GetSafeHandle())\n", 
          ">>> f = Win32Font(\"Arial\", 15)\n>>> im = f.renderText(\"this is just a test\")\n>>> im.save(\"c:/hope.png\")\n"
        ], 
        "score": 5, 
        "id": 5758482, 
        "rank": 0
      }
    ], 
    "title": "python: use windows api to render text using a ttf font"
  }, 
  {
    "accepted_answer_post_id": 33244179, 
    "id": 33243763, 
    "answer_posts": [
      {
        "snippets": [
          "In [1]: import pandas as pd\n\nIn [2]: df = pd.DataFrame([45362.0, 75345.0, 346157.0, 572575.0], columns=['code_x'])\n\nIn [3]: df.code_x.apply(lambda x: str(int(x)).zfill(6))\nOut[3]: \n0    045362\n1    075345\n2    346157\n3    572575\nName: code_x, dtype: object\n"
        ], 
        "score": 3, 
        "id": 33244179, 
        "rank": 0
      }
    ], 
    "title": "Pandas - Add leading \"0\" to string values so all values are equal len"
  }, 
  {
    "accepted_answer_post_id": 11697869, 
    "id": 11697828, 
    "answer_posts": [
      {
        "snippets": [
          "filename = raw_input('What would you like to name the file? ')\n\nwith open(filename, 'wb') as out:\n    for frame in frames:\n        out.write(' '.join(str(num) for num in frame))\n        out.write('\\r\\n')\n"
        ], 
        "score": 4, 
        "id": 11697869, 
        "rank": 0
      }
    ], 
    "title": "Create Space Delimited File in Python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 6039109, 
    "answer_posts": [
      {
        "snippets": [
          ">>> s = 'qwerrqweqweasdqweqwe*replacethistext*asdasdasd'\n>>> s.replace('*replacethistext*', '*withthistext*')\n'qwerrqweqweasdqweqwe*withthistext*asdasdasd'\n"
        ], 
        "score": 7, 
        "id": 6039126, 
        "rank": 0
      }
    ], 
    "title": "How do I replace part of a large string in Python?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 33549670, 
    "answer_posts": [
      {
        "snippets": [
          " cd GetOldTweets-python\n", 
          "import got\ntweetCriteria = got.manager.TweetCriteria().setQuerySearch('search_term').setSince(\"2014-05-01\").setUntil(\"2014-07-01\").setMaxTweets(10000)\ntweet = got.manager.TweetManager.getTweets(tweetCriteria)[0]\n\nprint tweet.text\n", 
          "python Exporter.py --querysearch 'search_term' --since 2014-05-01 --until 2014-07-01 --maxtweets 10000\n"
        ], 
        "score": 1, 
        "id": 38990113, 
        "rank": 0
      }
    ], 
    "title": "How to extract the historical tweets from twitter API?"
  }, 
  {
    "accepted_answer_post_id": 7028627, 
    "id": 7028435, 
    "answer_posts": [
      {
        "snippets": [
          ">>> x, y, *data = p\n>>> x\n0.793803\n>>> y\n0.136326\n>>> data\n[0, 0.5, 0]\n", 
          ">>> p[0]\n0.793803\n", 
          ">>> str.format(\"x{0[0]} y{0[1]}\", p)\n'x0.793803 y0.136326'\n", 
          "for point in points:\n    x, y, *data = point\n    print(str.format(\"x: {0}, y: y{1}\", x, y))\n"
        ], 
        "score": 3, 
        "id": 7028627, 
        "rank": 0
      }
    ], 
    "title": "How to Separate Output Data"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 17547851, 
    "answer_posts": [
      {
        "snippets": [
          "#!/usr/bin/env python\n\nimport vtk\n\n# Create the geometry of a point (the coordinate)\npoints = vtk.vtkPoints()\np = [1.0, 2.0, 3.0]\n\n# Create the topology of the point (a vertex)\nvertices = vtk.vtkCellArray()\n\nid = points.InsertNextPoint(p)\nvertices.InsertNextCell(1)\nvertices.InsertCellPoint(id)\n\n# Create a polydata object\npoint = vtk.vtkPolyData()\n\n# Set the points and vertices we created as the geometry and topology of the polydata\npoint.SetPoints(points)\npoint.SetVerts(vertices)\n\n# Visualize\nmapper = vtk.vtkPolyDataMapper()\nif vtk.VTK_MAJOR_VERSION <= 5:\n    mapper.SetInput(point)\nelse:\n    mapper.SetInputData(point)\n\nactor = vtk.vtkActor()\nactor.SetMapper(mapper)\nactor.GetProperty().SetPointSize(20)\n\nrenderer = vtk.vtkRenderer()\nrenderWindow = vtk.vtkRenderWindow()\nrenderWindow.AddRenderer(renderer)\nrenderWindowInteractor = vtk.vtkRenderWindowInteractor()\nrenderWindowInteractor.SetRenderWindow(renderWindow)\n\nrenderer.AddActor(actor)\n\nrenderWindow.Render()\nrenderWindowInteractor.Start()\n"
        ], 
        "score": 2, 
        "id": 17548052, 
        "rank": 0
      }
    ], 
    "title": "create vtkPolyData object from list with tuples in python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 32687113, 
    "answer_posts": [
      {
        "snippets": [
          "User.objects.create(username=\"john\", password=\"xxx\")\n", 
          "User.objects.create_user(username='john', password='xxx')\n", 
          "class UserManager(models.Manager):\n    # ...   \n    def create_user(self, username, email=None, password=None):\n        \"\"\"\n        Creates and saves a User with the given username, email and password.\n        \"\"\"\n        now = timezone.now()\n        if not username:\n            raise ValueError('The given username must be set')\n        email = UserManager.normalize_email(email)\n        user = self.model(username=username, email=email,\n                          is_staff=False, is_active=True, is_superuser=False,\n                          last_login=now, date_joined=now)\n\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n"
        ], 
        "score": 1, 
        "id": 32687174, 
        "rank": 0
      }
    ], 
    "title": "How to initialize test database in django?"
  }, 
  {
    "accepted_answer_post_id": 22794651, 
    "id": 22792779, 
    "answer_posts": [
      {
        "snippets": [
          "with plt.rc_context({\"axes.grid\": True, \"grid.linewidth\": 0.75}):\n    f, ax = plt.subplots()  # Will make a figure with a grid\n    ax.plot(x, y)\n\nf, ax = plt.subplots()  # Will make a figure without a grid\nax.plot(x, y)\n"
        ], 
        "score": 11, 
        "id": 22794651, 
        "rank": 0
      }
    ], 
    "title": "how to set local rcParams or rcParams for one figure in matplotlib"
  }, 
  {
    "accepted_answer_post_id": 35711683, 
    "id": 35711012, 
    "answer_posts": [
      {
        "snippets": [
          "import numpy as np\nimport cv2\nfrom PIL import Image\n\nface_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')\neye_cascade = cv2.CascadeClassifier('haarcascade_eye.xml')\n\nimg = cv2.imread('xD.jpg')\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\nfaces = face_cascade.detectMultiScale(gray, 1.3, 5)\nfor (x,y,w,h) in faces:\n    img = cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)\n    roi_gray = gray[y:y+h, x:x+w]\n    roi_color = img[y:y+h, x:x+w]\n    cropped = img[y:y+h, x:x+w]\ncv2.imwrite(\"thumbnail.png\", cropped)\ncv2.imshow(\"cropped\", cropped)\ncv2.waitKey(0)\n"
        ], 
        "score": 0, 
        "id": 35711683, 
        "rank": 0
      }
    ], 
    "title": "cropping images in python"
  }, 
  {
    "accepted_answer_post_id": 12302027, 
    "id": 12302012, 
    "answer_posts": [
      {
        "snippets": [
          " zzz = zip(xxx, yyy) \n", 
          " #list (python2.x) or iterable(python3.x) of lists\n zzz = map(list,zip(xxx,yyy)) \n", 
          " #list of lists, not list of tuples\n #python 2.x and python 3.x\n zzz = [ list(x) for x in zip(xxx,yyy) ]\n", 
          "#list of tuples in python3.x.  \nzzz = list(zip(xxx,yyy)) #equivalent to zip(xxx,yyy) in python2.x\n                         #will work in python2.x, but will make an extra copy.\n                         # which will be available for garbage collection\n                         # immediately\n"
        ], 
        "score": 11, 
        "id": 12302027, 
        "rank": 0
      }
    ], 
    "title": "Convert lists into 'transposed' list"
  }, 
  {
    "accepted_answer_post_id": 17846776, 
    "id": 17846613, 
    "answer_posts": [
      {
        "snippets": [
          ">>> a=np.random.randint(0,5,(3,3))\n>>> a\narray([[0, 1, 4],\n       [0, 2, 4],\n       [2, 4, 0]])\n>>> ua,uind=np.unique(a,return_inverse=True)\n>>> count=np.bincount(uind)\n>>> ua\narray([0, 1, 2, 4]) \n>>> count\narray([3, 1, 2, 3]) \n", 
          "import numpy as np\n\ndef mask_fewest(arr,thresh,replace):\n    ua,uind=np.unique(arr,return_inverse=True)\n    count=np.bincount(uind)\n    #Here ua has all of the unique elements, count will have the number of times \n    #each appears.\n\n\n    #@Jamie's suggestion to make the rep_mask faster.\n    rep_mask = np.in1d(uind, np.where(count < thresh))\n    #Find which elements do not appear at least `thresh` times and create a mask\n\n    arr.flat[rep_mask]=replace \n    #Replace elements based on above mask.\n\n    return arr\n\n\n>>> a=np.random.randint(2,8,(4,4))\n[[6 7 7 3]\n [7 5 4 3]\n [3 5 2 3]\n [3 3 7 7]]\n\n\n>>> mask_fewest(a,5,50)\n[[10  7  7  3]\n [ 7  5 10  3]\n [ 3  5 10  3]\n [ 3  3  7  7]]\n", 
          ">>> a\n[[[2] [2, 3] [3, 34]]\n [[3] [4, 5] [3, 34]]\n [[3] [2, 3] [3, 4]]]\n\n\n>>> mask_fewest(a,2,10)\n[[10 [2, 3] [3, 34]]\n [[3] 10 [3, 34]]\n [[3] [2, 3] 10]]\n"
        ], 
        "score": 6, 
        "id": 17846776, 
        "rank": 0
      }
    ], 
    "title": "Count number of elements in numpy ndarray"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 36239289, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import string\n>>> string.uppercase\n'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n>>> string.lowercase\n'abcdefghijklmnopqrstuvwxyz'\n>>> string.digits\n'0123456789'\n>>> \n", 
          "lower = string.lowercase\n", 
          "#Creates array with most keyboard characters\nfor i in range(len(lower)):\n    characters.append(lower[i])\nfor i in range(len(upper)):\n    characters.append(upper[i])\nfor i in range(len(number)):\n    characters.append(number[i])\nfor i in range(len(symbol)):\n    characters.append(symbol[i])\n", 
          "characters = \"\".join(upper, lower, number, symbol)\n", 
          "#For 1 character passwords\nfor a in range(len(characters)):\n    if (characters[a] == password):\n        print (characters[a])\n        found = True\nif (found):\n    sys.exit()\n", 
          "for a in characters:\n    print a\n    sys.exit()\n"
        ], 
        "score": 3, 
        "id": 36239581, 
        "rank": 0
      }
    ], 
    "title": "Python Password Program"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 32235033, 
    "answer_posts": [
      {
        "snippets": [
          "score = {\"a\": 1, \"c\": 3, \"b\": 3, \"e\": 1, \"d\": 2, \"g\": 2, \n         \"f\": 4, \"i\": 1, \"h\": 4, \"k\": 5, \"j\": 8, \"m\": 3, \n         \"l\": 1, \"o\": 1, \"n\": 1, \"q\": 10, \"p\": 3, \"s\": 1, \n         \"r\": 1, \"u\": 1, \"t\": 1, \"w\": 4, \"v\": 4, \"y\": 4, \n         \"x\": 8, \"z\": 10}\n", 
          "test='b'\ntotal=score[test]\nprint(total)\n", 
          "3\n"
        ], 
        "score": 0, 
        "id": 32235200, 
        "rank": 0
      }
    ], 
    "title": "Creating a python scrabble function that takes a string as input and returns a score for that word"
  }, 
  {
    "accepted_answer_post_id": 4502366, 
    "id": 4502314, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import re\n>>> re.findall(\"{{(.*?)}}\", \"this {{is}} a sample {{text}}\")\n['is', 'text']\n"
        ], 
        "score": 12, 
        "id": 4502366, 
        "rank": 0
      }
    ], 
    "title": "Python - extracting a list of sub strings"
  }, 
  {
    "accepted_answer_post_id": 19938915, 
    "id": 19938809, 
    "answer_posts": [
      {
        "snippets": [
          "a = ['1, 2, 4, 5,', '2, 3, 6, 3,', '1, 1, 7, 6']\nrows = [l.rstrip(',').split(',') for l in a]\nrows\n#[['1', ' 2', ' 4', ' 5'], ['2', ' 3', ' 6', ' 3'], ['1', ' 1', ' 7', ' 6']]\n", 
          "arr = np.array(rows, int)\n\narr\n#array([[1, 2, 4, 5],\n#       [2, 3, 6, 3],\n#       [1, 1, 7, 6]])\n", 
          "arr[:, :2] # first two columns\n#array([[1, 2],\n#       [2, 3],\n#       [1, 1]])\n\narr[:, -2:] # last two columns\n#array([[4, 5],\n#       [6, 3],\n#       [7, 6]])\n", 
          "a, b = np.split(arr, arr.shape[1]/2, axis=1)\n"
        ], 
        "score": 3, 
        "id": 19938915, 
        "rank": 0
      }
    ], 
    "title": "Instantiate two 2D numpy arrays from a list of strings"
  }, 
  {
    "accepted_answer_post_id": 25457133, 
    "id": 25456435, 
    "answer_posts": [
      {
        "snippets": [
          "os.system(\"curl http://somewebsite.com\")\n", 
          "output = subprocess.check_output([\"curl\", \"http://somewebsite.com\"])\n", 
          "output = subprocess.check_output([\"curl\", \"-q\", \"http://somewebsite.com\"])\n", 
          "output = urllib.request.urlopen('http://www.somewebsite.com').read()\n"
        ], 
        "score": 2, 
        "id": 25457133, 
        "rank": 0
      }
    ], 
    "title": "How to record the response of curl in Python?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 14716435, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import re\n>>> s = \"MZA11LTE12DEP108N\"\n>>> re.sub('(?<=\\d)(?!\\d)|(?<!\\d)(?=\\d)', ' ', s)\n'MZA 11 LTE 12 DEP 108 N'\n", 
          "re.compile(\"\"\"\n    (?<=\\d) # an empty string preceded by a digit\n    (?!\\d)  # followed by a non-digit\n    |   # or\n    (?<!\\d) # an empty string preceded by a non-digit\n    (?=\\d)  # followed by a digit\n\"\"\", re.VERBOSE).sub(' ', s)\n"
        ], 
        "score": 3, 
        "id": 14716536, 
        "rank": 0
      }
    ], 
    "title": "How to split numbers of letters in python"
  }, 
  {
    "accepted_answer_post_id": 18857720, 
    "id": 18857289, 
    "answer_posts": [
      {
        "snippets": [
          "import re\ndef make_rule(rule):  # where rule for example \"H*X-9387\" \n   return re.compile(\"^\" + \".*\".join(re.escape(i) for i in rule.split(\"*\")) + \"$\")\n", 
          "...\nrule_re = make_rule(row)\nfor d in DesignatorList:\n    if rule_re.match(d):\n        print row  # or maybe print d\n"
        ], 
        "score": 2, 
        "id": 18857720, 
        "rank": 0
      }
    ], 
    "title": "Reading and correctly understanding/interpreting control characters from a file (python)"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 18231335, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import time\n>>> from datetime import datetime\n>>> date = '20130814100000'\n>>> dt = datetime.strptime(date, '%Y%m%d%H%M%S')\n>>> print dt\n2013-08-14 10:00:00\n>>> print time.mktime(dt.timetuple())\n1376467200.0\n", 
          ">>> time.mktime(time.strptime(date, '%Y%m%d%H%M%S'))\n1376467200.0\n"
        ], 
        "score": 5, 
        "id": 18231556, 
        "rank": 0
      }
    ], 
    "title": "Error while converting date to timestamp in python"
  }, 
  {
    "accepted_answer_post_id": 18392060, 
    "id": 18392029, 
    "answer_posts": [
      {
        "snippets": [
          "time = int(float(time))\n", 
          "time = float(time)\n"
        ], 
        "score": 0, 
        "id": 18392060, 
        "rank": 0
      }
    ], 
    "title": "How can I convert a floating point number to an integer in python?"
  }, 
  {
    "accepted_answer_post_id": 27126559, 
    "id": 27126526, 
    "answer_posts": [
      {
        "snippets": [
          ">>> s = \" id1    id2             id3         id4\"\n>>> items = s.split()\n>>> items\n['id1', 'id2', 'id3', 'id4']\n", 
          ">>> \"\\t\".join(items)\n'id1\\tid2\\tid3\\tid4'\n"
        ], 
        "score": 5, 
        "id": 27126559, 
        "rank": 0
      }
    ], 
    "title": "How to replace consecutive spaces in a string in python"
  }, 
  {
    "accepted_answer_post_id": 5213093, 
    "id": 5213033, 
    "answer_posts": [
      {
        "snippets": [
          ">>> l = [list(range(i, i+4)) for i in range(10,1,-1)]\n>>> l\n[[10, 11, 12, 13], [9, 10, 11, 12], [8, 9, 10, 11], [7, 8, 9, 10], [6, 7, 8, 9], [5, 6, 7, 8], [4, 5, 6, 7], [3, 4, 5, 6], [2, 3, 4, 5]]\n>>> sorted(l, key=sum)\n[[2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [5, 6, 7, 8], [6, 7, 8, 9], [7, 8, 9, 10], [8, 9, 10, 11], [9, 10, 11, 12], [10, 11, 12, 13]]\n"
        ], 
        "score": 17, 
        "id": 5213093, 
        "rank": 0
      }
    ], 
    "title": "Sort list of list with custom compare function in Python"
  }, 
  {
    "accepted_answer_post_id": 3164161, 
    "id": 3164086, 
    "answer_posts": [
      {
        "snippets": [
          "process_list = []    \nfor id  in ids:\n    process_list.append(subprocess.Popen(cmd, shell=True))\nfor process in process_list:\n    process.wait()\n"
        ], 
        "score": 1, 
        "id": 3164161, 
        "rank": 0
      }
    ], 
    "title": "How can I manage these subprocesses efficiently?"
  }, 
  {
    "accepted_answer_post_id": 35662270, 
    "id": 35661526, 
    "answer_posts": [
      {
        "snippets": [
          "from flask import Flask\nfrom flask import request\nimport json\n\napp = Flask(__name__) \n\n@app.route('/determine_escalation/', methods = ['POST'])\ndef determine_escalation():\n    jsondata = request.get_json()\n    data = json.loads(jsondata)\n\n    #stuff happens here that involves data to obtain a result\n\n    result = {'escalate': True}\n    return json.dumps(result)\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n", 
          "import sys\nimport json\nimport requests\n\nconv = [{'input': 'hi', 'topic': 'Greeting'}]\ns = json.dumps(conv)\nres = requests.post(\"http://127.0.0.1:5000/determine_escalation/\", json=s).json()\nprint(res['escalate'])\n"
        ], 
        "score": 4, 
        "id": 35662270, 
        "rank": 0
      }
    ], 
    "title": "How to send and receive data from flask?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 11215632, 
    "answer_posts": [
      {
        "snippets": [
          "import wx\n\n########################################################################\nclass MyDlg(wx.Dialog):\n    \"\"\"\"\"\"\n\n    #----------------------------------------------------------------------\n    def __init__(self):\n        \"\"\"Constructor\"\"\"\n        wx.Dialog.__init__(self, None, title=\"I'm a dialog!\")\n\n        lbl = wx.StaticText(self, label=\"Hi from the panel's init!\")\n        btn = wx.Button(self, id=wx.ID_OK, label=\"Close me\")\n\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        sizer.Add(lbl, 0, wx.ALL, 5)\n        sizer.Add(btn, 0, wx.ALL, 5)\n        self.SetSizer(sizer)\n\n\n########################################################################\nclass MyPanel(wx.Panel):\n    \"\"\"\"\"\"\n\n    #----------------------------------------------------------------------\n    def __init__(self, parent):\n        \"\"\"Constructor\"\"\"\n        wx.Panel.__init__(self, parent)\n\n        # show a custom dialog\n        dlg = MyDlg()\n        dlg.ShowModal()\n        dlg.Destroy()\n\n        self.Bind(wx.EVT_PAINT, self.OnPaint)\n\n    def OnPaint(self, evt):\n        pdc = wx.PaintDC(self)\n        try:\n            dc = wx.GCDC(pdc)\n        except:\n            dc = pdc\n        rect = wx.Rect(0,0, 100, 100)\n        for RGB, pos in [((178,  34,  34), ( 50,  90)),\n                         (( 35, 142,  35), (110, 150)),\n                         ((  0,   0, 139), (170,  90))\n                         ]:\n            r, g, b = RGB\n            penclr   = wx.Colour(r, g, b, wx.ALPHA_OPAQUE)\n            brushclr = wx.Colour(r, g, b, 128)   # half transparent\n            dc.SetPen(wx.Pen(penclr))\n            dc.SetBrush(wx.Brush(brushclr))\n            rect.SetPosition(pos)\n            dc.DrawRoundedRectangleRect(rect, 8)\n\n########################################################################\nclass MyFrame(wx.Frame):\n    \"\"\"\"\"\"\n\n    #----------------------------------------------------------------------\n    def __init__(self):\n        \"\"\"Constructor\"\"\"\n        wx.Frame.__init__(self, None, title=\"Example frame\")\n\n        # show a MessageDialog\n        style = wx.OK|wx.ICON_INFORMATION\n        dlg = wx.MessageDialog(parent=None, \n                               message=\"Hello from the frame's init\", \n                               caption=\"Information\", style=style)\n        dlg.ShowModal()\n        dlg.Destroy()\n\n        # create panel\n        panel = MyPanel(self)\n\nif __name__ == \"__main__\":\n    app = wx.App(False)\n    frame = MyFrame()\n    frame.Show()\n    app.MainLoop()\n"
        ], 
        "score": 1, 
        "id": 11234548, 
        "rank": 0
      }
    ], 
    "title": "How to link multiple wx.Dialogs in wxPython"
  }, 
  {
    "accepted_answer_post_id": 16807529, 
    "id": 16805289, 
    "answer_posts": [
      {
        "snippets": [
          "photo  = request.files.get('photo')\n", 
          "photo_data = photo.file.read()\n", 
          "base64.b64encode(photo_data)\n"
        ], 
        "score": 2, 
        "id": 16807529, 
        "rank": 0
      }
    ], 
    "title": "How to write Image file into binary field of OpenERP using API"
  }, 
  {
    "accepted_answer_post_id": 33171854, 
    "id": 33158526, 
    "answer_posts": [
      {
        "snippets": [
          "call([gdaladdoFile, '-ro', '--config USE_RRD YES', 'filename', '2 4 8 16'])\n", 
          "call([gdaladdoFile, '-ro', '--config', 'USE_RRD', 'YES', filename, '2 4 8 16'])\n"
        ], 
        "score": 1, 
        "id": 33171854, 
        "rank": 0
      }
    ], 
    "title": "How to correctly use gdaladdo in a Python program?"
  }, 
  {
    "accepted_answer_post_id": 18138343, 
    "id": 18075721, 
    "answer_posts": [
      {
        "snippets": [
          "pos = np.vstack(positions) # turn your Nx2 nested list -> Nx2 np.ndarray\nx, y = pos.T # take the transpose so 2xN then unpack into x and y\nln, = plt.plot(x, y, STYLE, color=COLOR, label=LABEL)\n", 
          "ln.remove()  # remove the artist\nplt.draw()   # force a re-rendering of the canvas (figure) to reflect removal\n", 
          "pos = np.vstack(positions + positions[:1])\n"
        ], 
        "score": 2, 
        "id": 18138343, 
        "rank": 0
      }
    ], 
    "title": "How to remove the previous drawing in matplotlib, Python?"
  }, 
  {
    "accepted_answer_post_id": 11114654, 
    "id": 11114589, 
    "answer_posts": [
      {
        "snippets": [
          ">>> parser = argparse.ArgumentParser(prog='frobble')\n>>> parser.add_argument('--foo', help=argparse.SUPPRESS)\n>>> parser.print_help()\nusage: frobble [-h]\n\noptional arguments:\n  -h, --help  show this help message and exit\n"
        ], 
        "score": 73, 
        "id": 11114654, 
        "rank": 0
      }
    ], 
    "title": "Creating hidden arguments with Python argparse"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 27556628, 
    "answer_posts": [
      {
        "snippets": [
          "def trimmed_mean(lst):\n    trimmed_lst = sorted(lst)[1:-1]\n    return sum(trimmed_lst) / len(trimmed_lst)\n", 
          ">>> trimmed_mean([10, 20, 30, 40])\n25.0\n"
        ], 
        "score": 0, 
        "id": 27556703, 
        "rank": 0
      }
    ], 
    "title": "Getting the trimmed mean with Python"
  }, 
  {
    "accepted_answer_post_id": 19223516, 
    "id": 19223435, 
    "answer_posts": [
      {
        "snippets": [
          "def rec_increment(p):\n    if len(p) == 0:\n        return \"\"                    #If you return an empty string, you don't get the \"None\" printing at the end.\n    else:\n        #r = list(p)                 This is not necessary now.\n        print p[0]+1                 #r.pop(0) + 1   Rather than pop, just index.\n        return rec_increment(p[1:])  # Only recurse on the 2nd-nth part of the list\n\nprint rec_increment([1,2,3,4])       # Note that you don't need to both \"print\" in the function *and* print the result of the function - you can pick which you want to do.\n"
        ], 
        "score": 5, 
        "id": 19223516, 
        "rank": 0
      }
    ], 
    "title": "Printing lists recursively in Python without mutating a list"
  }, 
  {
    "accepted_answer_post_id": 9748338, 
    "id": 9748289, 
    "answer_posts": [
      {
        "snippets": [
          "pat = \"[\\w.]+ *@ *\\w+(?:\\.\\w+)*\"\nre.findall(pat, 'abc@cs.stansoft.edu.com .rtrt.. myacc@gmail.com ')\n"
        ], 
        "score": 3, 
        "id": 9748338, 
        "rank": 0
      }
    ], 
    "title": "re.findall failing for regex with grouping in Python"
  }, 
  {
    "accepted_answer_post_id": 34159455, 
    "id": 34157687, 
    "answer_posts": [
      {
        "snippets": [
          "import sys\nfrom PyQt4 import QtGui,QtCore\n\nclass myTable(QtGui.QTableWidget):      \n    def __init__(self,parent=None):\n        super(myTable,self).__init__(parent)\n        self.setColumnCount(2)\n\n    def add_item(self,name):\n        #new row\n        row=self.rowCount()\n        self.insertRow(row)\n\n        #button in column 0\n        button=QtGui.QPushButton(name)\n        button.setProperty(\"name\",name)\n        button.clicked.connect(self.on_click)\n        self.setCellWidget(row,0,button)\n\n        #text in column 1\n        self.setItem(row,1,QtGui.QTableWidgetItem(name))\n\n    def on_click(self):\n        # find the item with the same name to get the row\n        text=self.sender().property(\"name\")\n        item=self.findItems(text,QtCore.Qt.MatchExactly)[0]\n        print(\"Button click at row:\",item.row())\n\nif __name__=='__main__':\n    app = QtGui.QApplication(sys.argv)      \n    widget = myTable()\n    widget.add_item(\"kitten\")\n    widget.add_item(\"unicorn\")\n    widget.show()\n    sys.exit(app.exec_())\n", 
          "button.setProperty(\"row\",row)\n"
        ], 
        "score": 1, 
        "id": 34159455, 
        "rank": 0
      }
    ], 
    "title": "PyQt4 - Using a QItemDelegate to display widget in a QListView"
  }, 
  {
    "accepted_answer_post_id": 15339001, 
    "id": 15338758, 
    "answer_posts": [
      {
        "snippets": [
          ">>> text = \"0x15000000\"\n>>> text = text[2:]  # remove literal type prefix\n>>> text = text.zfill(len(text) + len(text) % 2)  # pad with zeros for even digits\n>>> ' '.join(text[i: i+2] for i in range(0, len(text), 2))  # split into 2-digit chunks\n'15 00 00 00'\n"
        ], 
        "score": 2, 
        "id": 15339001, 
        "rank": 0
      }
    ], 
    "title": "Splitting a hexadecimal string into chunks in Python"
  }, 
  {
    "accepted_answer_post_id": 33006949, 
    "id": 33006721, 
    "answer_posts": [
      {
        "snippets": [
          "drawH(x, y, size) \n", 
          "drawH(x, y, size, level)\n", 
          "drawH(x1, y1, size/2, level-1)\n"
        ], 
        "score": 0, 
        "id": 33006949, 
        "rank": 0
      }
    ], 
    "title": "Can anyone give me a starting point to this Recursive Fractal?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 16012071, 
    "answer_posts": [], 
    "title": "how to display .txt file contents to the browser using python"
  }, 
  {
    "accepted_answer_post_id": 31845502, 
    "id": 31845109, 
    "answer_posts": [
      {
        "snippets": [
          "from django.http import JsonResponse\ndef follow_user(request, user_profile_id):\n    profile_to_follow = get_object_or_404(UserProfile, pk=user_profile_id)\n    user_profile = request.user.userprofile\n    data = {}\n    if profile_to_follow.follows.filter(id=user_profile.id).exists():\n        data['message'] = \"You are already following this user.\"\n    else:\n        profile_to_follow.follows.add(user_profile)\n        data['message'] = \"You are now following {}\".format(profile_to_follow)\n    return JsonResponse(data, safe=False)\n", 
          "url(r'^follow/(?<user_profile_id>[\\d]+)/$', views.follow_user)\n", 
          "$('.follow-button').click(function() {\n    $.get($(this).data('url'), function(response) {\n        $('.message-section').text(response.message).show();\n    });\n});\n", 
          "<body>\n    <div class=\"message-section\" style=\"display:none;\"></div>\n    {% for user_profile in all_user_profiles %}\n        <button data-url=\"{% url \"example_app.views.follow_user\" user_profile_id=user_profile.id %}\"\n                class=\"follow-button\" type=\"button\">Follow</button>\n    {% endfor %}\n</body>\n"
        ], 
        "score": 2, 
        "id": 31845502, 
        "rank": 0
      }
    ], 
    "title": "How to follow on a button click in Django?"
  }, 
  {
    "accepted_answer_post_id": 25840206, 
    "id": 25839942, 
    "answer_posts": [
      {
        "snippets": [
          "import fnmatch\nimport os\nimport shutil\n\nrootPath = '/Volumes/VoigtKampff/Temp/TEST/'\ndestDir = '/Volumes/VoigtKampff/Temp/TEST2/'\n\nmatches = []\n\nfor root, dirnames, filenames in os.walk(rootPath):\n    for filename in fnmatch.filter(filenames, '*.mp4'):\n        matches.append(os.path.join(root, filename))\n        print(os.path.join(root, filename))\n        targetDir = os.path.join(destDir, root[len(rootPath):])\n        if not os.path.exists(targetDir):\n            os.makedirs(targetDir)\n        shutil.move(os.path.join(root, filename), os.path.join(targetDir, filename))\n"
        ], 
        "score": 2, 
        "id": 25840206, 
        "rank": 0
      }
    ], 
    "title": "recursive find files with python"
  }, 
  {
    "accepted_answer_post_id": 8763339, 
    "id": 8762870, 
    "answer_posts": [
      {
        "snippets": [
          "from PyQt4 import QtGui, QtCore\n\nclass Window(QtGui.QWidget):\n    def __init__(self):\n        QtGui.QWidget.__init__(self)\n        self.button = QtGui.QPushButton('Test', self)\n        self.button.clicked.connect(self.handleButton)\n        layout = QtGui.QVBoxLayout(self)\n        layout.addWidget(self.button)\n\n    def handleButton(self):\n        print ('Hello World')\n\nif __name__ == '__main__':\n\n    import sys\n    app = QtGui.QApplication(sys.argv)\n    window = Window()\n    window.show()\n    sys.exit(app.exec_())\n"
        ], 
        "score": 18, 
        "id": 8763339, 
        "rank": 0
      }
    ], 
    "title": "How to implement a simple button in PyQt"
  }, 
  {
    "accepted_answer_post_id": 33857238, 
    "id": 33857071, 
    "answer_posts": [
      {
        "snippets": [
          "MEDIA_ROOT='(the full path to the media folder)' (i.e: '/home/jason/work/project/media/')\nMEDIA_URL='/media/'\n", 
          "urlpatterns += staticfiles_urlpatterns()\nurlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n", 
          "<img src = \"{{ user.userprofile.tagcloud.url }}\">\n"
        ], 
        "score": 0, 
        "id": 33857238, 
        "rank": 0
      }
    ], 
    "title": "How to display a image which is generated in the backend with Django"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 15003828, 
    "answer_posts": [
      {
        "snippets": [
          "In [11] :g = df.groupby('col1')\n\nIn [12]: g.get_group('A')\nOut[12]: \n  col1  col2\n0    A     1\n1    A     2\n\nIn [13]: g.get_group('A')['col1'].unique()\nOut[13]: array([A], dtype=object)\n\nIn [14]: sum(g.get_group('A')['col2'])\nOut[14]: 3.0\n", 
          "In [15]: g.sum().reset_index()\nOut[15]: \n  col1  col2\n0    A     3\n1    B     7\n"
        ], 
        "score": 5, 
        "id": 15004736, 
        "rank": 0
      }
    ], 
    "title": "returning aggregated dataframe from pandas groupby"
  }, 
  {
    "accepted_answer_post_id": 9988987, 
    "id": 9988226, 
    "answer_posts": [
      {
        "snippets": [
          "import datetime\ndt = datetime.datetime(2012, 1, 10)\n", 
          "timetuple = dt.utctimetuple()\nepoch = calendar.timegm(timetuple)\n", 
          "timetuple = dt.timetuple()\nepoch = time.mktime(timetuple)\n", 
          "datetime.datetime.utcfromtimestamp(epoch)\n", 
          "dt.year\ndt.month\ndt.day\n", 
          "dateString = \"%s-%s-%s\" % (year, month, day)\n"
        ], 
        "score": 0, 
        "id": 9988987, 
        "rank": 0
      }
    ], 
    "title": "Converting readable time to unix time with Python"
  }, 
  {
    "accepted_answer_post_id": 11411162, 
    "id": 11411033, 
    "answer_posts": [
      {
        "snippets": [
          "from scrapy.mail import MailSender\n\nmailer = MailSender()\nmailer.send(to=[\"someone@example.com\"], subject=\"Some subject\", body=\"Some body\", cc=[\"another@example.com\"])\n", 
          "def send_mail(self, message, title):\n    print \"Sending mail...........\"\n    import smtplib\n    from email.MIMEMultipart import MIMEMultipart\n    from email.MIMEText import MIMEText\n    gmailUser = 'mail_you_send_from@gmail.com'\n    gmailPassword = 'password'\n    recipient = 'mail_to_send_to'\n\n    msg = MIMEMultipart()\n    msg['From'] = gmailUser\n    msg['To'] = recipient\n    msg['Subject'] = title\n    msg.attach(MIMEText(message))\n\n    mailServer = smtplib.SMTP('smtp.gmail.com', 587)\n    mailServer.ehlo()\n    mailServer.starttls()\n    mailServer.ehlo()\n    mailServer.login(gmailUser, gmailPassword)\n    mailServer.sendmail(gmailUser, recipient, msg.as_string())\n    mailServer.close()\n    print \"Mail sent\"\n", 
          "send_mail(\"some message\", \"Scraper Report\")\n"
        ], 
        "score": 10, 
        "id": 11411162, 
        "rank": 0
      }
    ], 
    "title": "Sending e-mail after scrape in scrapy "
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 9879687, 
    "answer_posts": [
      {
        "snippets": [
          "from django.contrib import admin\nfrom django import forms\n\nfrom models import Post, Tag\n\nclass PostAdminForm(forms.ModelForm):\n    tags = forms.ModelMultipleChoiceField(\n        Tag.objects.all(),\n        widget=admin.widgets.FilteredSelectMultiple('Tags', False),\n        required=False,\n    )\n\n    def __init__(self, *args, **kwargs):\n        super(PostAdminForm, self).__init__(*args, **kwargs)\n        if self.instance.pk:\n            self.initial['tags'] = self.instance.tags.values_list('pk', flat=True)\n\n    def save(self, *args, **kwargs):\n        instance = super(PostAdminForm, self).save(*args, **kwargs)\n        if instance.pk:\n            instance.tags.clear()\n            instance.tags.add(*self.cleaned_data['tags'])\n        return instance\n\nclass PostAdmin(admin.ModelAdmin):\n    form = PostAdminForm\n\nadmin.site.register(Post, PostAdmin)\n"
        ], 
        "score": 16, 
        "id": 21480139, 
        "rank": 0
      }
    ], 
    "title": "Adding a ManyToManyWidget to the reverse of a ManyToManyField in the Django Admin"
  }, 
  {
    "accepted_answer_post_id": 18078860, 
    "id": 18078851, 
    "answer_posts": [
      {
        "snippets": [
          "# -*- coding: utf-8 -*-\n", 
          "import sys\nprint sys.getdefaultencoding()\n"
        ], 
        "score": 126, 
        "id": 18078860, 
        "rank": 0
      }
    ], 
    "title": "SyntaxError of Non-ASCII character"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 36021526, 
    "answer_posts": [
      {
        "snippets": [
          "from dicttoxml import dicttoxml\n\narray = [\n    {\n        'time': {\"hour\":\"1\", \"minute\":\"30\",\"seconds\": \"40\"}\n    },\n    {\n        'place': {\"street\":\"40 something\", \"zip\": \"00000\"}\n    }\n]\n\nxml = dicttoxml(array, custom_root='test', attr_type=False)\n", 
          "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<test>\n    <item>\n        <time>\n            <seconds>40</seconds>\n            <minute>30</minute>\n            <hour>1</hour>\n        </time>\n    </item>\n    <item>\n        <place>\n            <street>40 something</street>\n            <zip>00000</zip>\n        </place>\n    </item>\n</test>\n", 
          "dictionary = {\n    'time': {\"hour\":\"1\", \"minute\":\"30\",\"seconds\": \"40\"},\n    'place': {\"street\":\"40 something\", \"zip\": \"00000\"}\n}\n", 
          "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<test>\n    <place>\n        <street>40 something</street>\n        <zip>00000</zip>\n    </place>\n    <time>\n        <seconds>40</seconds>\n        <minute>30</minute>\n        <hour>1</hour>\n    </time>\n</test>\n"
        ], 
        "score": 2, 
        "id": 36022452, 
        "rank": 0
      }
    ], 
    "title": "Converting an array dict to xml in python?"
  }, 
  {
    "accepted_answer_post_id": 36156033, 
    "id": 36155942, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import pandas as pd\n>>> df = pd.DataFrame({'a': [-3, -2, 4], 'b': [-2, 2, 5], 'c': [-1, 3, 7], 'd': [1, 4, 8]})\n>>> df.values\narray([[-3, -2, -1,  1],\n       [-2,  2,  3,  4],\n       [ 4,  5,  7,  8]])\n>>> df.values.flatten()\narray([-3, -2, -1,  1, -2,  2,  3,  4,  4,  5,  7,  8])\n>>> sum(n < 0 for n in df.values.flatten())\n4\n"
        ], 
        "score": 0, 
        "id": 36156033, 
        "rank": 0
      }
    ], 
    "title": "Need count of negative values in a dataframe"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 33607071, 
    "answer_posts": [
      {
        "snippets": [
          "In [23]: np.random.seed(123)\n\nIn [24]: x = np.random.rand(3, 10)\n\nIn [25]: p = x/x.sum(axis=1, keepdims=True)\n\nIn [26]: p\nOut[26]: \narray([[ 0.12798052,  0.05257987,  0.04168536,  0.1013075 ,  0.13220688,\n         0.07774843,  0.18022149,  0.1258417 ,  0.08837421,  0.07205402],\n       [ 0.08313743,  0.17661773,  0.1062474 ,  0.01445742,  0.09642919,\n         0.17878489,  0.04420998,  0.0425045 ,  0.12877228,  0.1288392 ],\n       [ 0.11793032,  0.15790292,  0.13467074,  0.11358463,  0.13429674,\n         0.06003561,  0.06725376,  0.0424324 ,  0.05459921,  0.11729367]])\n\nIn [27]: p.shape\nOut[27]: (3, 10)\n\nIn [28]: p.sum(axis=1)\nOut[28]: array([ 1.,  1.,  1.])\n", 
          "In [29]: from scipy.special import entr\n\nIn [30]: entr(p).sum(axis=1)\nOut[30]: array([ 2.22208731,  2.14586635,  2.22486581])\n\nIn [31]: entr(p).sum(axis=1)/np.log(2)\nOut[31]: array([ 3.20579434,  3.09583074,  3.20980287])\n", 
          "In [32]: (-p*np.log2(p)).sum(axis=1)\nOut[32]: array([ 3.20579434,  3.09583074,  3.20980287])\n"
        ], 
        "score": 5, 
        "id": 33609250, 
        "rank": 0
      }
    ], 
    "title": "Fastest way to compute entropy of each numpy array row?"
  }, 
  {
    "accepted_answer_post_id": 14323382, 
    "id": 14323335, 
    "answer_posts": [
      {
        "snippets": [
          "for name, value in root.attrib.items():\n    print '{0}=\"{1}\"'.format(name, value)\n", 
          "for name in root.attrib:\n    print '{0}=\"{1}\"'.format(name, root.attrib[name])\n", 
          "print root.attrib['a']\n"
        ], 
        "score": 8, 
        "id": 14323382, 
        "rank": 0
      }
    ], 
    "title": "Get root's attributes - elementtree"
  }, 
  {
    "accepted_answer_post_id": 3294052, 
    "id": 3293809, 
    "answer_posts": [
      {
        "snippets": [
          "$ cat bar/baz.txt     \nThis is bar/baz.txt.\n$ tar cvfz bar.tgz bar\nbar/\nbar/baz.txt\n$ tar cvfz baz.tgz bar.tgz\nbar.tgz\n", 
          ">>> import tarfile\n>>> baz = tarfile.open('baz.tgz')\n>>> bar = tarfile.open(fileobj=baz.extractfile('bar.tgz'))\n>>> bar.extractfile('bar/baz.txt').read()\n'This is bar/baz.txt.\\n'\n"
        ], 
        "score": 5, 
        "id": 3294052, 
        "rank": 0
      }
    ], 
    "title": "How to walk a tar.gz file that contains zip files without extraction"
  }, 
  {
    "accepted_answer_post_id": 2345201, 
    "id": 2345151, 
    "answer_posts": [
      {
        "snippets": [
          "import cPickle\nimport traceback\n\nclass someClass():\n    def __init__(self):\n        #set name from variable name. http://stackoverflow.com/questions/1690400/getting-an-instance-name-inside-class-init\n        (filename,line_number,function_name,text)=traceback.extract_stack()[-2]\n        def_name = text[:text.find('=')].strip()\n        self.name = def_name\n\n        try:\n            self.load()\n        except:\n            ##############\n            #to demonstrate\n            self.someAttribute = 'bla'\n            self.someAttribute2 = ['more']\n            ##############\n\n            self.save()\n\n    def save(self):\n        \"\"\"save class as self.name.txt\"\"\"\n        file = open(self.name+'.txt','w')\n        file.write(cPickle.dumps(self.__dict__))\n        file.close()\n\n    def load(self):\n        \"\"\"try load self.name.txt\"\"\"\n        file = open(self.name+'.txt','r')\n        dataPickle = file.read()\n        file.close()\n\n        self.__dict__ = cPickle.loads(dataPickle)\n"
        ], 
        "score": 0, 
        "id": 9201726, 
        "rank": 0
      }
    ], 
    "title": "how to save/read class wholly in Python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 15780151, 
    "answer_posts": [
      {
        "snippets": [
          "import logging\n\n# This class could be imported from a utility module\nclass LogMixin(object):\n    @property\n    def logger(self):\n        name = '.'.join([__name__, self.__class__.__name__])\n        return logging.getLogger(name)\n\n\n# This class is just there to show that you can use a mixin like LogMixin\nclass Base(object):\n    pass\n\n# This could be in a module separate from B\nclass A(Base, LogMixin):\n    def __init__(self):\n        # Example of logging from a method in one of your classes\n        self.logger.debug('Hello from A')\n\n# This could be in a module separate from A\nclass B(Base, LogMixin):\n    def __init__(self):\n        # Another example of logging from a method in one of your classes\n        self.logger.debug('Hello from B')\n\ndef main():\n    # Do some work to exercise logging\n    a = A()\n    b = B()\n    with open('myapp.log') as f:\n        print('Log file contents:')\n        print(f.read())\n\nif __name__ == '__main__':\n    # Configure only in your main program clause\n    logging.basicConfig(level=logging.DEBUG,\n                        filename='myapp.log', filemode='w',\n                        format='%(name)s %(levelname)s %(message)s')\n    main()\n", 
          "Log file contents:\n__main__.A DEBUG Hello from A\n__main__.B DEBUG Hello from B\n"
        ], 
        "score": 17, 
        "id": 15835863, 
        "rank": 0
      }
    ], 
    "title": "How to use python logging in multiple modules"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 15655207, 
    "answer_posts": [
      {
        "snippets": [
          "import numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.array([ 0.03570416, 0.05201517, 0.05418171, 0.01868341, 0.07116423, 0.07547471])\ny = np.array([-0.32079484, -0.53330218, -1.02866859, -0.94808545, -0.51682506, -0.26788337])\nz = np.array([-0.32079484, -0.53330218, -1.02866859, -0.94808545, -0.51682506, -0.26788337])\n\nplt.scatter(x, y, c=z, s =250)        \n\nplt.show()\n"
        ], 
        "score": 1, 
        "id": 15662752, 
        "rank": 0
      }
    ], 
    "title": "Griding with python"
  }, 
  {
    "accepted_answer_post_id": 10498166, 
    "id": 10498132, 
    "answer_posts": [
      {
        "snippets": [
          ">>> d = {\"foo\": 12, \"bar\": 2, \"jim\": 4, \"bob\": 17}\n>>> [k for k, v in d.items() if v > 6] # Use d.iteritems() on python 2.x\n['bob', 'foo']\n", 
          "[k for k in d if d[k] > 6]\n", 
          "from six import iteritems\n", 
          "$ python -m timeit -s 'd = {\"foo\": 12, \"bar\": 2, \"jim\": 4, \"bob\": 17};' '[k for k, v in d.items() if v > 6]'\n1000000 loops, best of 3: 0.772 usec per loop\n$ python -m timeit -s 'd = {\"foo\": 12, \"bar\": 2, \"jim\": 4, \"bob\": 17};' '[k for k, v in d.iteritems() if v > 6]'\n1000000 loops, best of 3: 0.508 usec per loop\n$ python -m timeit -s 'd = {\"foo\": 12, \"bar\": 2, \"jim\": 4, \"bob\": 17};' '[k for k in d if d[k] > 6]'\n1000000 loops, best of 3: 0.45 usec per loop\n\n$ python3 -m timeit -s 'd = {\"foo\": 12, \"bar\": 2, \"jim\": 4, \"bob\": 17};' '[k for k, v in d.items() if v > 6]'\n1000000 loops, best of 3: 1.02 usec per loop\n$ python3 -m timeit -s 'd = {\"foo\": 12, \"bar\": 2, \"jim\": 4, \"bob\": 17};' '[k for k in d if d[k] > 6]'\n1000000 loops, best of 3: 1.02 usec per loop\n", 
          "$ python -m timeit -s 'd = {i: i for i in range(-10000000, 10000000)};' -n 1 '[k for k in d if d[k] > 6]'\n1 loops, best of 3: 1.75 sec per loop\n$ python -m timeit -s 'd = {i: i for i in range(-10000000, 10000000)};' -n 1 '[k for k, v in d.iteritems() if v > 6]'\n1 loops, best of 3: 1.71 sec per loop\n$ python3 -m timeit -s 'd = {i: i for i in range(-10000000, 10000000)};' -n 1 '[k for k in d if d[k] > 6]'\n1 loops, best of 3: 3.08 sec per loop\n$ python3 -m timeit -s 'd = {i: i for i in range(-10000000, 10000000)};' -n 1 '[k for k, v in d.items() if v > 6]'\n1 loops, best of 3: 2.47 sec per loop\n"
        ], 
        "score": 81, 
        "id": 10498166, 
        "rank": 0
      }
    ], 
    "title": "How to filter dictionary keys based on its corresponding values"
  }, 
  {
    "accepted_answer_post_id": 23557664, 
    "id": 23533113, 
    "answer_posts": [
      {
        "snippets": [
          "import cherrypy\nfrom cherrypy import request\n\nclass test:\n    @cherrypy.expose\n    def index(self, **params):\n        # all the request parametes goes into the params dictionary.\n        # in case that no port is defined return None\n        print params.get('port', None) \n        return \"Done\";\n\n\nif __name__ == \"__main__\":\n    cherrypy.config.update( {'server.socket_host':\"0.0.0.0\",\n                             'server.socket_port':8181 })\n    cherrypy.quickstart(test())  \n"
        ], 
        "score": 1, 
        "id": 23557664, 
        "rank": 0
      }
    ], 
    "title": "Error when sending http POST request from C# client to python server"
  }, 
  {
    "accepted_answer_post_id": 15906338, 
    "id": 15906207, 
    "answer_posts": [
      {
        "snippets": [
          "In [15]: from collections import defaultdict\n\nIn [16]: dic=defaultdict(list)\n\nIn [17]: for _ in xrange(4):\n   ....:     h,j=map(int,raw_input().split())\n   ....:     dic[h].append(j)\n   ....:     \n1 10\n1 20\n2 30\n3 5\n\nIn [18]: dic\nOut[18]: defaultdict(<type 'list'>, {1: [10, 20], 2: [30], 3: [5]})\n", 
          "In [19]: dic={}  #use {} for declaring a new dict\n\nIn [20]: for _ in xrange(4):\n   ....:     h,j=map(int,raw_input().split())\n   ....:     dic.setdefault(h,[]).append(j)\n   ....:     \n1 10\n1 20\n2 30\n3 5\n\nIn [21]: dic\nOut[21]: {1: [10, 20], 2: [30], 3: [5]}\n", 
          "In [25]: dic={1: [10, 30], 2: [30], 3: [5,50]}\n\nIn [26]: sorted(dic.items(),key=lambda x:sum(x[1])) #sort based on sum of lists\nOut[26]: [(2, [30]), (1, [10, 30]), (3, [5, 50])]\n", 
          "In [27]: from collections import OrderedDict\n\nIn [30]: od=OrderedDict(sorted(dic.items(),key=lambda x:sum(x[1])))\n\nIn [31]: od\nOut[31]: OrderedDict([(2, [30]), (1, [10, 30]), (3, [5, 50])])\n"
        ], 
        "score": 3, 
        "id": 15906338, 
        "rank": 0
      }
    ], 
    "title": "index out of range in python dictionary"
  }, 
  {
    "accepted_answer_post_id": 4743693, 
    "id": 4721963, 
    "answer_posts": [
      {
        "snippets": [
          "import paramiko\nssh = paramiko.SSHClient()\nssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\nssh.connect(your_host, port=your_port, username=your_username, password=your_password)\n"
        ], 
        "score": 3, 
        "id": 4743693, 
        "rank": 0
      }
    ], 
    "title": "Can't connect to server through SSH in Django application"
  }, 
  {
    "accepted_answer_post_id": 4093037, 
    "id": 4093029, 
    "answer_posts": [
      {
        "snippets": [
          "class MyList(collections.MutableSequence):\ndef __init__(self, l=[]):\n    if type(l) is not list:\n        raise ValueError()\n\n    self._inner_list = l\n\ndef __len__(self):\n    return len(self._inner_list)\n\ndef __delitem__(self, index):\n    self._inner_list.__delitem__(index - 1)\n\ndef insert(self, index, value):\n    self._inner_list.insert(index - 1, value)\n\ndef __setitem__(self, index, value):\n    self._inner_list.__setitem__(index - 1, value)\n\ndef __getitem__(self, index):\n    return self._inner_list.__getitem__(index - 1)\n", 
          "l = MyList()\nl[0]\n", 
          "self._inner_list[-1]\n", 
          "def indexing_decorator(func):\n\n    def decorated(self, index, *args):\n        if index == 0:\n            raise IndexError('Indices start from 1')\n        elif index > 0:\n            index -= 1\n\n        return func(self, index, *args)\n\n    return decorated\n\n\nclass MyList(collections.MutableSequence):\n    def __init__(self):\n        self._inner_list = list()\n\n    def __len__(self):\n        return len(self._inner_list)\n\n    @indexing_decorator\n    def __delitem__(self, index):\n        self._inner_list.__delitem__(index)\n\n    @indexing_decorator\n    def insert(self, index, value):\n        self._inner_list.insert(index, value)\n\n    @indexing_decorator\n    def __setitem__(self, index, value):\n        self._inner_list.__setitem__(index, value)\n\n    @indexing_decorator\n    def __getitem__(self, index):\n        return self._inner_list.__getitem__(index)\n\n    def append(self, value):\n        self.insert(len(self) + 1, value)\n"
        ], 
        "score": 5, 
        "id": 37425128, 
        "rank": 0
      }
    ], 
    "title": "How to inherit and extend a list object in Python?"
  }, 
  {
    "accepted_answer_post_id": 8858026, 
    "id": 8858008, 
    "answer_posts": [
      {
        "snippets": [
          "os.rename(\"path/to/current/file.foo\", \"path/to/new/desination/for/file.foo\")\nshutil.move(\"path/to/current/file.foo\", \"path/to/new/destination/for/file.foo\")\n"
        ], 
        "score": 445, 
        "id": 8858026, 
        "rank": 0
      }
    ], 
    "title": "How to move a file in Python"
  }, 
  {
    "accepted_answer_post_id": 32792026, 
    "id": 32792008, 
    "answer_posts": [
      {
        "snippets": [
          "ord('a')  # = 97\n", 
          "str(unichr(97))  # = 'a'\n", 
          "s = 'My string'\nnumber_string = ''\n\nfor c in s:\n    number_string += str(ord(c)).zfill(3)\n"
        ], 
        "score": 1, 
        "id": 32792026, 
        "rank": 0
      }
    ], 
    "title": "Python store non numeric string as number"
  }, 
  {
    "accepted_answer_post_id": 23372119, 
    "id": 23372086, 
    "answer_posts": [
      {
        "snippets": [
          "for line in f:\n    QuizList.append(line.split(None, 1)[0]) # add only first word\n"
        ], 
        "score": 6, 
        "id": 23372119, 
        "rank": 0
      }
    ], 
    "title": "How would I read only the first word of each line of a text file?"
  }, 
  {
    "accepted_answer_post_id": 8425933, 
    "id": 8422942, 
    "answer_posts": [
      {
        "snippets": [
          "line_start = self.OutWidget.index(\"@%s,%s linestart\" % (event.x, event.y))\n", 
          "line_end = self.OutWidget.index(\"%s lineend\" % line_start)\nself.OutWidget.tag_remove(\"highlight\", 1.0, \"end\")\nself.OutWidget.tag_add(\"highlight\", line_start, line_end)\n", 
          "self.OutWidget.tag_configure(\"highlight\", background=\"bisque\")\n", 
          "self.InWidget.focus_set()\n"
        ], 
        "score": 3, 
        "id": 8425933, 
        "rank": 0
      }
    ], 
    "title": "Highlighting a clicked line in an unfocused Tkinter text widget"
  }, 
  {
    "accepted_answer_post_id": 26974518, 
    "id": 26969526, 
    "answer_posts": [
      {
        "snippets": [
          "plt.yticks([0.5,1.5,2.5], [\"first\", \"second\", \"third\"])\nplt.xticks([0.5,1.5,2.5], [\"first\", \"second\", \"third\"], rotation='vertical')\n", 
          "plt.tight_layout()\n"
        ], 
        "score": 1, 
        "id": 26974518, 
        "rank": 0
      }
    ], 
    "title": "Creating a correlation plot with matplotlib"
  }, 
  {
    "accepted_answer_post_id": 30926717, 
    "id": 30926670, 
    "answer_posts": [
      {
        "snippets": [
          "In [18]: df = pd.DataFrame(np.random.randint(10, size=(5,1)), columns=['A'])\n\nIn [19]: df\nOut[19]: \n   A\n0  4\n1  7\n2  0\n3  7\n4  6\n\nIn [20]: df.reindex(columns=list('ABCD'))\nOut[20]: \n   A   B   C   D\n0  4 NaN NaN NaN\n1  7 NaN NaN NaN\n2  0 NaN NaN NaN\n3  7 NaN NaN NaN\n4  6 NaN NaN NaN\n", 
          "In [31]: df.reindex(columns=list('DCBA'))\nOut[31]: \n    D   C   B  A\n0 NaN NaN NaN  4\n1 NaN NaN NaN  7\n2 NaN NaN NaN  0\n3 NaN NaN NaN  7\n4 NaN NaN NaN  6\n", 
          "In [22]: df.reindex(columns=list('ABCD'), fill_value=0)\nOut[22]: \n   A  B  C  D\n0  4  0  0  0\n1  7  0  0  0\n2  0  0  0  0\n3  7  0  0  0\n4  6  0  0  0\n"
        ], 
        "score": 22, 
        "id": 30943503, 
        "rank": 0
      }
    ], 
    "title": "Pandas: Add multiple empty columns to DataFrame"
  }, 
  {
    "accepted_answer_post_id": 18056150, 
    "id": 18056132, 
    "answer_posts": [
      {
        "snippets": [
          "add(name=\"Hello\")\n", 
          "attributes = {'name': 'Hello'}\nadd(**attributes)\n"
        ], 
        "score": 5, 
        "id": 18056150, 
        "rank": 0
      }
    ], 
    "title": "Dynamically add keyword arguments"
  }, 
  {
    "accepted_answer_post_id": 28315353, 
    "id": 28315008, 
    "answer_posts": [
      {
        "snippets": [
          "query = df.index.get_level_values(2) >= pd.Timestamp('2013-01-17')\ndf[query]\n", 
          "query = (df.index.levels[2] >= pd.Timestamp(\"2013-01-17\"))[df.index.labels[2]]\ndf[query]\n", 
          "In [21]: df.index.get_loc_level(2)\nOut[21]:\n(slice(15, 25, None),\n MultiIndex(levels=[[u'A', u'B', u'C', u'D', u'E'], [2013-01-14 00:00:00, 2013-01-15 00:00:00, 2013-01-16 00:00:00, 2013-01-17 00:00:00, 2013-01-18 00:00:00]],\n            labels=[[3, 3, 3, 3, 3, 4, 4, 4, 4, 4], [0, 1, 2, 3, 4, 0, 1, 2, 3, 4]],\n            names=[u'instrument', u'date']))\n", 
          "In [21]: df.index.get_loc_level((1, \"A\"))\nOut[21]:\n(slice(0, 5, None), <class 'pandas.tseries.index.DatetimeIndex'>\n [2013-01-14, ..., 2013-01-18]\n Length: 5, Freq: None, Timezone: None)\n"
        ], 
        "score": 2, 
        "id": 28315353, 
        "rank": 0
      }
    ], 
    "title": "Pandas multi-index best way to slice for ranges of subordinate levels"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 10954687, 
    "answer_posts": [
      {
        "snippets": [
          "print '\"{}\"'.format(str([]))\n", 
          "\"[]\"\n", 
          "print '\"{}\"'.format(str([\"a\"]))\n", 
          "\"['a']\"\n"
        ], 
        "score": 1, 
        "id": 10954710, 
        "rank": 0
      }
    ], 
    "title": "Print empty string with double quotes instead of single quotes in Python"
  }, 
  {
    "accepted_answer_post_id": 18742744, 
    "id": 18742632, 
    "answer_posts": [
      {
        "snippets": [
          "class MyModelAdmin(admin.ModelAdmin):\n    def formfield_for_foreignkey(self, db_field, request, **kwargs):\n        if db_field.name == \"author\":\n            kwargs[\"queryset\"] = Author.objects.filter(anyfilters=anyfilters).order_by('name')\n        return super(MyModelAdmin, self).formfield_for_foreignkey(db_field, request, **kwargs)\n"
        ], 
        "score": 3, 
        "id": 33475014, 
        "rank": 0
      }
    ], 
    "title": "How to alphabetically order a drop-down list in Django admin?"
  }, 
  {
    "accepted_answer_post_id": 23275798, 
    "id": 23275779, 
    "answer_posts": [
      {
        "snippets": [
          "print [item for items in Temp for item in items.split(\",\")]\n", 
          "['H',\n 'test',\n '0',\n '04/09/2014',\n '15:19:35',\n '15:28:30',\n '0.07',\n '0',\n '0',\n 'avo',\n '1',\n 'N',\n '2',\n '1',\n '240.00',\n '30.00',\n '1',\n '3',\n '1',\n '',\n '',\n '',\n '',\n '',\n '',\n '',\n 'K',\n '0.18',\n '',\n '',\n '',\n '',\n 'D',\n '',\n '',\n '',\n '',\n '',\n '',\n '',\n '',\n '15',\n '',\n 'U',\n '35P019',\n '000000',\n 'ST',\n '5',\n 'U',\n '00',\n 'Y',\n '0000',\n '',\n '',\n 'T',\n '1',\n 'Disk',\n 'WH',\n 'All Element',\n 'FL',\n '72',\n '0.062',\n '0.079',\n '0.070',\n 'PASS']\n"
        ], 
        "score": 2, 
        "id": 23275798, 
        "rank": 0
      }
    ], 
    "title": "Combining list elements into one element in python"
  }, 
  {
    "accepted_answer_post_id": 17819869, 
    "id": 17819851, 
    "answer_posts": [
      {
        "snippets": [
          "out.write(\"Added \"+line.strip()) # Or out.write(\"Added {}\".format(line.strip()))\n", 
          ">>> \"Added \"+\"abc\\n\".strip()\n'Added abc'\n", 
          "write(...)\n    write(str) -> None.  Write string str to file.\n"
        ], 
        "score": 4, 
        "id": 17819869, 
        "rank": 0
      }
    ], 
    "title": "How to Print this statment in to a txt file"
  }, 
  {
    "accepted_answer_post_id": 13552256, 
    "id": 13548721, 
    "answer_posts": [
      {
        "snippets": [
          ">>> print d\n   A  B   C\n0  1  3   7\n1 -2  1   6\n2  8  6   9\n3  1 -5  11\n4 -4 -2   0\n>>> d.A / d.B\n0    0.333333\n1   -2.000000\n2    1.333333\n3   -0.200000\n4    2.000000\n>>> d.A[1:] / d.B\n0         NaN\n1   -2.000000\n2    1.333333\n3   -0.200000\n4    2.000000\n", 
          ">>> d.A.values[1:] / d.B.values[:-1]\narray([-0.66666667,  8.        ,  0.16666667,  0.8       ])\n", 
          ">>> d.A.values[1:] / d.A.values[:-1]\n45: array([-2.   , -4.   ,  0.125, -4.   ])\n"
        ], 
        "score": 0, 
        "id": 13548893, 
        "rank": 0
      }
    ], 
    "title": "pandas DataFrame Dividing a column by itself"
  }, 
  {
    "accepted_answer_post_id": 26642304, 
    "id": 26635870, 
    "answer_posts": [
      {
        "snippets": [
          "X = [ ... ]\nY = [ ... ]\nZ = [ ... ]\n", 
          "grid_x, grid_y = np.mgrid[0:max(Y):800j, 0:max(X):800j]\n", 
          "values = interpolate.griddata((Y, X), Z, (grid_x, grid_y), method='linear')\n", 
          "pl.imshow(values, origin='lower', extent=[0, max(X), 0, max(Y)],\n          aspect='auto', cmap=pl.get_cmap('YlOrRd'))\n"
        ], 
        "score": 0, 
        "id": 26642304, 
        "rank": 0
      }
    ], 
    "title": "Plot (x, y, z) triples on 2d plane with a colormap"
  }, 
  {
    "accepted_answer_post_id": 9746113, 
    "id": 9740887, 
    "answer_posts": [
      {
        "snippets": [
          "time.sleep(0.1) \n", 
          "p.stdin.write(phrase + '\\n')\n"
        ], 
        "score": 1, 
        "id": 9746113, 
        "rank": 0
      }
    ], 
    "title": "controlling puttygen with Popen"
  }, 
  {
    "accepted_answer_post_id": 17706350, 
    "id": 17706109, 
    "answer_posts": [
      {
        "snippets": [
          "import io\nimport pandas as pd\ncontent = '''\\\ntimestamp  score\n2013-06-29 00:52:28+00:00        -0.420070\n2013-06-29 00:51:53+00:00        -0.445720\n2013-06-28 16:40:43+00:00         0.508161\n2013-06-28 15:10:30+00:00         0.921474\n2013-06-28 15:10:17+00:00         0.876710\n'''\n\ndf = pd.read_table(io.BytesIO(content), sep='\\s{2,}', parse_dates=[0], index_col=[0])\n\nprint(df)\n", 
          "                        score\ntimestamp                    \n2013-06-29 00:52:28 -0.420070\n2013-06-29 00:51:53 -0.445720\n2013-06-28 16:40:43  0.508161\n2013-06-28 15:10:30  0.921474\n2013-06-28 15:10:17  0.876710\n\nprint(df.index)\n# <class 'pandas.tseries.index.DatetimeIndex'>\n", 
          "print(df.groupby(df.index.date).count())\n", 
          "            score\n2013-06-28      3\n2013-06-29      2\n"
        ], 
        "score": 10, 
        "id": 17706350, 
        "rank": 0
      }
    ], 
    "title": "summing the number of occurrences per day pandas"
  }, 
  {
    "accepted_answer_post_id": 22187870, 
    "id": 22187589, 
    "answer_posts": [
      {
        "snippets": [
          "from collections import namedtuple\nfrom keyword import iskeyword\nimport re\n\ndef NotDone(msg):\n    raise NotImplemented(msg)\n\ndef nominal(spec):\n    \"\"\"\n    Create an ARFF nominal (enumerated) data type\n    \"\"\"\n    spec = spec.lstrip(\"{ \\t\").rstrip(\"} \\t\")\n    good_values = set(val.strip() for val in spec.split(\",\"))\n\n    def fn(s):\n        s = s.strip()\n        if s in good_values:\n            return s\n        else:\n            raise ValueError(\"'{}' is not a recognized value\".format(s))\n\n    # patch docstring\n    fn.__name__ = \"nominal\"\n    fn.__doc__ = \"\"\"\n    ARFF nominal (enumerated) data type\n\n    Legal values are {}\n    \"\"\".format(sorted(good_values))\n    return fn\n\ndef numeric(s):\n    \"\"\"\n    Convert string to int or float\n    \"\"\"\n    try:\n        return int(s)\n    except ValueError:\n        return float(s)\n\nfield_maker = {\n    \"date\":       (lambda spec: NotDone(\"date data type not implemented\")),\n    \"integer\":    (lambda spec: int),\n    \"nominal\":    (lambda spec: nominal(spec)),\n    \"numeric\":    (lambda spec: numeric),\n    \"string\":     (lambda spec: str),\n    \"real\":       (lambda spec: float),\n    \"relational\": (lambda spec: NotDone(\"relational data type not implemented\")),\n}\n\ndef file_lines(fname):\n    # lazy file reader; ensures file is closed when done,\n    # returns lines without trailing spaces or newline\n    with open(fname) as inf:\n        for line in inf:\n            yield line.rstrip()\n\ndef no_data_yet(*items):\n    raise ValueError(\"AarfRow not fully defined (haven't seen a @data directive yet)\")\n\ndef make_field_name(s):\n    \"\"\"\n    Mangle string to make it a valid Python identifier\n    \"\"\"\n    s = s.lower()                               # force to lowercase\n    s = \"_\".join(re.findall(\"[a-z0-9]+\", s))    # strip all invalid chars; join what's left with \"_\"\n    if iskeyword(s) or re.match(\"[0-9]\", s):    # if the result is a keyword or starts with a digit\n        s = \"f_\"+s                              #   make it a safe field name\n    return s  \n\nclass ArffReader:\n    line_types = [\"blank\", \"comment\", \"relation\", \"attribute\", \"data\"]\n\n    def __init__(self, fname):\n        # get input file\n        self.fname = fname\n        self.lines = file_lines(fname)\n\n        # prepare to read file header\n        self.relation = '(not specified)'\n        self.data_names = []\n        self.data_types = []\n        self.dtype = no_data_yet\n\n        # read file header\n        line_tests = [\n            (getattr(self, \"line_is_{}\".format(item)), getattr(self, \"line_do_{}\".format(item)))\n            for item in self.__class__.line_types\n        ]\n        for line in self.lines:\n            for is_, do in line_tests:\n                if is_(line):\n                    done = do(line)\n                    break\n            if done:\n                break\n\n        # use header fields to build data type (and make it print as requested)\n        class ArffRow(namedtuple('ArffRow', self.data_names)):\n            __slots__ = ()\n            def __str__(self):\n                items = (getattr(self, field) for field in self._fields)\n                return \"({})\".format(\", \".join(repr(it) for it in items))\n        self.dtype = ArffRow\n\n    #\n    # figure out input-line type\n    #\n\n    def line_is_blank(self, line):\n        return not line\n\n    def line_is_comment(self, line):\n        return line.lower().startswith('%')\n\n    def line_is_relation(self, line):\n        return line.lower().startswith('@relation')\n\n    def line_is_attribute(self, line):\n        return line.lower().startswith('@attribute')\n\n    def line_is_data(self, line):\n        return line.lower().startswith('@data')\n\n    #    \n    # handle input-line type\n    #    \n\n    def line_do_blank(self, line):\n        pass\n\n    def line_do_comment(self, line):\n        pass\n\n    def line_do_relation(self, line):\n        self.relation = line[10:].strip()\n\n    def line_do_attribute(self, line):\n        m = re.match(\n            \"^@attribute\"           #   line starts with '@attribute'\n            \"\\s+\"                   #\n            \"(\"                     # name is one of:\n                \"(?:'[^']+')\"       #   ' string in single-quotes '\n                \"|(?:\\\"[^\\\"]+\\\")\"   #   \" string in double-quotes \"\n                \"|(?:[^ \\t'\\\"]+)\"   #   single_word_string (no spaces)\n            \")\"                     #\n            \"\\s+\"                   #\n            \"(\"                     # type is one of:\n                \"(?:{[^}]+})\"       #   { set, of, nominal, values }\n                \"|(?:\\w+)\"          #   datatype\n            \")\"                     #\n            \"\\s*\"                   #\n            \"(\"                     # spec string\n                \".*\"                #   anything to end of line\n            \")$\",                   #\n            line, flags=re.I)       #   case-insensitive\n        if m:\n            name, type_, spec = m.groups()\n            self.data_names.append(make_field_name(name))\n            if type_[0] == '{':\n                type_, spec = 'nominal', type_\n            self.data_types.append(field_maker[type_](spec))\n        else:\n            raise ValueError(\"failed parsing attribute line '{}'\".format(line))\n\n    def line_do_data(self, line):\n        return True  # flag end of header\n\n    #\n    # make the class iterable\n    #\n\n    def __iter__(self):\n        return self\n\n    def next(self):\n        \"\"\"\n        Return one data row at a time\n        \"\"\"\n        data = next(self.lines).split(',')\n        return self.dtype(*(fn(dat) for fn,dat in zip(self.data_types, data)))\n", 
          "for row in ArffReader('mydata.arff'):\n    print(row)\n", 
          "(63.0, 'male', 'typ_angina', 145.0, 233.0, 't', 'left_vent_hyper', 150.0, 'no', 2.3, 'down', 0.0, 'fixed_defect', 'negative')\n(37.0, 'male', 'non_anginal', 130.0, 250.0, 'f', 'normal', 187.0, 'no', 3.5, 'down', 0.0, 'normal', 'negative')\n(41.0, 'female', 'atyp_angina', 130.0, 204.0, 'f', 'left_vent_hyper', 172.0, 'no', 1.4, 'up', 0.0, 'normal', 'negative')\n(56.0, 'male', 'atyp_angina', 120.0, 236.0, 'f', 'normal', 178.0, 'no', 0.8, 'up', 0.0, 'normal', 'negative')\n(57.0, 'female', 'asympt', 120.0, 354.0, 'f', 'normal', 163.0, 'yes', 0.6, 'up', 0.0, 'normal', 'negative')\n(57.0, 'male', 'asympt', 140.0, 192.0, 'f', 'normal', 148.0, 'no', 0.4, 'flat', 0.0, 'fixed_defect', 'negative')\n(56.0, 'female', 'atyp_angina', 140.0, 294.0, 'f', 'left_vent_hyper', 153.0, 'no', 1.3, 'flat', 0.0, 'normal', 'negative')\n(44.0, 'male', 'atyp_angina', 120.0, 263.0, 'f', 'normal', 173.0, 'no', 0.0, 'up', 0.0, 'reversable_defect', 'negative')\n(52.0, 'male', 'non_anginal', 172.0, 199.0, 't', 'normal', 162.0, 'no', 0.5, 'up', 0.0, 'reversable_defect', 'negative')\n", 
          "for patient in ArffReader('mydata.arff'):\n    print(\"{} year old {}\".format(patient.age, patient.sex))\n", 
          "63.0 year old male\n37.0 year old male\n41.0 year old female\n56.0 year old male\n57.0 year old female\n57.0 year old male\n56.0 year old female\n44.0 year old male\n52.0 year old male\n", 
          ">>> print(repr(patient))\nArffRow(age=63.0, sex='male', cp='typ_angina', trestbps=145.0, chol=233.0, fbs='t', restecg='left_vent_hyper', thalach=150.0, exang='no', oldpeak=2.3, slope='down', ca=0.0, thal='fixed_defect', f_class='negative')\n"
        ], 
        "score": 3, 
        "id": 22187870, 
        "rank": 0
      }
    ], 
    "title": "How can I parse an arff file without using external libraries in Python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 806151, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import hashlib\n>>> import numpy\n>>> a = numpy.random.rand(10, 100)\n>>> b = a.view(numpy.uint8)\n>>> print a.dtype, b.dtype # a and b have a different data type\nfloat64 uint8\n>>> hashlib.sha1(a).hexdigest() # byte view sha1\n'794de7b1316b38d989a9040e6e26b9256ca3b5eb'\n>>> hashlib.sha1(b).hexdigest() # array sha1\n'794de7b1316b38d989a9040e6e26b9256ca3b5eb'\n"
        ], 
        "score": 24, 
        "id": 806342, 
        "rank": 0
      }
    ], 
    "title": "How to hash a large object (dataset) in Python?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 23229377, 
    "answer_posts": [
      {
        "snippets": [
          "import sys\nsys.stdout.flush()\n"
        ], 
        "score": 1, 
        "id": 23229458, 
        "rank": 0
      }
    ], 
    "title": "Capture standard output of a python program as it happens"
  }, 
  {
    "accepted_answer_post_id": 24347387, 
    "id": 24347012, 
    "answer_posts": [
      {
        "snippets": [
          "In [3]: 1 > 0 & 'a' < 'b'\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-3-5d58a7b0bade> in <module>()\n----> 1 1 > 0 & 'a' < 'b'\n\nTypeError: unsupported operand type(s) for &: 'int' and 'str'\n", 
          "In [4]: (1 > 0) & ('a' < 'b')\nOut[4]: True\n", 
          "m[(m['b'] > 120) & (m['c'] == 7.3)]\n"
        ], 
        "score": 2, 
        "id": 24347387, 
        "rank": 0
      }
    ], 
    "title": "Filtering a DataFrame based on multiple column criteria"
  }, 
  {
    "accepted_answer_post_id": 11826101, 
    "id": 11824589, 
    "answer_posts": [
      {
        "snippets": [
          "# startup.py\nimport os\nimport main.py # Whatever your main script is\nos.system('activate.bat') # Call your batch files.\nmain.run() # Call whatever you need to from your main script.\n"
        ], 
        "score": 2, 
        "id": 11824859, 
        "rank": 0
      }
    ], 
    "title": "How to run a python script with Python Tools for Visual Studio in a virtualenv?"
  }, 
  {
    "accepted_answer_post_id": 9041071, 
    "id": 9041033, 
    "answer_posts": [
      {
        "snippets": [
          "\\bbarbar\n", 
          ">>> s = u'baRbarus, semibarbarus: qui BARbari sunt, alteres BARBARos non sequuntur!'\n>>> re.findall(r'\\bbarbar', s, re.IGNORECASE | re.UNICODE)\n[u'baRbar', u'BARbar', u'BARBAR']\n"
        ], 
        "score": 1, 
        "id": 9041071, 
        "rank": 0
      }
    ], 
    "title": "python's re: find words beginning from \"string\" in any case"
  }, 
  {
    "accepted_answer_post_id": 28396119, 
    "id": 28395870, 
    "answer_posts": [
      {
        "snippets": [
          ">>> from bs4 import BeautifulSoup\n>>> import re\n>>> \n>>> soup = BeautifulSoup('<p> blabla</p> and <p onclick=\"js action\">blabla</p>')\n>>> soup.find_all('p', onclick=re.compile('.'))\n[<p onclick=\"js action\">blabla</p>]\n"
        ], 
        "score": 0, 
        "id": 28396119, 
        "rank": 0
      }
    ], 
    "title": "BeautifulSoup webscrape, isolate specific tag with random html class"
  }, 
  {
    "accepted_answer_post_id": 30623176, 
    "id": 30605870, 
    "answer_posts": [
      {
        "snippets": [
          " File \"quiv.py\", line 21, in update_quiver\nQ.set_UVC(u, v)\nNameError: global name 'Q' is not defined\n", 
          "global Q \n", 
          "from matplotlib import pyplot as plt\nimport numpy as np\nimport matplotlib.animation as animation\n\ndef ufield(x,y,t):\n    return np.cos(x+y)*np.sin(t)\n\ndef vfield(x,y,t):\n    return np.sin(x+y)*np.cos(t)\n\nx = np.linspace(0,10, num=11)\ny = np.linspace(0,10, num=11)\nX,Y = np.meshgrid(x,y)\nt = np.linspace(0,1)\n\ndef update_quiver(j, ax, fig):\n    u = ufield(X,Y,t[j])\n    v = vfield(X,Y,t[j])\n    Q.set_UVC(u, v)\n    ax.set_title('$t$ = '+ str(t[j]))\n    return Q,\n\ndef init_quiver():\n    global Q\n    u = ufield(X,Y,t[0])\n    v = vfield(X,Y,t[0])\n    Q = ax.quiver(X, Y, u, v)\n    ax.set_title('$t$ = '+ str(t[0]))\n    ax.set_xlabel('$x$')\n    ax.set_ylabel('$y$')\n    return  Q,\n\nfig =plt.figure()\nax = fig.gca()\nax.set_title('$t$ = '+ str(t[0]))\nax.set_xlabel('$x$')\nax.set_ylabel('$y$')\n\nani = animation.FuncAnimation(fig, update_quiver, \n                              frames = range(0,t.size),\n                              init_func=init_quiver,\n                              interval=1,fargs=(ax, fig))\nplt.show()\n"
        ], 
        "score": 0, 
        "id": 30623176, 
        "rank": 0
      }
    ], 
    "title": "Animating quiver in matplotlib"
  }, 
  {
    "accepted_answer_post_id": 7979693, 
    "id": 7979632, 
    "answer_posts": [
      {
        "snippets": [
          "import numpy as np\narr=np.array([\n    ( 54.51399994, -12.10200024, -11.88099957),\n    ( 56.23899841, -8.30799961, -2.03500009)])\nprint(arr.astype('|S10'))\n", 
          "[['54.51399994', '-12.10200024', '-11.88099957'], ['56.23899841', '-8.30799961', '-2.03500009']]\n"
        ], 
        "score": 4, 
        "id": 7979693, 
        "rank": 0
      }
    ], 
    "title": "Python: Split numpy array"
  }, 
  {
    "accepted_answer_post_id": 8830050, 
    "id": 8830029, 
    "answer_posts": [
      {
        "snippets": [
          "l = mystr.split('\\n')\nl[2] += ' extra text'\nmystr = '\\n'.join(l)\n", 
          "mystr.replace('x\\n', 'x extra extra stuff\\n')\n"
        ], 
        "score": 6, 
        "id": 8830050, 
        "rank": 0
      }
    ], 
    "title": "How to add text to the end of a line in a string? - Python"
  }, 
  {
    "accepted_answer_post_id": 21583817, 
    "id": 21583758, 
    "answer_posts": [
      {
        "snippets": [
          ">>> (1.0).is_integer()\nTrue\n>>> (1.555).is_integer()\nFalse\n", 
          ">>> for n in range(12000, -1, -1):\n...     if (n ** (1.0/3)).is_integer():\n...         print n\n... \n27\n8\n1\n0\n", 
          ">>> (4**3) ** (1.0/3)\n3.9999999999999996\n>>> 10648 ** (1.0/3)\n21.999999999999996\n", 
          ">>> int(12000 ** (1.0/3))\n22\n>>> 22 ** 3\n10648\n", 
          ">>> from math import isclose\n>>> isclose((4**3) ** (1.0/3), 4)\nTrue\n>>> isclose(10648 ** (1.0/3), 22)\nTrue\n", 
          "def isclose(a, b, rel_tol=1e-9, abs_tol=0.0):\n    return abs(a - b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)\n"
        ], 
        "score": 127, 
        "id": 21583817, 
        "rank": 0
      }
    ], 
    "title": "How to check if a float value is a whole number"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 3982887, 
    "answer_posts": [], 
    "title": "How to add xml header to dom object"
  }, 
  {
    "accepted_answer_post_id": 9128459, 
    "id": 9128414, 
    "answer_posts": [
      {
        "snippets": [
          "np.array(list(set(map(tuple, input))))\n", 
          "array([[4, 5],\n       [2, 3],\n       [1, 1]])\n", 
          "from collections import Counter\n\nnp.array([k for k, v in Counter(map(tuple, input)).iteritems() if v == 1])\n", 
          "array([[4, 5],\n       [2, 3]])\n", 
          "input=[[1,1,2], [1,1,3], [2,3,4], [4,5,5], [1,1,7]]\n\nd = {}\nfor a in input:\n    d.setdefault(tuple(a[:2]), []).append(a[2])\n", 
          "{(1, 1): [2, 3, 7],\n (2, 3): [4],\n (4, 5): [5]}\n", 
          "np.array([k+tuple(v) for k,v in d.iteritems() if len(v) == 1])\n", 
          "array([[4, 5, 5],\n       [2, 3, 4]])\n", 
          "import numpy as np\ninput = [[1,1,3,5,6,6],[1,1,4,4,5,6],[1,3,4,5,6,7],[3,4,6,7,7,6],[1,1,4,6,88,7],[3,3,3,3,3,3],[456,6,5,343,435,5]]\nd = {}\nfor a in input:\n    d.setdefault(tuple(a[:2]), []).append(a)\nnp.array([v for v in d.itervalues() if len(v) == 1])\n", 
          "array([[[456,   6,   5, 343, 435,   5]],\n       [[  1,   3,   4,   5,   6,   7]],\n       [[  3,   4,   6,   7,   7,   6]],\n       [[  3,   3,   3,   3,   3,   3]]])\n"
        ], 
        "score": 3, 
        "id": 9128459, 
        "rank": 0
      }
    ], 
    "title": "Remove elements that appear more often than once from numpy array"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 1653828, 
    "answer_posts": [
      {
        "snippets": [
          "def save(self, *args, **kwargs):\n    \"\"\"Save method for Question model\"\"\"\n    if not self.id:\n        super(Question, self).save(*args, **kwargs)\n    # Fill the index field\n    self.index = self.id # plus whatever else you need\n    return super(Question, self).save(*args, **kwargs)\n"
        ], 
        "score": 0, 
        "id": 1669180, 
        "rank": 0
      }
    ], 
    "title": "How to prepopulate ID in Django"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 19596794, 
    "answer_posts": [
      {
        "snippets": [
          "{\n  \"ip\": \"12.34.56.78\",\n  \"hostname\": \"XXXXX.com\",\n  \"city\": \"Saint-Lambert\",\n  \"region\": \"Quebec\",\n  \"country\": \"CA\",\n  \"loc\": \"45.5073,-73.5082\",\n  \"org\": \"AS577 Bell Canada\",\n  \"postal\": \"J4P\"\n}\n", 
          "import json\nimport urllib2\n\ndef location_lookup():\n  try:\n    return json.load(urllib2.urlopen('http://ipinfo.io/json'))\n  except urllib2.HTTPError:\n    return False\n\nlocation = location_lookup()\n\n# print city and latitude/longitude\nprint location['city'] + ' (' + location['loc'] + ')'\n", 
          "Saint-Lambert (45.5073,-73.5082)\n"
        ], 
        "score": 1, 
        "id": 35393666, 
        "rank": 0
      }
    ], 
    "title": "Getting the User's Latitude & Longitude in Python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 34969226, 
    "answer_posts": [
      {
        "snippets": [
          "print(\"%.6f\"%4.0) # 4.000000\n", 
          "print(\"{:.6f}\".format(4.0))\n"
        ], 
        "score": 2, 
        "id": 34969255, 
        "rank": 0
      }
    ], 
    "title": "How to print double in python with exact precision?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 25221377, 
    "answer_posts": [
      {
        "snippets": [
          "import matplotlib.pyplot as plt\n\ndata = [2609.494, 2609.55, 2609.605, 2609.658, 2609.703,\n        2609.741, 2609.769, 2609.787, 2609.799, 2609.802]\n\nfig, ax = plt.subplots()\nax.plot(data)\n\nax.ticklabel_format(useOffset=False)\n\nplt.show()\n", 
          "ax = df.plot()\nax.ticklabel_format(useOffset=False)\n"
        ], 
        "score": 3, 
        "id": 25221970, 
        "rank": 0
      }
    ], 
    "title": "Wrong value in matplotlib yticks"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 13662632, 
    "answer_posts": [
      {
        "snippets": [
          "file = open(\"file\",\"r\")                       # Open file for reading \ndic = {}                                      # Create empty dic\n\nfor line in file:                             # Loop over all lines in the file\n        if line.strip() == '':                # If the line is blank\n            continue                          # Skip the blank line\n        elif line.startswith(\"group\"):        # Else if line starts with group\n            key = line.strip()                # Strip whitespace and save key\n            dic[key] = []                     # Initialize empty list\n        else:\n            dic[key].append(line.split())     # Not key so append values\n\nprint dic\n", 
          "{'group #2': [['1', '2', '3', '4'], ['5', '6', '7', '8']], \n 'group #1': [['a', 'b', 'c', 'd'], ['e', 'f', 'g', 'h']]}\n"
        ], 
        "score": 3, 
        "id": 13662757, 
        "rank": 0
      }
    ], 
    "title": "How to create a dictionary from a file in python"
  }, 
  {
    "accepted_answer_post_id": 18440478, 
    "id": 18439851, 
    "answer_posts": [
      {
        "snippets": [
          "from selenium import webdriver\n\n# To prevent download dialog\nprofile = webdriver.FirefoxProfile()\nprofile.set_preference('browser.download.folderList', 2) # custom location\nprofile.set_preference('browser.download.manager.showWhenStarting', False)\nprofile.set_preference('browser.download.dir', '/tmp')\nprofile.set_preference('browser.helperApps.neverAsk.saveToDisk', 'text/csv')\n\nbrowser = webdriver.Firefox(profile)\nbrowser.get(\"http://www.drugcite.com/?q=ACTIMMUNE\")\n\nbrowser.find_element_by_id('exportpt').click()\nbrowser.find_element_by_id('exporthlgt').click()\n"
        ], 
        "score": 35, 
        "id": 18440478, 
        "rank": 0
      }
    ], 
    "title": "downloading file using selenium"
  }, 
  {
    "accepted_answer_post_id": 30626474, 
    "id": 30625963, 
    "answer_posts": [
      {
        "snippets": [
          "import numpy as np\nimport matplotlib.pyplot as plt\n\n#data\ndata1 = [11,20,25,80]\ndata2 = [15,35,50,90]\ndata3 = [25,36,58,63]\ndata4 = [30,40,68,78]\nelement = np.arange(4)\n\n# data is used to automatize the fill_between argument\ndata = [[data1,data2],[data3,data4]]\n\n# creating an list of the colors used\ncols = ['grey','red']\n\n# creating the figure including all axes\nfig,ax = plt.subplots(1,2)\n\nfor i,a in enumerate(ax):\n    phase1 = a.plot(data1,color='blue', lw=2)\n    phase2 = a.plot(data2,color='blue', lw=2)\n    phase3 = a.plot(data3,color='green', lw=2)\n    phase4 = a.plot(data4,color='green', lw=2)\n    a.set_xticks(element)\n    a.set_xticklabels(['La','Ce','Pr','Nd'])\n    a.fill_between(element,data[i][0],data[i][1],color=cols[i])\n    a.set_yscale('log')\n\nfig.set_size_inches(10,5)\n"
        ], 
        "score": 2, 
        "id": 30626474, 
        "rank": 0
      }
    ], 
    "title": "Subplots in matplotlib creating a loop"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 31291670, 
    "answer_posts": [
      {
        "snippets": [
          "    class mutableString():\n        def __init__(self,string):\n            self.string = list(string)\n        def concat(self,pos,notherstr): #pos is so you can concatenate where you want!\n            self.string[pos] = self.string[pos] + notherstr\n            return \"\".join(self.string) \n        def changestr(self,pos,notherstr):\n            self.string[pos] = notherstr\n            return \"\".join(self.string)\n", 
          "    a = mutableString(\"Hello\")\n    a.concat(4,'a')  #Output: \"Helloa\"\n    a.changestr(4,'d') #\"Helld\"\n"
        ], 
        "score": 0, 
        "id": 31294870, 
        "rank": 0
      }
    ], 
    "title": "Creating a Mutable string class in python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 27479113, 
    "answer_posts": [
      {
        "snippets": [
          "import glob\n\n\nfile_names = glob.glob(\"*.txt\")\n\nfor file_name in file_names:\n    f = open(file_name, 'wb')\n\n    f.write(\"AAA\")\n"
        ], 
        "score": 2, 
        "id": 27479655, 
        "rank": 0
      }
    ], 
    "title": "how to write multiple csv files in python"
  }, 
  {
    "accepted_answer_post_id": 32057855, 
    "id": 32057828, 
    "answer_posts": [
      {
        "snippets": [
          "records = []\nrecord = {}\nfor i in range(2):\n    record['a'] = i  \n    for j in range(2):\n        record['b'] = j\n        records.append(record.copy())\n", 
          "records = []\nfor i in range(2):\n    for j in range(2):\n        record = {'a': i, 'b': j}\n        records.append(record)\n", 
          "records = [{'a': i, 'b': j} for i in range(2) for j in range(2)]\n"
        ], 
        "score": 8, 
        "id": 32057855, 
        "rank": 0
      }
    ], 
    "title": "Appending to a list in Python: adds last element every time?"
  }, 
  {
    "accepted_answer_post_id": 1185703, 
    "id": 1185628, 
    "answer_posts": [
      {
        "snippets": [
          "Model.get_or_insert(key_name, **kwds)\n", 
          "def txn():\n  entity = MyModel.get_by_key_name(key_name, parent=kwds.get('parent'))\n  if entity is None:\n    entity = MyModel(key_name=key_name, **kwds)\n    entity.put()\n  return entity\nreturn db.run_in_transaction(txn)\n"
        ], 
        "score": 24, 
        "id": 5829926, 
        "rank": 0
      }
    ], 
    "title": "How do I define a unique property for a Model in Google App Engine?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 31836828, 
    "answer_posts": [
      {
        "snippets": [
          "soup.find(id=\"loginCsrfParam-login\")\n", 
          "if os.access(cookie_filename, os.F_OK):\n    self.cj.load()\n", 
          "# Login\nself.loginPage()\n", 
          "if not os.access(cookie_filename, os.F_OK):\n    self.loginPage()\n    self.cj.save()\n"
        ], 
        "score": 0, 
        "id": 33372738, 
        "rank": 0
      }
    ], 
    "title": "Creating a linkedin webscraper using python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 34828207, 
    "answer_posts": [
      {
        "snippets": [
          "Model.filter(birth_year__lte=F('regisration_date__year') - 25)\n", 
          "Model.update(age=F('registration_date__year') - F('birth_year'))\n"
        ], 
        "score": 1, 
        "id": 34828421, 
        "rank": 0
      }
    ], 
    "title": "How to calculate user age from birth year till registration date using Django ORM"
  }, 
  {
    "accepted_answer_post_id": 29855240, 
    "id": 27381264, 
    "answer_posts": [
      {
        "snippets": [
          "import sys, os, importlib\n\nsys.path.append(os.path.dirname(filename))\nmname = os.path.splitext(os.path.basename(filename))[0]\nimported = importlib.import_module(mname)                       \nsys.path.pop()\n"
        ], 
        "score": 0, 
        "id": 28590138, 
        "rank": 0
      }
    ], 
    "title": "Python 3.4: How to import a module given the full path?"
  }, 
  {
    "accepted_answer_post_id": 31139522, 
    "id": 31124670, 
    "answer_posts": [
      {
        "snippets": [
          "#!/usr/bin/env python\nimport sys\nfrom contextlib import closing\nfrom zipfile import ZipFile\n\nwith closing(ZipFile(sys.argv[1])) as archive:\n    count = len(archive.infolist())\nprint(count)\n", 
          "#!/usr/bin/env python\nimport sys\nimport tarfile\n\nwith tarfile.open(sys.argv[1]) as archive:\n    count = sum(1 for member in archive if member.isreg())\nprint(count)\n", 
          "import os\nimport subprocess\n\ndef count_files_7z(archive):\n    s = subprocess.check_output([\"7z\", \"l\", archive], env=dict(os.environ, LC_ALL=\"C\"))\n    return int(re.search(br'(\\d+)\\s+files,\\s+\\d+\\s+folders$', s).group(1))\n", 
          "import os\nimport re\nfrom subprocess import Popen, PIPE, CalledProcessError\n\ndef count_files_7z(archive):\n    command = [\"7z\", \"l\", archive]\n    p = Popen(command, stdout=PIPE, bufsize=1, env=dict(os.environ, LC_ALL=\"C\"))\n    with p.stdout:\n        for line in p.stdout:\n            if line.startswith(b'Error:'): # found error\n                error = line + b\"\".join(p.stdout)\n                raise CalledProcessError(p.wait(), command, error)\n    returncode = p.wait()\n    assert returncode == 0\n    return int(re.search(br'(\\d+)\\s+files,\\s+\\d+\\s+folders', line).group(1))\n", 
          "import sys\n\ntry:\n    print(count_files_7z(sys.argv[1]))\nexcept CalledProcessError as e:\n    getattr(sys.stderr, 'buffer', sys.stderr).write(e.output)\n    sys.exit(e.returncode)\n", 
          "from functools import partial\nfrom subprocess import Popen, PIPE, CalledProcessError\n\np = Popen(command, stdout=PIPE, bufsize=-1)\nwith p.stdout:\n    read_chunk = partial(p.stdout.read, 1 << 15)\n    count = sum(chunk.count(b'\\n') for chunk in iter(read_chunk, b''))\nif p.wait() != 0:\n    raise CalledProcessError(p.returncode, command)\nprint(count)\n"
        ], 
        "score": 5, 
        "id": 31139522, 
        "rank": 0
      }
    ], 
    "title": "How to programmatically count the number of files in an archive using python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 26118613, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import pip\n>>> pip.main(['install', 'packagename'])\n"
        ], 
        "score": 1, 
        "id": 26118812, 
        "rank": 0
      }
    ], 
    "title": "how to install python package inside pymol"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 17218151, 
    "answer_posts": [
      {
        "snippets": [
          "#!/bin/env python\n\nimport sys\nimport re\nimport pprint\n\n# Some function that determines whether a line is a seperator\ndef is_sep(line):\n    return (line.count('-') > 80)\n\n# Some function that parses the \"block\"\ndef parse_block(lines):\n    parsed_lines = []\n    for line in lines:\n        matches = re.findall('(\\S+)', line)\n        parsed_lines.append(matches)\n    return parsed_lines\n\nif __name__ == \"__main__\":\n    # Read in data\n    with open('data.txt', 'r') as fh:\n        data = fh.read()\n\n    # Split data into lines, then split the lines into \"blocks\"\n    blocks = []\n    block_lines = []\n    for line in data.splitlines():\n        if(is_sep(line)):\n            blocks.append(block_lines)\n            block_lines = []\n        else:\n            block_lines.append(line)\n\n    # This splitting method will create an empty \"block\" as the first element of the list, delete it\n    blocks = blocks[1:]\n\n    # For all blocks but the header block, pass it to \"parse_block\"\n    parsed_blocks = []\n    for block in blocks[1:]:\n        parsed_blocks.append(parse_block(block))\n\n    pprint.pprint(parsed_blocks[0])\n", 
          "[['1', '2.6814E+03', '3.3117E+02', '1.6616E+03', '-1.1814E+02', '1.8312E+03', '3.5247E+03', '2.5879E+02', '-3.8350E+03', '0.0000E+00'],\n ['0.0', '2.5785E+04', '6.8687E+01', '-6.7273E+04', '-7.6310E+03', '-1.8316E+03', '-5.7811E+04', '0.0000E+00', '0.0000E+00', '0.0000E+00'],\n ['4.9', '1.3300E+04', '0.0000E+00', '0.0000E+00', '0.0000E+00', '9.0000E+01', '9.0000E+01', '9.0000E+01', '0.0000E+00', '1.1911E+02'],\n [],\n ['rolling', '2.6814E+03', '3.3117E+02', '1.6616E+03', '-1.1814E+02', '1.8312E+03', '3.5247E+03', '2.5879E+02', '-3.8350E+03', '0.0000E+00'],\n ['averages', '2.5785E+04', '6.8687E+01', '-6.7273E+04', '-7.6310E+03', '-1.8316E+03', '-5.7811E+04', '0.0000E+00', '0.0000E+00', '0.0000E+00'],\n ['1.3300E+04', '0.0000E+00', '0.0000E+00', '0.0000E+00', '9.0000E+01', '9.0000E+01', '9.0000E+01', '0.0000E+00', '1.1911E+02']]\n"
        ], 
        "score": 0, 
        "id": 17219157, 
        "rank": 0
      }
    ], 
    "title": "Extracting and plotting tabulated plaintext data using Python 3"
  }, 
  {
    "accepted_answer_post_id": 18328250, 
    "id": 18328008, 
    "answer_posts": [
      {
        "snippets": [
          "conn.request(\"POST\", \"/collect\", \"v=1&tid=UA-XXXXXX-Y&cid=666&t=event&ec=game&ea=start&ev=0\")\n", 
          "import httplib, urllib\n\nparams = urllib.urlencode({\n    'v': 1,\n    'tid': 'UA-XXXXXX-Y',\n    'cid': '666',\n    't': 'event',\n    'ec': 'game',\n    'ea': 'start',\n    'ev': 0\n})\n\nconnection = httplib.HTTPConnection('www.google-analytics.com')\nconnection.request('POST', '/collect', params)\n"
        ], 
        "score": 2, 
        "id": 18328250, 
        "rank": 0
      }
    ], 
    "title": "How to post to Google Measurement protocol using Python?"
  }, 
  {
    "accepted_answer_post_id": 21323217, 
    "id": 21321670, 
    "answer_posts": [
      {
        "snippets": [
          "csfont = {'fontname':'Comic Sans MS'}\nhfont = {'fontname':'Helvetica'}\n\nplt.title('title',**csfont)\nplt.xlabel('xlabel', **hfont)\nplt.show()\n"
        ], 
        "score": 22, 
        "id": 21323217, 
        "rank": 0
      }
    ], 
    "title": "How to change fonts in matplotlib (python)?"
  }, 
  {
    "accepted_answer_post_id": 33683641, 
    "id": 33682687, 
    "answer_posts": [
      {
        "snippets": [
          "session.query(session.query(User).order_by(User.id.desc()).limit(3)\\\n.subquery().alias('sUser')).order_by('sUser.id')\n", 
          "reversed(session.query(User).order_by(User.id.desc()).limit(3).all())\n", 
          "session.query(User).order_by(User.id.desc()).limit(3).all()[::-1]\n"
        ], 
        "score": 1, 
        "id": 33683641, 
        "rank": 0
      }
    ], 
    "title": "Get last few records put in table in order of ID with SQLAlchemy"
  }, 
  {
    "accepted_answer_post_id": 9849534, 
    "id": 9849435, 
    "answer_posts": [
      {
        "snippets": [
          "self.c.setopt(self.c.COOKIEFILE, 'cookie.txt')\nself.c.setopt(self.c.COOKIEJAR, 'cookie.txt')\n"
        ], 
        "score": 2, 
        "id": 9849534, 
        "rank": 0
      }
    ], 
    "title": "How to set persistent storage for curl cookies?"
  }, 
  {
    "accepted_answer_post_id": 19409827, 
    "id": 19409335, 
    "answer_posts": [
      {
        "snippets": [
          "df['EntryNextTrade'] = df['EntryDate'].shift()\n", 
          "msk = df['EntryNextTrade'] > df'[ExitDate']\n", 
          "df.loc[msk, ['EntryDate', 'ExitDate']]\n"
        ], 
        "score": 11, 
        "id": 19409827, 
        "rank": 0
      }
    ], 
    "title": "Comparing Pandas Dataframe Rows & Dropping rows with overlapping dates"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 9662414, 
    "answer_posts": [
      {
        "snippets": [
          "    if request.method == 'POST':\n\n        user = request.user\n        post_values = request.POST.copy()\n\n        post_values['user'] = user.id\n        form = MyForm(post_values)\n\n        if form.is_valid():\n            form.save()\n            return HttpResponseRedirect(reverse('success'))\n        return HttpResponseRedirect(reverse('error'))\n"
        ], 
        "score": 2, 
        "id": 9663056, 
        "rank": 0
      }
    ], 
    "title": "How to add info to request.POST?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 23686963, 
    "answer_posts": [
      {
        "snippets": [
          "TarFile.add(name, arcname=None, recursive=True, exclude=None, filter=None)\n", 
          "tf = tarfile.open(\"sometar.tar\",\"w\")\ndef excludes_fn(name):\n    return \"build\" in name\ntf.add(\"/base/folder\",exclude=excludes_fn)\n"
        ], 
        "score": 0, 
        "id": 23687047, 
        "rank": 0
      }
    ], 
    "title": "Python: How to take tar using tarfile module by excluding the 3rd directory"
  }, 
  {
    "accepted_answer_post_id": 30650149, 
    "id": 30650113, 
    "answer_posts": [
      {
        "snippets": [
          "In [85]: df = pd.DataFrame([], columns=['a', 'b', 'c'])\n\nIn [86]: df\nOut[86]: \nEmpty DataFrame\nColumns: [a, b, c]\nIndex: []\n", 
          "In [69]: df = pd.DataFrame(columns=['a', 'b', 'c'])\n\nIn [70]: df\nOut[70]: \nEmpty DataFrame\nColumns: [a, b, c]\nIndex: []\n", 
          "In [71]: df = pd.DataFrame(None, columns=['a', 'b', 'c'])\n\nIn [72]: df\nOut[72]: \nEmpty DataFrame\nColumns: [a, b, c]\nIndex: []\n"
        ], 
        "score": 1, 
        "id": 30650149, 
        "rank": 0
      }
    ], 
    "title": "How can I create an empty Pandas DataFrame with specific columns?"
  }, 
  {
    "accepted_answer_post_id": 20896359, 
    "id": 20874870, 
    "answer_posts": [
      {
        "snippets": [
          "from PyQt4 import QtCore, QtGui, QtNetwork\n\nclass Window(QtGui.QWidget):\n    def __init__(self, address):\n        QtGui.QWidget.__init__(self)\n        self.address = address\n        self.table = QtGui.QTableWidget(self)\n        header = self.table.horizontalHeader()\n        header.setStretchLastSection(True)\n        header.hide()\n        self.table.setColumnCount(2)\n        self.button = QtGui.QPushButton('Add Upload', self)\n        self.button.clicked.connect(self.handleAddUpload)\n        layout = QtGui.QVBoxLayout(self)\n        layout.addWidget(self.table)\n        layout.addWidget(self.button)\n        self.netaccess = QtNetwork.QNetworkAccessManager(self)\n        self._uploaders = {}\n\n    def handleAddUpload(self):\n        stream = QtCore.QFile('files/sample.tar.bz2')\n        if stream.open(QtCore.QIODevice.ReadOnly):\n            data = stream.readAll()\n            stream.close()\n            row = self.table.rowCount()\n            button = QtGui.QPushButton('Abort', self.table)\n            button.clicked.connect(lambda: self.handleAbort(row))\n            progress = QtGui.QProgressBar(self.table)\n            progress.setRange(0, len(data))\n            self.table.setRowCount(row + 1)\n            self.table.setCellWidget(row, 0, button)\n            self.table.setCellWidget(row, 1, progress)\n            uploader = self._uploaders[row] = Uploader(row, self.netaccess)\n            uploader.uploadProgress.connect(self.handleUploadProgress)\n            uploader.uploadFinished.connect(self.handleUploadFinished)\n            uploader.upload(data, self.address)\n\n    def handleUploadProgress(self, key, sent, total):\n        print('upload(%d): %d [%d]' % (key, sent, total))\n        progress = self.table.cellWidget(key, 1)\n        progress.setValue(sent)\n\n    def handleUploadFinished(self, key):\n        print('upload(%d) finished' % key)\n        button = self.table.cellWidget(key, 0)\n        button.setDisabled(True)\n        uploader = self._uploaders.pop(key)\n        uploader.deleteLater()\n\n    def handleAbort(self, key):\n        try:\n            self._uploaders[key].abort()\n        except (KeyError, AttributeError):\n            pass\n\nclass Uploader(QtCore.QObject):\n    uploadProgress = QtCore.pyqtSignal(object, int, int)\n    uploadFinished = QtCore.pyqtSignal(object)\n\n    def __init__(self, key, parent):\n        QtCore.QObject.__init__(self, parent)\n        self._key = key\n        self._reply = None\n\n    def abort(self):\n        if self._reply is not None:\n            self._reply.abort()\n\n    def upload(self, data, url):\n        if self._reply is None:\n            request = QtNetwork.QNetworkRequest(QtCore.QUrl(url))\n            request.setHeader(\n                QtNetwork.QNetworkRequest.ContentTypeHeader,\n                'application/x-www-form-urlencoded')\n            self._reply = self.parent().post(request, data)\n            self._reply.uploadProgress.connect(self.handleUploadProgress)\n            self._reply.finished.connect(self.handleFinished)\n\n    def handleUploadProgress(self, sent, total):\n        self.uploadProgress.emit(self._key, sent, total)\n        if sent >= total:\n            # prevent duplicated uploads\n            self._reply.close()\n\n    def handleFinished(self):\n        self._reply.deleteLater()\n        self._reply = None\n        self.uploadFinished.emit(self._key)\n\nif __name__ == '__main__':\n\n    import sys\n    app = QtGui.QApplication(sys.argv)\n    window = Window('http://localhost:54321/upload')\n    window.setGeometry(500, 300, 500, 300)\n    window.show()\n    sys.exit(app.exec_())\n"
        ], 
        "score": 1, 
        "id": 20896359, 
        "rank": 0
      }
    ], 
    "title": "How to get each Process ID when multiprocessing"
  }, 
  {
    "accepted_answer_post_id": 4770360, 
    "id": 4770289, 
    "answer_posts": [
      {
        "snippets": [
          "raw_data = [ 'LEVEL 1', 'SUBJECT A', 'GROUP X', 'COMMENT i', 'COMMENT ii',\n'COMMENT iii', 'GROUP Y', 'COMMENT iv', 'COMMENT v', 'COMMENT vi', 'LEVEL 2',\n'SUBJECT B', 'GROUP Z', 'COMMENT vii', 'COMMENT viii', 'COMMENT ix', \n'SUBJECT C', 'GROUP X2', 'COMMENT x', 'COMMENT xi', 'COMMENT xii', \n'COMMENT xiii', 'GROUP Y2', 'COMMENT xiv', 'COMMENT xv', 'COMMENT xvi' ]\n\nlevel, subject, group, comment = '', '', '', ''\n\nresult = []\n\nfor item in raw_data:\n\n    if item.startswith('COMMENT'): \n        comment = item\n    elif item.startswith('GROUP'): \n        group = item\n        comment = ''\n    elif item.startswith('SUBJECT'): \n        subject = item\n        group = ''\n    elif item.startswith('LEVEL'): \n        level = item\n        subject = ''\n\n    if level and subject and group and comment:\n        result.append([level, subject, group, comment])\n\nimport pprint\npprint.pprint(result)\n", 
          "[['LEVEL 1', 'SUBJECT A', 'GROUP X', 'COMMENT i'],\n ['LEVEL 1', 'SUBJECT A', 'GROUP X', 'COMMENT ii'],\n ['LEVEL 1', 'SUBJECT A', 'GROUP X', 'COMMENT iii'],\n ['LEVEL 1', 'SUBJECT A', 'GROUP Y', 'COMMENT iv'],\n ['LEVEL 1', 'SUBJECT A', 'GROUP Y', 'COMMENT v'],\n ['LEVEL 1', 'SUBJECT A', 'GROUP Y', 'COMMENT vi'],\n ['LEVEL 2', 'SUBJECT B', 'GROUP Z', 'COMMENT vii'],\n ['LEVEL 2', 'SUBJECT B', 'GROUP Z', 'COMMENT viii'],\n ['LEVEL 2', 'SUBJECT B', 'GROUP Z', 'COMMENT ix'],\n ['LEVEL 2', 'SUBJECT C', 'GROUP X2', 'COMMENT x'],\n ['LEVEL 2', 'SUBJECT C', 'GROUP X2', 'COMMENT xi'],\n ['LEVEL 2', 'SUBJECT C', 'GROUP X2', 'COMMENT xii'],\n ['LEVEL 2', 'SUBJECT C', 'GROUP X2', 'COMMENT xiii'],\n ['LEVEL 2', 'SUBJECT C', 'GROUP Y2', 'COMMENT xiv'],\n ['LEVEL 2', 'SUBJECT C', 'GROUP Y2', 'COMMENT xv'],\n ['LEVEL 2', 'SUBJECT C', 'GROUP Y2', 'COMMENT xvi']]\n"
        ], 
        "score": 3, 
        "id": 4770360, 
        "rank": 0
      }
    ], 
    "title": "What is the best way in python to get a denormalized array from this ordered array?"
  }, 
  {
    "accepted_answer_post_id": 14572907, 
    "id": 14559687, 
    "answer_posts": [
      {
        "snippets": [
          "def sample_data(n_i, n_j, z_shape) :\n    x = np.random.rand(n_i, n_j) * 1000\n    x.sort()\n    x[:,0] = 0\n    x[:, -1] = 1000\n    y = np.random.rand(n_i, n_j)\n    z = np.random.rand(*z_shape) * 1000\n    return x, y, z\n", 
          "def interp_1(x, y, z) :\n    rows, cols = x.shape\n    out = np.empty((rows,) + z.shape, dtype=y.dtype)\n    for j in xrange(rows) :\n        out[j] =interp1d(x[j], y[j], kind='linear', copy=False)(z)\n    return out\n\ndef interp_2(x, y, z) :\n    rows, cols = x.shape\n    row_idx = np.arange(rows).reshape((rows,) + (1,) * z.ndim)\n    col_idx = np.argmax(x.reshape(x.shape + (1,) * z.ndim) > z, axis=1) - 1\n    ret = y[row_idx, col_idx + 1] - y[row_idx, col_idx]\n    ret /= x[row_idx, col_idx + 1] - x[row_idx, col_idx]\n    ret *= z - x[row_idx, col_idx]\n    ret += y[row_idx, col_idx]\n    return ret\n", 
          "n_s = np.logspace(1, 3.3, 25)\nint_1 = np.empty((len(n_s),) * 2)\nint_2 = np.empty((len(n_s),) * 2)\nz_shape = (5,)\n\nfor i, n_i in enumerate(n_s) :\n    print int(n_i)\n    for j, n_j in enumerate(n_s) :\n        x, y, z = sample_data(int(n_i), int(n_j), z_shape)\n        int_1[i, j] = min(timeit.repeat('interp_1(x, y, z)',\n                                        'from __main__ import interp_1, x, y, z',\n                                        repeat=10, number=1))\n        int_2[i, j] = min(timeit.repeat('interp_2(x, y, z)',\n                                        'from __main__ import interp_2, x, y, z',\n                                        repeat=10, number=1))\n\ncs = plt.contour(n_s, n_s, np.transpose(int_1-int_2))\nplt.clabel(cs, inline=1, fontsize=10)\nplt.xlabel('n_i')\nplt.ylabel('n_j')\nplt.title('timeit(interp_2) - timeit(interp_1), z.shape=' + str(z_shape))\nplt.show()\n"
        ], 
        "score": 11, 
        "id": 14572907, 
        "rank": 0
      }
    ], 
    "title": "Scipy Fast 1-D interpolation without any loop"
  }, 
  {
    "accepted_answer_post_id": 16467346, 
    "id": 16466670, 
    "answer_posts": [
      {
        "snippets": [
          "In [1381]: df2\nOut[1381]: \n        one       two     three four   five           timestamp\na       NaN  1.138469 -2.400634  bar   True                 NaT\nc       NaN  0.025653 -1.386071  bar  False                 NaT\ne  0.863937  0.252462  1.500571  bar   True 2012-01-01 00:00:00\nf  1.053202 -2.338595 -0.374279  bar   True 2012-01-01 00:00:00\nh       NaN -1.157886 -0.551865  bar  False                 NaT\n\nIn [1382]: df2.fillna(0)\nOut[1382]: \n        one       two     three four   five           timestamp\na  0.000000  1.138469 -2.400634  bar   True 1970-01-01 00:00:00\nc  0.000000  0.025653 -1.386071  bar  False 1970-01-01 00:00:00\ne  0.863937  0.252462  1.500571  bar   True 2012-01-01 00:00:00\nf  1.053202 -2.338595 -0.374279  bar   True 2012-01-01 00:00:00\nh  0.000000 -1.157886 -0.551865  bar  False 1970-01-01 00:00:00\n", 
          "In [1384]: df\nOut[1384]: \n        one       two     three\na       NaN  1.138469 -2.400634\nc       NaN  0.025653 -1.386071\ne  0.863937  0.252462  1.500571\nf  1.053202 -2.338595 -0.374279\nh       NaN -1.157886 -0.551865\n\nIn [1385]: df.fillna(method='pad')\nOut[1385]: \n        one       two     three\na       NaN  1.138469 -2.400634\nc       NaN  0.025653 -1.386071\ne  0.863937  0.252462  1.500571\nf  1.053202 -2.338595 -0.374279\nh  1.053202 -1.157886 -0.551865\n", 
          "df['VOL'].fillna(0)\ndf.fillna(df['CLOSE'])\n"
        ], 
        "score": 1, 
        "id": 16466802, 
        "rank": 0
      }
    ], 
    "title": "Fill NaN in candlestick OHLCV data"
  }, 
  {
    "accepted_answer_post_id": 24557829, 
    "id": 24557809, 
    "answer_posts": [
      {
        "snippets": [
          "x = [3, 1, 4, 1, 5]\ny = \",\".join(map(str, x))\n\nx = [3, 1, 4, 1, 5]\ny = \",\".join([str(item) for item in x])\n", 
          ">>> x = [3, 1, 4, 1, 5]\n>>>\n>>> \",\".join(map(str, x))\n'3,1,4,1,5'\n>>>\n>>> \",\".join([str(item) for item in x])\n'3,1,4,1,5'\n>>>\n"
        ], 
        "score": 5, 
        "id": 24557829, 
        "rank": 0
      }
    ], 
    "title": "Creating comma-separated string from list"
  }, 
  {
    "accepted_answer_post_id": 8855660, 
    "id": 8854071, 
    "answer_posts": [
      {
        "snippets": [
          "from PyQt4 import QtGui, QtCore\n\nclass Window(QtGui.QWidget):\n    def __init__(self):\n        QtGui.QWidget.__init__(self)\n\n    def changeEvent(self, event):\n        if event.type() == QtCore.QEvent.WindowStateChange:\n            if self.windowState() & QtCore.Qt.WindowMinimized:\n                print('changeEvent: Minimised')\n            elif event.oldState() & QtCore.Qt.WindowMinimized:\n                print('changeEvent: Normal/Maximised/FullScreen')\n        QtGui.QWidget.changeEvent(self, event)\n\nif __name__ == '__main__':\n\n    import sys\n    app = QtGui.QApplication(sys.argv)\n    window = Window()\n    window.resize(300, 300)\n    window.show()\n    sys.exit(app.exec_())\n"
        ], 
        "score": 4, 
        "id": 8855660, 
        "rank": 0
      }
    ], 
    "title": "pyqt event trigger on click of minimze button"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 35224632, 
    "answer_posts": [
      {
        "snippets": [
          "import matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport numpy as np\n\na = np.array([0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1])\nb = np.array([0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1])\n\nlists = [a, b]\noverlap = np.zeros_like(a)\n\nfor k, row in enumerate(lists):\n    overlap += row * 2**k\n\ncmap = mpl.colors.ListedColormap(['white', 'blue', 'red', 'purple'])\nbounds = range((2**len(lists))+1)\nnorm = mpl.colors.BoundaryNorm(bounds, cmap.N)\n\nplt.pcolor(overlap.reshape((1, overlap.shape[0])), edgecolor='k', cmap=cmap, norm=norm)\nplt.axes().set_aspect('equal')\nplt.xticks([])\nplt.yticks([])\nplt.xlim(0, len(a))\nplt.show()\n", 
          "000    white\n001    colour A\n010    colour B\n011    colour A+B\n100    colour C\n101    colour A+C\n110    colour B+C\n111    colour A+B+C\n", 
          "import matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport numpy as np\n\na = np.array([0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1])\nb = np.array([0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1])\n\nblue = mpl.colors.LinearSegmentedColormap.from_list('blue', ['white', 'blue'], 256)\nred = mpl.colors.LinearSegmentedColormap.from_list('red', ['white', 'red'], 256)\n\nplt.pcolor(a.reshape((1, a.shape[0])), cmap=blue, edgecolor='k', alpha=1.0)\nplt.pcolor(b.reshape((1, b.shape[0])), cmap=red, edgecolor='k', alpha=0.5)\nplt.axes().set_aspect('equal')\nplt.xticks([])\nplt.yticks([])\nplt.xlim(0, len(a))\nplt.show()\n"
        ], 
        "score": 1, 
        "id": 35235600, 
        "rank": 0
      }
    ], 
    "title": "How to visualize overlapping data in python?"
  }, 
  {
    "accepted_answer_post_id": 23580524, 
    "id": 23560794, 
    "answer_posts": [
      {
        "snippets": [
          "config.add_route('sitemap', '/sitemap.xml')\n", 
          "@view_config(route_name='sitemap', renderer='static/sitemap.jinja2')\ndef sitemap(request):\n    ingredients = [ ingredient.name for ingredient in Cosmeceutical.get_all() ]\n    products = [ product.name for product in Product.get_all() ]\n    return dict(ingredients=ingredients, products=products)\n"
        ], 
        "score": 1, 
        "id": 23580524, 
        "rank": 0
      }
    ], 
    "title": "Pyramid: How to autogenerate sitemap?"
  }, 
  {
    "accepted_answer_post_id": 15008806, 
    "id": 15008758, 
    "answer_posts": [
      {
        "snippets": [
          "parser._registries\n", 
          "{'action': {None: argparse._StoreAction,\n  'append': argparse._AppendAction,\n  'append_const': argparse._AppendConstAction,\n...\n 'type': {None: <function argparse.identity>}}\n", 
          "def str2bool(v):\n  #susendberg's function\n  return v.lower() in (\"yes\", \"true\", \"t\", \"1\")\np = argparse.ArgumentParser()\np.register('type','bool',str2bool) # add type keyword to registries\np.add_argument('-b',type='bool')  # do not use 'type=bool'\n# p.add_argument('-b',type=str2bool) # works just as well\np.parse_args('-b false'.split())\nNamespace(b=False)\n"
        ], 
        "score": 21, 
        "id": 19233287, 
        "rank": 0
      }
    ], 
    "title": "parsing boolean values with argparse"
  }, 
  {
    "accepted_answer_post_id": 1394744, 
    "id": 1394721, 
    "answer_posts": [
      {
        "snippets": [
          "import urllib2\nimg = urllib2.urlopen(\"http://example.com/image.jpg\").read()\n", 
          "import StringIO\nfrom PIL import Image\ntry:\n    im = Image.open(StringIO.StringIO(img))\n    im.verify()\nexcept Exception, e:\n    # The image is not valid\n", 
          "import imghdr\nimghdr.what('ignore', img)\n"
        ], 
        "score": 29, 
        "id": 1394744, 
        "rank": 0
      }
    ], 
    "title": "How do I copy a remote image in python?"
  }, 
  {
    "accepted_answer_post_id": 20156856, 
    "id": 20111758, 
    "answer_posts": [
      {
        "snippets": [
          "import logging\nlogging.basicConfig(level=logging.DEBUG, format='%(asctime)s %(levelname)s %(message)s', datefmt='%H:%M:%S')\nlogging.info('hello')\nlogging.info('\\n')\nlogging.warning('new hello')\n", 
          "import logging\nimport types\n\ndef log_newline(self, how_many_lines=1):\n    # Switch handler, output a blank line\n    self.removeHandler(self.console_handler)\n    self.addHandler(self.blank_handler)\n    for i in range(how_many_lines):\n        self.info('')\n\n    # Switch back\n    self.removeHandler(self.blank_handler)\n    self.addHandler(self.console_handler)\n\ndef create_logger():\n    # Create a handler\n    console_handler = logging.StreamHandler()\n    console_handler.setLevel(logging.DEBUG)\n    console_handler.setFormatter(logging.Formatter(fmt=\"%(name)s %(levelname)-8s: %(message)s\"))\n\n    # Create a \"blank line\" handler\n    blank_handler = logging.StreamHandler()\n    blank_handler.setLevel(logging.DEBUG)\n    blank_handler.setFormatter(logging.Formatter(fmt=''))\n\n    # Create a logger, with the previously-defined handler\n    logger = logging.getLogger('logging_test')\n    logger.setLevel(logging.DEBUG)\n    logger.addHandler(console_handler)\n\n    # Save some data and add a method to logger object\n    logger.console_handler = console_handler\n    logger.blank_handler = blank_handler\n    logger.newline = types.MethodType(log_newline, logger)\n\n    return logger\n\nif __name__ == '__main__':\n    logger = create_logger()\n    logger.info('Start reading database')\n    logger.info('Updating records ...')\n    logger.newline()\n    logger.info('Finish updating records')\n", 
          "logging_test INFO    : Start reading database\nlogging_test INFO    : Updating records ...\n\nlogging_test INFO    : Finish updating records\n"
        ], 
        "score": 7, 
        "id": 20156856, 
        "rank": 0
      }
    ], 
    "title": "How to insert newline in python logging?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 9448029, 
    "answer_posts": [
      {
        "snippets": [
          "import numpy as np\nnp.set_printoptions(formatter={'int':hex})\nnp.array([1,2,3,4,5])\n", 
          "array([0x1L, 0x2L, 0x3L, 0x4L, 0x5L])\n", 
          "np.set_printoptions(formatter={'int':lambda x:hex(int(x))})\n"
        ], 
        "score": 17, 
        "id": 9448099, 
        "rank": 0
      }
    ], 
    "title": "Print an integer array as hexadecimal numbers"
  }, 
  {
    "accepted_answer_post_id": 17534433, 
    "id": 17534377, 
    "answer_posts": [
      {
        "snippets": [
          "cursor.executemany('''insert into zip4_upd values(\n    ?,?,?,?,?,?,?,?,?,?,?,\n    ?,?,?,?,?,?,?,?,?,?,?,\n    ?,?,?,?,?,?,?,?,?,?,?,\n    ?,?,?,?,?,?,?,?,?,?,?,\n    ?,?,?,?,?,?,?,?,?,?,?,\n    ?,?,?,?,?,?,?,?,?,?,?,?)''', row_gen(cursor))\n", 
          "def row_gen(cursor, some=1000):\n    fetch = cursor.fetchmany\n    while True:\n        rows = fetch(some)\n        if not rows: break\n        for row in rows:\n            yield row\n"
        ], 
        "score": 3, 
        "id": 17534433, 
        "rank": 0
      }
    ], 
    "title": "Inserting query results into new table using loop instead of fetchall (Python, SQLite)"
  }, 
  {
    "accepted_answer_post_id": 30597688, 
    "id": 30597687, 
    "answer_posts": [
      {
        "snippets": [
          "import os\nimport json\nimport requests\nfrom flask import Flask\n\napp = Flask(__name__)\n\napp.config.update(\n    DEBUG=True,\n)\n\n@app.route('/')\ndef welcome():\n    return 'Welcome to flask and Cloudant on Bluemix.'\n\n@app.route('/createdb/<db>')\ndef create_db(db):\n    try:\n        vcap = json.loads(os.getenv(\"VCAP_SERVICES\"))['cloudantNoSQLDB']\n\n        cl_username = vcap[0]['credentials']['username']\n        cl_password = vcap[0]['credentials']['password']\n\n        url         = vcap[0]['credentials']['url']\n        auth        = ( cl_username, cl_password )\n\n    except:\n        return 'A Cloudant service is not bound to the application.  Please bind a Cloudant service and try again.'\n\n    requests.put( url + '/' + db, auth=auth )\n    return 'Database %s created.' % db\n\nport = os.getenv('VCAP_APP_PORT', '5000')\n\nif __name__ == \"__main__\":\n    app.run(host='0.0.0.0', port=int(port))\n", 
          "Flask==0.10.1\nrequests==2.7.0\n"
        ], 
        "score": 5, 
        "id": 30597688, 
        "rank": 0
      }
    ], 
    "title": "How can I connect to Cloudant from a Flask App running in Bluemix?"
  }, 
  {
    "accepted_answer_post_id": 19866526, 
    "id": 19866377, 
    "answer_posts": [
      {
        "snippets": [
          "df1.join(df2, how='outer')\n#or\ndf1.join(df2) # this works also\n", 
          "data = {'col_1': [0, 1, 2, 3],\n    'col_2': [4, 5, 6, 7]}\ndf1 = pd.DataFrame(data)\n\nadditional_data = {'col_3': [8, 9, 10, 11],\n               'col_4': [12, 13, 14, 15]}\ndf2 = pd.DataFrame(additional_data)\n\ndf1.join(df2, how='outer')\n", 
          "   col_1  col_2  col_3  col_4\n0      0      4      8     12\n1      1      5      9     13\n2      2      6     10     14\n3      3      7     11     15\n"
        ], 
        "score": 7, 
        "id": 19866526, 
        "rank": 0
      }
    ], 
    "title": "Is it possible to add several columns at once to a pandas DataFrame?"
  }, 
  {
    "accepted_answer_post_id": 30773738, 
    "id": 30773670, 
    "answer_posts": [
      {
        "snippets": [
          "import numpy as np\na = np.arange(10)\nprint a\n#array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nb = np.arange(10)\nprint b\n#array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nprint np.allclose(a, b)\n#True\nb[1] = 10    \n#array([ 0, 10,  2,  3,  4,  5,  6,  7,  8,  9])\nprint  np.allclose(a, b)\n#False\n", 
          "a = [np.array([1, 2, 3]), np.array([1, 2, 3])]\nb = [np.array([1, 2, 3]), np.array([1, 2, 3])]\nall([np.allclose(x, y) for x, y in zip(a, b)])#True\nb = [np.array([1, 2, 3]), np.array([1, 2, 4])]\nall([np.allclose(x, y) for x, y in zip(a, b)])#False\n"
        ], 
        "score": 3, 
        "id": 30773738, 
        "rank": 0
      }
    ], 
    "title": "How to compare list of arrays in python?"
  }, 
  {
    "accepted_answer_post_id": 23252956, 
    "id": 23249507, 
    "answer_posts": [
      {
        "snippets": [
          "self.cursor.execute(\n  \"\"\"INSERT INTO Bristol(BristolCountry, BristolQualification) VALUES ('{0}', '{1})\"\"\".format(\n      item['BristolCountry'], \n      \"\".join([s.encode('utf-8') for s in item['BristolQualification']])))\n", 
          "self.cursor.execute(\n  \"INSERT INTO Bristol(BristolCountry, BristolQualification) VALUES (%s, %s)\", (\n    item['BristolCountry'], \n    \"\".join([s.encode('utf-8') for s in item['BristolQualification']])\n  )\n)\n"
        ], 
        "score": 1, 
        "id": 23252956, 
        "rank": 0
      }
    ], 
    "title": "How do I deal with apostrophes in scrapy and MySQL? Spider completely ignores something that has a \" ' \" in the data"
  }, 
  {
    "accepted_answer_post_id": 21158159, 
    "id": 21158033, 
    "answer_posts": [
      {
        "snippets": [
          "type(cur.fetchone())\n", 
          "<class 'psycopg2.extras.DictRow'>\n", 
          "cur.execute('SELECT id, msg FROM table;')\nrec = cur.fectone()\nprint rec[0], rec['msg']\n", 
          "res = [json.dumps(dict(record)) for record in cursor] # it calls .fecthone() in loop\n"
        ], 
        "score": 6, 
        "id": 21158159, 
        "rank": 0
      }
    ], 
    "title": "query from postgresql using python as dictionary"
  }, 
  {
    "accepted_answer_post_id": 280441, 
    "id": 280435, 
    "answer_posts": [
      {
        "snippets": [
          ">>> re.sub('a', re.escape('_'), 'aa')\n'\\\\_\\\\_'\n", 
          ">>> re.sub('a', lambda _: '_', 'aa')\n'__'\n"
        ], 
        "score": 0, 
        "id": 42423081, 
        "rank": 0
      }
    ], 
    "title": "Escaping regex string in Python"
  }, 
  {
    "accepted_answer_post_id": 14760685, 
    "id": 14720377, 
    "answer_posts": [
      {
        "snippets": [
          "for event in pygame.event.get():\n    if event.type==pygame.QUIT:\n        pygame.quit()\n        sys.exit()\n"
        ], 
        "score": 2, 
        "id": 14760685, 
        "rank": 0
      }
    ], 
    "title": "Pygame window hang"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 20206763, 
    "answer_posts": [
      {
        "snippets": [
          ">>> l = [(11,3.22),(12,4.6),(9,2.4)]\n", 
          ">>> l[0]\n(11, 3.22)\n", 
          ">>> l[0] = ('x', 'y')\n>>> l\n[('x', 'y'), (12, 4.6), (9, 2.4)]\n", 
          ">>> l[0] = dict(zip(('x', 'y'), l[1]))\n>>> l\n[{'y': 4.6, 'x': 12}, (12, 4.6), (9, 2.4)]\n"
        ], 
        "score": 1, 
        "id": 20206849, 
        "rank": 0
      }
    ], 
    "title": "Extract data from list in python"
  }, 
  {
    "accepted_answer_post_id": 26831762, 
    "id": 25415809, 
    "answer_posts": [
      {
        "snippets": [
          "application: polymerxxxx\nversion: 2\nruntime: python27\napi_version: 1\nthreadsafe: yes\n\nhandlers:\n- url: /favicon\\.ico\n  static_files: favicon.ico\n  upload: favicon\\.ico\n- url: /components\n  static_dir: components\n- url: /images\n  static_dir: images\n- url: .*\n  script: main.app\n", 
          "- url: .*\n  script: main.py\n", 
          "import webapp2\n\nclass MainPage(webapp2.RequestHandler):\n    def get(self):\n        self.response.headers['Content-Type'] = 'text/plain'\n        self.response.write('Hello, World!')\n\napp = webapp2.WSGIApplication([\n    ('/', MainPage),\n], debug=True)\n"
        ], 
        "score": 2, 
        "id": 25416258, 
        "rank": 0
      }
    ], 
    "title": "How do I bring the Polymer project into Google App Engine"
  }, 
  {
    "accepted_answer_post_id": 38527464, 
    "id": 38526289, 
    "answer_posts": [
      {
        "snippets": [
          ">>> np.fft.fft(s1t5)\n[ 5. +0.j          0. +0.j          0. +0.j          0. +0.j          0. +0.j\n  5.-15.38841769j  0. +0.j          0. +0.j          0. +0.j          0. +0.j\n  5. +3.63271264j  0. +0.j          0. +0.j          0. +0.j          0. +0.j\n# and so on\n", 
          ">>> np.absolute(np.fft.fft(s1t5))\n[  5.           0.           0.           0.           0.          16.18033989\n   0.           0.           0.           0.           6.18033989   0.           0.\n   0.           0.           6.18033989   0.           0.           0.           0.\n   16.18033989  0.           0.           0.           0.        ]\n"
        ], 
        "score": 3, 
        "id": 38527464, 
        "rank": 0
      }
    ], 
    "title": "How to find frequency of a square wave using FFT"
  }, 
  {
    "accepted_answer_post_id": 5008854, 
    "id": 5008828, 
    "answer_posts": [
      {
        "snippets": [
          "print type(someObject).__name__\n", 
          "print some_instance.__class__.__name__\n", 
          "class A:\n    pass\nprint type(A())\n# prints <type 'instance'>\nprint A().__class__.__name__\n# prints A\n"
        ], 
        "score": 99, 
        "id": 5008854, 
        "rank": 0
      }
    ], 
    "title": "Convert a python 'type' object to a string"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 10120008, 
    "answer_posts": [
      {
        "snippets": [
          "n = [[1,2], [0,0], [5,6]]\n\nnp.delete(n, 1, axis=0)\n", 
          "array([[1, 2],\n       [5, 6]])\n"
        ], 
        "score": 4, 
        "id": 10120288, 
        "rank": 0
      }
    ], 
    "title": "Remove one value from a NumPy array"
  }, 
  {
    "accepted_answer_post_id": 4653536, 
    "id": 4653507, 
    "answer_posts": [
      {
        "snippets": [
          "for i in range(3):\n    for j in range(3):\n        for k in range(3):\n            # something here\n            print _3x3x3[i][j][k],\n    print\n"
        ], 
        "score": 4, 
        "id": 4653536, 
        "rank": 0
      }
    ], 
    "title": "Equivalent C++ nested print in python"
  }, 
  {
    "accepted_answer_post_id": 13263630, 
    "id": 13263414, 
    "answer_posts": [
      {
        "snippets": [
          "l = ['jj01','gg01',',','yy01','hh01',',','yy04','uu01']\njoined = ':'.join(l)\nseparated = joined.split(':,:')\nfinal = [x.split(':') for x in separated]\n", 
          "final = [x.split(':') for x in ':'.join(l).split(':,:')]\n"
        ], 
        "score": 2, 
        "id": 13263630, 
        "rank": 0
      }
    ], 
    "title": "splitting comma separated list"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 88613, 
    "answer_posts": [
      {
        "snippets": [
          "from cStringIO import StringIO\nfrom tokenize import generate_tokens\nSTRING = 1\nlist(token[STRING] for token \n     in generate_tokens(StringIO('2+24*48/32').readline)\n     if token[STRING])\n['2', '+', '24', '*', '48', '/', '32']\n"
        ], 
        "score": 49, 
        "id": 111355, 
        "rank": 0
      }
    ], 
    "title": "How do I split a string into a list?"
  }, 
  {
    "accepted_answer_post_id": 14812034, 
    "id": 14811507, 
    "answer_posts": [
      {
        "snippets": [
          "import numpy as np\nimport matplotlib.pyplot as plt\n\nplt.imshow(np.random.random((10,10)))\ncb = plt.colorbar()\n\nfor l in cb.ax.yaxis.get_ticklabels():\n    l.set_family(\"Comic Sans MS\")\n\nplt.show()\n"
        ], 
        "score": 3, 
        "id": 14812034, 
        "rank": 0
      }
    ], 
    "title": "Python: how to change font in a colorbar?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 5269012, 
    "answer_posts": [
      {
        "snippets": [
          "import socket\nftp.sock.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)\n"
        ], 
        "score": 6, 
        "id": 5269068, 
        "rank": 0
      }
    ], 
    "title": "Using threading to keep FTP control port alive"
  }, 
  {
    "accepted_answer_post_id": 433519, 
    "id": 433507, 
    "answer_posts": [
      {
        "snippets": [
          "from datetime import datetime\nEntry.objects.filter(pub_date=datetime(2008, 10, 18))\n"
        ], 
        "score": 10, 
        "id": 433519, 
        "rank": 0
      }
    ], 
    "title": "Filtering a complete date in django?"
  }, 
  {
    "accepted_answer_post_id": 27221218, 
    "id": 27221132, 
    "answer_posts": [
      {
        "snippets": [
          ">>> from datetime import datetime\n>>> import pytz\n>>> local_date = datetime.now(pytz.timezone('US/Central'))  # use datetime here\n>>> local_date.date()                                       # now call date method\ndatetime.date(2014, 11, 30)\n", 
          ">>> greenwich_date = datetime.now(pytz.timezone('Etc/Greenwich'))\n>>> greenwich_date.date()\ndatetime.date(2014, 12, 1)\n"
        ], 
        "score": 3, 
        "id": 27221218, 
        "rank": 0
      }
    ], 
    "title": "Change Timezone for Date object Python"
  }, 
  {
    "accepted_answer_post_id": 23781714, 
    "id": 23781151, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import random\n>>> import struct\n>>> str1 = struct.pack('<Q', random.randint(1, 1000))\n>>> \"\".join(\"{:02X}\".format(ord(x)) for x in str1)\n'C902000000000000'\n", 
          ">>> list(map(ord, str1)) # Or a list comprehension, [ord(x) for x in str1] \n[201, 2, 0, 0, 0, 0, 0, 0]\n"
        ], 
        "score": 1, 
        "id": 23781255, 
        "rank": 0
      }
    ], 
    "title": "Remove \\x in string in python"
  }, 
  {
    "accepted_answer_post_id": 42475788, 
    "id": 4532008, 
    "answer_posts": [
      {
        "snippets": [
          "import pyglet\nwindow = pyglet.window.Window(600, 600)\nbackground = pyglet.resource.image('my600x600blackbackground.bmp')\npix = pyglet.resource.image('singlewhitepixel.bmp').get_image_data()\n\ndef update(dt):\n    background.blit_into(pix, x, y, 0) #specify x and y however you want\n\n@window.event\ndef on_draw():\n    window.clear()\n    background.blit(0,0)\n\npyglet.clock.schedule(update, 1.0/30) #30 frames per second\npyglet.app.run()\n"
        ], 
        "score": 1, 
        "id": 20590639, 
        "rank": 0
      }
    ], 
    "title": "putpixel with pyglet"
  }, 
  {
    "accepted_answer_post_id": 14511599, 
    "id": 14511435, 
    "answer_posts": [
      {
        "snippets": [
          "import os\nimport urllib\n\npath = urllib.unquote(path)\nfilename = os.path.splitext(os.path.basename(path))[0]\n", 
          ">>> import os\n>>> import urllib\n>>> path = 'D:%5CMedia%5CMusic%20Videos%5CAlexis%20Jordan%20-%20Good%20Girl%2Emkv'\n>>> path = urllib.unquote(path)\n>>> path\n'D:\\\\Media\\\\Music Videos\\\\Alexis Jordan - Good Girl.mkv'\n>>> filename = os.path.splitext(os.path.basename(path))[0]\n>>> filename\n'Alexis Jordan - Good Girl'\n"
        ], 
        "score": 6, 
        "id": 14511599, 
        "rank": 0
      }
    ], 
    "title": "Python - Getting Filename from Long Path"
  }, 
  {
    "accepted_answer_post_id": 3162361, 
    "id": 3162314, 
    "answer_posts": [
      {
        "snippets": [
          "type A     Type B Type C Type D  Type E\n88_NPDJ    565    789    3434    54454\n98HGJDN    945    453    3453    23423\n...\n...\n...\n", 
          "import os\nheaders = ['type 1', 'type 2', 'insert more types']\nfilename = 'your/file/here'\ntmp = open('TMP', 'w')\norig = open(filename, 'r')\ntmp.write('\\t'.join(headers) + '\\n')\nfor line in orig.readlines():\n    tmp.write(line)\norig.close()\ntmp.close()\nos.remove(filename)\nos.rename('TMP', filename)\n"
        ], 
        "score": 1, 
        "id": 3162383, 
        "rank": 0
      }
    ], 
    "title": "Add headers to a file"
  }, 
  {
    "accepted_answer_post_id": 13614853, 
    "id": 13614763, 
    "answer_posts": [
      {
        "snippets": [
          "[{'color': 'blue', 'kind': 'pencil', 'rating': 'high'}, {'season': 'winter'}, {'color': 'red', 'kind': 'truck', 'rating': 'low'},  {'season': 'spring'}]\n", 
          "dict([(score, ResultForm.CHOICES[r.season][1])])\n", 
          "{score: ResultForm.CHOICES[r.season][1]}\n", 
          "for result in request.user.results.all():\n    data.append(dict((str(word.type.type), str(word.word)) for word in result.word.all()))\n    data[-1].update( {score: ResultForm.CHOICES[r.season][1]} )\n"
        ], 
        "score": 0, 
        "id": 13614853, 
        "rank": 0
      }
    ], 
    "title": "Inserting dictionary objects into specific elements of an array (Python/Django)"
  }, 
  {
    "accepted_answer_post_id": 13935242, 
    "id": 13935132, 
    "answer_posts": [
      {
        "snippets": [
          "p = subprocess.Popen(['ls', '-l'], stdout=subprocess.PIPE, shell=True)\nprint p.communicate()[0]\n"
        ], 
        "score": 1, 
        "id": 13935242, 
        "rank": 0
      }
    ], 
    "title": "Calling a python script that returns a value from perl"
  }, 
  {
    "accepted_answer_post_id": 14016295, 
    "id": 14016289, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import re\n>>> st=\"cd 1.2 dv 1.4 ab 2.3 cd\"\n>>> re.match(r'.*(\\d\\.\\d)',st).group(1)\n'2.3'\n", 
          ">>> re.findall(r'(\\d\\.\\d)',st)\n['1.2', '1.4', '2.3']\n>>> re.findall(r'(\\d\\.\\d)',st)[-1]\n'2.3'\n>>> re.findall(r'(\\d\\.\\d)',st)[-2]\n'1.4'\n", 
          ">>> re.search(r'(\\d\\.\\d)',st[::-1]).group(1)[::-1]\n'2.3'\n"
        ], 
        "score": 0, 
        "id": 14016484, 
        "rank": 0
      }
    ], 
    "title": "How the regular expression search in opposite direction in python"
  }, 
  {
    "accepted_answer_post_id": 36803789, 
    "id": 36803632, 
    "answer_posts": [
      {
        "snippets": [
          "tempDF3 = tempDF.loc[6,['group','string']]\n", 
          "tempDF3 = tempDF.loc[[6],['group','string']]\n"
        ], 
        "score": 3, 
        "id": 36803789, 
        "rank": 0
      }
    ], 
    "title": "Accessing data in a Pandas dataframe with one row"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 20972033, 
    "answer_posts": [
      {
        "snippets": [
          "from matplotlib.ticker import MaxNLocator\nax2.yaxis.set_major_locator(MaxNLocator(prune='upper'))  #remove highest label so it wont overlapp with stacked plot.\n"
        ], 
        "score": 2, 
        "id": 20972160, 
        "rank": 0
      }
    ], 
    "title": "matplotlib: ylabels of subplots overlapping"
  }, 
  {
    "accepted_answer_post_id": 3697794, 
    "id": 3697763, 
    "answer_posts": [
      {
        "snippets": [
          "labels = ['id', 'Version', 'chip_name', 'xversion', 'device', 'opt_param', \n    'place_effort']\nvalues = [1, 1.0, u'virtex2', u'xilinx11.5', u'xc5vlx50', u'Speed', u'High']\n\npaddedLabels = []\npaddedValues = []\n\nfor label, value in zip(labels, values):\n    value = str(value)\n    columnWidth = max(len(label), len(value))\n    paddedLabels.append(label.center(columnWidth))\n    paddedValues.append(value.center(columnWidth))\n\nprint ' '.join(paddedLabels)\nprint ' '.join(paddedValues)\n", 
          "id Version chip_name  xversion   device  opt_param place_effort\n1    1.0    virtex2  xilinx11.5 xc5vlx50   Speed       High\n", 
          "labels = ['id', 'Version', 'chip_name', 'xversion', 'device', 'opt_param', \n    'place_effort']\nvalues = [1, 1.0, u'virtex2', u'xilinx11.5', u'xc5vlx50', u'Speed', u'High']\n\npaddedLabels = []\npaddedValues = []\ndividers = []\ndblDividers = []\n\nfor label, value in zip(labels, values):\n    value = str(value)\n    columnWidth = max(len(label), len(value))\n    paddedLabels.append(label.center(columnWidth))\n    paddedValues.append(value.center(columnWidth))\n    dividers.append('-' * columnWidth)\n    dblDividers.append('=' * columnWidth)\n\nprint '+-' + '-+-'.join(dividers) + '-+'\nprint '| ' + ' | '.join(paddedLabels) + ' |'\nprint '+=' + '=+='.join(dblDividers) + '=+'\nprint '| ' + ' | '.join(paddedValues) + ' |'\nprint '+-' + '-+-'.join(dividers) + '-+'\n", 
          "+----+---------+-----------+------------+----------+-----------+--------------+\n| id | Version | chip_name |  xversion  |  device  | opt_param | place_effort |\n+====+=========+===========+============+==========+===========+==============+\n| 1  |   1.0   |  virtex2  | xilinx11.5 | xc5vlx50 |   Speed   |     High     |\n+----+---------+-----------+------------+----------+-----------+--------------+\n"
        ], 
        "score": 3, 
        "id": 3697794, 
        "rank": 0
      }
    ], 
    "title": "pretty printer with Python?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 5868132, 
    "answer_posts": [
      {
        "snippets": [
          "import json\njson.loads('[\"foo\", {\"bar\":[\"baz\", null, 1.0, 2]}]')\n", 
          "[u'foo', {u'bar': [u'baz', None, 1.0, 2]}]\n"
        ], 
        "score": 1, 
        "id": 5868181, 
        "rank": 0
      }
    ], 
    "title": "Data Binding / Data Conversion in Python"
  }, 
  {
    "accepted_answer_post_id": 10579564, 
    "id": 10579414, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import Image\n>>> import numpy as np\n>>> x = np.array([[1., 2.], [3., 4.]])\n>>> im = Image.fromarray(x)\n>>> list(im.getdata())\n[1.0, 2.0, 3.0, 4.0]\n>>> [im.getpixel(x) for x in [(0,0), (0,1), (1,0), (1,1)]]\n[1.0, 3.0, 2.0, 4.0]\n"
        ], 
        "score": 2, 
        "id": 10579564, 
        "rank": 0
      }
    ], 
    "title": "the data from PIL's getpixel & getdata are not the same?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 27076628, 
    "answer_posts": [
      {
        "snippets": [
          "import urllib\n\nurl=[]\n\nurl.append(hxs.select('//a[@class=\"df\"]/@href').extract())\n\n\nfor i in range(len(url)):\n\n        urllib.urlretrieve(url[i],filename='%s'%i)\n"
        ], 
        "score": -1, 
        "id": 27097782, 
        "rank": 0
      }
    ], 
    "title": "How to save PDF files using Scrapy?"
  }, 
  {
    "accepted_answer_post_id": 6623943, 
    "id": 6623887, 
    "answer_posts": [
      {
        "snippets": [
          ">>> s = 'Abc Defg Hijk Lmn'\n>>> s.rsplit(' ', 1)[0]\n'Abc Defg Hijk'\n>>> s = s.rsplit(' ', 1)[0]\n>>> s.rsplit(' ', 1)[0]\n'Abc Defg'\n", 
          ">>> words = s.split()\n>>> [' '.join(words[:i]) for i in range(len(words), 0, -1)]\n['Abc Defg Hijk Lmn', 'Abc Defg Hijk', 'Abc Defg', 'Abc']\n"
        ], 
        "score": 5, 
        "id": 6623914, 
        "rank": 0
      }
    ], 
    "title": "String slicing in python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 10914109, 
    "answer_posts": [
      {
        "snippets": [
          "[c.text for c in doc.xpath('//table[@class=\"CE_13\"][1]//tr/td[5]')]\n", 
          "l = doc.xpath('//table[@class=\"CE_13\"][1]//tr/td[5]')\n{'column%d' % (i+1): l[i].text for i in range(0,len(l))}\n"
        ], 
        "score": 0, 
        "id": 10916466, 
        "rank": 0
      }
    ], 
    "title": "python lxml parsing html"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 18239293, 
    "answer_posts": [
      {
        "snippets": [
          "from openpyxl import Workbook\nwb = Workbook()\n\nws = wb.create_sheet()\nws.title ='NewSheet'\nws.cell('E7').value = 7\n\nws = wb.create_sheet()\nws.cell('A1').value = \"=NewSheet!E7 + 123\"\n\nwb.save( filename = 'temp2.xlsx' )\n"
        ], 
        "score": 3, 
        "id": 18364554, 
        "rank": 0
      }
    ], 
    "title": "openpyxl create a function that references a cell in another sheet"
  }, 
  {
    "accepted_answer_post_id": 33172885, 
    "id": 33114758, 
    "answer_posts": [
      {
        "snippets": [
          "from traceback import print_exc\nimport zmq\nfrom tornado.httputil import HTTPHeaders\n\nclass BadRequest(Exception):\n    pass\n\nclass ConnectionLost(Exception):\n    pass\n\ndef parse_request(request):\n    \"\"\"Parse a request verp, path, and headers\"\"\"\n    first_line, header_lines = request.split(b'\\r\\n', 1)\n    verb, path, proto = first_line.decode('utf8').split()\n    headers = HTTPHeaders.parse(header_lines.decode('utf8', 'replace'))\n    return verb, path, headers\n\n\ndef recv_body(socket, headers, chunks, request_id):\n    \"\"\"Receive the body of a request\"\"\"\n    if headers.get('expect', '').lower() == '100-continue':\n        if 'Content-Length' not in headers:\n            # Don't support chunked transfer: http://tools.ietf.org/html/rfc2616#section-3.6.1\n            print(\"Only support specified-length requests\")\n            socket.send_multipart([\n                request_id, b'HTTP/1.1 400 (Bad Request)\\r\\n\\r\\n',\n                request_id, b'',\n            ])\n            msg = 1\n            while msg != b'':\n                # flush until new connection\n                _, msg = socket.recv_multipart()\n            raise BadRequest(\"Only support specified-length requests\")\n\n        socket.send_multipart([request_id, b'HTTP/1.1 100 (Continue)\\r\\n\\r\\n'], zmq.SNDMORE)\n\n        content_length = int(headers['Content-Length'])\n        print(\"Waiting to receive %ikB body\" )\n        while sum(len(chunk) for chunk in chunks) < content_length:\n            id_, msg = socket.recv_multipart()\n            if msg == b'':\n                raise ConnectionLost(\"Disconnected\")\n            if id_ != request_id:\n                raise ConnectionLost(\"Received data from wrong ID: %s != %s\" % (id_, request_id))\n            chunks.append(msg)\n    return b''.join(chunks)\n\n\nprint(zmq.__version__, zmq.zmq_version())\n\n\nsocket = zmq.Context().socket(zmq.STREAM)\nsocket.bind(\"tcp://*:5555\")\n\n\nwhile True:\n    # Get HTTP request\n    request_id, msg = socket.recv_multipart()\n    if msg == b'':\n        continue\n    chunks = []\n    try:\n        request, first_chunk = msg.split(b'\\r\\n\\r\\n', 1)\n        if first_chunk:\n            chunks.append(first_chunk)\n        verb, path, headers = parse_request(request)\n        print(verb, path)\n        print(\"Headers:\")\n        for key, value in headers.items():\n            print('  %s: %s' % (key, value))\n        body = recv_body(socket, headers, chunks, request_id)\n        print(\"Body: %r\" % body)\n    except BadRequest as e:\n        print(\"Bad Request: %s\" % e)\n    except ConnectionLost as e:\n        print(\"Connection Lost: %s\" % e)\n    except Exception:\n        print(\"Failed to handle request\", msg)\n        print_exc()\n        socket.send_multipart([\n            request_id, b'HTTP/1.1 500 (OK)\\r\\n\\r\\n',\n            request_id, b''])\n    else:\n        socket.send_multipart([\n            request_id, b'HTTP/1.1 200 (OK)\\r\\n\\r\\n',\n            request_id, b''])\n"
        ], 
        "score": 4, 
        "id": 33172885, 
        "rank": 0
      }
    ], 
    "title": "HTTP server in ZMQ or How to handle a POST request with pyzmq?"
  }, 
  {
    "accepted_answer_post_id": 32679637, 
    "id": 32679589, 
    "answer_posts": [
      {
        "snippets": [
          "img = Image.open(filename)\nprint(img.format)  # 'JPEG'\n"
        ], 
        "score": 16, 
        "id": 32679637, 
        "rank": 0
      }
    ], 
    "title": "How to get the format of image with PIL?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 16156151, 
    "answer_posts": [
      {
        "snippets": [
          "numVowels = sum(x in 'aeiou' for x in word)\n", 
          "numVowels = sum(word.count(x) for x in 'aeiou')\n", 
          "numVowels = len(word.translate(None, 'bcdfghjklmnpqrstxyz'))\n"
        ], 
        "score": 4, 
        "id": 16156425, 
        "rank": 0
      }
    ], 
    "title": "Calculating vowel to word length ratio in a list of words"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 27875226, 
    "answer_posts": [
      {
        "snippets": [
          ">>> lst = ['jump','double blink']\n>>> all(dictionary[f] < dictionary[s] for f, s in zip(lst, lst[1:]))\nFalse\n>>> lst = d.keys()\n>>> all(dictionary[f] < dictionary[s] for f, s in zip(lst, lst[1:]))\nTrue\n", 
          ">>> zip(lst, lst[1:])\n[('wink', 'double blink'), ('double blink', 'close your eyes'), ('close your eyes', 'jump')]\n", 
          ">>> from itertools import tee, izip\n>>> def pairwise(iterable):\n        \"s -> (s0,s1), (s1,s2), (s2, s3), ...\"\n        a, b = tee(iterable)\n        next(b, None)\n        return izip(a, b)\n... \n>>> all(dictionary[f] < dictionary[s] for f, s in pairwise(lst))\nTrue\n>>> list(pairwise(lst))\n[('wink', 'double blink'), ('double blink', 'close your eyes'), ('close your eyes', 'jump')]\n"
        ], 
        "score": 1, 
        "id": 27875389, 
        "rank": 0
      }
    ], 
    "title": "Check if elements are out of order in Python"
  }, 
  {
    "accepted_answer_post_id": 17547573, 
    "id": 17547507, 
    "answer_posts": [
      {
        "snippets": [
          ">>> {}.update(1, 2)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: update expected at most 1 arguments, got 2\n", 
          ">>> def key(v):\n...     return (v, v)\n... \n>>> value = range(3)\n>>> map(key, value)\n[(0, 0), (1, 1), (2, 2)]\n>>> product = {}\n>>> product.update(map(key, value))\n>>> product\n{0: 0, 1: 1, 2: 2}\n"
        ], 
        "score": 25, 
        "id": 17547573, 
        "rank": 0
      }
    ], 
    "title": "Update method in Python dictionary"
  }, 
  {
    "accepted_answer_post_id": 35058538, 
    "id": 35058435, 
    "answer_posts": [
      {
        "snippets": [
          "result = [str(i) for i in result]\n", 
          "print([str(i) for i in df.index.values])\n"
        ], 
        "score": 1, 
        "id": 35058508, 
        "rank": 0
      }
    ], 
    "title": "How to read index data as string with Python pandas?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 32734151, 
    "answer_posts": [
      {
        "snippets": [
          "post = models.ManyToManyField(Post, related_name=\"tags\")\n", 
          "filter_horizontal = ('tags',)\n"
        ], 
        "score": -1, 
        "id": 32737039, 
        "rank": 0
      }
    ], 
    "title": "How to relate many-to-many relationship on same page in django-admin?"
  }, 
  {
    "accepted_answer_post_id": 20433122, 
    "id": 20431670, 
    "answer_posts": [
      {
        "snippets": [
          "with open('nasdaq.txt') as fin, open('nonasdaq.txt', 'w') as fout:\n    for line in fin:\n        if 'nasdaq' not in line:\n            fout.write(line)\n"
        ], 
        "score": 3, 
        "id": 20431869, 
        "rank": 0
      }
    ], 
    "title": "Trying to delete specific lines from file based on keyword"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 24062151, 
    "answer_posts": [
      {
        "snippets": [
          "[ i*j for i,j in zip(a,b)]\n", 
          "file1=[i.rstrip() for i in file1]\nfile2=[i.rstrip() for i in file2]\n\n[ float(i)*float(j) for i,j in zip(file1,file2)]\n", 
          "for i,j in zip(file1,file2):\n    out.write(float(i)*float(j) )\n"
        ], 
        "score": 5, 
        "id": 24062183, 
        "rank": 0
      }
    ], 
    "title": "Multiplying all elements in one array by respective element of a second arrary"
  }, 
  {
    "accepted_answer_post_id": 10832036, 
    "id": 10832008, 
    "answer_posts": [
      {
        "snippets": [
          "In [1]: l=[['AB', '132'], ['C D'], ['EFG'], ['HJ K', '2  1']]  \n\nIn [2]: map(tuple, l)\nOut[2]: [('AB', '132'), ('C D',), ('EFG',), ('HJ K', '2  1')]\n", 
          "[tuple(x) for x in l]\n"
        ], 
        "score": 2, 
        "id": 10832054, 
        "rank": 0
      }
    ], 
    "title": "Converting a list of lists to a list of tuples"
  }, 
  {
    "accepted_answer_post_id": 34884070, 
    "id": 34883293, 
    "answer_posts": [
      {
        "snippets": [
          "class Lot(models.Model):\n\n    item = models.ForeignKey(Item)\n    count = models.IntegerField(default = 1)\n    price = models.FloatField(default = item.price) #Price on the moment of buying\n    def __str__(self):              # __unicode__ on Python 2\n        return self.item.name\n\n    def save(self, *args, **kwargs):\n        if self.item: # verify there's a FK\n            self.price = self.item.price\n        super(Lot, self).save(*args,**kwargs) # invoke the inherited save method; price will now be save if item is not null\n\n    def cost(self):\n         return self.price * self.count\n"
        ], 
        "score": 2, 
        "id": 34884090, 
        "rank": 0
      }
    ], 
    "title": "Django. Default value from foreign key"
  }, 
  {
    "accepted_answer_post_id": 28151180, 
    "id": 28149207, 
    "answer_posts": [
      {
        "snippets": [
          "data = {}\nfor line in newContent:\n    if line.startswith('.'):\n        cur_dict = {}\n        data[line[1:]] = cur_dict\n    elif line.startswith('+'):\n        key, value = line[1:].split(' = ', 1)\n        cur_dict[key] = value\n", 
          "{'model': {'spam': 'eggs',\n           'spamspam': 'eggseggs',\n           'spamspamspam': 'eggseggseggs'},\n 'param': {'foo': 'bar',\n           'foofoo': 'barbar',\n           'foofoofoo': 'barbarbar'}}\n"
        ], 
        "score": 2, 
        "id": 28149270, 
        "rank": 0
      }
    ], 
    "title": "Split list based on first character - Python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 26092132, 
    "answer_posts": [
      {
        "snippets": [
          "import pandas as pd\nX = pd.DataFrame({\"Var1\": [\"a\", \"a\", \"b\"],\n                  \"Var2\": [\"a\", \"b\", \"c\"],\n                  \"Var3\": [1, 2, 3]},\n                  dtype = \"category\")\nX[\"Var3\"] = X[\"Var3\"].astype(int)\n", 
          "pd.get_dummies(X)\n", 
          "   Var3  Var1_a  Var1_b  Var2_a  Var2_b  Var2_c\n0     1       1       0       1       0       0\n1     2       1       0       0       1       0\n2     3       0       1       0       0       1\n", 
          "X[\"Var1\"].cat.add_categories(\"c\", inplace=True)\n", 
          "pd.get_dummies(X)\n", 
          "   Var3  Var1_a  Var1_b  Var1_c  Var2_a  Var2_b  Var2_c\n0     1       1       0       0       1       0       0\n1     2       1       0       0       0       1       0\n2     3       0       1       0       0       0       1\n"
        ], 
        "score": 2, 
        "id": 30150196, 
        "rank": 0
      }
    ], 
    "title": "Convert multiple columns of a pandas data frame to dummy variables - Python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 39631870, 
    "answer_posts": [], 
    "title": "python+pyspark: error on inner join with multiple column comparison in pyspark"
  }, 
  {
    "accepted_answer_post_id": 3975067, 
    "id": 3973963, 
    "answer_posts": [
      {
        "snippets": [
          "from pyparsing import nestedExpr\n\ntext = '(BODYSTRUCTURE (\"text\" \"plain\" (\"charset\" \"ISO-8859-1\") NIL NIL \"quotedprintable\" 1207 50 NIL NIL NIL NIL))'\n\nprint nestedExpr().parseString(text)\n", 
          "[['BODYSTRUCTURE', ['\"text\"', '\"plain\"', ['\"charset\"', '\"ISO-8859-1\"'], 'NIL', 'NIL', '\"quoted printable\"', '1207', '50', 'NIL', 'NIL', 'NIL', 'NIL']]]\n", 
          "from pyparsing import (nestedExpr, Literal, Word, alphanums, \n    quotedString, replaceWith, nums, removeQuotes)\n\nNIL = Literal(\"NIL\").setParseAction(replaceWith(None))\ninteger = Word(nums).setParseAction(lambda t:int(t[0]))\nquotedString.setParseAction(removeQuotes)\ncontent = (NIL | integer | Word(alphanums))\n\nprint nestedExpr(content=content, ignoreExpr=quotedString).parseString(text)\n", 
          "[['BODYSTRUCTURE', ['text', 'plain', ['charset', 'ISO-8859-1'], None, None, 'quoted-printable', 1207, 50, None, None, None, None]]]\n"
        ], 
        "score": 4, 
        "id": 3975067, 
        "rank": 0
      }
    ], 
    "title": "parsing parenthesized list in python's imaplib"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 18708628, 
    "answer_posts": [
      {
        "snippets": [
          "import requests\n\ndef post_some_dict(dict):\n    headers = {'Content-type': 'application/json', 'Accept': 'text/plain'}\n    r = requests.post(url, data=json.dumps(dict), headers=headers)\n", 
          "data = {\"somekey\": 12}\nheaders = {\"Content-type\": \"application/json\", \"Accept\": \"text/plain\"}\nconn = httplib.HTTPConnection('xx.xx.xx.xx')\nconn.request(\"POST\", \"/\", json.dumps(data), headers)\n"
        ], 
        "score": 2, 
        "id": 18709228, 
        "rank": 0
      }
    ], 
    "title": "Python JSON POST request"
  }, 
  {
    "accepted_answer_post_id": 34683105, 
    "id": 34682828, 
    "answer_posts": [
      {
        "snippets": [
          "new = old[['A', 'C', 'D']].copy()\n", 
          "new = old.filter(['A','B','D'], axis=1)\n", 
          "new = old.drop('B', axis=1)\n"
        ], 
        "score": 12, 
        "id": 34683105, 
        "rank": 0
      }
    ], 
    "title": "pandas: Extracting specific selected columns from a DataFrame to new DataFrame"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 16705670, 
    "answer_posts": [
      {
        "snippets": [
          ">>> s = u\"{u'id': u'100000000265946', u'name': u'Sophia N Art Fuentes'}\"\n>>> s.keys()\n\nTraceback (most recent call last):\n  File \"<pyshell#12>\", line 1, in <module>\n    s.keys()\nAttributeError: 'unicode' object has no attribute 'keys'\n>>> import ast\n>>> d = ast.literal_eval(s)\n>>> d.keys()\n[u'id', u'name']\n"
        ], 
        "score": 0, 
        "id": 16705705, 
        "rank": 0
      }
    ], 
    "title": "Accessing values from a Unicode dictionary in Python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 18980700, 
    "answer_posts": [
      {
        "snippets": [
          "def form_valid(self, form):\n    upload = self.request.FILES['profilbild_original'] #coming from a very simple form\n    self.request.user.student.profilbild_original = upload\n    self.request.user.student.save()\n    #no renaming was required here, but now I did some work:\n\n    inputfilepath = os.path.join(my_app.settings.MEDIA_ROOT, profilbild_path(self.request.user, str(upload)))\n    original = Image.open(inputfilepath) \n    original.thumbnail((200,200), Image.ANTIALIAS)\n    filename = str(upload)+'.thumbnail_200_200_aa.jpg'\n    filepath = profilbild_path(self.request.user, filename)\n    filepath = os.path.join(my_app.settings.MEDIA_ROOT, filepath)\n    original.save(filepath, 'JPEG', quality=90)\n    self.request.user.student.profilbild = profilbild_path(self.request.user, filename).replace(\"\\\\\", \"/\")\n    self.request.user.student.save()\n\n    return super(ProfilbildView, self).form_valid(form)  \n", 
          "def profilbild_path(instance, filename):\n    return os.path.join('profilbilder', str(instance.id), filename)\n"
        ], 
        "score": 1, 
        "id": 19008852, 
        "rank": 0
      }
    ], 
    "title": "Django. How to programatically rename files uploaded using django-filer"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 14384071, 
    "answer_posts": [
      {
        "snippets": [
          ">>> 1foo = 12\n  File \"<stdin>\", line 1\n    1foo = 12\n       ^\nSyntaxError: invalid syntax\n", 
          ">>> str(NC._1_01)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'NC' is not defined\n", 
          "str('NC_000117.1_01') in str('NC_000117.1_01_173_001_001')\n", 
          "'NC_000117.1_01' in 'NC_000117.1_01_173_001_001'\n", 
          "list_of_strings = ['NC_000117.1_01',...]\nfor s in list_of_strings:\n    if s in 'NC_000117.1_01_173_001_001':\n       do_something(s)\n"
        ], 
        "score": 2, 
        "id": 14384099, 
        "rank": 0
      }
    ], 
    "title": "Underscores causing issue with string function in Python"
  }, 
  {
    "accepted_answer_post_id": 8308429, 
    "id": 8307809, 
    "answer_posts": [
      {
        "snippets": [
          "response = self.connection.retr(i+1)\nraw_message = response[1]\n", 
          "str_message = email.message_from_string(str(raw_message))\n", 
          "str_message = email.message_from_string(\"\\n\".join(raw_message))\n", 
          "str_message = email.message_from_bytes(b'\\n'.join(raw_message))\n", 
          "import poplib\nimport email\nimport os\n\nclass GmailTest(object):\n    def __init__(self):\n        self.savedir=\"/tmp\"\n\n    def test_save_attach(self):\n        self.connection = poplib.POP3_SSL('pop.gmail.com', 995)\n        self.connection.set_debuglevel(1)\n        self.connection.user(\"<munged>\")\n        self.connection.pass_(\"<munged>\")\n\n        emails, total_bytes = self.connection.stat()\n        print(\"{0} emails in the inbox, {1} bytes total\".format(emails, total_bytes))\n        # return in format: (response, ['mesg_num octets', ...], octets)\n        msg_list = self.connection.list()\n        print(msg_list)\n\n        # messages processing\n        for i in range(emails):\n\n            # return in format: (response, ['line', ...], octets)\n            response = self.connection.retr(i+1)\n            raw_message = response[1]\n\n            str_message = email.message_from_bytes(b'\\n'.join(raw_message))\n\n            # save attach\n            for part in str_message.walk():\n                print(part.get_content_type())\n\n                if part.get_content_maintype() == 'multipart':\n                    continue\n\n                if part.get('Content-Disposition') is None:\n                    print(\"no content dispo\")\n                    continue\n\n                filename = part.get_filename()\n                if not(filename): filename = \"test.txt\"\n                print(filename)\n\n                fp = open(os.path.join(self.savedir, filename), 'wb')\n                fp.write(part.get_payload(decode=1))\n                fp.close\n\n        #I  exit here instead of pop3lib quit to make sure the message doesn't get removed in gmail\n        import sys\n        sys.exit(0)\n\nd=GmailTest()\nd.test_save_attach()\n", 
          "python3 thetest.py\n*cmd* 'USER <munged>'\n*cmd* 'PASS <munged>'\n*cmd* 'STAT'\n*stat* [b'+OK', b'2', b'152928']\n2 emails in the inbox, 152928 bytes total\n*cmd* 'LIST'\n(b'+OK 2 messages (152928 bytes)', [b'1 76469', b'2 76459'], 18)\n*cmd* 'RETR 1'\nmultipart/mixed\ntext/plain\ntest.txt\napplication/pdf\nADDFILE_0.pdf\n*cmd* 'RETR 2'\nmultipart/mixed\ntext/plain\ntest.txt\napplication/pdf\nADDFILE_0.pdf\n"
        ], 
        "score": 7, 
        "id": 8308429, 
        "rank": 0
      }
    ], 
    "title": "Save email attachment (python3, pop3_ssl, gmail)"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 20773377, 
    "answer_posts": [
      {
        "snippets": [
          "data_list = [['apples',10,'red'],['bananas',5,'yellow']]\nfirstZip = list(zip(*data_list))\nsecondZip = zip(firstZip[0], firstZip[2])\ndbc.executemany('insert into fruitTable (fruit, colour) values (?,?)', \n                secondZip)\n", 
          "dbc.executemany('insert into fruitTable (fruit) values (?)', zip(fruitNameList))\n"
        ], 
        "score": 0, 
        "id": 25259573, 
        "rank": 0
      }
    ], 
    "title": "How to insert a list of lists into SQLite with executemany"
  }, 
  {
    "accepted_answer_post_id": 15617576, 
    "id": 15617207, 
    "answer_posts": [
      {
        "snippets": [
          "import matplotlib as mpl\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nax = fig.gca(projection='3d')\ntheta = np.linspace(-4 * np.pi, 4 * np.pi, 100)\nz = np.linspace(-2, 2, 100)\nr = z**2 + 1\nx = r * np.sin(theta)\ny = r * np.cos(theta)\n\n#1 colored by value of `z`\nax.scatter(x, y, z, c = plt.cm.jet(z/max(z))) \n\n#2 colored by index (same in this example since z is a linspace too)\nN = len(z)\nax.scatter(x, y, z, c = plt.cm.jet(np.linspace(0,1,N)))\n\nplt.show()\n", 
          "for i in xrange(N-1):\n    ax.plot(x[i:i+2], y[i:i+2], z[i:i+2], color=plt.cm.jet(255*i/N))\n"
        ], 
        "score": 12, 
        "id": 15617576, 
        "rank": 0
      }
    ], 
    "title": "Line colour of 3D parametric curve in python's matplotlib.pyplot"
  }, 
  {
    "accepted_answer_post_id": 39416946, 
    "id": 39034289, 
    "answer_posts": [
      {
        "snippets": [
          "import csv\nwith open('eggs.csv', 'w', newline='') as csvfile:\n    spamwriter = csv.writer(csvfile, delimiter=' ',\n                            quotechar='|', quoting=csv.QUOTE_MINIMAL)\n    spamwriter.writerow(['Spam'] * 5 + ['Baked Beans'])\n    spamwriter.writerow(['Spam', 'Lovely Spam', 'Wonderful Spam'])\n", 
          ">>> a = 'ala ma kota'\n>>> list(a)\n['a', 'l', 'a', ' ', 'm', 'a', ' ', 'k', 'o', 't', 'a'] \n"
        ], 
        "score": 0, 
        "id": 39034390, 
        "rank": 0
      }
    ], 
    "title": "how to remove blank lines from a csv file created using python"
  }, 
  {
    "accepted_answer_post_id": 23723139, 
    "id": 23723086, 
    "answer_posts": [
      {
        "snippets": [
          ">>> line = 'Your MAC address is 01:23:45:67:89:ab\\n'\n>>> line.split()\n['Your', 'MAC', 'address', 'is', '01:23:45:67:89:ab']\n", 
          ">>> line.split()[-1]\n'01:23:45:67:89:ab'\n", 
          "for line in output.split(\"\\n\"):\n    if line.startswith('Your MAC address is'):\n        addr = line.split()[-1]\n"
        ], 
        "score": 2, 
        "id": 23723139, 
        "rank": 0
      }
    ], 
    "title": "How to get last part of line with Python"
  }, 
  {
    "accepted_answer_post_id": 8539770, 
    "id": 8539628, 
    "answer_posts": [
      {
        "snippets": [
          ">>> match = re.search(r'^{{template\\b.*$', your_string, re.M)\n>>> match.group()\n'{{template|{{template2}}|other params}}'\n", 
          "r'^{{template\\b(?:[^}]\\n+|\\n+[^{]|.)*$'\n", 
          "r'^{{template\\b(?:[^}\\n]\\n+|\\n+[^{\\n]|.)*}}$'\n"
        ], 
        "score": 2, 
        "id": 8539770, 
        "rank": 0
      }
    ], 
    "title": "Extracting brackets with regex from a string in python"
  }, 
  {
    "accepted_answer_post_id": 3865853, 
    "id": 3865779, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import operator\n>>> sorted(unordered, key=operator.itemgetter(1,0))\n[(1, 1), (3, 1), (2, 2), (4, 2)]\n"
        ], 
        "score": 16, 
        "id": 3865853, 
        "rank": 0
      }
    ], 
    "title": "sorting by first group element in python"
  }, 
  {
    "accepted_answer_post_id": 5080137, 
    "id": 5079779, 
    "answer_posts": [
      {
        "snippets": [
          "f = inspect.currentframe()\nprint(f.f_locals)\nprint(inspect.getframeinfo(f))\n", 
          "def some_call(arg1, arg2, *args, **kwargs):\n    f = inspect.currentframe()\n    fn_name = inspect.getframeinfo(f)[2]\n    arginfo = inspect.getargvalues(f)\n    args = [repr(arginfo.locals[arg]) for arg in arginfo.args]\n    varargs = [repr(x) for x in arginfo.locals[arginfo.varargs]]\n    kwargs = [', '.join(str(k)+\"=\"+repr(v) for k,v in \n        arginfo.locals[arginfo.keywords].items())]\n    print('{0}({1})'.format(fn_name, ', '.join(args + varargs + kwargs)))\n\n>>> some_call(1, 2, \"hi\", kw1=\"frob\")\nsome_call(1, 2, 'hi', kw1='frob')\n"
        ], 
        "score": 5, 
        "id": 5080137, 
        "rank": 0
      }
    ], 
    "title": "repr the call resulting in a stack frame?"
  }, 
  {
    "accepted_answer_post_id": 19736891, 
    "id": 19736589, 
    "answer_posts": [
      {
        "snippets": [
          ">>> float('22')\n22.0\n>>> float('a lot')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: could not convert string to float: 'a lot'\n"
        ], 
        "score": 1, 
        "id": 19736635, 
        "rank": 0
      }
    ], 
    "title": "Confusing python - Cannot convert string to float"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 31354794, 
    "answer_posts": [
      {
        "snippets": [
          ">>> command = 'ssh -fNg vagrant@localhost -p2222 -L 8000:localhost:8000'\n>>> os.system(command)\n>>> os.system('exit')\n\nps -A | grep ssh\n7144 ??         0:00.04 ssh -fNg vagrant@localhost -p2222 -L 8000:localhost:8000\n", 
          "import subprocess\nproc = subprocess.Popen(command, shell=True)\nproc.terminate() # this terminates the process\n"
        ], 
        "score": 1, 
        "id": 31359330, 
        "rank": 0
      }
    ], 
    "title": "How to close an ssh tunnel in python"
  }, 
  {
    "accepted_answer_post_id": 26517866, 
    "id": 26514151, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import psycopg2 as db\n>>> conn = db.connect('dbname=billings user=steve password=xxxxx port=5432')\n>>> curs = conn.cursor()\n>>> curs.execute(\"\"\"select table_name from information_schema.tables WHERE table_schema='public' AND table_type='BASETABLE'\"\"\")\n>>> curs.fetchall()\n[('contacts',), ('invoicing',), ('lines',), ('task',), ('products',),('project',)]\n"
        ], 
        "score": 1, 
        "id": 26517866, 
        "rank": 0
      }
    ], 
    "title": "How do I extract table metadata from a database using python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 30965033, 
    "answer_posts": [
      {
        "snippets": [
          "from Tkinker import *\n\nroot = Tk()\n\nwidth, height = root.winfo_screenwidth(), root.winfo_screenheight()\n\nroot.geometry('%dx%d+0+0' % (width,height))\n\nroot.mainloop()\n"
        ], 
        "score": 0, 
        "id": 30966390, 
        "rank": 0
      }
    ], 
    "title": "Python Tkinter application fit on screen"
  }, 
  {
    "accepted_answer_post_id": 40559005, 
    "id": 40557335, 
    "answer_posts": [
      {
        "snippets": [
          ">>> X = \"0110100001101001\"\n>>> print(chr(int(X[:8], 2)))\nh\n>>> print(chr(int(X[8:], 2)))\ni\n", 
          "def decode_binary_string(s):\n    return ''.join(chr(int(s[i*8:i*8+8],2)) for i in range(len(s)//8))\n\n>>> decode_binary_string(X)\nhi\n", 
          "def decode_binary_string(s, encoding='UTF-8'):\n    byte_string = ''.join(chr(int(s[i*8:i*8+8],2)) for i in range(len(s)//8))\n    return byte_string.decode(encoding)\n"
        ], 
        "score": 1, 
        "id": 40559005, 
        "rank": 0
      }
    ], 
    "title": "Binary to String/Text in Python"
  }, 
  {
    "accepted_answer_post_id": 12902601, 
    "id": 12902008, 
    "answer_posts": [
      {
        "snippets": [
          "os.popen('sysctl hw').readlines()[1:20]\n", 
          "os.popen('lscpu').readlines()\n"
        ], 
        "score": 5, 
        "id": 15149192, 
        "rank": 0
      }
    ], 
    "title": "python how to find out whether hyperthreading is enabled"
  }, 
  {
    "accepted_answer_post_id": 28850187, 
    "id": 28804526, 
    "answer_posts": [
      {
        "snippets": [
          "import numpy as np\n\nclass Ludmo(np.ndarray): \n    def sumcols(self):\n        return self.sum(axis=1)\n\n    def sumrows(self):\n        return self.sum(axis=0)\n\n    def randomize(self):\n        self[:] = np.random.rand(*self.shape)\n", 
          "a = np.random.rand(4,5).view(Ludmo)\n", 
          "def __array_finalize__(self, arr):\n    self.foo = 'foo'\n"
        ], 
        "score": 4, 
        "id": 28913528, 
        "rank": 0
      }
    ], 
    "title": "Python: How to extend a huge class with minimum lines of code?"
  }, 
  {
    "accepted_answer_post_id": 7374949, 
    "id": 7374851, 
    "answer_posts": [
      {
        "snippets": [
          "import re\n\ntable={}\nwith open('synonyms','r') as syn:\n    for line in syn:\n        match=re.match(r'(\\w+)\\s+=\\s+(.+)',line)\n        if match:\n            primary,synonyms=match.groups()\n            synonyms=[synonym.lower() for synonym in synonyms.split()]\n            for synonym in synonyms:\n                table[synonym]=primary.lower()\n\nprint(table)\n", 
          "{'word3_1': 'word3', 'word3_3': 'word3', 'word3_2': 'word3', 'contr': 'contracting', 'contract': 'contracting', 'contractor': 'contracting', 'contra': 'contracting', 'identify': 'identification', 'contractors': 'contracting', 'word3_n': 'word3', 'ID': 'identification'}\n", 
          "with open('textfile','r') as f:\n    for line in f:\n        print(''.join(table.get(word.lower(),word) \n                      for word in re.findall(r'(\\W+|\\w+)',line)))\n", 
          "identification     identification    identity   contracting     contracting     contracting   medicine   medicine  medicine\n"
        ], 
        "score": 3, 
        "id": 7374949, 
        "rank": 0
      }
    ], 
    "title": "Python: normalizing a text file"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 6793086, 
    "answer_posts": [
      {
        "snippets": [
          "class FakeTelnet(Protocol):\n    def connectionMade(self):\n        print 'local connection made'\n        self.otherFact = protocol.ClientFactory()\n        self.otherFact.protocol = EchoClient\n", 
          "        self.factory.clients.append(self.otherFact.protocol)\n", 
          "def dataReceived(self, data):\n    if 'START' in data:\n        # send a command to cookie server.\n        for client in self.factory.clients:\n            client.transport.write('START\\r\\n')\n", 
          "    reactor.connectTCP('psrfb6',10999, self.otherFact)\n", 
          "class OtherFactory(ClientFactory):\n    protocol = EchoClient\n\n    def __init__(self, originalFactory):\n        self.originalFactory = originalFactory\n\n    def buildProtocol(self, addr):\n        proto = ClientFactory.buildProtocol(self, addr)\n        self.originalFactory.clients.append(proto)\n        return proto\n", 
          "class EchoClient(Protocol):\n    ...\n    def connectionLost(self, reason):\n        self.factory.originalFactory.clients.remove(self)\n"
        ], 
        "score": 5, 
        "id": 6842962, 
        "rank": 0
      }
    ], 
    "title": "Twisted - send data from a server to client"
  }, 
  {
    "accepted_answer_post_id": 13779566, 
    "id": 13779526, 
    "answer_posts": [
      {
        "snippets": [
          "print [s for s in list if sub in s]\n", 
          "print \"\\n\".join(s for s in list if sub in s)\n", 
          "mylist = ['abc123', 'def456', 'ghi789', 'ABC987', 'aBc654']\nsub = 'abc'\n\nprint \"\\n\".join(s for s in mylist if sub.lower() in s.lower())\n"
        ], 
        "score": 42, 
        "id": 13779566, 
        "rank": 0
      }
    ], 
    "title": "python: finding substring within a list"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 14403151, 
    "answer_posts": [
      {
        "snippets": [
          "import Tkinter\n\nclass HistogramViewer(Tkinter.Text):\n    def setText(self, text):\n        self.clear()\n        self.insert(Tkinter.END, text)\n\n    def clear(self):\n        self.delete(\"1.0\", Tkinter.END)\n\n\nclass HistogramEntry(Tkinter.Entry):\n    def setText(self, text):\n        self.clear()\n        self.insert(0, text)\n\n    def clear(self):\n        self.delete(0, Tkinter.END)\n"
        ], 
        "score": 2, 
        "id": 20908371, 
        "rank": 0
      }
    ], 
    "title": "tkinter GUI writing to a text widget and replacing text"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 29398109, 
    "answer_posts": [
      {
        "snippets": [
          ">>> theano.printing.debugprint(nearly_zeros)\nElemwise{Composite{((i0 + i0) - (i1 * i0))}}[(0, 0)] [@A] ''   1\n |RandomFunction{uniform}.1 [@B] ''   0\n | |<RandomStateType> [@C]\n | |TensorConstant{(2,) of 2} [@D]\n | |TensorConstant{0.0} [@E]\n | |TensorConstant{1.0} [@F]\n |TensorConstant{(1, 1) of 2.0} [@G]\nRandomFunction{uniform}.0 [@B] ''   0\n", 
          "v3 == v1\n"
        ], 
        "score": 0, 
        "id": 29405457, 
        "rank": 0
      }
    ], 
    "title": "Using Random Numbers in Theano"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 27832109, 
    "answer_posts": [
      {
        "snippets": [
          "import random      \nprint(\" question \" + random.choice(wordlists1) + \" question \" + random.choice(wordlists2))\n"
        ], 
        "score": 0, 
        "id": 27832138, 
        "rank": 0
      }
    ], 
    "title": "Python - Randomly select words to display in a quiz"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 32499151, 
    "answer_posts": [
      {
        "snippets": [
          "INTERP = os.path.join(os.getcwd(), 'myvenv/bin/python')\nsys.path.append(INTERP)\n"
        ], 
        "score": 1, 
        "id": 32499311, 
        "rank": 0
      }
    ], 
    "title": "Can't start app on passenger wsgi"
  }, 
  {
    "accepted_answer_post_id": 13455914, 
    "id": 13455207, 
    "answer_posts": [
      {
        "snippets": [
          "class Tempo(Base):\n    \"\"\"\n    Class for temporary table used to process data coming from xlsx\n    @param Base Declarative Base\n    \"\"\"\n\n    # TODO: make it completely temporary\n\n    __tablename__ = 'tempo'\n    __table_args__ = {'prefixes': ['TEMPORARY']}\n\n    drw = alc.Column(alc.String)\n    date = alc.Column(alc.Date)\n    check_number = alc.Column(alc.Integer)\n"
        ], 
        "score": 5, 
        "id": 13455914, 
        "rank": 0
      }
    ], 
    "title": "SQLAlchemy temporary table with Declarative Base"
  }, 
  {
    "accepted_answer_post_id": 21503099, 
    "id": 21502851, 
    "answer_posts": [
      {
        "snippets": [
          "for elem in array:\n    if '**' in elem.split(','):\n        # do something with elem\n", 
          "[elem for elem in array if '**' in elem.split(',')]\n", 
          "In [1]: import numpy as np\n\nIn [2]: a = np.array(['*,V*,UV,**,a2*,IR' , 'SB*,V*,UV,**,*,a2*,IR' , '*,V*,a2*'])\n\nIn [3]: def test(elem):\n   ...:     return '**' in elem.split(',')\n   ...:\n\nIn [4]: vtest = np.vectorize(test)\n\nIn [5]: vtest(a)\nOut[5]: array([ True,  True, False], dtype=bool)\n\nIn [6]: a[vtest(a)]\nOut[6]:\narray(['*,V*,UV,**,a2*,IR', 'SB*,V*,UV,**,*,a2*,IR'],\n      dtype='|S21')\n"
        ], 
        "score": 2, 
        "id": 21502923, 
        "rank": 0
      }
    ], 
    "title": "How to find parts of elements in NumPy array"
  }, 
  {
    "accepted_answer_post_id": 32577744, 
    "id": 32577071, 
    "answer_posts": [
      {
        "snippets": [
          "subprocess.call(command, shell=True)\n", 
          "p = subprocess.Popen(command_list)\n"
        ], 
        "score": 3, 
        "id": 32577744, 
        "rank": 0
      }
    ], 
    "title": "Execute Subprocess in Background"
  }, 
  {
    "accepted_answer_post_id": 7332617, 
    "id": 7331700, 
    "answer_posts": [
      {
        "snippets": [
          "set(open(file1)) & set(open(file2))\n", 
          "set(int(x) for x in open(file1)) & set(int(x) for x in open(file2))\n", 
          "# heuristic: set smaller_file and larger_file by checking the file size\na = set(int(x) for x in open(smaller_file))\n# note: we're storing strings in r\nr = set(x for x in open(larger_file) if int(x) in a)\n", 
          "a = set(int(x) for x in open(smaller_file))\nr = [x for x in open(larger_file) if int(x) in a]\n"
        ], 
        "score": 4, 
        "id": 7331742, 
        "rank": 0
      }
    ], 
    "title": "How can I find intersection of two large file efficiently using python?"
  }, 
  {
    "accepted_answer_post_id": 16275097, 
    "id": 16272086, 
    "answer_posts": [
      {
        "snippets": [
          "view.setWindowFlags(Qt.FramelessWindowHint)\n", 
          "view.setWindowFlags(Qt.CustomizeWindowHint)\n"
        ], 
        "score": 4, 
        "id": 16275097, 
        "rank": 0
      }
    ], 
    "title": "pyqt4 webpage hide window title bar"
  }, 
  {
    "accepted_answer_post_id": 35067176, 
    "id": 35066809, 
    "answer_posts": [
      {
        "snippets": [
          ">>> [i.text.strip() for i in prices]\n[u'Sold!', u'\\xa5 33.69', u'\\xa5 33.69', u'Sold!', u'\\xa5 33.69', u'\\xa5 33.69', u'\\xa5 33.69', u'\\xa5 33.69', u'\\xa5 33.69', u'\\xa5 33.69']\n", 
          "prices = [i.text.strip() for i in prices]\nprices =  [float(k) for k in [''.join([j for j in i if j in '0123456789.']) for i in prices] if k]\nif min(prices)< desiredPrice:\n"
        ], 
        "score": 1, 
        "id": 35067176, 
        "rank": 0
      }
    ], 
    "title": "Python - I'm trying to create a simple web scraper for the steam market"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 34387293, 
    "answer_posts": [
      {
        "snippets": [
          "self._detailsbutton.setIconSize(QtCore.QSize(int, int))\n", 
          "bw = 10                                 # buttonWidth\niw = int(bw*.0.8)                       # iconWidth\nself._detailsbutton.setFixedSize( bw, bw )\nself._detailsbutton.setIconSize(QtCore.QSize(iw,iw))\n", 
          "self._detailsbutton.setStyleSheet('border: none;')\n"
        ], 
        "score": 0, 
        "id": 34414616, 
        "rank": 0
      }
    ], 
    "title": "Control size / styling of QToolButton (PyQt5)"
  }, 
  {
    "accepted_answer_post_id": 16957257, 
    "id": 16957226, 
    "answer_posts": [
      {
        "snippets": [
          ">>> items =  [u'a', u'b', u'c']\n>>> [x.encode('utf-8') for x in items]\n['a', 'b', 'c']\n"
        ], 
        "score": 26, 
        "id": 16957257, 
        "rank": 0
      }
    ], 
    "title": "Encode Python list to UTF-8"
  }, 
  {
    "accepted_answer_post_id": 7313677, 
    "id": 7312687, 
    "answer_posts": [
      {
        "snippets": [
          "import urllib\nfrom HTMLParser import HTMLParser\n\nbase_url = 'http://127.0.0.1/'\n\nclass ImgParser(HTMLParser):\n    def __init__(self, *args, **kwargs):\n        self.downloads = []\n        HTMLParser.__init__(self, *args, **kwargs)\n\n    def handle_starttag(self, tag, attrs):\n        if tag == 'img':\n            for attr in attrs:\n                if attr[0] == 'src':\n                    self.downloads.append( attr[1] )\n\nimgp = ImgParser()\nwith open('test.html') as f:\n    # instead you could feed it the original url obj directly\n    imgp.feed(f.read())  \n\nfor path in imgp.downloads:\n    url = base_url + path\n    print url\n    urllib.urlretrieve(url, path)\n"
        ], 
        "score": 6, 
        "id": 7313677, 
        "rank": 0
      }
    ], 
    "title": "How to retrieve a webpage in python, including any images"
  }, 
  {
    "accepted_answer_post_id": 1586452, 
    "id": 1583293, 
    "answer_posts": [
      {
        "snippets": [
          "%module test\n%{\n\ntypedef struct {\n  int (*my_func)(int);\n} test_struct;\n\nint add1(int n) { return n+1; }\n\ntest_struct *init_test()\n{\n    test_struct *t = (test_struct*) malloc(sizeof(test_struct));\n    t->my_func = add1;\n    return t;\n}\n\n%}\n\ntypedef struct {\n    int my_func(int);\n} test_struct;\n\nextern test_struct *init_test();\n", 
          "$ python\nPython 2.6.2 (release26-maint, Apr 19 2009, 01:56:41) \n[GCC 4.3.3] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import test\n>>> t = test.init_test()\n>>> t.my_func(1)\n2\n"
        ], 
        "score": 1, 
        "id": 1586452, 
        "rank": 0
      }
    ], 
    "title": "Using SWIG with pointer to function in C struct"
  }, 
  {
    "accepted_answer_post_id": 9542458, 
    "id": 9542435, 
    "answer_posts": [
      {
        "snippets": [
          ">>> import os\n>>> f = open('file.txt')\n>>> os.path.realpath(f.name)\n"
        ], 
        "score": 9, 
        "id": 38867035, 
        "rank": 0
      }
    ], 
    "title": "Get path from open file in Python"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 26951687, 
    "answer_posts": [
      {
        "snippets": [
          "import pickle\n\nwith open(my_file, 'wb') as f:\n    pickle.dump(dayToDaylist, f)\n", 
          "with open(my_file, 'rb') as f:\n    dayToDaylist = pickle.load( f)\n", 
          "import pickle\nimport os\nif os.path.isfile(\"my_file.txt\"): # if file exists we have already pickled a list\n    with open(\"my_file.txt\", 'rb') as f:\n        dayToDaylist = pickle.load(f)\nelse:\n    dayToDaylist  = []\n", 
          "with open(\"my_file.txt\", 'wb') as f:\n    pickle.dump(l, f) \n", 
          "import ast\nimport os\nif os.path.isfile(\"my_file.txt\"):\n    with open(\"my_file.txt\", 'r') as f:\n        dayToDaylist = ast.literal_eval(f.read())\n        print(dayToDaylist)\n\nwith open(\"my_file.txt\", 'w') as f:\n    f.write(str(l))\n"
        ], 
        "score": 3, 
        "id": 26951730, 
        "rank": 0
      }
    ], 
    "title": "How do I save a list to file using python?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 13682628, 
    "answer_posts": [
      {
        "snippets": [
          "savefig(str(a[0]))\n", 
          "import pylab as pl\nimport numpy as np\n\n# some data\nx = np.arange(10)\n\npl.figure()\npl.plot(x)\npl.savefig('x=' + str(10) + '.png')\n"
        ], 
        "score": 1, 
        "id": 13682978, 
        "rank": 0
      }
    ], 
    "title": "Use savefig in Python with string and iterative index in the name"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 4873613, 
    "answer_posts": [
      {
        "snippets": [
          " def myFunc(self):\n     if self.validate() != 0:\n         raise CustomNotValidatedException()\n     x,y = self.getXY()\n\n     return x,y\n", 
          " if not self.validate():\n", 
          " return self.getXY()\n"
        ], 
        "score": 14, 
        "id": 4873685, 
        "rank": 0
      }
    ], 
    "title": "return tuple from a method"
  }, 
  {
    "accepted_answer_post_id": 26094746, 
    "id": 26094700, 
    "answer_posts": [], 
    "title": "cell_contents in python closure"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 31987207, 
    "answer_posts": [
      {
        "snippets": [
          "map(q.put, items)\n", 
          "list(map(q.put, items))\n", 
          "from collections import deque\ndeque(map(q.put, items))\n"
        ], 
        "score": 8, 
        "id": 31987220, 
        "rank": 0
      }
    ], 
    "title": "Put multiple items in a python queue"
  }, 
  {
    "accepted_answer_post_id": 18044289, 
    "id": 18044264, 
    "answer_posts": [
      {
        "snippets": [
          "    x.execute(\"INSERT INTO documents(documentname) VALUES (%s)\", (fname,))\n", 
          "conn.commit()\n"
        ], 
        "score": 1, 
        "id": 18044289, 
        "rank": 0
      }
    ], 
    "title": "Python -- Inserting Record from For Loop using MySQLDB"
  }, 
  {
    "accepted_answer_post_id": 29000618, 
    "id": 29000613, 
    "answer_posts": [
      {
        "snippets": [
          ">>> [str(item).zfill(6) for item in data]\n['000001', '000010', '000313', '004000', '051234', '123456']\n", 
          ">>> [\"{:06d}\".format(item) for item in data]\n['000001', '000010', '000313', '004000', '051234', '123456']\n", 
          ">>> formatter = \"{:06d}\".format\n>>> [formatter(item) for item in data]\n['000001', '000010', '000313', '004000', '051234', '123456']\n", 
          ">>> map(formatter, data)\n['000001', '000010', '000313', '004000', '051234', '123456']\n", 
          ">>> list(map(formatter, data))\n['000001', '000010', '000313', '004000', '051234', '123456']\n"
        ], 
        "score": 9, 
        "id": 29000618, 
        "rank": 0
      }
    ], 
    "title": "add leading zeros to a list of numbers in Python"
  }, 
  {
    "accepted_answer_post_id": 31517922, 
    "id": 31517851, 
    "answer_posts": [
      {
        "snippets": [
          "all(i%j==0 for j in a_list_of_terms)\n", 
          "[i for i in a_list if all(i%j==0 for j in a_list_of_terms)]\n", 
          "def divisible_numbers(a_list, a_list_of_terms):\n    return [i for i in a_list if all(i%j==0 for j in a_list_of_terms)]\n", 
          ">>> divisible_numbers([12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [2, 3])\n[12, 6]\n"
        ], 
        "score": 7, 
        "id": 31517922, 
        "rank": 0
      }
    ], 
    "title": "Check what numbers in a list are divisible by certain numbers?"
  }, 
  {
    "accepted_answer_post_id": 22732845, 
    "id": 22732589, 
    "answer_posts": [
      {
        "snippets": [
          ">>> xs = np.array([[1,2,3,4,5],[10,20,30,40,50]])\n>>> ys = np.array([], dtype=np.int64).reshape(0,5)\n>>> ys\narray([], shape=(0, 5), dtype=int64)\n>>> np.vstack([ys, xs])\narray([[  1.,   2.,   3.,   4.,   5.],\n       [ 10.,  20.,  30.,  40.,  50.]])\n", 
          ">>> ys = np.array([])\n>>> ys = np.vstack([ys, xs]) if ys.size else xs\narray([[ 1,  2,  3,  4,  5],\n       [10, 20, 30, 40, 50]])\n"
        ], 
        "score": 12, 
        "id": 22732845, 
        "rank": 0
      }
    ], 
    "title": "Concatenating empty array in Numpy"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 16776828, 
    "answer_posts": [
      {
        "snippets": [
          "insert_indicators = '''INSERT INTO INDICATORS (INDICATORNAME, INDICATORCODE)\n                       VALUES (%s, %s)'''\ninsert_sixties = 'INSERT INTO Sixties (...) VALUES (%s)' % (','.join(['%s']*10))\ninsert_seventies = 'INSERT INTO Seventies (...) VALUES (%s)' % (','.join(['%s']*10))\n", 
          "for row in csv_data:\n    cursor.execute(insert_indicators, row[:2])\n    cursor.execute(insert_sixties, row[2:12])\n    cursor.execute(insert_seventies, row[12:22])\n"
        ], 
        "score": 0, 
        "id": 16777407, 
        "rank": 0
      }
    ], 
    "title": "Import Specific Column Data into Different MYSQL Tables from CSV using Python"
  }, 
  {
    "accepted_answer_post_id": 17203161, 
    "id": 17203151, 
    "answer_posts": [
      {
        "snippets": [
          "with open(\"decl.txt\", \"r\") as f:\n    data = f.read()\n# split oliver\nwords = re.split('\\W+', data)\n", 
          ">>> print file.read.__doc__\nread([size]) -> read at most size bytes, returned as a string.\n\nIf the size argument is negative or omitted, read until EOF is reached.\nNotice that when in non-blocking mode, less data than what was requested\nmay be returned, even if no size parameter was given.\n"
        ], 
        "score": 1, 
        "id": 17203161, 
        "rank": 0
      }
    ], 
    "title": "How to split text in Python 3"
  }, 
  {
    "accepted_answer_post_id": 22339208, 
    "id": 22339008, 
    "answer_posts": [
      {
        "snippets": [
          "In [11]: pd.read_json('[{\"xstk\": \"1\", \"stk\": \"0\"}, {\"xstk\": \"0\", \"stk\": \"1\"}, {\"xstk\": \"1\", \"stk\": \"0\"}]')\nOut[11]:\n   stk  xstk\n0    0     1\n1    1     0\n2    0     1\n", 
          "df = pd.read_csv('sticks.csv', names=[\"xstk\", \"stk\"])\n"
        ], 
        "score": 1, 
        "id": 22339208, 
        "rank": 0
      }
    ], 
    "title": "How do I turn this json object into a panda dataframe?"
  }, 
  {
    "accepted_answer_post_id": 23515819, 
    "id": 23515779, 
    "answer_posts": [
      {
        "snippets": [
          "import operator\n\nsorted(myDict.values(), key=operator.itemgetter(0), reverse=True)\n", 
          ">>> import operator\n>>> myDict = {'a': [5, 2, 1, 2], 'b': [7, 2, 4, 1], 'c': [2, 0, 1, 1]}\n>>> sorted(myDict.values(), key=operator.itemgetter(0), reverse=True)\n[[7, 2, 4, 1], [5, 2, 1, 2], [2, 0, 1, 1]]\n", 
          "sorted(myDict.items(), key=lambda i: i[1][0], reverse=True)\n", 
          ">>> sorted(myDict.items(), key=lambda i: i[1][0], reverse=True)\n[('b', [7, 2, 4, 1]), ('a', [5, 2, 1, 2]), ('c', [2, 0, 1, 1])]\n", 
          "sorted(myDict.values(), reverse=True)  # sort just the values\nsorted(myDict.items(), key=operator.itemgetter(1), reverse=True)  # sort items\n", 
          "import csv\n\nwith open('../masterListShort.tsv', 'wb') as outfh:\n    writer = csv.writer(outfh, delimiter='\\t')\n    for key, values in sorted(myDict.items(), key=operator.itemgetter(1), reverse=True):\n        writer.writerow([key] + values)\n"
        ], 
        "score": 5, 
        "id": 23515819, 
        "rank": 0
      }
    ], 
    "title": "python sort dictionary by value array"
  }, 
  {
    "accepted_answer_post_id": 38351507, 
    "id": 38349700, 
    "answer_posts": [
      {
        "snippets": [
          "df = pd.read_csv(file_, delim_whitespace=True)\n", 
          "df = pd.read_csv(file_, encoding='windows-1252', delim_whitespace=True)\n", 
          "df = pd.read_csv(file_, encoding='windows-1252', delim_whitespace=True)\ndf['Sens'].replace(u'\\u2014', '-', inplace=True)\n", 
          "df = pd.read_csv(file_, sep=';', encoding='utf8')\ndf['Sens'].replace(u'\\u2014', '-', inplace=True)\n"
        ], 
        "score": 2, 
        "id": 38351507, 
        "rank": 0
      }
    ], 
    "title": "convert em-dash to hyphen in python"
  }, 
  {
    "accepted_answer_post_id": 19870348, 
    "id": 19870293, 
    "answer_posts": [
      {
        "snippets": [
          ">>> '2' > '10'  #strings are compared lexicographically\nTrue\n", 
          "def summaryStats():\n    filename = input(\"Enter a file name: \")\n    with open(filename) as f:\n        data = [int(line) for line in f]\n\n    print(\"The minimum value is \", min(data))\n    print(\"The maximum value is \", max(data))\n    print(\"The average value is \", sum(data)/len(data))\n", 
          "Enter a file name: abc1\nThe minimum value is  255\nThe maximum value is  893\nThe average value is  550.6666666666666\n"
        ], 
        "score": 4, 
        "id": 19870348, 
        "rank": 0
      }
    ], 
    "title": "How to find the average of values in a .txt file"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 2970207, 
    "answer_posts": [
      {
        "snippets": [
          "import cv\n\ncv.NamedWindow(\"camera\", 1)\n\ncapture = cv.CaptureFromCAM(0)\n\nwhile True:\n    img = cv.QueryFrame(capture)\n    cv.ShowImage(\"camera\", img)\n    if cv.WaitKey(10) == 27:\n        break\n", 
          "for(int x=0;x<640;x++){\n                for(int y=0;y<480;y++){\n                        uchar * pixelxy=&((uchar*) (img->imageData+img->widthStep*y))[x];\n                        *pixelxy=buf[y*img->widthStep + x]; \n                }\n        }\n"
        ], 
        "score": 0, 
        "id": 2971555, 
        "rank": 0
      }
    ], 
    "title": "from string of bytes to OpenCV's IplImage in Python?"
  }, 
  {
    "accepted_answer_post_id": 9524570, 
    "id": 9523887, 
    "answer_posts": [
      {
        "snippets": [
          "xsd = lxml.etree.parse('http://xmlgw.companieshouse.gov.uk/v2-1/schema/Egov_ch-v2-0.xsd')\nnewimport = lxml.etree.Element('{http://www.w3.org/2001/XMLSchema}import',\n    namespace=\"http://xmlgw.companieshouse.gov.uk\",\n    schemaLocation=\"http://xmlgw.companieshouse.gov.uk/v1-1/schema/forms/CompanyIncorporation-v1-2.xsd\")\nxsd.getroot().append(newimport)\n\nvalidator = lxml.etree.XMLSchema(xsd)\n"
        ], 
        "score": 2, 
        "id": 9524570, 
        "rank": 0
      }
    ], 
    "title": "Validate with three xml schemas as one combined schema in lxml?"
  }, 
  {
    "accepted_answer_post_id": 6714180, 
    "id": 6714151, 
    "answer_posts": [
      {
        "snippets": [
          "import sys\n\nif __name__ == \"__main__\":\n    converter(sys.argv[1])\n"
        ], 
        "score": 2, 
        "id": 6714180, 
        "rank": 0
      }
    ], 
    "title": "How do I run a function in a Python module using only the Windows command line?"
  }, 
  {
    "accepted_answer_post_id": 21758728, 
    "id": 21757377, 
    "answer_posts": [
      {
        "snippets": [
          "from bs4 import BeautifulSoup as bs\nimport bs4\nhtml = \"<foo>Something something <bar> blah blah</bar> something <bar2>GONE!</bar2> else</foo>\"\ndef get_only_text(elem):\n    for item in elem.children:\n        if isinstance(item,bs4.element.NavigableString):\n            yield item\n\nprint ''.join(get_only_text(bs(html).find_all('foo')[0]))\n", 
          "Something something  something  else\n"
        ], 
        "score": 3, 
        "id": 21758728, 
        "rank": 0
      }
    ], 
    "title": "How to remove content in nested tags with BeautifulSoup?"
  }, 
  {
    "accepted_answer_post_id": 12751319, 
    "id": 12751293, 
    "answer_posts": [
      {
        "snippets": [
          "url = \"http://www.nalmls.com/SERetsHuntsville/Search.aspx?SearchType=Property&Class=RES&StandardNames=0&Format=COMPACT&Query=(DATE_MODIFIED=2012-09-28T00:00:00%2B)&Limit=10\"\nr = requests.get(url, auth=('user', 'pass'))\npage = r.text\n", 
          "from requests.auth import HTTPDigestAuth\nr = requests.get(url, auth=HTTPDigestAuth('user', 'pass'))\n"
        ], 
        "score": 7, 
        "id": 12751319, 
        "rank": 0
      }
    ], 
    "title": "How to use Python to retrieve xml page that requires http login?"
  }, 
  {
    "accepted_answer_post_id": null, 
    "id": 35894613, 
    "answer_posts": [
      {
        "snippets": [
          "N   Description                    ls output\n\n0   No read, no write, no execute    ---\n1   No read, no write, execute       --x\n2   No read, write, no execute       -w-\n3   No read, write, execute          -wx\n4   Read, no write, no execute       r--\n5   Read, no write, execute          r-x\n6   Read, write, no execute          rw-\n7   Read, write, execute             rwx\n", 
          "os.chmod(path, 0440)\n", 
          "os.chmod(path, 0400)\n", 
          "os.chown(path, 'martin')\nos.chmod(path, 0400)\n"
        ], 
        "score": 7, 
        "id": 35895436, 
        "rank": 0
      }
    ], 
    "title": "How to disallow access to a file for one user?"
  }, 
  {
    "accepted_answer_post_id": 2817302, 
    "id": 2817264, 
    "answer_posts": [
      {
        "snippets": [
          "os.path.dirname(os.path.abspath(__file__))\n", 
          "os.path.abspath(os.path.join('templates', 'blog1', 'page.html'))\n"
        ], 
        "score": 9, 
        "id": 2817541, 
        "rank": 0
      }
    ], 
    "title": "How to get the parent dir location"
  }, 
  {
    "accepted_answer_post_id": 9246634, 
    "id": 9246589, 
    "answer_posts": [
      {
        "snippets": [
          ">>> s = ':foo [bar]'\n>>> ''.join(c for c in s if c.isalnum() or c.isspace())\n'foo bar'\n>>> ''.join(c for c in s if c.isalnum() or c.isspace()).split()\n['foo', 'bar']\n", 
          ">>> s = ':foo [bar]'\n>>> s.split()\n[':foo', '[bar]']\n>>> [word.strip(':[]') for word in s.split()]\n['foo', 'bar']\n"
        ], 
        "score": 10, 
        "id": 9246634, 
        "rank": 0
      }
    ], 
    "title": "Split string without non-characters"
  }, 
  {
    "accepted_answer_post_id": 16983496, 
    "id": 16983435, 
    "answer_posts": [
      {
        "snippets": [
          "import urlparse\nimport re\n\ndef check_and_add_http(url):\n    # checks if 'http://' is present at the start of the URL and adds it if not.\n    http_regex = re.compile(r'^http[s]?://')\n    if http_regex.match(url):\n        # 'http://' or 'https://' is present\n        return url\n    else:\n        # add 'http://' for urlparse to work.\n        return 'http://' + url\n\nfor url in url_list:\n    url = check_and_add_http(url)\n    print(urlparse.urlsplit(url)[1])\n"
        ], 
        "score": 6, 
        "id": 16983496, 
        "rank": 0
      }
    ], 
    "title": "How do i truncate url using python"
  }, 
  {
    "accepted_answer_post_id": 24348840, 
    "id": 24348700, 
    "answer_posts": [
      {
        "snippets": [
          "table=[{'device': 'a', 'iface': 'i1'}, {'device': 'a', 'iface': 'i2'}, {'device': 'a', 'iface': 'i4'}, {'device': 'b', 'iface': 'i5'}, {'device': 'a', 'iface': 'i3'}, {'device': 'b', 'iface': 'i7'}]\nnew_table = []\ntmp_map = {}\nfor itm in table:\n    map_itm = tmp_map.get(itm['device'])\n    if not map_itm:\n        tmp_map[itm['device']] = {'device':itm['device'] ,'iface': [itm['iface']]}\n    else:\n        tmp_map[itm['device']]['iface'] = [itm['iface']]+ map_itm['iface']\nprint tmp_map.values()\n", 
          "[{'device': 'a', 'iface': ['i3', 'i4', 'i2', 'i1']}, {'device': 'b', 'iface': ['i7', 'i5']}]\n"
        ], 
        "score": 0, 
        "id": 24348845, 
        "rank": 0
      }
    ], 
    "title": "Python: How to group unsorted list of dictionary into new list"
  }, 
  {
    "accepted_answer_post_id": 26771862, 
    "id": 26656151, 
    "answer_posts": [
      {
        "snippets": [
          "    def __init__(self, parent=MainWindow):\n", 
          "    super(MainWidget,self).__init__()\n", 
          "class MainWindow(QMainWindow):\n    def __init__(self):\n        super(MainWindow,self).__init__()\n        # pass an instance of MainWindow here\n        self.mainWidget = MainWidget(self)\n        ...\n\nclass MainWidget(QWidget):\n    def __init__(self, parent):\n        # pass the parent to the base-class\n        super(MainWidget, self).__init__(parent)\n        ...\n"
        ], 
        "score": 0, 
        "id": 26660387, 
        "rank": 0
      }
    ], 
    "title": "PySide multi-window, get QStackWidget to work"
  }, 
  {
    "accepted_answer_post_id": 23271782, 
    "id": 23270942, 
    "answer_posts": [
      {
        "snippets": [
          "[s.split()[:2] for s in string.split('\\n')]\n", 
          "string = \"\"\"10.97.96.0 10.97.97.128 47.73.1.0\n47.73.4.128 47.73.7.6 47.73.8.0\n47.73.15.0   47.73.40.0   47.73.41.0\n85.205.9.164 85.205.14.44 172.17.103.0\n172.17.103.8 172.17.103.48 172.17.103.56\n172.17.103.96         172.17.103.100       172.17.103.136\n172.17.103.140 172.17.104.44            172.17.105.28\n172.17.105.32       172.17.105.220      172.17.105.224\"\"\"\n\nprint [s.split()[:2] for s in string.split('\\n')]\n", 
          "[['10.97.96.0', '10.97.97.128']\n['47.73.4.128', '47.73.7.6']\n['47.73.15.0', '47.73.40.0']\n['85.205.9.164', '85.205.14.44']\n['172.17.103.8', '172.17.103.48']\n['172.17.103.96', '172.17.103.100']\n['172.17.103.140', '172.17.104.44']\n['172.17.105.32', '172.17.105.220']]\n"
        ], 
        "score": 1, 
        "id": 23271766, 
        "rank": 0
      }
    ], 
    "title": "Suggestion for python regex and selecting columns"
  }, 
  {
    "accepted_answer_post_id": 20485203, 
    "id": 20484942, 
    "answer_posts": [
      {
        "snippets": [
          "left = max(r1.left, r2.left);\nright = min(r1.right, r2.right);\ntop = max(r1.top, r2.top);\nbottom = min(r1.bottom, r2.bottom);\n", 
          "Area = (right - left) * (top - bottom);\n"
        ], 
        "score": 5, 
        "id": 20485203, 
        "rank": 0
      }
    ], 
    "title": "How to make rect from the intersection of two?"
  }, 
  {
    "accepted_answer_post_id": 1360674, 
    "id": 1360507, 
    "answer_posts": [
      {
        "snippets": [
          ">>> lst = [ [1,2], [3,4] ]\n", 
          ">>> [x[1] for x in lst]\n[2, 4]\n", 
          ">>> dict1 = {}\n>>> dict1['a'] = [ [1,2], [3,4] ]\n>>> [(k, [x[1] for x in v]) for k, v in dict1.items()]   \n[('a', [2, 4])]\n"
        ], 
        "score": 8, 
        "id": 1360514, 
        "rank": 0
      }
    ], 
    "title": "Generating a list from complex dictionary"
  }, 
  {
    "accepted_answer_post_id": 10301664, 
    "id": 10301589, 
    "answer_posts": [
      {
        "snippets": [
          "d = {'Key1': [(1.000,2.003,3.0029)]}\n", 
          "d['Key1'].append((2.3232,13.5232,1325.123))\n", 
          "{'Key1': [(1.0, 2.003, 3.0029), (2.3232, 13.5232, 1325.123)]}\n"
        ], 
        "score": 4, 
        "id": 10301630, 
        "rank": 0
      }
    ], 
    "title": "How do you add multiple tuples(lists, whatever) to a single dictionary key without merging them?"
  }, 
  {
    "accepted_answer_post_id": 6759760, 
    "id": 6759700, 
    "answer_posts": [
      {
        "snippets": [
          "b = '%s' * 3\nb % tuple(range(3))\n"
        ], 
        "score": 6, 
        "id": 6759760, 
        "rank": 0
      }
    ], 
    "title": "format string in python 2.5 unpacking a list"
  }
]